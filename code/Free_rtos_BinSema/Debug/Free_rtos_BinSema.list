
Free_rtos_BinSema.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007264  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  080073f4  080073f4  000083f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075bc  080075bc  0000906c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080075bc  080075bc  000085bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075c4  080075c4  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075c4  080075c4  000085c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080075c8  080075c8  000085c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080075cc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b5c  2000006c  08007638  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bc8  08007638  00009bc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d29  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000372b  00000000  00000000  00022dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001728  00000000  00000000  000264f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011f9  00000000  00000000  00027c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004b8a  00000000  00000000  00028e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019214  00000000  00000000  0002d99b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e15e4  00000000  00000000  00046baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00128193  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067f0  00000000  00000000  001281d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0012e9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080073dc 	.word	0x080073dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080073dc 	.word	0x080073dc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fbab 	bl	8000c5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f840 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f8b4 	bl	8000674 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050c:	f000 f882 	bl	8000614 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000510:	f002 ffd6 	bl	80034c0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 8000514:	4a11      	ldr	r2, [pc, #68]	@ (800055c <main+0x60>)
 8000516:	2101      	movs	r1, #1
 8000518:	2001      	movs	r0, #1
 800051a:	f003 f8c8 	bl	80036ae <osSemaphoreNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a0f      	ldr	r2, [pc, #60]	@ (8000560 <main+0x64>)
 8000522:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 8000524:	4a0f      	ldr	r2, [pc, #60]	@ (8000564 <main+0x68>)
 8000526:	2100      	movs	r1, #0
 8000528:	480f      	ldr	r0, [pc, #60]	@ (8000568 <main+0x6c>)
 800052a:	f003 f813 	bl	8003554 <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a0e      	ldr	r2, [pc, #56]	@ (800056c <main+0x70>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8000534:	4a0e      	ldr	r2, [pc, #56]	@ (8000570 <main+0x74>)
 8000536:	2100      	movs	r1, #0
 8000538:	480e      	ldr	r0, [pc, #56]	@ (8000574 <main+0x78>)
 800053a:	f003 f80b 	bl	8003554 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a0d      	ldr	r2, [pc, #52]	@ (8000578 <main+0x7c>)
 8000542:	6013      	str	r3, [r2, #0]

  /* creation of Task03 */
  Task03Handle = osThreadNew(StartTask03, NULL, &Task03_attributes);
 8000544:	4a0d      	ldr	r2, [pc, #52]	@ (800057c <main+0x80>)
 8000546:	2100      	movs	r1, #0
 8000548:	480d      	ldr	r0, [pc, #52]	@ (8000580 <main+0x84>)
 800054a:	f003 f803 	bl	8003554 <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a0c      	ldr	r2, [pc, #48]	@ (8000584 <main+0x88>)
 8000552:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000554:	f002 ffd8 	bl	8003508 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <main+0x5c>
 800055c:	08007564 	.word	0x08007564
 8000560:	2000011c 	.word	0x2000011c
 8000564:	080074f8 	.word	0x080074f8
 8000568:	080006fd 	.word	0x080006fd
 800056c:	20000110 	.word	0x20000110
 8000570:	0800751c 	.word	0x0800751c
 8000574:	08000761 	.word	0x08000761
 8000578:	20000114 	.word	0x20000114
 800057c:	08007540 	.word	0x08007540
 8000580:	080007b1 	.word	0x080007b1
 8000584:	20000118 	.word	0x20000118

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b096      	sub	sp, #88	@ 0x58
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	2244      	movs	r2, #68	@ 0x44
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f006 fc5e 	bl	8006e58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	463b      	mov	r3, r7
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ae:	f000 fe0f 	bl	80011d0 <HAL_PWREx_ControlVoltageScaling>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005b8:	f000 f920 	bl	80007fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005bc:	2310      	movs	r3, #16
 80005be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005c8:	2360      	movs	r3, #96	@ 0x60
 80005ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fe51 	bl	800127c <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80005e0:	f000 f90c 	bl	80007fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f8:	463b      	mov	r3, r7
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 fa51 	bl	8001aa4 <HAL_RCC_ClockConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000608:	f000 f8f8 	bl	80007fc <Error_Handler>
  }
}
 800060c:	bf00      	nop
 800060e:	3758      	adds	r7, #88	@ 0x58
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000618:	4b14      	ldr	r3, [pc, #80]	@ (800066c <MX_USART2_UART_Init+0x58>)
 800061a:	4a15      	ldr	r2, [pc, #84]	@ (8000670 <MX_USART2_UART_Init+0x5c>)
 800061c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061e:	4b13      	ldr	r3, [pc, #76]	@ (800066c <MX_USART2_UART_Init+0x58>)
 8000620:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000626:	4b11      	ldr	r3, [pc, #68]	@ (800066c <MX_USART2_UART_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800062c:	4b0f      	ldr	r3, [pc, #60]	@ (800066c <MX_USART2_UART_Init+0x58>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000632:	4b0e      	ldr	r3, [pc, #56]	@ (800066c <MX_USART2_UART_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000638:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <MX_USART2_UART_Init+0x58>)
 800063a:	220c      	movs	r2, #12
 800063c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063e:	4b0b      	ldr	r3, [pc, #44]	@ (800066c <MX_USART2_UART_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000644:	4b09      	ldr	r3, [pc, #36]	@ (800066c <MX_USART2_UART_Init+0x58>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800064a:	4b08      	ldr	r3, [pc, #32]	@ (800066c <MX_USART2_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000650:	4b06      	ldr	r3, [pc, #24]	@ (800066c <MX_USART2_UART_Init+0x58>)
 8000652:	2200      	movs	r2, #0
 8000654:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000656:	4805      	ldr	r0, [pc, #20]	@ (800066c <MX_USART2_UART_Init+0x58>)
 8000658:	f002 fa2a 	bl	8002ab0 <HAL_UART_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000662:	f000 f8cb 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000088 	.word	0x20000088
 8000670:	40004400 	.word	0x40004400

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <MX_GPIO_Init+0x80>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	4a19      	ldr	r2, [pc, #100]	@ (80006f4 <MX_GPIO_Init+0x80>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000696:	4b17      	ldr	r3, [pc, #92]	@ (80006f4 <MX_GPIO_Init+0x80>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a2:	4b14      	ldr	r3, [pc, #80]	@ (80006f4 <MX_GPIO_Init+0x80>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a6:	4a13      	ldr	r2, [pc, #76]	@ (80006f4 <MX_GPIO_Init+0x80>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ae:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <MX_GPIO_Init+0x80>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <MX_GPIO_Init+0x80>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006be:	4a0d      	ldr	r2, [pc, #52]	@ (80006f4 <MX_GPIO_Init+0x80>)
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006c6:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <MX_GPIO_Init+0x80>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	4619      	mov	r1, r3
 80006e6:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <MX_GPIO_Init+0x84>)
 80006e8:	f000 fbd2 	bl	8000e90 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006ec:	bf00      	nop
 80006ee:	3720      	adds	r7, #32
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40021000 	.word	0x40021000
 80006f8:	48000800 	.word	0x48000800

080006fc <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	printf("Medium Task Started \n");
 8000704:	4811      	ldr	r0, [pc, #68]	@ (800074c <StartTask01+0x50>)
 8000706:	f006 fac7 	bl	8006c98 <puts>

	osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 800070a:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <StartTask01+0x54>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f04f 31ff 	mov.w	r1, #4294967295
 8000712:	4618      	mov	r0, r3
 8000714:	f003 f854 	bl	80037c0 <osSemaphoreAcquire>

	printf("Wait for semapore of medium \n");
 8000718:	480e      	ldr	r0, [pc, #56]	@ (8000754 <StartTask01+0x58>)
 800071a:	f006 fabd 	bl	8006c98 <puts>

	while( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == 0); // wait till for low state
 800071e:	bf00      	nop
 8000720:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000724:	480c      	ldr	r0, [pc, #48]	@ (8000758 <StartTask01+0x5c>)
 8000726:	f000 fd2d 	bl	8001184 <HAL_GPIO_ReadPin>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d0f7      	beq.n	8000720 <StartTask01+0x24>

	osSemaphoreRelease(myBinarySem01Handle);
 8000730:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <StartTask01+0x54>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4618      	mov	r0, r3
 8000736:	f003 f895 	bl	8003864 <osSemaphoreRelease>

	printf("Medium Task Ended \n");
 800073a:	4808      	ldr	r0, [pc, #32]	@ (800075c <StartTask01+0x60>)
 800073c:	f006 faac 	bl	8006c98 <puts>
    osDelay(500);
 8000740:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000744:	f002 ff98 	bl	8003678 <osDelay>
	printf("Medium Task Started \n");
 8000748:	e7dc      	b.n	8000704 <StartTask01+0x8>
 800074a:	bf00      	nop
 800074c:	0800741c 	.word	0x0800741c
 8000750:	2000011c 	.word	0x2000011c
 8000754:	08007434 	.word	0x08007434
 8000758:	48000800 	.word	0x48000800
 800075c:	08007454 	.word	0x08007454

08000760 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  printf("High task Started \n");
 8000768:	480d      	ldr	r0, [pc, #52]	@ (80007a0 <StartTask02+0x40>)
 800076a:	f006 fa95 	bl	8006c98 <puts>

		osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
 800076e:	4b0d      	ldr	r3, [pc, #52]	@ (80007a4 <StartTask02+0x44>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f04f 31ff 	mov.w	r1, #4294967295
 8000776:	4618      	mov	r0, r3
 8000778:	f003 f822 	bl	80037c0 <osSemaphoreAcquire>

	  printf("High Semaphore wait \n");
 800077c:	480a      	ldr	r0, [pc, #40]	@ (80007a8 <StartTask02+0x48>)
 800077e:	f006 fa8b 	bl	8006c98 <puts>

	  osSemaphoreRelease(myBinarySem01Handle);
 8000782:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <StartTask02+0x44>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4618      	mov	r0, r3
 8000788:	f003 f86c 	bl	8003864 <osSemaphoreRelease>

	  printf("High Task Ended and release semaphore \n");
 800078c:	4807      	ldr	r0, [pc, #28]	@ (80007ac <StartTask02+0x4c>)
 800078e:	f006 fa83 	bl	8006c98 <puts>
    osDelay(500);
 8000792:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000796:	f002 ff6f 	bl	8003678 <osDelay>
	  printf("High task Started \n");
 800079a:	bf00      	nop
 800079c:	e7e4      	b.n	8000768 <StartTask02+0x8>
 800079e:	bf00      	nop
 80007a0:	08007468 	.word	0x08007468
 80007a4:	2000011c 	.word	0x2000011c
 80007a8:	0800747c 	.word	0x0800747c
 80007ac:	08007494 	.word	0x08007494

080007b0 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	printf("Low Task Started \n");
 80007b8:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <StartTask03+0x20>)
 80007ba:	f006 fa6d 	bl	8006c98 <puts>

	printf("Low Task ended \n");
 80007be:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <StartTask03+0x24>)
 80007c0:	f006 fa6a 	bl	8006c98 <puts>
    osDelay(500);
 80007c4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007c8:	f002 ff56 	bl	8003678 <osDelay>
	printf("Low Task Started \n");
 80007cc:	bf00      	nop
 80007ce:	e7f3      	b.n	80007b8 <StartTask03+0x8>
 80007d0:	080074bc 	.word	0x080074bc
 80007d4:	080074d0 	.word	0x080074d0

080007d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a04      	ldr	r2, [pc, #16]	@ (80007f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d101      	bne.n	80007ee <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80007ea:	f000 fa4f 	bl	8000c8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40001000 	.word	0x40001000

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <Error_Handler+0x8>

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <HAL_MspInit+0x4c>)
 8000810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000812:	4a10      	ldr	r2, [pc, #64]	@ (8000854 <HAL_MspInit+0x4c>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6613      	str	r3, [r2, #96]	@ 0x60
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <HAL_MspInit+0x4c>)
 800081c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <HAL_MspInit+0x4c>)
 8000828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800082a:	4a0a      	ldr	r2, [pc, #40]	@ (8000854 <HAL_MspInit+0x4c>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000830:	6593      	str	r3, [r2, #88]	@ 0x58
 8000832:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <HAL_MspInit+0x4c>)
 8000834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	210f      	movs	r1, #15
 8000842:	f06f 0001 	mvn.w	r0, #1
 8000846:	f000 faf9 	bl	8000e3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000

08000858 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b0a2      	sub	sp, #136	@ 0x88
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2260      	movs	r2, #96	@ 0x60
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f006 faed 	bl	8006e58 <memset>
  if(huart->Instance==USART2)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a20      	ldr	r2, [pc, #128]	@ (8000904 <HAL_UART_MspInit+0xac>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d138      	bne.n	80008fa <HAL_UART_MspInit+0xa2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000888:	2302      	movs	r3, #2
 800088a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800088c:	2300      	movs	r3, #0
 800088e:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4618      	mov	r0, r3
 8000896:	f001 fb5b 	bl	8001f50 <HAL_RCCEx_PeriphCLKConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008a0:	f7ff ffac 	bl	80007fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a4:	4b18      	ldr	r3, [pc, #96]	@ (8000908 <HAL_UART_MspInit+0xb0>)
 80008a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008a8:	4a17      	ldr	r2, [pc, #92]	@ (8000908 <HAL_UART_MspInit+0xb0>)
 80008aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80008b0:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <HAL_UART_MspInit+0xb0>)
 80008b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <HAL_UART_MspInit+0xb0>)
 80008be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c0:	4a11      	ldr	r2, [pc, #68]	@ (8000908 <HAL_UART_MspInit+0xb0>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <HAL_UART_MspInit+0xb0>)
 80008ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008d4:	230c      	movs	r3, #12
 80008d6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008e6:	2307      	movs	r3, #7
 80008e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80008f0:	4619      	mov	r1, r3
 80008f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f6:	f000 facb 	bl	8000e90 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80008fa:	bf00      	nop
 80008fc:	3788      	adds	r7, #136	@ 0x88
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40004400 	.word	0x40004400
 8000908:	40021000 	.word	0x40021000

0800090c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08e      	sub	sp, #56	@ 0x38
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000914:	2300      	movs	r3, #0
 8000916:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800091a:	4b34      	ldr	r3, [pc, #208]	@ (80009ec <HAL_InitTick+0xe0>)
 800091c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800091e:	4a33      	ldr	r2, [pc, #204]	@ (80009ec <HAL_InitTick+0xe0>)
 8000920:	f043 0310 	orr.w	r3, r3, #16
 8000924:	6593      	str	r3, [r2, #88]	@ 0x58
 8000926:	4b31      	ldr	r3, [pc, #196]	@ (80009ec <HAL_InitTick+0xe0>)
 8000928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800092a:	f003 0310 	and.w	r3, r3, #16
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000932:	f107 0210 	add.w	r2, r7, #16
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4611      	mov	r1, r2
 800093c:	4618      	mov	r0, r3
 800093e:	f001 fa75 	bl	8001e2c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000942:	6a3b      	ldr	r3, [r7, #32]
 8000944:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000948:	2b00      	cmp	r3, #0
 800094a:	d103      	bne.n	8000954 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800094c:	f001 fa42 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 8000950:	6378      	str	r0, [r7, #52]	@ 0x34
 8000952:	e004      	b.n	800095e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000954:	f001 fa3e 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 8000958:	4603      	mov	r3, r0
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800095e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000960:	4a23      	ldr	r2, [pc, #140]	@ (80009f0 <HAL_InitTick+0xe4>)
 8000962:	fba2 2303 	umull	r2, r3, r2, r3
 8000966:	0c9b      	lsrs	r3, r3, #18
 8000968:	3b01      	subs	r3, #1
 800096a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800096c:	4b21      	ldr	r3, [pc, #132]	@ (80009f4 <HAL_InitTick+0xe8>)
 800096e:	4a22      	ldr	r2, [pc, #136]	@ (80009f8 <HAL_InitTick+0xec>)
 8000970:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000972:	4b20      	ldr	r3, [pc, #128]	@ (80009f4 <HAL_InitTick+0xe8>)
 8000974:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000978:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800097a:	4a1e      	ldr	r2, [pc, #120]	@ (80009f4 <HAL_InitTick+0xe8>)
 800097c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800097e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000980:	4b1c      	ldr	r3, [pc, #112]	@ (80009f4 <HAL_InitTick+0xe8>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000986:	4b1b      	ldr	r3, [pc, #108]	@ (80009f4 <HAL_InitTick+0xe8>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098c:	4b19      	ldr	r3, [pc, #100]	@ (80009f4 <HAL_InitTick+0xe8>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000992:	4818      	ldr	r0, [pc, #96]	@ (80009f4 <HAL_InitTick+0xe8>)
 8000994:	f001 fe18 	bl	80025c8 <HAL_TIM_Base_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800099e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d11b      	bne.n	80009de <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009a6:	4813      	ldr	r0, [pc, #76]	@ (80009f4 <HAL_InitTick+0xe8>)
 80009a8:	f001 fe70 	bl	800268c <HAL_TIM_Base_Start_IT>
 80009ac:	4603      	mov	r3, r0
 80009ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009b2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d111      	bne.n	80009de <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009ba:	2036      	movs	r0, #54	@ 0x36
 80009bc:	f000 fa5a 	bl	8000e74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b0f      	cmp	r3, #15
 80009c4:	d808      	bhi.n	80009d8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009c6:	2200      	movs	r2, #0
 80009c8:	6879      	ldr	r1, [r7, #4]
 80009ca:	2036      	movs	r0, #54	@ 0x36
 80009cc:	f000 fa36 	bl	8000e3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d0:	4a0a      	ldr	r2, [pc, #40]	@ (80009fc <HAL_InitTick+0xf0>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6013      	str	r3, [r2, #0]
 80009d6:	e002      	b.n	80009de <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3738      	adds	r7, #56	@ 0x38
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000
 80009f0:	431bde83 	.word	0x431bde83
 80009f4:	20000120 	.word	0x20000120
 80009f8:	40001000 	.word	0x40001000
 80009fc:	20000004 	.word	0x20000004

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <NMI_Handler+0x4>

08000a08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <HardFault_Handler+0x4>

08000a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <MemManage_Handler+0x4>

08000a18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
	...

08000a38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a3c:	4802      	ldr	r0, [pc, #8]	@ (8000a48 <TIM6_DAC_IRQHandler+0x10>)
 8000a3e:	f001 fe79 	bl	8002734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000120 	.word	0x20000120

08000a4c <ITM_SendChar>:
// ITM Register Address
#define ITM_STIMULUS_PORT0     *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN           *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
    // Enable TRCENA
    DEMCR |= (1 << 24);
 8000a56:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <ITM_SendChar+0x48>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a94 <ITM_SendChar+0x48>)
 8000a5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a60:	6013      	str	r3, [r2, #0]

    // Enable Stimulus Port0
    ITM_TRACE_EN |= (1 << 0);
 8000a62:	4b0d      	ldr	r3, [pc, #52]	@ (8000a98 <ITM_SendChar+0x4c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a0c      	ldr	r2, [pc, #48]	@ (8000a98 <ITM_SendChar+0x4c>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6013      	str	r3, [r2, #0]

    // Read FIFO Status in bit[0]
    while (!(ITM_STIMULUS_PORT0 & 1));
 8000a6e:	bf00      	nop
 8000a70:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d0f8      	beq.n	8000a70 <ITM_SendChar+0x24>

    // Write to ITM Stimulus Port0
    ITM_STIMULUS_PORT0 = ch;
 8000a7e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	6013      	str	r3, [r2, #0]
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000edfc 	.word	0xe000edfc
 8000a98:	e0000e00 	.word	0xe0000e00

08000a9c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	e00a      	b.n	8000ac4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aae:	f3af 8000 	nop.w
 8000ab2:	4601      	mov	r1, r0
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	1c5a      	adds	r2, r3, #1
 8000ab8:	60ba      	str	r2, [r7, #8]
 8000aba:	b2ca      	uxtb	r2, r1
 8000abc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	697a      	ldr	r2, [r7, #20]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	dbf0      	blt.n	8000aae <_read+0x12>
  }

  return len;
 8000acc:	687b      	ldr	r3, [r7, #4]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3718      	adds	r7, #24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b086      	sub	sp, #24
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	60f8      	str	r0, [r7, #12]
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	e009      	b.n	8000afc <_write+0x26>
  {
//    __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	1c5a      	adds	r2, r3, #1
 8000aec:	60ba      	str	r2, [r7, #8]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ffab 	bl	8000a4c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	3301      	adds	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	697a      	ldr	r2, [r7, #20]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	dbf1      	blt.n	8000ae8 <_write+0x12>
  }
  return len;
 8000b04:	687b      	ldr	r3, [r7, #4]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <_close>:

int _close(int file)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b36:	605a      	str	r2, [r3, #4]
  return 0;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <_isatty>:

int _isatty(int file)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b4e:	2301      	movs	r3, #1
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
	...

08000b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b80:	4a14      	ldr	r2, [pc, #80]	@ (8000bd4 <_sbrk+0x5c>)
 8000b82:	4b15      	ldr	r3, [pc, #84]	@ (8000bd8 <_sbrk+0x60>)
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b8c:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d102      	bne.n	8000b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <_sbrk+0x64>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	@ (8000be0 <_sbrk+0x68>)
 8000b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <_sbrk+0x64>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d207      	bcs.n	8000bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba8:	f006 f9a4 	bl	8006ef4 <__errno>
 8000bac:	4603      	mov	r3, r0
 8000bae:	220c      	movs	r2, #12
 8000bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb6:	e009      	b.n	8000bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb8:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <_sbrk+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	4a05      	ldr	r2, [pc, #20]	@ (8000bdc <_sbrk+0x64>)
 8000bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bca:	68fb      	ldr	r3, [r7, #12]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	2000c000 	.word	0x2000c000
 8000bd8:	00000400 	.word	0x00000400
 8000bdc:	2000016c 	.word	0x2000016c
 8000be0:	20001bc8 	.word	0x20001bc8

08000be4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000be8:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <SystemInit+0x20>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bee:	4a05      	ldr	r2, [pc, #20]	@ (8000c04 <SystemInit+0x20>)
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c0c:	f7ff ffea 	bl	8000be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c10:	480c      	ldr	r0, [pc, #48]	@ (8000c44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c12:	490d      	ldr	r1, [pc, #52]	@ (8000c48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c14:	4a0d      	ldr	r2, [pc, #52]	@ (8000c4c <LoopForever+0xe>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c28:	4c0a      	ldr	r4, [pc, #40]	@ (8000c54 <LoopForever+0x16>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c36:	f006 f963 	bl	8006f00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c3a:	f7ff fc5f 	bl	80004fc <main>

08000c3e <LoopForever>:

LoopForever:
    b LoopForever
 8000c3e:	e7fe      	b.n	8000c3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c40:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c4c:	080075cc 	.word	0x080075cc
  ldr r2, =_sbss
 8000c50:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c54:	20001bc8 	.word	0x20001bc8

08000c58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC1_IRQHandler>

08000c5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 f8de 	bl	8000e26 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	f7ff fe4e 	bl	800090c <HAL_InitTick>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d002      	beq.n	8000c7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	71fb      	strb	r3, [r7, #7]
 8000c7a:	e001      	b.n	8000c80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c7c:	f7ff fdc4 	bl	8000808 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c80:	79fb      	ldrb	r3, [r7, #7]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <HAL_IncTick+0x20>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_IncTick+0x24>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a04      	ldr	r2, [pc, #16]	@ (8000cb0 <HAL_IncTick+0x24>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	20000170 	.word	0x20000170

08000cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	@ (8000cc8 <HAL_GetTick+0x14>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000170 	.word	0x20000170

08000ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfe:	4a04      	ldr	r2, [pc, #16]	@ (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	60d3      	str	r3, [r2, #12]
}
 8000d04:	bf00      	nop
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d18:	4b04      	ldr	r3, [pc, #16]	@ (8000d2c <__NVIC_GetPriorityGrouping+0x18>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	f003 0307 	and.w	r3, r3, #7
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	db0b      	blt.n	8000d5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	f003 021f 	and.w	r2, r3, #31
 8000d48:	4907      	ldr	r1, [pc, #28]	@ (8000d68 <__NVIC_EnableIRQ+0x38>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	095b      	lsrs	r3, r3, #5
 8000d50:	2001      	movs	r0, #1
 8000d52:	fa00 f202 	lsl.w	r2, r0, r2
 8000d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000e100 	.word	0xe000e100

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	db0a      	blt.n	8000d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	490c      	ldr	r1, [pc, #48]	@ (8000db8 <__NVIC_SetPriority+0x4c>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	0112      	lsls	r2, r2, #4
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	440b      	add	r3, r1
 8000d90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d94:	e00a      	b.n	8000dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4908      	ldr	r1, [pc, #32]	@ (8000dbc <__NVIC_SetPriority+0x50>)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	3b04      	subs	r3, #4
 8000da4:	0112      	lsls	r2, r2, #4
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	440b      	add	r3, r1
 8000daa:	761a      	strb	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000e100 	.word	0xe000e100
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	@ 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f1c3 0307 	rsb	r3, r3, #7
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	bf28      	it	cs
 8000dde:	2304      	movcs	r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3304      	adds	r3, #4
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d902      	bls.n	8000df0 <NVIC_EncodePriority+0x30>
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3b03      	subs	r3, #3
 8000dee:	e000      	b.n	8000df2 <NVIC_EncodePriority+0x32>
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	401a      	ands	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e08:	f04f 31ff 	mov.w	r1, #4294967295
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43d9      	mvns	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	4313      	orrs	r3, r2
         );
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3724      	adds	r7, #36	@ 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ff4c 	bl	8000ccc <__NVIC_SetPriorityGrouping>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
 8000e48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4e:	f7ff ff61 	bl	8000d14 <__NVIC_GetPriorityGrouping>
 8000e52:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	68b9      	ldr	r1, [r7, #8]
 8000e58:	6978      	ldr	r0, [r7, #20]
 8000e5a:	f7ff ffb1 	bl	8000dc0 <NVIC_EncodePriority>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff80 	bl	8000d6c <__NVIC_SetPriority>
}
 8000e6c:	bf00      	nop
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff54 	bl	8000d30 <__NVIC_EnableIRQ>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b087      	sub	sp, #28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e9e:	e154      	b.n	800114a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eac:	4013      	ands	r3, r2
 8000eae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 8146 	beq.w	8001144 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d005      	beq.n	8000ed0 <HAL_GPIO_Init+0x40>
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d130      	bne.n	8000f32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	2203      	movs	r2, #3
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f06:	2201      	movs	r2, #1
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	091b      	lsrs	r3, r3, #4
 8000f1c:	f003 0201 	and.w	r2, r3, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d017      	beq.n	8000f6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	2203      	movs	r2, #3
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d123      	bne.n	8000fc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	08da      	lsrs	r2, r3, #3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3208      	adds	r2, #8
 8000f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	220f      	movs	r2, #15
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	691a      	ldr	r2, [r3, #16]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	08da      	lsrs	r2, r3, #3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3208      	adds	r2, #8
 8000fbc:	6939      	ldr	r1, [r7, #16]
 8000fbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	2203      	movs	r2, #3
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0203 	and.w	r2, r3, #3
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 80a0 	beq.w	8001144 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001004:	4b58      	ldr	r3, [pc, #352]	@ (8001168 <HAL_GPIO_Init+0x2d8>)
 8001006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001008:	4a57      	ldr	r2, [pc, #348]	@ (8001168 <HAL_GPIO_Init+0x2d8>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001010:	4b55      	ldr	r3, [pc, #340]	@ (8001168 <HAL_GPIO_Init+0x2d8>)
 8001012:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800101c:	4a53      	ldr	r2, [pc, #332]	@ (800116c <HAL_GPIO_Init+0x2dc>)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	3302      	adds	r3, #2
 8001024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	220f      	movs	r2, #15
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001046:	d019      	beq.n	800107c <HAL_GPIO_Init+0x1ec>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a49      	ldr	r2, [pc, #292]	@ (8001170 <HAL_GPIO_Init+0x2e0>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d013      	beq.n	8001078 <HAL_GPIO_Init+0x1e8>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a48      	ldr	r2, [pc, #288]	@ (8001174 <HAL_GPIO_Init+0x2e4>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d00d      	beq.n	8001074 <HAL_GPIO_Init+0x1e4>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a47      	ldr	r2, [pc, #284]	@ (8001178 <HAL_GPIO_Init+0x2e8>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d007      	beq.n	8001070 <HAL_GPIO_Init+0x1e0>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a46      	ldr	r2, [pc, #280]	@ (800117c <HAL_GPIO_Init+0x2ec>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d101      	bne.n	800106c <HAL_GPIO_Init+0x1dc>
 8001068:	2304      	movs	r3, #4
 800106a:	e008      	b.n	800107e <HAL_GPIO_Init+0x1ee>
 800106c:	2307      	movs	r3, #7
 800106e:	e006      	b.n	800107e <HAL_GPIO_Init+0x1ee>
 8001070:	2303      	movs	r3, #3
 8001072:	e004      	b.n	800107e <HAL_GPIO_Init+0x1ee>
 8001074:	2302      	movs	r3, #2
 8001076:	e002      	b.n	800107e <HAL_GPIO_Init+0x1ee>
 8001078:	2301      	movs	r3, #1
 800107a:	e000      	b.n	800107e <HAL_GPIO_Init+0x1ee>
 800107c:	2300      	movs	r3, #0
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	f002 0203 	and.w	r2, r2, #3
 8001084:	0092      	lsls	r2, r2, #2
 8001086:	4093      	lsls	r3, r2
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800108e:	4937      	ldr	r1, [pc, #220]	@ (800116c <HAL_GPIO_Init+0x2dc>)
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	089b      	lsrs	r3, r3, #2
 8001094:	3302      	adds	r3, #2
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800109c:	4b38      	ldr	r3, [pc, #224]	@ (8001180 <HAL_GPIO_Init+0x2f0>)
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010c0:	4a2f      	ldr	r2, [pc, #188]	@ (8001180 <HAL_GPIO_Init+0x2f0>)
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001180 <HAL_GPIO_Init+0x2f0>)
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010ea:	4a25      	ldr	r2, [pc, #148]	@ (8001180 <HAL_GPIO_Init+0x2f0>)
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010f0:	4b23      	ldr	r3, [pc, #140]	@ (8001180 <HAL_GPIO_Init+0x2f0>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001114:	4a1a      	ldr	r2, [pc, #104]	@ (8001180 <HAL_GPIO_Init+0x2f0>)
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800111a:	4b19      	ldr	r3, [pc, #100]	@ (8001180 <HAL_GPIO_Init+0x2f0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800113e:	4a10      	ldr	r2, [pc, #64]	@ (8001180 <HAL_GPIO_Init+0x2f0>)
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	3301      	adds	r3, #1
 8001148:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	fa22 f303 	lsr.w	r3, r2, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	f47f aea3 	bne.w	8000ea0 <HAL_GPIO_Init+0x10>
  }
}
 800115a:	bf00      	nop
 800115c:	bf00      	nop
 800115e:	371c      	adds	r7, #28
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	40021000 	.word	0x40021000
 800116c:	40010000 	.word	0x40010000
 8001170:	48000400 	.word	0x48000400
 8001174:	48000800 	.word	0x48000800
 8001178:	48000c00 	.word	0x48000c00
 800117c:	48001000 	.word	0x48001000
 8001180:	40010400 	.word	0x40010400

08001184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	691a      	ldr	r2, [r3, #16]
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	4013      	ands	r3, r2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800119c:	2301      	movs	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
 80011a0:	e001      	b.n	80011a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011b8:	4b04      	ldr	r3, [pc, #16]	@ (80011cc <HAL_PWREx_GetVoltageRange+0x18>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40007000 	.word	0x40007000

080011d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011de:	d130      	bne.n	8001242 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011e0:	4b23      	ldr	r3, [pc, #140]	@ (8001270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011ec:	d038      	beq.n	8001260 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ee:	4b20      	ldr	r3, [pc, #128]	@ (8001270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001274 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2232      	movs	r2, #50	@ 0x32
 8001204:	fb02 f303 	mul.w	r3, r2, r3
 8001208:	4a1b      	ldr	r2, [pc, #108]	@ (8001278 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800120a:	fba2 2303 	umull	r2, r3, r2, r3
 800120e:	0c9b      	lsrs	r3, r3, #18
 8001210:	3301      	adds	r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001214:	e002      	b.n	800121c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	3b01      	subs	r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800121c:	4b14      	ldr	r3, [pc, #80]	@ (8001270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001228:	d102      	bne.n	8001230 <HAL_PWREx_ControlVoltageScaling+0x60>
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1f2      	bne.n	8001216 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001230:	4b0f      	ldr	r3, [pc, #60]	@ (8001270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001238:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800123c:	d110      	bne.n	8001260 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e00f      	b.n	8001262 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001242:	4b0b      	ldr	r3, [pc, #44]	@ (8001270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800124a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800124e:	d007      	beq.n	8001260 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001250:	4b07      	ldr	r3, [pc, #28]	@ (8001270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001258:	4a05      	ldr	r2, [pc, #20]	@ (8001270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800125e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40007000 	.word	0x40007000
 8001274:	20000000 	.word	0x20000000
 8001278:	431bde83 	.word	0x431bde83

0800127c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d102      	bne.n	8001290 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	f000 bc02 	b.w	8001a94 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001290:	4b96      	ldr	r3, [pc, #600]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 030c 	and.w	r3, r3, #12
 8001298:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800129a:	4b94      	ldr	r3, [pc, #592]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0310 	and.w	r3, r3, #16
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 80e4 	beq.w	800147a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d007      	beq.n	80012c8 <HAL_RCC_OscConfig+0x4c>
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	2b0c      	cmp	r3, #12
 80012bc:	f040 808b 	bne.w	80013d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	f040 8087 	bne.w	80013d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012c8:	4b88      	ldr	r3, [pc, #544]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d005      	beq.n	80012e0 <HAL_RCC_OscConfig+0x64>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e3d9      	b.n	8001a94 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a1a      	ldr	r2, [r3, #32]
 80012e4:	4b81      	ldr	r3, [pc, #516]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d004      	beq.n	80012fa <HAL_RCC_OscConfig+0x7e>
 80012f0:	4b7e      	ldr	r3, [pc, #504]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012f8:	e005      	b.n	8001306 <HAL_RCC_OscConfig+0x8a>
 80012fa:	4b7c      	ldr	r3, [pc, #496]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 80012fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001306:	4293      	cmp	r3, r2
 8001308:	d223      	bcs.n	8001352 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	4618      	mov	r0, r3
 8001310:	f000 fdbe 	bl	8001e90 <RCC_SetFlashLatencyFromMSIRange>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e3ba      	b.n	8001a94 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800131e:	4b73      	ldr	r3, [pc, #460]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a72      	ldr	r2, [pc, #456]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 8001324:	f043 0308 	orr.w	r3, r3, #8
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	4b70      	ldr	r3, [pc, #448]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	496d      	ldr	r1, [pc, #436]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 8001338:	4313      	orrs	r3, r2
 800133a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800133c:	4b6b      	ldr	r3, [pc, #428]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	4968      	ldr	r1, [pc, #416]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 800134c:	4313      	orrs	r3, r2
 800134e:	604b      	str	r3, [r1, #4]
 8001350:	e025      	b.n	800139e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001352:	4b66      	ldr	r3, [pc, #408]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a65      	ldr	r2, [pc, #404]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 8001358:	f043 0308 	orr.w	r3, r3, #8
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	4b63      	ldr	r3, [pc, #396]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	4960      	ldr	r1, [pc, #384]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 800136c:	4313      	orrs	r3, r2
 800136e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001370:	4b5e      	ldr	r3, [pc, #376]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	69db      	ldr	r3, [r3, #28]
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	495b      	ldr	r1, [pc, #364]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 8001380:	4313      	orrs	r3, r2
 8001382:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d109      	bne.n	800139e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	4618      	mov	r0, r3
 8001390:	f000 fd7e 	bl	8001e90 <RCC_SetFlashLatencyFromMSIRange>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e37a      	b.n	8001a94 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800139e:	f000 fc81 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 80013a2:	4602      	mov	r2, r0
 80013a4:	4b51      	ldr	r3, [pc, #324]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	091b      	lsrs	r3, r3, #4
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	4950      	ldr	r1, [pc, #320]	@ (80014f0 <HAL_RCC_OscConfig+0x274>)
 80013b0:	5ccb      	ldrb	r3, [r1, r3]
 80013b2:	f003 031f 	and.w	r3, r3, #31
 80013b6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ba:	4a4e      	ldr	r2, [pc, #312]	@ (80014f4 <HAL_RCC_OscConfig+0x278>)
 80013bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013be:	4b4e      	ldr	r3, [pc, #312]	@ (80014f8 <HAL_RCC_OscConfig+0x27c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff faa2 	bl	800090c <HAL_InitTick>
 80013c8:	4603      	mov	r3, r0
 80013ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d052      	beq.n	8001478 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	e35e      	b.n	8001a94 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d032      	beq.n	8001444 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013de:	4b43      	ldr	r3, [pc, #268]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a42      	ldr	r2, [pc, #264]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013ea:	f7ff fc63 	bl	8000cb4 <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013f2:	f7ff fc5f 	bl	8000cb4 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e347      	b.n	8001a94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001404:	4b39      	ldr	r3, [pc, #228]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0f0      	beq.n	80013f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001410:	4b36      	ldr	r3, [pc, #216]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a35      	ldr	r2, [pc, #212]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 8001416:	f043 0308 	orr.w	r3, r3, #8
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b33      	ldr	r3, [pc, #204]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	4930      	ldr	r1, [pc, #192]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 800142a:	4313      	orrs	r3, r2
 800142c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800142e:	4b2f      	ldr	r3, [pc, #188]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	492b      	ldr	r1, [pc, #172]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 800143e:	4313      	orrs	r3, r2
 8001440:	604b      	str	r3, [r1, #4]
 8001442:	e01a      	b.n	800147a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001444:	4b29      	ldr	r3, [pc, #164]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a28      	ldr	r2, [pc, #160]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 800144a:	f023 0301 	bic.w	r3, r3, #1
 800144e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001450:	f7ff fc30 	bl	8000cb4 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001458:	f7ff fc2c 	bl	8000cb4 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e314      	b.n	8001a94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800146a:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x1dc>
 8001476:	e000      	b.n	800147a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001478:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	d073      	beq.n	800156e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	2b08      	cmp	r3, #8
 800148a:	d005      	beq.n	8001498 <HAL_RCC_OscConfig+0x21c>
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	2b0c      	cmp	r3, #12
 8001490:	d10e      	bne.n	80014b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	2b03      	cmp	r3, #3
 8001496:	d10b      	bne.n	80014b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001498:	4b14      	ldr	r3, [pc, #80]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d063      	beq.n	800156c <HAL_RCC_OscConfig+0x2f0>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d15f      	bne.n	800156c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e2f1      	b.n	8001a94 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014b8:	d106      	bne.n	80014c8 <HAL_RCC_OscConfig+0x24c>
 80014ba:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a0b      	ldr	r2, [pc, #44]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 80014c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	e025      	b.n	8001514 <HAL_RCC_OscConfig+0x298>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014d0:	d114      	bne.n	80014fc <HAL_RCC_OscConfig+0x280>
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a05      	ldr	r2, [pc, #20]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 80014d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	4b03      	ldr	r3, [pc, #12]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a02      	ldr	r2, [pc, #8]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 80014e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	e013      	b.n	8001514 <HAL_RCC_OscConfig+0x298>
 80014ec:	40021000 	.word	0x40021000
 80014f0:	08007574 	.word	0x08007574
 80014f4:	20000000 	.word	0x20000000
 80014f8:	20000004 	.word	0x20000004
 80014fc:	4ba0      	ldr	r3, [pc, #640]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a9f      	ldr	r2, [pc, #636]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 8001502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b9d      	ldr	r3, [pc, #628]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a9c      	ldr	r2, [pc, #624]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 800150e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d013      	beq.n	8001544 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151c:	f7ff fbca 	bl	8000cb4 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff fbc6 	bl	8000cb4 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	@ 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e2ae      	b.n	8001a94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001536:	4b92      	ldr	r3, [pc, #584]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0f0      	beq.n	8001524 <HAL_RCC_OscConfig+0x2a8>
 8001542:	e014      	b.n	800156e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff fbb6 	bl	8000cb4 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff fbb2 	bl	8000cb4 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	@ 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e29a      	b.n	8001a94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800155e:	4b88      	ldr	r3, [pc, #544]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x2d0>
 800156a:	e000      	b.n	800156e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d060      	beq.n	800163c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	2b04      	cmp	r3, #4
 800157e:	d005      	beq.n	800158c <HAL_RCC_OscConfig+0x310>
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2b0c      	cmp	r3, #12
 8001584:	d119      	bne.n	80015ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d116      	bne.n	80015ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800158c:	4b7c      	ldr	r3, [pc, #496]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <HAL_RCC_OscConfig+0x328>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e277      	b.n	8001a94 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a4:	4b76      	ldr	r3, [pc, #472]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	061b      	lsls	r3, r3, #24
 80015b2:	4973      	ldr	r1, [pc, #460]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015b8:	e040      	b.n	800163c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d023      	beq.n	800160a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015c2:	4b6f      	ldr	r3, [pc, #444]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a6e      	ldr	r2, [pc, #440]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 80015c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ce:	f7ff fb71 	bl	8000cb4 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d6:	f7ff fb6d 	bl	8000cb4 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e255      	b.n	8001a94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e8:	4b65      	ldr	r3, [pc, #404]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f4:	4b62      	ldr	r3, [pc, #392]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	061b      	lsls	r3, r3, #24
 8001602:	495f      	ldr	r1, [pc, #380]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 8001604:	4313      	orrs	r3, r2
 8001606:	604b      	str	r3, [r1, #4]
 8001608:	e018      	b.n	800163c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800160a:	4b5d      	ldr	r3, [pc, #372]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a5c      	ldr	r2, [pc, #368]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 8001610:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001616:	f7ff fb4d 	bl	8000cb4 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800161e:	f7ff fb49 	bl	8000cb4 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e231      	b.n	8001a94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001630:	4b53      	ldr	r3, [pc, #332]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1f0      	bne.n	800161e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	2b00      	cmp	r3, #0
 8001646:	d03c      	beq.n	80016c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d01c      	beq.n	800168a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001650:	4b4b      	ldr	r3, [pc, #300]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 8001652:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001656:	4a4a      	ldr	r2, [pc, #296]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001660:	f7ff fb28 	bl	8000cb4 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001668:	f7ff fb24 	bl	8000cb4 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e20c      	b.n	8001a94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800167a:	4b41      	ldr	r3, [pc, #260]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 800167c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0ef      	beq.n	8001668 <HAL_RCC_OscConfig+0x3ec>
 8001688:	e01b      	b.n	80016c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800168a:	4b3d      	ldr	r3, [pc, #244]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 800168c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001690:	4a3b      	ldr	r2, [pc, #236]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 8001692:	f023 0301 	bic.w	r3, r3, #1
 8001696:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169a:	f7ff fb0b 	bl	8000cb4 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a2:	f7ff fb07 	bl	8000cb4 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e1ef      	b.n	8001a94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016b4:	4b32      	ldr	r3, [pc, #200]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 80016b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1ef      	bne.n	80016a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 80a6 	beq.w	800181c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d0:	2300      	movs	r3, #0
 80016d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 80016d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10d      	bne.n	80016fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e0:	4b27      	ldr	r3, [pc, #156]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 80016e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e4:	4a26      	ldr	r2, [pc, #152]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 80016e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ec:	4b24      	ldr	r3, [pc, #144]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 80016ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016f8:	2301      	movs	r3, #1
 80016fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016fc:	4b21      	ldr	r3, [pc, #132]	@ (8001784 <HAL_RCC_OscConfig+0x508>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001704:	2b00      	cmp	r3, #0
 8001706:	d118      	bne.n	800173a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001708:	4b1e      	ldr	r3, [pc, #120]	@ (8001784 <HAL_RCC_OscConfig+0x508>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a1d      	ldr	r2, [pc, #116]	@ (8001784 <HAL_RCC_OscConfig+0x508>)
 800170e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001712:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001714:	f7ff face 	bl	8000cb4 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800171c:	f7ff faca 	bl	8000cb4 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e1b2      	b.n	8001a94 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800172e:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <HAL_RCC_OscConfig+0x508>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d108      	bne.n	8001754 <HAL_RCC_OscConfig+0x4d8>
 8001742:	4b0f      	ldr	r3, [pc, #60]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 8001744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001748:	4a0d      	ldr	r2, [pc, #52]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001752:	e029      	b.n	80017a8 <HAL_RCC_OscConfig+0x52c>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b05      	cmp	r3, #5
 800175a:	d115      	bne.n	8001788 <HAL_RCC_OscConfig+0x50c>
 800175c:	4b08      	ldr	r3, [pc, #32]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 800175e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001762:	4a07      	ldr	r2, [pc, #28]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800176c:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 800176e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001772:	4a03      	ldr	r2, [pc, #12]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800177c:	e014      	b.n	80017a8 <HAL_RCC_OscConfig+0x52c>
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000
 8001784:	40007000 	.word	0x40007000
 8001788:	4b9a      	ldr	r3, [pc, #616]	@ (80019f4 <HAL_RCC_OscConfig+0x778>)
 800178a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800178e:	4a99      	ldr	r2, [pc, #612]	@ (80019f4 <HAL_RCC_OscConfig+0x778>)
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001798:	4b96      	ldr	r3, [pc, #600]	@ (80019f4 <HAL_RCC_OscConfig+0x778>)
 800179a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800179e:	4a95      	ldr	r2, [pc, #596]	@ (80019f4 <HAL_RCC_OscConfig+0x778>)
 80017a0:	f023 0304 	bic.w	r3, r3, #4
 80017a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d016      	beq.n	80017de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b0:	f7ff fa80 	bl	8000cb4 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017b6:	e00a      	b.n	80017ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b8:	f7ff fa7c 	bl	8000cb4 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e162      	b.n	8001a94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ce:	4b89      	ldr	r3, [pc, #548]	@ (80019f4 <HAL_RCC_OscConfig+0x778>)
 80017d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0ed      	beq.n	80017b8 <HAL_RCC_OscConfig+0x53c>
 80017dc:	e015      	b.n	800180a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017de:	f7ff fa69 	bl	8000cb4 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017e4:	e00a      	b.n	80017fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e6:	f7ff fa65 	bl	8000cb4 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e14b      	b.n	8001a94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017fc:	4b7d      	ldr	r3, [pc, #500]	@ (80019f4 <HAL_RCC_OscConfig+0x778>)
 80017fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1ed      	bne.n	80017e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800180a:	7ffb      	ldrb	r3, [r7, #31]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d105      	bne.n	800181c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001810:	4b78      	ldr	r3, [pc, #480]	@ (80019f4 <HAL_RCC_OscConfig+0x778>)
 8001812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001814:	4a77      	ldr	r2, [pc, #476]	@ (80019f4 <HAL_RCC_OscConfig+0x778>)
 8001816:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800181a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0320 	and.w	r3, r3, #32
 8001824:	2b00      	cmp	r3, #0
 8001826:	d03c      	beq.n	80018a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182c:	2b00      	cmp	r3, #0
 800182e:	d01c      	beq.n	800186a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001830:	4b70      	ldr	r3, [pc, #448]	@ (80019f4 <HAL_RCC_OscConfig+0x778>)
 8001832:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001836:	4a6f      	ldr	r2, [pc, #444]	@ (80019f4 <HAL_RCC_OscConfig+0x778>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001840:	f7ff fa38 	bl	8000cb4 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001848:	f7ff fa34 	bl	8000cb4 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e11c      	b.n	8001a94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800185a:	4b66      	ldr	r3, [pc, #408]	@ (80019f4 <HAL_RCC_OscConfig+0x778>)
 800185c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0ef      	beq.n	8001848 <HAL_RCC_OscConfig+0x5cc>
 8001868:	e01b      	b.n	80018a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800186a:	4b62      	ldr	r3, [pc, #392]	@ (80019f4 <HAL_RCC_OscConfig+0x778>)
 800186c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001870:	4a60      	ldr	r2, [pc, #384]	@ (80019f4 <HAL_RCC_OscConfig+0x778>)
 8001872:	f023 0301 	bic.w	r3, r3, #1
 8001876:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187a:	f7ff fa1b 	bl	8000cb4 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001882:	f7ff fa17 	bl	8000cb4 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e0ff      	b.n	8001a94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001894:	4b57      	ldr	r3, [pc, #348]	@ (80019f4 <HAL_RCC_OscConfig+0x778>)
 8001896:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1ef      	bne.n	8001882 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 80f3 	beq.w	8001a92 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	f040 80c9 	bne.w	8001a48 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018b6:	4b4f      	ldr	r3, [pc, #316]	@ (80019f4 <HAL_RCC_OscConfig+0x778>)
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f003 0203 	and.w	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d12c      	bne.n	8001924 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d4:	3b01      	subs	r3, #1
 80018d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d8:	429a      	cmp	r2, r3
 80018da:	d123      	bne.n	8001924 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d11b      	bne.n	8001924 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d113      	bne.n	8001924 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001906:	085b      	lsrs	r3, r3, #1
 8001908:	3b01      	subs	r3, #1
 800190a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800190c:	429a      	cmp	r2, r3
 800190e:	d109      	bne.n	8001924 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	085b      	lsrs	r3, r3, #1
 800191c:	3b01      	subs	r3, #1
 800191e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001920:	429a      	cmp	r2, r3
 8001922:	d06b      	beq.n	80019fc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	2b0c      	cmp	r3, #12
 8001928:	d062      	beq.n	80019f0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800192a:	4b32      	ldr	r3, [pc, #200]	@ (80019f4 <HAL_RCC_OscConfig+0x778>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e0ac      	b.n	8001a94 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800193a:	4b2e      	ldr	r3, [pc, #184]	@ (80019f4 <HAL_RCC_OscConfig+0x778>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a2d      	ldr	r2, [pc, #180]	@ (80019f4 <HAL_RCC_OscConfig+0x778>)
 8001940:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001944:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001946:	f7ff f9b5 	bl	8000cb4 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194e:	f7ff f9b1 	bl	8000cb4 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e099      	b.n	8001a94 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001960:	4b24      	ldr	r3, [pc, #144]	@ (80019f4 <HAL_RCC_OscConfig+0x778>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f0      	bne.n	800194e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800196c:	4b21      	ldr	r3, [pc, #132]	@ (80019f4 <HAL_RCC_OscConfig+0x778>)
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	4b21      	ldr	r3, [pc, #132]	@ (80019f8 <HAL_RCC_OscConfig+0x77c>)
 8001972:	4013      	ands	r3, r2
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800197c:	3a01      	subs	r2, #1
 800197e:	0112      	lsls	r2, r2, #4
 8001980:	4311      	orrs	r1, r2
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001986:	0212      	lsls	r2, r2, #8
 8001988:	4311      	orrs	r1, r2
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800198e:	0852      	lsrs	r2, r2, #1
 8001990:	3a01      	subs	r2, #1
 8001992:	0552      	lsls	r2, r2, #21
 8001994:	4311      	orrs	r1, r2
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800199a:	0852      	lsrs	r2, r2, #1
 800199c:	3a01      	subs	r2, #1
 800199e:	0652      	lsls	r2, r2, #25
 80019a0:	4311      	orrs	r1, r2
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019a6:	06d2      	lsls	r2, r2, #27
 80019a8:	430a      	orrs	r2, r1
 80019aa:	4912      	ldr	r1, [pc, #72]	@ (80019f4 <HAL_RCC_OscConfig+0x778>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019b0:	4b10      	ldr	r3, [pc, #64]	@ (80019f4 <HAL_RCC_OscConfig+0x778>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a0f      	ldr	r2, [pc, #60]	@ (80019f4 <HAL_RCC_OscConfig+0x778>)
 80019b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019bc:	4b0d      	ldr	r3, [pc, #52]	@ (80019f4 <HAL_RCC_OscConfig+0x778>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	4a0c      	ldr	r2, [pc, #48]	@ (80019f4 <HAL_RCC_OscConfig+0x778>)
 80019c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019c8:	f7ff f974 	bl	8000cb4 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d0:	f7ff f970 	bl	8000cb4 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e058      	b.n	8001a94 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e2:	4b04      	ldr	r3, [pc, #16]	@ (80019f4 <HAL_RCC_OscConfig+0x778>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ee:	e050      	b.n	8001a92 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e04f      	b.n	8001a94 <HAL_RCC_OscConfig+0x818>
 80019f4:	40021000 	.word	0x40021000
 80019f8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fc:	4b27      	ldr	r3, [pc, #156]	@ (8001a9c <HAL_RCC_OscConfig+0x820>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d144      	bne.n	8001a92 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a08:	4b24      	ldr	r3, [pc, #144]	@ (8001a9c <HAL_RCC_OscConfig+0x820>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a23      	ldr	r2, [pc, #140]	@ (8001a9c <HAL_RCC_OscConfig+0x820>)
 8001a0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a14:	4b21      	ldr	r3, [pc, #132]	@ (8001a9c <HAL_RCC_OscConfig+0x820>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	4a20      	ldr	r2, [pc, #128]	@ (8001a9c <HAL_RCC_OscConfig+0x820>)
 8001a1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a20:	f7ff f948 	bl	8000cb4 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a28:	f7ff f944 	bl	8000cb4 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e02c      	b.n	8001a94 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a3a:	4b18      	ldr	r3, [pc, #96]	@ (8001a9c <HAL_RCC_OscConfig+0x820>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0x7ac>
 8001a46:	e024      	b.n	8001a92 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	2b0c      	cmp	r3, #12
 8001a4c:	d01f      	beq.n	8001a8e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4e:	4b13      	ldr	r3, [pc, #76]	@ (8001a9c <HAL_RCC_OscConfig+0x820>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a12      	ldr	r2, [pc, #72]	@ (8001a9c <HAL_RCC_OscConfig+0x820>)
 8001a54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5a:	f7ff f92b 	bl	8000cb4 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a62:	f7ff f927 	bl	8000cb4 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e00f      	b.n	8001a94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a74:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <HAL_RCC_OscConfig+0x820>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1f0      	bne.n	8001a62 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001a80:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <HAL_RCC_OscConfig+0x820>)
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	4905      	ldr	r1, [pc, #20]	@ (8001a9c <HAL_RCC_OscConfig+0x820>)
 8001a86:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <HAL_RCC_OscConfig+0x824>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60cb      	str	r3, [r1, #12]
 8001a8c:	e001      	b.n	8001a92 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3720      	adds	r7, #32
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	feeefffc 	.word	0xfeeefffc

08001aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0e7      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab8:	4b75      	ldr	r3, [pc, #468]	@ (8001c90 <HAL_RCC_ClockConfig+0x1ec>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d910      	bls.n	8001ae8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac6:	4b72      	ldr	r3, [pc, #456]	@ (8001c90 <HAL_RCC_ClockConfig+0x1ec>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 0207 	bic.w	r2, r3, #7
 8001ace:	4970      	ldr	r1, [pc, #448]	@ (8001c90 <HAL_RCC_ClockConfig+0x1ec>)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad6:	4b6e      	ldr	r3, [pc, #440]	@ (8001c90 <HAL_RCC_ClockConfig+0x1ec>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d001      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e0cf      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d010      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	4b66      	ldr	r3, [pc, #408]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d908      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b04:	4b63      	ldr	r3, [pc, #396]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	4960      	ldr	r1, [pc, #384]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d04c      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d107      	bne.n	8001b3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2a:	4b5a      	ldr	r3, [pc, #360]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d121      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e0a6      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b42:	4b54      	ldr	r3, [pc, #336]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d115      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e09a      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b5a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d109      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e08e      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b6a:	4b4a      	ldr	r3, [pc, #296]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e086      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b7a:	4b46      	ldr	r3, [pc, #280]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f023 0203 	bic.w	r2, r3, #3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	4943      	ldr	r1, [pc, #268]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b8c:	f7ff f892 	bl	8000cb4 <HAL_GetTick>
 8001b90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b94:	f7ff f88e 	bl	8000cb4 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e06e      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001baa:	4b3a      	ldr	r3, [pc, #232]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 020c 	and.w	r2, r3, #12
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d1eb      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d010      	beq.n	8001bea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	4b31      	ldr	r3, [pc, #196]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d208      	bcs.n	8001bea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd8:	4b2e      	ldr	r3, [pc, #184]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	492b      	ldr	r1, [pc, #172]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bea:	4b29      	ldr	r3, [pc, #164]	@ (8001c90 <HAL_RCC_ClockConfig+0x1ec>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d210      	bcs.n	8001c1a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf8:	4b25      	ldr	r3, [pc, #148]	@ (8001c90 <HAL_RCC_ClockConfig+0x1ec>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f023 0207 	bic.w	r2, r3, #7
 8001c00:	4923      	ldr	r1, [pc, #140]	@ (8001c90 <HAL_RCC_ClockConfig+0x1ec>)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c08:	4b21      	ldr	r3, [pc, #132]	@ (8001c90 <HAL_RCC_ClockConfig+0x1ec>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d001      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e036      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d008      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c26:	4b1b      	ldr	r3, [pc, #108]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	4918      	ldr	r1, [pc, #96]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d009      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c44:	4b13      	ldr	r3, [pc, #76]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4910      	ldr	r1, [pc, #64]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c58:	f000 f824 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c94 <HAL_RCC_ClockConfig+0x1f0>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	091b      	lsrs	r3, r3, #4
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	490b      	ldr	r1, [pc, #44]	@ (8001c98 <HAL_RCC_ClockConfig+0x1f4>)
 8001c6a:	5ccb      	ldrb	r3, [r1, r3]
 8001c6c:	f003 031f 	and.w	r3, r3, #31
 8001c70:	fa22 f303 	lsr.w	r3, r2, r3
 8001c74:	4a09      	ldr	r2, [pc, #36]	@ (8001c9c <HAL_RCC_ClockConfig+0x1f8>)
 8001c76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c78:	4b09      	ldr	r3, [pc, #36]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1fc>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fe45 	bl	800090c <HAL_InitTick>
 8001c82:	4603      	mov	r3, r0
 8001c84:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c86:	7afb      	ldrb	r3, [r7, #11]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40022000 	.word	0x40022000
 8001c94:	40021000 	.word	0x40021000
 8001c98:	08007574 	.word	0x08007574
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	20000004 	.word	0x20000004

08001ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	@ 0x24
 8001ca8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb2:	4b3e      	ldr	r3, [pc, #248]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cbc:	4b3b      	ldr	r3, [pc, #236]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x108>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	2b0c      	cmp	r3, #12
 8001cd0:	d121      	bne.n	8001d16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d11e      	bne.n	8001d16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cd8:	4b34      	ldr	r3, [pc, #208]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x108>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0308 	and.w	r3, r3, #8
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d107      	bne.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ce4:	4b31      	ldr	r3, [pc, #196]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cea:	0a1b      	lsrs	r3, r3, #8
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	e005      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d00:	4a2b      	ldr	r2, [pc, #172]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10d      	bne.n	8001d2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d14:	e00a      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	d102      	bne.n	8001d22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d1c:	4b25      	ldr	r3, [pc, #148]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d1e:	61bb      	str	r3, [r7, #24]
 8001d20:	e004      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d101      	bne.n	8001d2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d28:	4b23      	ldr	r3, [pc, #140]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	2b0c      	cmp	r3, #12
 8001d30:	d134      	bne.n	8001d9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d32:	4b1e      	ldr	r3, [pc, #120]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x108>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d003      	beq.n	8001d4a <HAL_RCC_GetSysClockFreq+0xa6>
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d003      	beq.n	8001d50 <HAL_RCC_GetSysClockFreq+0xac>
 8001d48:	e005      	b.n	8001d56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d4c:	617b      	str	r3, [r7, #20]
      break;
 8001d4e:	e005      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d50:	4b19      	ldr	r3, [pc, #100]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d52:	617b      	str	r3, [r7, #20]
      break;
 8001d54:	e002      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	617b      	str	r3, [r7, #20]
      break;
 8001d5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d5c:	4b13      	ldr	r3, [pc, #76]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x108>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	3301      	adds	r3, #1
 8001d68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d6a:	4b10      	ldr	r3, [pc, #64]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x108>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	0a1b      	lsrs	r3, r3, #8
 8001d70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	fb03 f202 	mul.w	r2, r3, r2
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d82:	4b0a      	ldr	r3, [pc, #40]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x108>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	0e5b      	lsrs	r3, r3, #25
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d9c:	69bb      	ldr	r3, [r7, #24]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3724      	adds	r7, #36	@ 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000
 8001db0:	0800758c 	.word	0x0800758c
 8001db4:	00f42400 	.word	0x00f42400
 8001db8:	007a1200 	.word	0x007a1200

08001dbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dc0:	4b03      	ldr	r3, [pc, #12]	@ (8001dd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000000 	.word	0x20000000

08001dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001dd8:	f7ff fff0 	bl	8001dbc <HAL_RCC_GetHCLKFreq>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	4b06      	ldr	r3, [pc, #24]	@ (8001df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	0a1b      	lsrs	r3, r3, #8
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	4904      	ldr	r1, [pc, #16]	@ (8001dfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dea:	5ccb      	ldrb	r3, [r1, r3]
 8001dec:	f003 031f 	and.w	r3, r3, #31
 8001df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	08007584 	.word	0x08007584

08001e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e04:	f7ff ffda 	bl	8001dbc <HAL_RCC_GetHCLKFreq>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	0adb      	lsrs	r3, r3, #11
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	4904      	ldr	r1, [pc, #16]	@ (8001e28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e16:	5ccb      	ldrb	r3, [r1, r3]
 8001e18:	f003 031f 	and.w	r3, r3, #31
 8001e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40021000 	.word	0x40021000
 8001e28:	08007584 	.word	0x08007584

08001e2c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	220f      	movs	r2, #15
 8001e3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e3c:	4b12      	ldr	r3, [pc, #72]	@ (8001e88 <HAL_RCC_GetClockConfig+0x5c>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 0203 	and.w	r2, r3, #3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e48:	4b0f      	ldr	r3, [pc, #60]	@ (8001e88 <HAL_RCC_GetClockConfig+0x5c>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e54:	4b0c      	ldr	r3, [pc, #48]	@ (8001e88 <HAL_RCC_GetClockConfig+0x5c>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e60:	4b09      	ldr	r3, [pc, #36]	@ (8001e88 <HAL_RCC_GetClockConfig+0x5c>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	08db      	lsrs	r3, r3, #3
 8001e66:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e6e:	4b07      	ldr	r3, [pc, #28]	@ (8001e8c <HAL_RCC_GetClockConfig+0x60>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0207 	and.w	r2, r3, #7
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	601a      	str	r2, [r3, #0]
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40022000 	.word	0x40022000

08001e90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ea8:	f7ff f984 	bl	80011b4 <HAL_PWREx_GetVoltageRange>
 8001eac:	6178      	str	r0, [r7, #20]
 8001eae:	e014      	b.n	8001eda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001eb0:	4b25      	ldr	r3, [pc, #148]	@ (8001f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb4:	4a24      	ldr	r2, [pc, #144]	@ (8001f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eba:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ebc:	4b22      	ldr	r3, [pc, #136]	@ (8001f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ec8:	f7ff f974 	bl	80011b4 <HAL_PWREx_GetVoltageRange>
 8001ecc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ece:	4b1e      	ldr	r3, [pc, #120]	@ (8001f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ed8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ee0:	d10b      	bne.n	8001efa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b80      	cmp	r3, #128	@ 0x80
 8001ee6:	d919      	bls.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2ba0      	cmp	r3, #160	@ 0xa0
 8001eec:	d902      	bls.n	8001ef4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eee:	2302      	movs	r3, #2
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	e013      	b.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	e010      	b.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b80      	cmp	r3, #128	@ 0x80
 8001efe:	d902      	bls.n	8001f06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f00:	2303      	movs	r3, #3
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	e00a      	b.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b80      	cmp	r3, #128	@ 0x80
 8001f0a:	d102      	bne.n	8001f12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	e004      	b.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b70      	cmp	r3, #112	@ 0x70
 8001f16:	d101      	bne.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f18:	2301      	movs	r3, #1
 8001f1a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f023 0207 	bic.w	r2, r3, #7
 8001f24:	4909      	ldr	r1, [pc, #36]	@ (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f2c:	4b07      	ldr	r3, [pc, #28]	@ (8001f4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d001      	beq.n	8001f3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40022000 	.word	0x40022000

08001f50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f58:	2300      	movs	r3, #0
 8001f5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d031      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f70:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f74:	d01a      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001f76:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f7a:	d814      	bhi.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d009      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f84:	d10f      	bne.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001f86:	4b5d      	ldr	r3, [pc, #372]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	4a5c      	ldr	r2, [pc, #368]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f90:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f92:	e00c      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3304      	adds	r3, #4
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 fa22 	bl	80023e4 <RCCEx_PLLSAI1_Config>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fa4:	e003      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	74fb      	strb	r3, [r7, #19]
      break;
 8001faa:	e000      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001fac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fae:	7cfb      	ldrb	r3, [r7, #19]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10b      	bne.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fb4:	4b51      	ldr	r3, [pc, #324]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc2:	494e      	ldr	r1, [pc, #312]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001fca:	e001      	b.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fcc:	7cfb      	ldrb	r3, [r7, #19]
 8001fce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 809e 	beq.w	800211a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fe2:	4b46      	ldr	r3, [pc, #280]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00d      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff8:	4b40      	ldr	r3, [pc, #256]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffc:	4a3f      	ldr	r2, [pc, #252]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ffe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002002:	6593      	str	r3, [r2, #88]	@ 0x58
 8002004:	4b3d      	ldr	r3, [pc, #244]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002008:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002010:	2301      	movs	r3, #1
 8002012:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002014:	4b3a      	ldr	r3, [pc, #232]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a39      	ldr	r2, [pc, #228]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800201a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800201e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002020:	f7fe fe48 	bl	8000cb4 <HAL_GetTick>
 8002024:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002026:	e009      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002028:	f7fe fe44 	bl	8000cb4 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d902      	bls.n	800203c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	74fb      	strb	r3, [r7, #19]
        break;
 800203a:	e005      	b.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800203c:	4b30      	ldr	r3, [pc, #192]	@ (8002100 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0ef      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002048:	7cfb      	ldrb	r3, [r7, #19]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d15a      	bne.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800204e:	4b2b      	ldr	r3, [pc, #172]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002054:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002058:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d01e      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	429a      	cmp	r2, r3
 8002068:	d019      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800206a:	4b24      	ldr	r3, [pc, #144]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800206c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002070:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002074:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002076:	4b21      	ldr	r3, [pc, #132]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207c:	4a1f      	ldr	r2, [pc, #124]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800207e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002082:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002086:	4b1d      	ldr	r3, [pc, #116]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208c:	4a1b      	ldr	r2, [pc, #108]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800208e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002092:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002096:	4a19      	ldr	r2, [pc, #100]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d016      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a8:	f7fe fe04 	bl	8000cb4 <HAL_GetTick>
 80020ac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ae:	e00b      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b0:	f7fe fe00 	bl	8000cb4 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020be:	4293      	cmp	r3, r2
 80020c0:	d902      	bls.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	74fb      	strb	r3, [r7, #19]
            break;
 80020c6:	e006      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c8:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0ec      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80020d6:	7cfb      	ldrb	r3, [r7, #19]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10b      	bne.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020dc:	4b07      	ldr	r3, [pc, #28]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ea:	4904      	ldr	r1, [pc, #16]	@ (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020f2:	e009      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020f4:	7cfb      	ldrb	r3, [r7, #19]
 80020f6:	74bb      	strb	r3, [r7, #18]
 80020f8:	e006      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80020fa:	bf00      	nop
 80020fc:	40021000 	.word	0x40021000
 8002100:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002104:	7cfb      	ldrb	r3, [r7, #19]
 8002106:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002108:	7c7b      	ldrb	r3, [r7, #17]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d105      	bne.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800210e:	4b8d      	ldr	r3, [pc, #564]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002112:	4a8c      	ldr	r2, [pc, #560]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002114:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002118:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00a      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002126:	4b87      	ldr	r3, [pc, #540]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212c:	f023 0203 	bic.w	r2, r3, #3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	4983      	ldr	r1, [pc, #524]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00a      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002148:	4b7e      	ldr	r3, [pc, #504]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800214e:	f023 020c 	bic.w	r2, r3, #12
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002156:	497b      	ldr	r1, [pc, #492]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800216a:	4b76      	ldr	r3, [pc, #472]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800216c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002170:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002178:	4972      	ldr	r1, [pc, #456]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0320 	and.w	r3, r3, #32
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00a      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800218c:	4b6d      	ldr	r3, [pc, #436]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800218e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002192:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219a:	496a      	ldr	r1, [pc, #424]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021ae:	4b65      	ldr	r3, [pc, #404]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021bc:	4961      	ldr	r1, [pc, #388]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00a      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021d0:	4b5c      	ldr	r3, [pc, #368]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	4959      	ldr	r1, [pc, #356]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021f2:	4b54      	ldr	r3, [pc, #336]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80021f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002200:	4950      	ldr	r1, [pc, #320]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002214:	4b4b      	ldr	r3, [pc, #300]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002222:	4948      	ldr	r1, [pc, #288]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002236:	4b43      	ldr	r3, [pc, #268]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002244:	493f      	ldr	r1, [pc, #252]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d028      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002258:	4b3a      	ldr	r3, [pc, #232]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002266:	4937      	ldr	r1, [pc, #220]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002272:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002276:	d106      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002278:	4b32      	ldr	r3, [pc, #200]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	4a31      	ldr	r2, [pc, #196]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800227e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002282:	60d3      	str	r3, [r2, #12]
 8002284:	e011      	b.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800228a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800228e:	d10c      	bne.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3304      	adds	r3, #4
 8002294:	2101      	movs	r1, #1
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f8a4 	bl	80023e4 <RCCEx_PLLSAI1_Config>
 800229c:	4603      	mov	r3, r0
 800229e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022a0:	7cfb      	ldrb	r3, [r7, #19]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80022a6:	7cfb      	ldrb	r3, [r7, #19]
 80022a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d028      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022b6:	4b23      	ldr	r3, [pc, #140]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022bc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c4:	491f      	ldr	r1, [pc, #124]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022d4:	d106      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	4a1a      	ldr	r2, [pc, #104]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022e0:	60d3      	str	r3, [r2, #12]
 80022e2:	e011      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022ec:	d10c      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3304      	adds	r3, #4
 80022f2:	2101      	movs	r1, #1
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 f875 	bl	80023e4 <RCCEx_PLLSAI1_Config>
 80022fa:	4603      	mov	r3, r0
 80022fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022fe:	7cfb      	ldrb	r3, [r7, #19]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002304:	7cfb      	ldrb	r3, [r7, #19]
 8002306:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d02b      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002314:	4b0b      	ldr	r3, [pc, #44]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002322:	4908      	ldr	r1, [pc, #32]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800232e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002332:	d109      	bne.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002334:	4b03      	ldr	r3, [pc, #12]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4a02      	ldr	r2, [pc, #8]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800233a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800233e:	60d3      	str	r3, [r2, #12]
 8002340:	e014      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002342:	bf00      	nop
 8002344:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800234c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002350:	d10c      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3304      	adds	r3, #4
 8002356:	2101      	movs	r1, #1
 8002358:	4618      	mov	r0, r3
 800235a:	f000 f843 	bl	80023e4 <RCCEx_PLLSAI1_Config>
 800235e:	4603      	mov	r3, r0
 8002360:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002362:	7cfb      	ldrb	r3, [r7, #19]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8002368:	7cfb      	ldrb	r3, [r7, #19]
 800236a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d01c      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002378:	4b19      	ldr	r3, [pc, #100]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800237a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002386:	4916      	ldr	r1, [pc, #88]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002392:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002396:	d10c      	bne.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3304      	adds	r3, #4
 800239c:	2102      	movs	r1, #2
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 f820 	bl	80023e4 <RCCEx_PLLSAI1_Config>
 80023a4:	4603      	mov	r3, r0
 80023a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023a8:	7cfb      	ldrb	r3, [r7, #19]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80023ae:	7cfb      	ldrb	r3, [r7, #19]
 80023b0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00a      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023be:	4b08      	ldr	r3, [pc, #32]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023cc:	4904      	ldr	r1, [pc, #16]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40021000 	.word	0x40021000

080023e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023f2:	4b74      	ldr	r3, [pc, #464]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d018      	beq.n	8002430 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023fe:	4b71      	ldr	r3, [pc, #452]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f003 0203 	and.w	r2, r3, #3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d10d      	bne.n	800242a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
       ||
 8002412:	2b00      	cmp	r3, #0
 8002414:	d009      	beq.n	800242a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002416:	4b6b      	ldr	r3, [pc, #428]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	091b      	lsrs	r3, r3, #4
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
       ||
 8002426:	429a      	cmp	r2, r3
 8002428:	d047      	beq.n	80024ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	73fb      	strb	r3, [r7, #15]
 800242e:	e044      	b.n	80024ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b03      	cmp	r3, #3
 8002436:	d018      	beq.n	800246a <RCCEx_PLLSAI1_Config+0x86>
 8002438:	2b03      	cmp	r3, #3
 800243a:	d825      	bhi.n	8002488 <RCCEx_PLLSAI1_Config+0xa4>
 800243c:	2b01      	cmp	r3, #1
 800243e:	d002      	beq.n	8002446 <RCCEx_PLLSAI1_Config+0x62>
 8002440:	2b02      	cmp	r3, #2
 8002442:	d009      	beq.n	8002458 <RCCEx_PLLSAI1_Config+0x74>
 8002444:	e020      	b.n	8002488 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002446:	4b5f      	ldr	r3, [pc, #380]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d11d      	bne.n	800248e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002456:	e01a      	b.n	800248e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002458:	4b5a      	ldr	r3, [pc, #360]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002460:	2b00      	cmp	r3, #0
 8002462:	d116      	bne.n	8002492 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002468:	e013      	b.n	8002492 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800246a:	4b56      	ldr	r3, [pc, #344]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10f      	bne.n	8002496 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002476:	4b53      	ldr	r3, [pc, #332]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d109      	bne.n	8002496 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002486:	e006      	b.n	8002496 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
      break;
 800248c:	e004      	b.n	8002498 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800248e:	bf00      	nop
 8002490:	e002      	b.n	8002498 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002492:	bf00      	nop
 8002494:	e000      	b.n	8002498 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002496:	bf00      	nop
    }

    if(status == HAL_OK)
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10d      	bne.n	80024ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800249e:	4b49      	ldr	r3, [pc, #292]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6819      	ldr	r1, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	430b      	orrs	r3, r1
 80024b4:	4943      	ldr	r1, [pc, #268]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d17c      	bne.n	80025ba <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024c0:	4b40      	ldr	r3, [pc, #256]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a3f      	ldr	r2, [pc, #252]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80024ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024cc:	f7fe fbf2 	bl	8000cb4 <HAL_GetTick>
 80024d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024d2:	e009      	b.n	80024e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024d4:	f7fe fbee 	bl	8000cb4 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d902      	bls.n	80024e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	73fb      	strb	r3, [r7, #15]
        break;
 80024e6:	e005      	b.n	80024f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024e8:	4b36      	ldr	r3, [pc, #216]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1ef      	bne.n	80024d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d15f      	bne.n	80025ba <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d110      	bne.n	8002522 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002500:	4b30      	ldr	r3, [pc, #192]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002508:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6892      	ldr	r2, [r2, #8]
 8002510:	0211      	lsls	r1, r2, #8
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68d2      	ldr	r2, [r2, #12]
 8002516:	06d2      	lsls	r2, r2, #27
 8002518:	430a      	orrs	r2, r1
 800251a:	492a      	ldr	r1, [pc, #168]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800251c:	4313      	orrs	r3, r2
 800251e:	610b      	str	r3, [r1, #16]
 8002520:	e027      	b.n	8002572 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d112      	bne.n	800254e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002528:	4b26      	ldr	r3, [pc, #152]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002530:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6892      	ldr	r2, [r2, #8]
 8002538:	0211      	lsls	r1, r2, #8
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6912      	ldr	r2, [r2, #16]
 800253e:	0852      	lsrs	r2, r2, #1
 8002540:	3a01      	subs	r2, #1
 8002542:	0552      	lsls	r2, r2, #21
 8002544:	430a      	orrs	r2, r1
 8002546:	491f      	ldr	r1, [pc, #124]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002548:	4313      	orrs	r3, r2
 800254a:	610b      	str	r3, [r1, #16]
 800254c:	e011      	b.n	8002572 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800254e:	4b1d      	ldr	r3, [pc, #116]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002556:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6892      	ldr	r2, [r2, #8]
 800255e:	0211      	lsls	r1, r2, #8
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6952      	ldr	r2, [r2, #20]
 8002564:	0852      	lsrs	r2, r2, #1
 8002566:	3a01      	subs	r2, #1
 8002568:	0652      	lsls	r2, r2, #25
 800256a:	430a      	orrs	r2, r1
 800256c:	4915      	ldr	r1, [pc, #84]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800256e:	4313      	orrs	r3, r2
 8002570:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002572:	4b14      	ldr	r3, [pc, #80]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a13      	ldr	r2, [pc, #76]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002578:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800257c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257e:	f7fe fb99 	bl	8000cb4 <HAL_GetTick>
 8002582:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002584:	e009      	b.n	800259a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002586:	f7fe fb95 	bl	8000cb4 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d902      	bls.n	800259a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	73fb      	strb	r3, [r7, #15]
          break;
 8002598:	e005      	b.n	80025a6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800259a:	4b0a      	ldr	r3, [pc, #40]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0ef      	beq.n	8002586 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d106      	bne.n	80025ba <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025ac:	4b05      	ldr	r3, [pc, #20]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	4903      	ldr	r1, [pc, #12]	@ (80025c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000

080025c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e049      	b.n	800266e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f841 	bl	8002676 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3304      	adds	r3, #4
 8002604:	4619      	mov	r1, r3
 8002606:	4610      	mov	r0, r2
 8002608:	f000 f9c4 	bl	8002994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
	...

0800268c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b01      	cmp	r3, #1
 800269e:	d001      	beq.n	80026a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e03b      	b.n	800271c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a19      	ldr	r2, [pc, #100]	@ (8002728 <HAL_TIM_Base_Start_IT+0x9c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d009      	beq.n	80026da <HAL_TIM_Base_Start_IT+0x4e>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026ce:	d004      	beq.n	80026da <HAL_TIM_Base_Start_IT+0x4e>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a15      	ldr	r2, [pc, #84]	@ (800272c <HAL_TIM_Base_Start_IT+0xa0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d115      	bne.n	8002706 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	4b13      	ldr	r3, [pc, #76]	@ (8002730 <HAL_TIM_Base_Start_IT+0xa4>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2b06      	cmp	r3, #6
 80026ea:	d015      	beq.n	8002718 <HAL_TIM_Base_Start_IT+0x8c>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026f2:	d011      	beq.n	8002718 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0201 	orr.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002704:	e008      	b.n	8002718 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0201 	orr.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	e000      	b.n	800271a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002718:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	40012c00 	.word	0x40012c00
 800272c:	40014000 	.word	0x40014000
 8002730:	00010007 	.word	0x00010007

08002734 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d020      	beq.n	8002798 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d01b      	beq.n	8002798 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f06f 0202 	mvn.w	r2, #2
 8002768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f8e9 	bl	8002956 <HAL_TIM_IC_CaptureCallback>
 8002784:	e005      	b.n	8002792 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f8db 	bl	8002942 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f8ec 	bl	800296a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d020      	beq.n	80027e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d01b      	beq.n	80027e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0204 	mvn.w	r2, #4
 80027b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2202      	movs	r2, #2
 80027ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f8c3 	bl	8002956 <HAL_TIM_IC_CaptureCallback>
 80027d0:	e005      	b.n	80027de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f8b5 	bl	8002942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f8c6 	bl	800296a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d020      	beq.n	8002830 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d01b      	beq.n	8002830 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0208 	mvn.w	r2, #8
 8002800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2204      	movs	r2, #4
 8002806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f89d 	bl	8002956 <HAL_TIM_IC_CaptureCallback>
 800281c:	e005      	b.n	800282a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f88f 	bl	8002942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f8a0 	bl	800296a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f003 0310 	and.w	r3, r3, #16
 8002836:	2b00      	cmp	r3, #0
 8002838:	d020      	beq.n	800287c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	2b00      	cmp	r3, #0
 8002842:	d01b      	beq.n	800287c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f06f 0210 	mvn.w	r2, #16
 800284c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2208      	movs	r2, #8
 8002852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f877 	bl	8002956 <HAL_TIM_IC_CaptureCallback>
 8002868:	e005      	b.n	8002876 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f869 	bl	8002942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f87a 	bl	800296a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00c      	beq.n	80028a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d007      	beq.n	80028a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0201 	mvn.w	r2, #1
 8002898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fd ff9c 	bl	80007d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d104      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00c      	beq.n	80028ce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d007      	beq.n	80028ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80028c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f8dd 	bl	8002a88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00c      	beq.n	80028f2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d007      	beq.n	80028f2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80028ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f8d5 	bl	8002a9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00c      	beq.n	8002916 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800290e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f834 	bl	800297e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00c      	beq.n	800293a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b00      	cmp	r3, #0
 8002928:	d007      	beq.n	800293a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f06f 0220 	mvn.w	r2, #32
 8002932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f89d 	bl	8002a74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a30      	ldr	r2, [pc, #192]	@ (8002a68 <TIM_Base_SetConfig+0xd4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d003      	beq.n	80029b4 <TIM_Base_SetConfig+0x20>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029b2:	d108      	bne.n	80029c6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a27      	ldr	r2, [pc, #156]	@ (8002a68 <TIM_Base_SetConfig+0xd4>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d00b      	beq.n	80029e6 <TIM_Base_SetConfig+0x52>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029d4:	d007      	beq.n	80029e6 <TIM_Base_SetConfig+0x52>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a24      	ldr	r2, [pc, #144]	@ (8002a6c <TIM_Base_SetConfig+0xd8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d003      	beq.n	80029e6 <TIM_Base_SetConfig+0x52>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a23      	ldr	r2, [pc, #140]	@ (8002a70 <TIM_Base_SetConfig+0xdc>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d108      	bne.n	80029f8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a12      	ldr	r2, [pc, #72]	@ (8002a68 <TIM_Base_SetConfig+0xd4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d007      	beq.n	8002a34 <TIM_Base_SetConfig+0xa0>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a11      	ldr	r2, [pc, #68]	@ (8002a6c <TIM_Base_SetConfig+0xd8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d003      	beq.n	8002a34 <TIM_Base_SetConfig+0xa0>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a10      	ldr	r2, [pc, #64]	@ (8002a70 <TIM_Base_SetConfig+0xdc>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d103      	bne.n	8002a3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d105      	bne.n	8002a5a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f023 0201 	bic.w	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	611a      	str	r2, [r3, #16]
  }
}
 8002a5a:	bf00      	nop
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40012c00 	.word	0x40012c00
 8002a6c:	40014000 	.word	0x40014000
 8002a70:	40014400 	.word	0x40014400

08002a74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e040      	b.n	8002b44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d106      	bne.n	8002ad8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7fd fec0 	bl	8000858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2224      	movs	r2, #36	@ 0x24
 8002adc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0201 	bic.w	r2, r2, #1
 8002aec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fa82 	bl	8003000 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f825 	bl	8002b4c <UART_SetConfig>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e01b      	b.n	8002b44 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 fb01 	bl	8003144 <UART_CheckIdleState>
 8002b42:	4603      	mov	r3, r0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b50:	b08a      	sub	sp, #40	@ 0x28
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	431a      	orrs	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	4b9e      	ldr	r3, [pc, #632]	@ (8002df4 <UART_SetConfig+0x2a8>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	6812      	ldr	r2, [r2, #0]
 8002b82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b84:	430b      	orrs	r3, r1
 8002b86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a93      	ldr	r2, [pc, #588]	@ (8002df8 <UART_SetConfig+0x2ac>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d004      	beq.n	8002bb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a8a      	ldr	r2, [pc, #552]	@ (8002dfc <UART_SetConfig+0x2b0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d126      	bne.n	8002c24 <UART_SetConfig+0xd8>
 8002bd6:	4b8a      	ldr	r3, [pc, #552]	@ (8002e00 <UART_SetConfig+0x2b4>)
 8002bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d81b      	bhi.n	8002c1c <UART_SetConfig+0xd0>
 8002be4:	a201      	add	r2, pc, #4	@ (adr r2, 8002bec <UART_SetConfig+0xa0>)
 8002be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bea:	bf00      	nop
 8002bec:	08002bfd 	.word	0x08002bfd
 8002bf0:	08002c0d 	.word	0x08002c0d
 8002bf4:	08002c05 	.word	0x08002c05
 8002bf8:	08002c15 	.word	0x08002c15
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c02:	e0ab      	b.n	8002d5c <UART_SetConfig+0x210>
 8002c04:	2302      	movs	r3, #2
 8002c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c0a:	e0a7      	b.n	8002d5c <UART_SetConfig+0x210>
 8002c0c:	2304      	movs	r3, #4
 8002c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c12:	e0a3      	b.n	8002d5c <UART_SetConfig+0x210>
 8002c14:	2308      	movs	r3, #8
 8002c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c1a:	e09f      	b.n	8002d5c <UART_SetConfig+0x210>
 8002c1c:	2310      	movs	r3, #16
 8002c1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c22:	e09b      	b.n	8002d5c <UART_SetConfig+0x210>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a76      	ldr	r2, [pc, #472]	@ (8002e04 <UART_SetConfig+0x2b8>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d138      	bne.n	8002ca0 <UART_SetConfig+0x154>
 8002c2e:	4b74      	ldr	r3, [pc, #464]	@ (8002e00 <UART_SetConfig+0x2b4>)
 8002c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c34:	f003 030c 	and.w	r3, r3, #12
 8002c38:	2b0c      	cmp	r3, #12
 8002c3a:	d82d      	bhi.n	8002c98 <UART_SetConfig+0x14c>
 8002c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c44 <UART_SetConfig+0xf8>)
 8002c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c42:	bf00      	nop
 8002c44:	08002c79 	.word	0x08002c79
 8002c48:	08002c99 	.word	0x08002c99
 8002c4c:	08002c99 	.word	0x08002c99
 8002c50:	08002c99 	.word	0x08002c99
 8002c54:	08002c89 	.word	0x08002c89
 8002c58:	08002c99 	.word	0x08002c99
 8002c5c:	08002c99 	.word	0x08002c99
 8002c60:	08002c99 	.word	0x08002c99
 8002c64:	08002c81 	.word	0x08002c81
 8002c68:	08002c99 	.word	0x08002c99
 8002c6c:	08002c99 	.word	0x08002c99
 8002c70:	08002c99 	.word	0x08002c99
 8002c74:	08002c91 	.word	0x08002c91
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c7e:	e06d      	b.n	8002d5c <UART_SetConfig+0x210>
 8002c80:	2302      	movs	r3, #2
 8002c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c86:	e069      	b.n	8002d5c <UART_SetConfig+0x210>
 8002c88:	2304      	movs	r3, #4
 8002c8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c8e:	e065      	b.n	8002d5c <UART_SetConfig+0x210>
 8002c90:	2308      	movs	r3, #8
 8002c92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c96:	e061      	b.n	8002d5c <UART_SetConfig+0x210>
 8002c98:	2310      	movs	r3, #16
 8002c9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002c9e:	e05d      	b.n	8002d5c <UART_SetConfig+0x210>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a58      	ldr	r2, [pc, #352]	@ (8002e08 <UART_SetConfig+0x2bc>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d125      	bne.n	8002cf6 <UART_SetConfig+0x1aa>
 8002caa:	4b55      	ldr	r3, [pc, #340]	@ (8002e00 <UART_SetConfig+0x2b4>)
 8002cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002cb4:	2b30      	cmp	r3, #48	@ 0x30
 8002cb6:	d016      	beq.n	8002ce6 <UART_SetConfig+0x19a>
 8002cb8:	2b30      	cmp	r3, #48	@ 0x30
 8002cba:	d818      	bhi.n	8002cee <UART_SetConfig+0x1a2>
 8002cbc:	2b20      	cmp	r3, #32
 8002cbe:	d00a      	beq.n	8002cd6 <UART_SetConfig+0x18a>
 8002cc0:	2b20      	cmp	r3, #32
 8002cc2:	d814      	bhi.n	8002cee <UART_SetConfig+0x1a2>
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d002      	beq.n	8002cce <UART_SetConfig+0x182>
 8002cc8:	2b10      	cmp	r3, #16
 8002cca:	d008      	beq.n	8002cde <UART_SetConfig+0x192>
 8002ccc:	e00f      	b.n	8002cee <UART_SetConfig+0x1a2>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cd4:	e042      	b.n	8002d5c <UART_SetConfig+0x210>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cdc:	e03e      	b.n	8002d5c <UART_SetConfig+0x210>
 8002cde:	2304      	movs	r3, #4
 8002ce0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ce4:	e03a      	b.n	8002d5c <UART_SetConfig+0x210>
 8002ce6:	2308      	movs	r3, #8
 8002ce8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cec:	e036      	b.n	8002d5c <UART_SetConfig+0x210>
 8002cee:	2310      	movs	r3, #16
 8002cf0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cf4:	e032      	b.n	8002d5c <UART_SetConfig+0x210>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a3f      	ldr	r2, [pc, #252]	@ (8002df8 <UART_SetConfig+0x2ac>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d12a      	bne.n	8002d56 <UART_SetConfig+0x20a>
 8002d00:	4b3f      	ldr	r3, [pc, #252]	@ (8002e00 <UART_SetConfig+0x2b4>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d06:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002d0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d0e:	d01a      	beq.n	8002d46 <UART_SetConfig+0x1fa>
 8002d10:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d14:	d81b      	bhi.n	8002d4e <UART_SetConfig+0x202>
 8002d16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d1a:	d00c      	beq.n	8002d36 <UART_SetConfig+0x1ea>
 8002d1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d20:	d815      	bhi.n	8002d4e <UART_SetConfig+0x202>
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <UART_SetConfig+0x1e2>
 8002d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d2a:	d008      	beq.n	8002d3e <UART_SetConfig+0x1f2>
 8002d2c:	e00f      	b.n	8002d4e <UART_SetConfig+0x202>
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d34:	e012      	b.n	8002d5c <UART_SetConfig+0x210>
 8002d36:	2302      	movs	r3, #2
 8002d38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d3c:	e00e      	b.n	8002d5c <UART_SetConfig+0x210>
 8002d3e:	2304      	movs	r3, #4
 8002d40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d44:	e00a      	b.n	8002d5c <UART_SetConfig+0x210>
 8002d46:	2308      	movs	r3, #8
 8002d48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d4c:	e006      	b.n	8002d5c <UART_SetConfig+0x210>
 8002d4e:	2310      	movs	r3, #16
 8002d50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d54:	e002      	b.n	8002d5c <UART_SetConfig+0x210>
 8002d56:	2310      	movs	r3, #16
 8002d58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a25      	ldr	r2, [pc, #148]	@ (8002df8 <UART_SetConfig+0x2ac>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	f040 808a 	bne.w	8002e7c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d824      	bhi.n	8002dba <UART_SetConfig+0x26e>
 8002d70:	a201      	add	r2, pc, #4	@ (adr r2, 8002d78 <UART_SetConfig+0x22c>)
 8002d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d76:	bf00      	nop
 8002d78:	08002d9d 	.word	0x08002d9d
 8002d7c:	08002dbb 	.word	0x08002dbb
 8002d80:	08002da5 	.word	0x08002da5
 8002d84:	08002dbb 	.word	0x08002dbb
 8002d88:	08002dab 	.word	0x08002dab
 8002d8c:	08002dbb 	.word	0x08002dbb
 8002d90:	08002dbb 	.word	0x08002dbb
 8002d94:	08002dbb 	.word	0x08002dbb
 8002d98:	08002db3 	.word	0x08002db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d9c:	f7ff f81a 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 8002da0:	61f8      	str	r0, [r7, #28]
        break;
 8002da2:	e010      	b.n	8002dc6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002da4:	4b19      	ldr	r3, [pc, #100]	@ (8002e0c <UART_SetConfig+0x2c0>)
 8002da6:	61fb      	str	r3, [r7, #28]
        break;
 8002da8:	e00d      	b.n	8002dc6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002daa:	f7fe ff7b 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8002dae:	61f8      	str	r0, [r7, #28]
        break;
 8002db0:	e009      	b.n	8002dc6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002db2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002db6:	61fb      	str	r3, [r7, #28]
        break;
 8002db8:	e005      	b.n	8002dc6 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002dc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 8109 	beq.w	8002fe0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	4413      	add	r3, r2
 8002dd8:	69fa      	ldr	r2, [r7, #28]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d305      	bcc.n	8002dea <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d912      	bls.n	8002e10 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002df0:	e0f6      	b.n	8002fe0 <UART_SetConfig+0x494>
 8002df2:	bf00      	nop
 8002df4:	efff69f3 	.word	0xefff69f3
 8002df8:	40008000 	.word	0x40008000
 8002dfc:	40013800 	.word	0x40013800
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40004400 	.word	0x40004400
 8002e08:	40004800 	.word	0x40004800
 8002e0c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	2200      	movs	r2, #0
 8002e14:	461c      	mov	r4, r3
 8002e16:	4615      	mov	r5, r2
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	022b      	lsls	r3, r5, #8
 8002e22:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002e26:	0222      	lsls	r2, r4, #8
 8002e28:	68f9      	ldr	r1, [r7, #12]
 8002e2a:	6849      	ldr	r1, [r1, #4]
 8002e2c:	0849      	lsrs	r1, r1, #1
 8002e2e:	2000      	movs	r0, #0
 8002e30:	4688      	mov	r8, r1
 8002e32:	4681      	mov	r9, r0
 8002e34:	eb12 0a08 	adds.w	sl, r2, r8
 8002e38:	eb43 0b09 	adc.w	fp, r3, r9
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	607a      	str	r2, [r7, #4]
 8002e46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e4a:	4650      	mov	r0, sl
 8002e4c:	4659      	mov	r1, fp
 8002e4e:	f7fd f9bf 	bl	80001d0 <__aeabi_uldivmod>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4613      	mov	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e60:	d308      	bcc.n	8002e74 <UART_SetConfig+0x328>
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e68:	d204      	bcs.n	8002e74 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	60da      	str	r2, [r3, #12]
 8002e72:	e0b5      	b.n	8002fe0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002e7a:	e0b1      	b.n	8002fe0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e84:	d15d      	bne.n	8002f42 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8002e86:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d827      	bhi.n	8002ede <UART_SetConfig+0x392>
 8002e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e94 <UART_SetConfig+0x348>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002eb9 	.word	0x08002eb9
 8002e98:	08002ec1 	.word	0x08002ec1
 8002e9c:	08002ec9 	.word	0x08002ec9
 8002ea0:	08002edf 	.word	0x08002edf
 8002ea4:	08002ecf 	.word	0x08002ecf
 8002ea8:	08002edf 	.word	0x08002edf
 8002eac:	08002edf 	.word	0x08002edf
 8002eb0:	08002edf 	.word	0x08002edf
 8002eb4:	08002ed7 	.word	0x08002ed7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002eb8:	f7fe ff8c 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 8002ebc:	61f8      	str	r0, [r7, #28]
        break;
 8002ebe:	e014      	b.n	8002eea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ec0:	f7fe ff9e 	bl	8001e00 <HAL_RCC_GetPCLK2Freq>
 8002ec4:	61f8      	str	r0, [r7, #28]
        break;
 8002ec6:	e010      	b.n	8002eea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ec8:	4b4c      	ldr	r3, [pc, #304]	@ (8002ffc <UART_SetConfig+0x4b0>)
 8002eca:	61fb      	str	r3, [r7, #28]
        break;
 8002ecc:	e00d      	b.n	8002eea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ece:	f7fe fee9 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8002ed2:	61f8      	str	r0, [r7, #28]
        break;
 8002ed4:	e009      	b.n	8002eea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ed6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002eda:	61fb      	str	r3, [r7, #28]
        break;
 8002edc:	e005      	b.n	8002eea <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002ee8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d077      	beq.n	8002fe0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	005a      	lsls	r2, r3, #1
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	085b      	lsrs	r3, r3, #1
 8002efa:	441a      	add	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f04:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	2b0f      	cmp	r3, #15
 8002f0a:	d916      	bls.n	8002f3a <UART_SetConfig+0x3ee>
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f12:	d212      	bcs.n	8002f3a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	f023 030f 	bic.w	r3, r3, #15
 8002f1c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	085b      	lsrs	r3, r3, #1
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	8afb      	ldrh	r3, [r7, #22]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	8afa      	ldrh	r2, [r7, #22]
 8002f36:	60da      	str	r2, [r3, #12]
 8002f38:	e052      	b.n	8002fe0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002f40:	e04e      	b.n	8002fe0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f42:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d827      	bhi.n	8002f9a <UART_SetConfig+0x44e>
 8002f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8002f50 <UART_SetConfig+0x404>)
 8002f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f50:	08002f75 	.word	0x08002f75
 8002f54:	08002f7d 	.word	0x08002f7d
 8002f58:	08002f85 	.word	0x08002f85
 8002f5c:	08002f9b 	.word	0x08002f9b
 8002f60:	08002f8b 	.word	0x08002f8b
 8002f64:	08002f9b 	.word	0x08002f9b
 8002f68:	08002f9b 	.word	0x08002f9b
 8002f6c:	08002f9b 	.word	0x08002f9b
 8002f70:	08002f93 	.word	0x08002f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f74:	f7fe ff2e 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 8002f78:	61f8      	str	r0, [r7, #28]
        break;
 8002f7a:	e014      	b.n	8002fa6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f7c:	f7fe ff40 	bl	8001e00 <HAL_RCC_GetPCLK2Freq>
 8002f80:	61f8      	str	r0, [r7, #28]
        break;
 8002f82:	e010      	b.n	8002fa6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f84:	4b1d      	ldr	r3, [pc, #116]	@ (8002ffc <UART_SetConfig+0x4b0>)
 8002f86:	61fb      	str	r3, [r7, #28]
        break;
 8002f88:	e00d      	b.n	8002fa6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f8a:	f7fe fe8b 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8002f8e:	61f8      	str	r0, [r7, #28]
        break;
 8002f90:	e009      	b.n	8002fa6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f96:	61fb      	str	r3, [r7, #28]
        break;
 8002f98:	e005      	b.n	8002fa6 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002fa4:	bf00      	nop
    }

    if (pclk != 0U)
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d019      	beq.n	8002fe0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	085a      	lsrs	r2, r3, #1
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	441a      	add	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	2b0f      	cmp	r3, #15
 8002fc4:	d909      	bls.n	8002fda <UART_SetConfig+0x48e>
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fcc:	d205      	bcs.n	8002fda <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	60da      	str	r2, [r3, #12]
 8002fd8:	e002      	b.n	8002fe0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002fec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3728      	adds	r7, #40	@ 0x28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ffa:	bf00      	nop
 8002ffc:	00f42400 	.word	0x00f42400

08003000 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00a      	beq.n	800306e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00a      	beq.n	80030b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b6:	f003 0320 	and.w	r3, r3, #32
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01a      	beq.n	8003116 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030fe:	d10a      	bne.n	8003116 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	605a      	str	r2, [r3, #4]
  }
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b098      	sub	sp, #96	@ 0x60
 8003148:	af02      	add	r7, sp, #8
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003154:	f7fd fdae 	bl	8000cb4 <HAL_GetTick>
 8003158:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b08      	cmp	r3, #8
 8003166:	d12e      	bne.n	80031c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003168:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003170:	2200      	movs	r2, #0
 8003172:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f88c 	bl	8003294 <UART_WaitOnFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d021      	beq.n	80031c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800318a:	e853 3f00 	ldrex	r3, [r3]
 800318e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003192:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003196:	653b      	str	r3, [r7, #80]	@ 0x50
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	461a      	mov	r2, r3
 800319e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80031a2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031a8:	e841 2300 	strex	r3, r2, [r1]
 80031ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1e6      	bne.n	8003182 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e062      	b.n	800328c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d149      	bne.n	8003268 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031dc:	2200      	movs	r2, #0
 80031de:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f856 	bl	8003294 <UART_WaitOnFlagUntilTimeout>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d03c      	beq.n	8003268 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f6:	e853 3f00 	ldrex	r3, [r3]
 80031fa:	623b      	str	r3, [r7, #32]
   return(result);
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003202:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800320c:	633b      	str	r3, [r7, #48]	@ 0x30
 800320e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003210:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003212:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003214:	e841 2300 	strex	r3, r2, [r1]
 8003218:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800321a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e6      	bne.n	80031ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	3308      	adds	r3, #8
 8003226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	e853 3f00 	ldrex	r3, [r3]
 800322e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0301 	bic.w	r3, r3, #1
 8003236:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3308      	adds	r3, #8
 800323e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003240:	61fa      	str	r2, [r7, #28]
 8003242:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003244:	69b9      	ldr	r1, [r7, #24]
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	e841 2300 	strex	r3, r2, [r1]
 800324c:	617b      	str	r3, [r7, #20]
   return(result);
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1e5      	bne.n	8003220 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2220      	movs	r2, #32
 8003258:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e011      	b.n	800328c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2220      	movs	r2, #32
 8003272:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3758      	adds	r7, #88	@ 0x58
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	4613      	mov	r3, r2
 80032a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032a4:	e04f      	b.n	8003346 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ac:	d04b      	beq.n	8003346 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ae:	f7fd fd01 	bl	8000cb4 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d302      	bcc.n	80032c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e04e      	b.n	8003366 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d037      	beq.n	8003346 <UART_WaitOnFlagUntilTimeout+0xb2>
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b80      	cmp	r3, #128	@ 0x80
 80032da:	d034      	beq.n	8003346 <UART_WaitOnFlagUntilTimeout+0xb2>
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b40      	cmp	r3, #64	@ 0x40
 80032e0:	d031      	beq.n	8003346 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d110      	bne.n	8003312 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2208      	movs	r2, #8
 80032f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 f838 	bl	800336e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2208      	movs	r2, #8
 8003302:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e029      	b.n	8003366 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800331c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003320:	d111      	bne.n	8003346 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800332a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 f81e 	bl	800336e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e00f      	b.n	8003366 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69da      	ldr	r2, [r3, #28]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4013      	ands	r3, r2
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	429a      	cmp	r2, r3
 8003354:	bf0c      	ite	eq
 8003356:	2301      	moveq	r3, #1
 8003358:	2300      	movne	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	461a      	mov	r2, r3
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	429a      	cmp	r2, r3
 8003362:	d0a0      	beq.n	80032a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800336e:	b480      	push	{r7}
 8003370:	b095      	sub	sp, #84	@ 0x54
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800337e:	e853 3f00 	ldrex	r3, [r3]
 8003382:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003386:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800338a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	461a      	mov	r2, r3
 8003392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003394:	643b      	str	r3, [r7, #64]	@ 0x40
 8003396:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003398:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800339a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800339c:	e841 2300 	strex	r3, r2, [r1]
 80033a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1e6      	bne.n	8003376 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3308      	adds	r3, #8
 80033ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	e853 3f00 	ldrex	r3, [r3]
 80033b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f023 0301 	bic.w	r3, r3, #1
 80033be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3308      	adds	r3, #8
 80033c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033d0:	e841 2300 	strex	r3, r2, [r1]
 80033d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1e5      	bne.n	80033a8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d118      	bne.n	8003416 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	e853 3f00 	ldrex	r3, [r3]
 80033f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f023 0310 	bic.w	r3, r3, #16
 80033f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003402:	61bb      	str	r3, [r7, #24]
 8003404:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003406:	6979      	ldr	r1, [r7, #20]
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	e841 2300 	strex	r3, r2, [r1]
 800340e:	613b      	str	r3, [r7, #16]
   return(result);
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1e6      	bne.n	80033e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2220      	movs	r2, #32
 800341a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800342a:	bf00      	nop
 800342c:	3754      	adds	r7, #84	@ 0x54
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <__NVIC_SetPriority>:
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	6039      	str	r1, [r7, #0]
 8003442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003448:	2b00      	cmp	r3, #0
 800344a:	db0a      	blt.n	8003462 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	b2da      	uxtb	r2, r3
 8003450:	490c      	ldr	r1, [pc, #48]	@ (8003484 <__NVIC_SetPriority+0x4c>)
 8003452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003456:	0112      	lsls	r2, r2, #4
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	440b      	add	r3, r1
 800345c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003460:	e00a      	b.n	8003478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	b2da      	uxtb	r2, r3
 8003466:	4908      	ldr	r1, [pc, #32]	@ (8003488 <__NVIC_SetPriority+0x50>)
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	3b04      	subs	r3, #4
 8003470:	0112      	lsls	r2, r2, #4
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	440b      	add	r3, r1
 8003476:	761a      	strb	r2, [r3, #24]
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	e000e100 	.word	0xe000e100
 8003488:	e000ed00 	.word	0xe000ed00

0800348c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003490:	4b05      	ldr	r3, [pc, #20]	@ (80034a8 <SysTick_Handler+0x1c>)
 8003492:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003494:	f002 f968 	bl	8005768 <xTaskGetSchedulerState>
 8003498:	4603      	mov	r3, r0
 800349a:	2b01      	cmp	r3, #1
 800349c:	d001      	beq.n	80034a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800349e:	f003 f863 	bl	8006568 <xPortSysTickHandler>
  }
}
 80034a2:	bf00      	nop
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	e000e010 	.word	0xe000e010

080034ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80034b0:	2100      	movs	r1, #0
 80034b2:	f06f 0004 	mvn.w	r0, #4
 80034b6:	f7ff ffbf 	bl	8003438 <__NVIC_SetPriority>
#endif
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034c6:	f3ef 8305 	mrs	r3, IPSR
 80034ca:	603b      	str	r3, [r7, #0]
  return(result);
 80034cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80034d2:	f06f 0305 	mvn.w	r3, #5
 80034d6:	607b      	str	r3, [r7, #4]
 80034d8:	e00c      	b.n	80034f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80034da:	4b0a      	ldr	r3, [pc, #40]	@ (8003504 <osKernelInitialize+0x44>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d105      	bne.n	80034ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80034e2:	4b08      	ldr	r3, [pc, #32]	@ (8003504 <osKernelInitialize+0x44>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	607b      	str	r3, [r7, #4]
 80034ec:	e002      	b.n	80034f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80034ee:	f04f 33ff 	mov.w	r3, #4294967295
 80034f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80034f4:	687b      	ldr	r3, [r7, #4]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20000174 	.word	0x20000174

08003508 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800350e:	f3ef 8305 	mrs	r3, IPSR
 8003512:	603b      	str	r3, [r7, #0]
  return(result);
 8003514:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <osKernelStart+0x1a>
    stat = osErrorISR;
 800351a:	f06f 0305 	mvn.w	r3, #5
 800351e:	607b      	str	r3, [r7, #4]
 8003520:	e010      	b.n	8003544 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003522:	4b0b      	ldr	r3, [pc, #44]	@ (8003550 <osKernelStart+0x48>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d109      	bne.n	800353e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800352a:	f7ff ffbf 	bl	80034ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800352e:	4b08      	ldr	r3, [pc, #32]	@ (8003550 <osKernelStart+0x48>)
 8003530:	2202      	movs	r2, #2
 8003532:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003534:	f001 fcca 	bl	8004ecc <vTaskStartScheduler>
      stat = osOK;
 8003538:	2300      	movs	r3, #0
 800353a:	607b      	str	r3, [r7, #4]
 800353c:	e002      	b.n	8003544 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800353e:	f04f 33ff 	mov.w	r3, #4294967295
 8003542:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003544:	687b      	ldr	r3, [r7, #4]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000174 	.word	0x20000174

08003554 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003554:	b580      	push	{r7, lr}
 8003556:	b08e      	sub	sp, #56	@ 0x38
 8003558:	af04      	add	r7, sp, #16
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003560:	2300      	movs	r3, #0
 8003562:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003564:	f3ef 8305 	mrs	r3, IPSR
 8003568:	617b      	str	r3, [r7, #20]
  return(result);
 800356a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800356c:	2b00      	cmp	r3, #0
 800356e:	d17e      	bne.n	800366e <osThreadNew+0x11a>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d07b      	beq.n	800366e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003576:	2380      	movs	r3, #128	@ 0x80
 8003578:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800357a:	2318      	movs	r3, #24
 800357c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800357e:	2300      	movs	r3, #0
 8003580:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003582:	f04f 33ff 	mov.w	r3, #4294967295
 8003586:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d045      	beq.n	800361a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <osThreadNew+0x48>
        name = attr->name;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <osThreadNew+0x6e>
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	2b38      	cmp	r3, #56	@ 0x38
 80035b4:	d805      	bhi.n	80035c2 <osThreadNew+0x6e>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <osThreadNew+0x72>
        return (NULL);
 80035c2:	2300      	movs	r3, #0
 80035c4:	e054      	b.n	8003670 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	089b      	lsrs	r3, r3, #2
 80035d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00e      	beq.n	80035fc <osThreadNew+0xa8>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	2b5b      	cmp	r3, #91	@ 0x5b
 80035e4:	d90a      	bls.n	80035fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d006      	beq.n	80035fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <osThreadNew+0xa8>
        mem = 1;
 80035f6:	2301      	movs	r3, #1
 80035f8:	61bb      	str	r3, [r7, #24]
 80035fa:	e010      	b.n	800361e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10c      	bne.n	800361e <osThreadNew+0xca>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d108      	bne.n	800361e <osThreadNew+0xca>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d104      	bne.n	800361e <osThreadNew+0xca>
          mem = 0;
 8003614:	2300      	movs	r3, #0
 8003616:	61bb      	str	r3, [r7, #24]
 8003618:	e001      	b.n	800361e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800361a:	2300      	movs	r3, #0
 800361c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d110      	bne.n	8003646 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800362c:	9202      	str	r2, [sp, #8]
 800362e:	9301      	str	r3, [sp, #4]
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	6a3a      	ldr	r2, [r7, #32]
 8003638:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f001 fa6a 	bl	8004b14 <xTaskCreateStatic>
 8003640:	4603      	mov	r3, r0
 8003642:	613b      	str	r3, [r7, #16]
 8003644:	e013      	b.n	800366e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d110      	bne.n	800366e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	b29a      	uxth	r2, r3
 8003650:	f107 0310 	add.w	r3, r7, #16
 8003654:	9301      	str	r3, [sp, #4]
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f001 fab8 	bl	8004bd4 <xTaskCreate>
 8003664:	4603      	mov	r3, r0
 8003666:	2b01      	cmp	r3, #1
 8003668:	d001      	beq.n	800366e <osThreadNew+0x11a>
            hTask = NULL;
 800366a:	2300      	movs	r3, #0
 800366c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800366e:	693b      	ldr	r3, [r7, #16]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3728      	adds	r7, #40	@ 0x28
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003680:	f3ef 8305 	mrs	r3, IPSR
 8003684:	60bb      	str	r3, [r7, #8]
  return(result);
 8003686:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <osDelay+0x1c>
    stat = osErrorISR;
 800368c:	f06f 0305 	mvn.w	r3, #5
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	e007      	b.n	80036a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f001 fbde 	bl	8004e60 <vTaskDelay>
    }
  }

  return (stat);
 80036a4:	68fb      	ldr	r3, [r7, #12]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b08a      	sub	sp, #40	@ 0x28
 80036b2:	af02      	add	r7, sp, #8
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036be:	f3ef 8305 	mrs	r3, IPSR
 80036c2:	613b      	str	r3, [r7, #16]
  return(result);
 80036c4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d175      	bne.n	80037b6 <osSemaphoreNew+0x108>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d072      	beq.n	80037b6 <osSemaphoreNew+0x108>
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d86e      	bhi.n	80037b6 <osSemaphoreNew+0x108>
    mem = -1;
 80036d8:	f04f 33ff 	mov.w	r3, #4294967295
 80036dc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d015      	beq.n	8003710 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d006      	beq.n	80036fa <osSemaphoreNew+0x4c>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	2b4f      	cmp	r3, #79	@ 0x4f
 80036f2:	d902      	bls.n	80036fa <osSemaphoreNew+0x4c>
        mem = 1;
 80036f4:	2301      	movs	r3, #1
 80036f6:	61bb      	str	r3, [r7, #24]
 80036f8:	e00c      	b.n	8003714 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d108      	bne.n	8003714 <osSemaphoreNew+0x66>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d104      	bne.n	8003714 <osSemaphoreNew+0x66>
          mem = 0;
 800370a:	2300      	movs	r3, #0
 800370c:	61bb      	str	r3, [r7, #24]
 800370e:	e001      	b.n	8003714 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371a:	d04c      	beq.n	80037b6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d128      	bne.n	8003774 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d10a      	bne.n	800373e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	2203      	movs	r2, #3
 800372e:	9200      	str	r2, [sp, #0]
 8003730:	2200      	movs	r2, #0
 8003732:	2100      	movs	r1, #0
 8003734:	2001      	movs	r0, #1
 8003736:	f000 fa2b 	bl	8003b90 <xQueueGenericCreateStatic>
 800373a:	61f8      	str	r0, [r7, #28]
 800373c:	e005      	b.n	800374a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800373e:	2203      	movs	r2, #3
 8003740:	2100      	movs	r1, #0
 8003742:	2001      	movs	r0, #1
 8003744:	f000 faa1 	bl	8003c8a <xQueueGenericCreate>
 8003748:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d022      	beq.n	8003796 <osSemaphoreNew+0xe8>
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d01f      	beq.n	8003796 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003756:	2300      	movs	r3, #0
 8003758:	2200      	movs	r2, #0
 800375a:	2100      	movs	r1, #0
 800375c:	69f8      	ldr	r0, [r7, #28]
 800375e:	f000 fb61 	bl	8003e24 <xQueueGenericSend>
 8003762:	4603      	mov	r3, r0
 8003764:	2b01      	cmp	r3, #1
 8003766:	d016      	beq.n	8003796 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003768:	69f8      	ldr	r0, [r7, #28]
 800376a:	f000 ffff 	bl	800476c <vQueueDelete>
            hSemaphore = NULL;
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	e010      	b.n	8003796 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d108      	bne.n	800378c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	461a      	mov	r2, r3
 8003780:	68b9      	ldr	r1, [r7, #8]
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 fadf 	bl	8003d46 <xQueueCreateCountingSemaphoreStatic>
 8003788:	61f8      	str	r0, [r7, #28]
 800378a:	e004      	b.n	8003796 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800378c:	68b9      	ldr	r1, [r7, #8]
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 fb12 	bl	8003db8 <xQueueCreateCountingSemaphore>
 8003794:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00c      	beq.n	80037b6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <osSemaphoreNew+0xfc>
          name = attr->name;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	e001      	b.n	80037ae <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80037ae:	6979      	ldr	r1, [r7, #20]
 80037b0:	69f8      	ldr	r0, [r7, #28]
 80037b2:	f001 f927 	bl	8004a04 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80037b6:	69fb      	ldr	r3, [r7, #28]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3720      	adds	r7, #32
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d103      	bne.n	80037e0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80037d8:	f06f 0303 	mvn.w	r3, #3
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	e039      	b.n	8003854 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037e0:	f3ef 8305 	mrs	r3, IPSR
 80037e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80037e6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d022      	beq.n	8003832 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80037f2:	f06f 0303 	mvn.w	r3, #3
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	e02c      	b.n	8003854 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80037fe:	f107 0308 	add.w	r3, r7, #8
 8003802:	461a      	mov	r2, r3
 8003804:	2100      	movs	r1, #0
 8003806:	6938      	ldr	r0, [r7, #16]
 8003808:	f000 ff2e 	bl	8004668 <xQueueReceiveFromISR>
 800380c:	4603      	mov	r3, r0
 800380e:	2b01      	cmp	r3, #1
 8003810:	d003      	beq.n	800381a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8003812:	f06f 0302 	mvn.w	r3, #2
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	e01c      	b.n	8003854 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d019      	beq.n	8003854 <osSemaphoreAcquire+0x94>
 8003820:	4b0f      	ldr	r3, [pc, #60]	@ (8003860 <osSemaphoreAcquire+0xa0>)
 8003822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	f3bf 8f6f 	isb	sy
 8003830:	e010      	b.n	8003854 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003832:	6839      	ldr	r1, [r7, #0]
 8003834:	6938      	ldr	r0, [r7, #16]
 8003836:	f000 fe07 	bl	8004448 <xQueueSemaphoreTake>
 800383a:	4603      	mov	r3, r0
 800383c:	2b01      	cmp	r3, #1
 800383e:	d009      	beq.n	8003854 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8003846:	f06f 0301 	mvn.w	r3, #1
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	e002      	b.n	8003854 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800384e:	f06f 0302 	mvn.w	r3, #2
 8003852:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003854:	697b      	ldr	r3, [r7, #20]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	e000ed04 	.word	0xe000ed04

08003864 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d103      	bne.n	8003882 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800387a:	f06f 0303 	mvn.w	r3, #3
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	e02c      	b.n	80038dc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003882:	f3ef 8305 	mrs	r3, IPSR
 8003886:	60fb      	str	r3, [r7, #12]
  return(result);
 8003888:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800388a:	2b00      	cmp	r3, #0
 800388c:	d01a      	beq.n	80038c4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800388e:	2300      	movs	r3, #0
 8003890:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003892:	f107 0308 	add.w	r3, r7, #8
 8003896:	4619      	mov	r1, r3
 8003898:	6938      	ldr	r0, [r7, #16]
 800389a:	f000 fc63 	bl	8004164 <xQueueGiveFromISR>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d003      	beq.n	80038ac <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80038a4:	f06f 0302 	mvn.w	r3, #2
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	e017      	b.n	80038dc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d014      	beq.n	80038dc <osSemaphoreRelease+0x78>
 80038b2:	4b0d      	ldr	r3, [pc, #52]	@ (80038e8 <osSemaphoreRelease+0x84>)
 80038b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	f3bf 8f4f 	dsb	sy
 80038be:	f3bf 8f6f 	isb	sy
 80038c2:	e00b      	b.n	80038dc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80038c4:	2300      	movs	r3, #0
 80038c6:	2200      	movs	r2, #0
 80038c8:	2100      	movs	r1, #0
 80038ca:	6938      	ldr	r0, [r7, #16]
 80038cc:	f000 faaa 	bl	8003e24 <xQueueGenericSend>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d002      	beq.n	80038dc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80038d6:	f06f 0302 	mvn.w	r3, #2
 80038da:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80038dc:	697b      	ldr	r3, [r7, #20]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	e000ed04 	.word	0xe000ed04

080038ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4a07      	ldr	r2, [pc, #28]	@ (8003918 <vApplicationGetIdleTaskMemory+0x2c>)
 80038fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	4a06      	ldr	r2, [pc, #24]	@ (800391c <vApplicationGetIdleTaskMemory+0x30>)
 8003902:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2280      	movs	r2, #128	@ 0x80
 8003908:	601a      	str	r2, [r3, #0]
}
 800390a:	bf00      	nop
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	20000178 	.word	0x20000178
 800391c:	200001d4 	.word	0x200001d4

08003920 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4a07      	ldr	r2, [pc, #28]	@ (800394c <vApplicationGetTimerTaskMemory+0x2c>)
 8003930:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	4a06      	ldr	r2, [pc, #24]	@ (8003950 <vApplicationGetTimerTaskMemory+0x30>)
 8003936:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800393e:	601a      	str	r2, [r3, #0]
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	200003d4 	.word	0x200003d4
 8003950:	20000430 	.word	0x20000430

08003954 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f103 0208 	add.w	r2, r3, #8
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f04f 32ff 	mov.w	r2, #4294967295
 800396c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f103 0208 	add.w	r2, r3, #8
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f103 0208 	add.w	r2, r3, #8
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039ae:	b480      	push	{r7}
 80039b0:	b085      	sub	sp, #20
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	601a      	str	r2, [r3, #0]
}
 80039ea:	bf00      	nop
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039f6:	b480      	push	{r7}
 80039f8:	b085      	sub	sp, #20
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0c:	d103      	bne.n	8003a16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	e00c      	b.n	8003a30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3308      	adds	r3, #8
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	e002      	b.n	8003a24 <vListInsert+0x2e>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d2f6      	bcs.n	8003a1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	601a      	str	r2, [r3, #0]
}
 8003a5c:	bf00      	nop
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6892      	ldr	r2, [r2, #8]
 8003a7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6852      	ldr	r2, [r2, #4]
 8003a88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d103      	bne.n	8003a9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	1e5a      	subs	r2, r3, #1
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10b      	bne.n	8003ae8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad4:	f383 8811 	msr	BASEPRI, r3
 8003ad8:	f3bf 8f6f 	isb	sy
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ae2:	bf00      	nop
 8003ae4:	bf00      	nop
 8003ae6:	e7fd      	b.n	8003ae4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003ae8:	f002 fcae 	bl	8006448 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af4:	68f9      	ldr	r1, [r7, #12]
 8003af6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003af8:	fb01 f303 	mul.w	r3, r1, r3
 8003afc:	441a      	add	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	68f9      	ldr	r1, [r7, #12]
 8003b1c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003b1e:	fb01 f303 	mul.w	r3, r1, r3
 8003b22:	441a      	add	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	22ff      	movs	r2, #255	@ 0xff
 8003b2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	22ff      	movs	r2, #255	@ 0xff
 8003b34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d114      	bne.n	8003b68 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d01a      	beq.n	8003b7c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	3310      	adds	r3, #16
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f001 fc4c 	bl	80053e8 <xTaskRemoveFromEventList>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d012      	beq.n	8003b7c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003b56:	4b0d      	ldr	r3, [pc, #52]	@ (8003b8c <xQueueGenericReset+0xd0>)
 8003b58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	f3bf 8f6f 	isb	sy
 8003b66:	e009      	b.n	8003b7c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	3310      	adds	r3, #16
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff fef1 	bl	8003954 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	3324      	adds	r3, #36	@ 0x24
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff feec 	bl	8003954 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003b7c:	f002 fc96 	bl	80064ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003b80:	2301      	movs	r3, #1
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	e000ed04 	.word	0xe000ed04

08003b90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08e      	sub	sp, #56	@ 0x38
 8003b94:	af02      	add	r7, sp, #8
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10b      	bne.n	8003bbc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba8:	f383 8811 	msr	BASEPRI, r3
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003bb6:	bf00      	nop
 8003bb8:	bf00      	nop
 8003bba:	e7fd      	b.n	8003bb8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10b      	bne.n	8003bda <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc6:	f383 8811 	msr	BASEPRI, r3
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop
 8003bd8:	e7fd      	b.n	8003bd6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <xQueueGenericCreateStatic+0x56>
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <xQueueGenericCreateStatic+0x5a>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <xQueueGenericCreateStatic+0x5c>
 8003bea:	2300      	movs	r3, #0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10b      	bne.n	8003c08 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf4:	f383 8811 	msr	BASEPRI, r3
 8003bf8:	f3bf 8f6f 	isb	sy
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	623b      	str	r3, [r7, #32]
}
 8003c02:	bf00      	nop
 8003c04:	bf00      	nop
 8003c06:	e7fd      	b.n	8003c04 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d102      	bne.n	8003c14 <xQueueGenericCreateStatic+0x84>
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <xQueueGenericCreateStatic+0x88>
 8003c14:	2301      	movs	r3, #1
 8003c16:	e000      	b.n	8003c1a <xQueueGenericCreateStatic+0x8a>
 8003c18:	2300      	movs	r3, #0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10b      	bne.n	8003c36 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	61fb      	str	r3, [r7, #28]
}
 8003c30:	bf00      	nop
 8003c32:	bf00      	nop
 8003c34:	e7fd      	b.n	8003c32 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003c36:	2350      	movs	r3, #80	@ 0x50
 8003c38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b50      	cmp	r3, #80	@ 0x50
 8003c3e:	d00b      	beq.n	8003c58 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	61bb      	str	r3, [r7, #24]
}
 8003c52:	bf00      	nop
 8003c54:	bf00      	nop
 8003c56:	e7fd      	b.n	8003c54 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003c58:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00d      	beq.n	8003c80 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c6c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	4613      	mov	r3, r2
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	68b9      	ldr	r1, [r7, #8]
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f840 	bl	8003d00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3730      	adds	r7, #48	@ 0x30
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b08a      	sub	sp, #40	@ 0x28
 8003c8e:	af02      	add	r7, sp, #8
 8003c90:	60f8      	str	r0, [r7, #12]
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	4613      	mov	r3, r2
 8003c96:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10b      	bne.n	8003cb6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	613b      	str	r3, [r7, #16]
}
 8003cb0:	bf00      	nop
 8003cb2:	bf00      	nop
 8003cb4:	e7fd      	b.n	8003cb2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	fb02 f303 	mul.w	r3, r2, r3
 8003cbe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	3350      	adds	r3, #80	@ 0x50
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f002 fce1 	bl	800668c <pvPortMalloc>
 8003cca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d011      	beq.n	8003cf6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	3350      	adds	r3, #80	@ 0x50
 8003cda:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ce4:	79fa      	ldrb	r2, [r7, #7]
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	4613      	mov	r3, r2
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	68b9      	ldr	r1, [r7, #8]
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 f805 	bl	8003d00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003cf6:	69bb      	ldr	r3, [r7, #24]
	}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3720      	adds	r7, #32
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d103      	bne.n	8003d1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	e002      	b.n	8003d22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d2e:	2101      	movs	r1, #1
 8003d30:	69b8      	ldr	r0, [r7, #24]
 8003d32:	f7ff fec3 	bl	8003abc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	78fa      	ldrb	r2, [r7, #3]
 8003d3a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d3e:	bf00      	nop
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b08a      	sub	sp, #40	@ 0x28
 8003d4a:	af02      	add	r7, sp, #8
 8003d4c:	60f8      	str	r0, [r7, #12]
 8003d4e:	60b9      	str	r1, [r7, #8]
 8003d50:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10b      	bne.n	8003d70 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8003d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	61bb      	str	r3, [r7, #24]
}
 8003d6a:	bf00      	nop
 8003d6c:	bf00      	nop
 8003d6e:	e7fd      	b.n	8003d6c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d90b      	bls.n	8003d90 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8003d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	617b      	str	r3, [r7, #20]
}
 8003d8a:	bf00      	nop
 8003d8c:	bf00      	nop
 8003d8e:	e7fd      	b.n	8003d8c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003d90:	2302      	movs	r3, #2
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	2100      	movs	r1, #0
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f7ff fef8 	bl	8003b90 <xQueueGenericCreateStatic>
 8003da0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003dae:	69fb      	ldr	r3, [r7, #28]
	}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3720      	adds	r7, #32
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10b      	bne.n	8003de0 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8003dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dcc:	f383 8811 	msr	BASEPRI, r3
 8003dd0:	f3bf 8f6f 	isb	sy
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	613b      	str	r3, [r7, #16]
}
 8003dda:	bf00      	nop
 8003ddc:	bf00      	nop
 8003dde:	e7fd      	b.n	8003ddc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d90b      	bls.n	8003e00 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8003de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	60fb      	str	r3, [r7, #12]
}
 8003dfa:	bf00      	nop
 8003dfc:	bf00      	nop
 8003dfe:	e7fd      	b.n	8003dfc <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003e00:	2202      	movs	r2, #2
 8003e02:	2100      	movs	r1, #0
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7ff ff40 	bl	8003c8a <xQueueGenericCreate>
 8003e0a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003e18:	697b      	ldr	r3, [r7, #20]
	}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b08e      	sub	sp, #56	@ 0x38
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
 8003e30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e32:	2300      	movs	r3, #0
 8003e34:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10b      	bne.n	8003e58 <xQueueGenericSend+0x34>
	__asm volatile
 8003e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003e52:	bf00      	nop
 8003e54:	bf00      	nop
 8003e56:	e7fd      	b.n	8003e54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d103      	bne.n	8003e66 <xQueueGenericSend+0x42>
 8003e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <xQueueGenericSend+0x46>
 8003e66:	2301      	movs	r3, #1
 8003e68:	e000      	b.n	8003e6c <xQueueGenericSend+0x48>
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10b      	bne.n	8003e88 <xQueueGenericSend+0x64>
	__asm volatile
 8003e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e74:	f383 8811 	msr	BASEPRI, r3
 8003e78:	f3bf 8f6f 	isb	sy
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003e82:	bf00      	nop
 8003e84:	bf00      	nop
 8003e86:	e7fd      	b.n	8003e84 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d103      	bne.n	8003e96 <xQueueGenericSend+0x72>
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <xQueueGenericSend+0x76>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <xQueueGenericSend+0x78>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10b      	bne.n	8003eb8 <xQueueGenericSend+0x94>
	__asm volatile
 8003ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	623b      	str	r3, [r7, #32]
}
 8003eb2:	bf00      	nop
 8003eb4:	bf00      	nop
 8003eb6:	e7fd      	b.n	8003eb4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003eb8:	f001 fc56 	bl	8005768 <xTaskGetSchedulerState>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d102      	bne.n	8003ec8 <xQueueGenericSend+0xa4>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <xQueueGenericSend+0xa8>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <xQueueGenericSend+0xaa>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10b      	bne.n	8003eea <xQueueGenericSend+0xc6>
	__asm volatile
 8003ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed6:	f383 8811 	msr	BASEPRI, r3
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	61fb      	str	r3, [r7, #28]
}
 8003ee4:	bf00      	nop
 8003ee6:	bf00      	nop
 8003ee8:	e7fd      	b.n	8003ee6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003eea:	f002 faad 	bl	8006448 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d302      	bcc.n	8003f00 <xQueueGenericSend+0xdc>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d129      	bne.n	8003f54 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	68b9      	ldr	r1, [r7, #8]
 8003f04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f06:	f000 fc6d 	bl	80047e4 <prvCopyDataToQueue>
 8003f0a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d010      	beq.n	8003f36 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f16:	3324      	adds	r3, #36	@ 0x24
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f001 fa65 	bl	80053e8 <xTaskRemoveFromEventList>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d013      	beq.n	8003f4c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f24:	4b3f      	ldr	r3, [pc, #252]	@ (8004024 <xQueueGenericSend+0x200>)
 8003f26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	f3bf 8f6f 	isb	sy
 8003f34:	e00a      	b.n	8003f4c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d007      	beq.n	8003f4c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003f3c:	4b39      	ldr	r3, [pc, #228]	@ (8004024 <xQueueGenericSend+0x200>)
 8003f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003f4c:	f002 faae 	bl	80064ac <vPortExitCritical>
				return pdPASS;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e063      	b.n	800401c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d103      	bne.n	8003f62 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f5a:	f002 faa7 	bl	80064ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	e05c      	b.n	800401c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d106      	bne.n	8003f76 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f68:	f107 0314 	add.w	r3, r7, #20
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f001 fa9f 	bl	80054b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f72:	2301      	movs	r3, #1
 8003f74:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f76:	f002 fa99 	bl	80064ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f7a:	f001 f80f 	bl	8004f9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f7e:	f002 fa63 	bl	8006448 <vPortEnterCritical>
 8003f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f88:	b25b      	sxtb	r3, r3
 8003f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8e:	d103      	bne.n	8003f98 <xQueueGenericSend+0x174>
 8003f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f9e:	b25b      	sxtb	r3, r3
 8003fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa4:	d103      	bne.n	8003fae <xQueueGenericSend+0x18a>
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fae:	f002 fa7d 	bl	80064ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fb2:	1d3a      	adds	r2, r7, #4
 8003fb4:	f107 0314 	add.w	r3, r7, #20
 8003fb8:	4611      	mov	r1, r2
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f001 fa8e 	bl	80054dc <xTaskCheckForTimeOut>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d124      	bne.n	8004010 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003fc6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003fc8:	f000 fd04 	bl	80049d4 <prvIsQueueFull>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d018      	beq.n	8004004 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd4:	3310      	adds	r3, #16
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	4611      	mov	r1, r2
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f001 f9b2 	bl	8005344 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003fe0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003fe2:	f000 fc8f 	bl	8004904 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003fe6:	f000 ffe7 	bl	8004fb8 <xTaskResumeAll>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f47f af7c 	bne.w	8003eea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8004024 <xQueueGenericSend+0x200>)
 8003ff4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	f3bf 8f6f 	isb	sy
 8004002:	e772      	b.n	8003eea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004004:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004006:	f000 fc7d 	bl	8004904 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800400a:	f000 ffd5 	bl	8004fb8 <xTaskResumeAll>
 800400e:	e76c      	b.n	8003eea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004010:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004012:	f000 fc77 	bl	8004904 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004016:	f000 ffcf 	bl	8004fb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800401a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800401c:	4618      	mov	r0, r3
 800401e:	3738      	adds	r7, #56	@ 0x38
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	e000ed04 	.word	0xe000ed04

08004028 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b090      	sub	sp, #64	@ 0x40
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800403a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10b      	bne.n	8004058 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004052:	bf00      	nop
 8004054:	bf00      	nop
 8004056:	e7fd      	b.n	8004054 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d103      	bne.n	8004066 <xQueueGenericSendFromISR+0x3e>
 800405e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <xQueueGenericSendFromISR+0x42>
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <xQueueGenericSendFromISR+0x44>
 800406a:	2300      	movs	r3, #0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10b      	bne.n	8004088 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004074:	f383 8811 	msr	BASEPRI, r3
 8004078:	f3bf 8f6f 	isb	sy
 800407c:	f3bf 8f4f 	dsb	sy
 8004080:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004082:	bf00      	nop
 8004084:	bf00      	nop
 8004086:	e7fd      	b.n	8004084 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d103      	bne.n	8004096 <xQueueGenericSendFromISR+0x6e>
 800408e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <xQueueGenericSendFromISR+0x72>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <xQueueGenericSendFromISR+0x74>
 800409a:	2300      	movs	r3, #0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10b      	bne.n	80040b8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80040a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	623b      	str	r3, [r7, #32]
}
 80040b2:	bf00      	nop
 80040b4:	bf00      	nop
 80040b6:	e7fd      	b.n	80040b4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040b8:	f002 faa6 	bl	8006608 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80040bc:	f3ef 8211 	mrs	r2, BASEPRI
 80040c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	61fa      	str	r2, [r7, #28]
 80040d2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80040d4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040d6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d302      	bcc.n	80040ea <xQueueGenericSendFromISR+0xc2>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d12f      	bne.n	800414a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80040ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80040f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	68b9      	ldr	r1, [r7, #8]
 80040fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004100:	f000 fb70 	bl	80047e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004104:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410c:	d112      	bne.n	8004134 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800410e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004112:	2b00      	cmp	r3, #0
 8004114:	d016      	beq.n	8004144 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004118:	3324      	adds	r3, #36	@ 0x24
 800411a:	4618      	mov	r0, r3
 800411c:	f001 f964 	bl	80053e8 <xTaskRemoveFromEventList>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00e      	beq.n	8004144 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00b      	beq.n	8004144 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	e007      	b.n	8004144 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004134:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004138:	3301      	adds	r3, #1
 800413a:	b2db      	uxtb	r3, r3
 800413c:	b25a      	sxtb	r2, r3
 800413e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004140:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004144:	2301      	movs	r3, #1
 8004146:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004148:	e001      	b.n	800414e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800414a:	2300      	movs	r3, #0
 800414c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800414e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004150:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004158:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800415a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800415c:	4618      	mov	r0, r3
 800415e:	3740      	adds	r7, #64	@ 0x40
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08e      	sub	sp, #56	@ 0x38
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10b      	bne.n	8004190 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8004178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800417c:	f383 8811 	msr	BASEPRI, r3
 8004180:	f3bf 8f6f 	isb	sy
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	623b      	str	r3, [r7, #32]
}
 800418a:	bf00      	nop
 800418c:	bf00      	nop
 800418e:	e7fd      	b.n	800418c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00b      	beq.n	80041b0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	61fb      	str	r3, [r7, #28]
}
 80041aa:	bf00      	nop
 80041ac:	bf00      	nop
 80041ae:	e7fd      	b.n	80041ac <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80041b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d103      	bne.n	80041c0 <xQueueGiveFromISR+0x5c>
 80041b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <xQueueGiveFromISR+0x60>
 80041c0:	2301      	movs	r3, #1
 80041c2:	e000      	b.n	80041c6 <xQueueGiveFromISR+0x62>
 80041c4:	2300      	movs	r3, #0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10b      	bne.n	80041e2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80041ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	61bb      	str	r3, [r7, #24]
}
 80041dc:	bf00      	nop
 80041de:	bf00      	nop
 80041e0:	e7fd      	b.n	80041de <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80041e2:	f002 fa11 	bl	8006608 <vPortValidateInterruptPriority>
	__asm volatile
 80041e6:	f3ef 8211 	mrs	r2, BASEPRI
 80041ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ee:	f383 8811 	msr	BASEPRI, r3
 80041f2:	f3bf 8f6f 	isb	sy
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	617a      	str	r2, [r7, #20]
 80041fc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80041fe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004200:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004206:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800420c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800420e:	429a      	cmp	r2, r3
 8004210:	d22b      	bcs.n	800426a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004214:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004218:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800421c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004222:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004224:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422c:	d112      	bne.n	8004254 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800422e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004232:	2b00      	cmp	r3, #0
 8004234:	d016      	beq.n	8004264 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004238:	3324      	adds	r3, #36	@ 0x24
 800423a:	4618      	mov	r0, r3
 800423c:	f001 f8d4 	bl	80053e8 <xTaskRemoveFromEventList>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00e      	beq.n	8004264 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00b      	beq.n	8004264 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2201      	movs	r2, #1
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	e007      	b.n	8004264 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004254:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004258:	3301      	adds	r3, #1
 800425a:	b2db      	uxtb	r3, r3
 800425c:	b25a      	sxtb	r2, r3
 800425e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004260:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004264:	2301      	movs	r3, #1
 8004266:	637b      	str	r3, [r7, #52]	@ 0x34
 8004268:	e001      	b.n	800426e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800426a:	2300      	movs	r3, #0
 800426c:	637b      	str	r3, [r7, #52]	@ 0x34
 800426e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004270:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f383 8811 	msr	BASEPRI, r3
}
 8004278:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800427a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800427c:	4618      	mov	r0, r3
 800427e:	3738      	adds	r7, #56	@ 0x38
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b08c      	sub	sp, #48	@ 0x30
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004290:	2300      	movs	r3, #0
 8004292:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10b      	bne.n	80042b6 <xQueueReceive+0x32>
	__asm volatile
 800429e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	623b      	str	r3, [r7, #32]
}
 80042b0:	bf00      	nop
 80042b2:	bf00      	nop
 80042b4:	e7fd      	b.n	80042b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d103      	bne.n	80042c4 <xQueueReceive+0x40>
 80042bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <xQueueReceive+0x44>
 80042c4:	2301      	movs	r3, #1
 80042c6:	e000      	b.n	80042ca <xQueueReceive+0x46>
 80042c8:	2300      	movs	r3, #0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10b      	bne.n	80042e6 <xQueueReceive+0x62>
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	61fb      	str	r3, [r7, #28]
}
 80042e0:	bf00      	nop
 80042e2:	bf00      	nop
 80042e4:	e7fd      	b.n	80042e2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042e6:	f001 fa3f 	bl	8005768 <xTaskGetSchedulerState>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d102      	bne.n	80042f6 <xQueueReceive+0x72>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <xQueueReceive+0x76>
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <xQueueReceive+0x78>
 80042fa:	2300      	movs	r3, #0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10b      	bne.n	8004318 <xQueueReceive+0x94>
	__asm volatile
 8004300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	61bb      	str	r3, [r7, #24]
}
 8004312:	bf00      	nop
 8004314:	bf00      	nop
 8004316:	e7fd      	b.n	8004314 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004318:	f002 f896 	bl	8006448 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800431c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004320:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	2b00      	cmp	r3, #0
 8004326:	d01f      	beq.n	8004368 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004328:	68b9      	ldr	r1, [r7, #8]
 800432a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800432c:	f000 fac4 	bl	80048b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004332:	1e5a      	subs	r2, r3, #1
 8004334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004336:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00f      	beq.n	8004360 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004342:	3310      	adds	r3, #16
 8004344:	4618      	mov	r0, r3
 8004346:	f001 f84f 	bl	80053e8 <xTaskRemoveFromEventList>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d007      	beq.n	8004360 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004350:	4b3c      	ldr	r3, [pc, #240]	@ (8004444 <xQueueReceive+0x1c0>)
 8004352:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004360:	f002 f8a4 	bl	80064ac <vPortExitCritical>
				return pdPASS;
 8004364:	2301      	movs	r3, #1
 8004366:	e069      	b.n	800443c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d103      	bne.n	8004376 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800436e:	f002 f89d 	bl	80064ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004372:	2300      	movs	r3, #0
 8004374:	e062      	b.n	800443c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004378:	2b00      	cmp	r3, #0
 800437a:	d106      	bne.n	800438a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800437c:	f107 0310 	add.w	r3, r7, #16
 8004380:	4618      	mov	r0, r3
 8004382:	f001 f895 	bl	80054b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004386:	2301      	movs	r3, #1
 8004388:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800438a:	f002 f88f 	bl	80064ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800438e:	f000 fe05 	bl	8004f9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004392:	f002 f859 	bl	8006448 <vPortEnterCritical>
 8004396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004398:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800439c:	b25b      	sxtb	r3, r3
 800439e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a2:	d103      	bne.n	80043ac <xQueueReceive+0x128>
 80043a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043b2:	b25b      	sxtb	r3, r3
 80043b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b8:	d103      	bne.n	80043c2 <xQueueReceive+0x13e>
 80043ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043c2:	f002 f873 	bl	80064ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043c6:	1d3a      	adds	r2, r7, #4
 80043c8:	f107 0310 	add.w	r3, r7, #16
 80043cc:	4611      	mov	r1, r2
 80043ce:	4618      	mov	r0, r3
 80043d0:	f001 f884 	bl	80054dc <xTaskCheckForTimeOut>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d123      	bne.n	8004422 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043dc:	f000 fae4 	bl	80049a8 <prvIsQueueEmpty>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d017      	beq.n	8004416 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80043e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e8:	3324      	adds	r3, #36	@ 0x24
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	4611      	mov	r1, r2
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 ffa8 	bl	8005344 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043f6:	f000 fa85 	bl	8004904 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043fa:	f000 fddd 	bl	8004fb8 <xTaskResumeAll>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d189      	bne.n	8004318 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004404:	4b0f      	ldr	r3, [pc, #60]	@ (8004444 <xQueueReceive+0x1c0>)
 8004406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	e780      	b.n	8004318 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004416:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004418:	f000 fa74 	bl	8004904 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800441c:	f000 fdcc 	bl	8004fb8 <xTaskResumeAll>
 8004420:	e77a      	b.n	8004318 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004422:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004424:	f000 fa6e 	bl	8004904 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004428:	f000 fdc6 	bl	8004fb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800442c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800442e:	f000 fabb 	bl	80049a8 <prvIsQueueEmpty>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	f43f af6f 	beq.w	8004318 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800443a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800443c:	4618      	mov	r0, r3
 800443e:	3730      	adds	r7, #48	@ 0x30
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	e000ed04 	.word	0xe000ed04

08004448 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08e      	sub	sp, #56	@ 0x38
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004452:	2300      	movs	r3, #0
 8004454:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800445a:	2300      	movs	r3, #0
 800445c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800445e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10b      	bne.n	800447c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	623b      	str	r3, [r7, #32]
}
 8004476:	bf00      	nop
 8004478:	bf00      	nop
 800447a:	e7fd      	b.n	8004478 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800447c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800447e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00b      	beq.n	800449c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	61fb      	str	r3, [r7, #28]
}
 8004496:	bf00      	nop
 8004498:	bf00      	nop
 800449a:	e7fd      	b.n	8004498 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800449c:	f001 f964 	bl	8005768 <xTaskGetSchedulerState>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d102      	bne.n	80044ac <xQueueSemaphoreTake+0x64>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <xQueueSemaphoreTake+0x68>
 80044ac:	2301      	movs	r3, #1
 80044ae:	e000      	b.n	80044b2 <xQueueSemaphoreTake+0x6a>
 80044b0:	2300      	movs	r3, #0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10b      	bne.n	80044ce <xQueueSemaphoreTake+0x86>
	__asm volatile
 80044b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ba:	f383 8811 	msr	BASEPRI, r3
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	61bb      	str	r3, [r7, #24]
}
 80044c8:	bf00      	nop
 80044ca:	bf00      	nop
 80044cc:	e7fd      	b.n	80044ca <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044ce:	f001 ffbb 	bl	8006448 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80044d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80044d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d024      	beq.n	8004528 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80044de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e0:	1e5a      	subs	r2, r3, #1
 80044e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044e4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80044e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d104      	bne.n	80044f8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80044ee:	f001 fab5 	bl	8005a5c <pvTaskIncrementMutexHeldCount>
 80044f2:	4602      	mov	r2, r0
 80044f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044f6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00f      	beq.n	8004520 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004502:	3310      	adds	r3, #16
 8004504:	4618      	mov	r0, r3
 8004506:	f000 ff6f 	bl	80053e8 <xTaskRemoveFromEventList>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d007      	beq.n	8004520 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004510:	4b54      	ldr	r3, [pc, #336]	@ (8004664 <xQueueSemaphoreTake+0x21c>)
 8004512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004520:	f001 ffc4 	bl	80064ac <vPortExitCritical>
				return pdPASS;
 8004524:	2301      	movs	r3, #1
 8004526:	e098      	b.n	800465a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d112      	bne.n	8004554 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800452e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00b      	beq.n	800454c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	617b      	str	r3, [r7, #20]
}
 8004546:	bf00      	nop
 8004548:	bf00      	nop
 800454a:	e7fd      	b.n	8004548 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800454c:	f001 ffae 	bl	80064ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004550:	2300      	movs	r3, #0
 8004552:	e082      	b.n	800465a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004556:	2b00      	cmp	r3, #0
 8004558:	d106      	bne.n	8004568 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800455a:	f107 030c 	add.w	r3, r7, #12
 800455e:	4618      	mov	r0, r3
 8004560:	f000 ffa6 	bl	80054b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004564:	2301      	movs	r3, #1
 8004566:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004568:	f001 ffa0 	bl	80064ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800456c:	f000 fd16 	bl	8004f9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004570:	f001 ff6a 	bl	8006448 <vPortEnterCritical>
 8004574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004576:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800457a:	b25b      	sxtb	r3, r3
 800457c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004580:	d103      	bne.n	800458a <xQueueSemaphoreTake+0x142>
 8004582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800458a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800458c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004590:	b25b      	sxtb	r3, r3
 8004592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004596:	d103      	bne.n	80045a0 <xQueueSemaphoreTake+0x158>
 8004598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045a0:	f001 ff84 	bl	80064ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045a4:	463a      	mov	r2, r7
 80045a6:	f107 030c 	add.w	r3, r7, #12
 80045aa:	4611      	mov	r1, r2
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 ff95 	bl	80054dc <xTaskCheckForTimeOut>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d132      	bne.n	800461e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80045ba:	f000 f9f5 	bl	80049a8 <prvIsQueueEmpty>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d026      	beq.n	8004612 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d109      	bne.n	80045e0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80045cc:	f001 ff3c 	bl	8006448 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80045d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f001 f8e5 	bl	80057a4 <xTaskPriorityInherit>
 80045da:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80045dc:	f001 ff66 	bl	80064ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e2:	3324      	adds	r3, #36	@ 0x24
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	4611      	mov	r1, r2
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 feab 	bl	8005344 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80045f0:	f000 f988 	bl	8004904 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045f4:	f000 fce0 	bl	8004fb8 <xTaskResumeAll>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f47f af67 	bne.w	80044ce <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004600:	4b18      	ldr	r3, [pc, #96]	@ (8004664 <xQueueSemaphoreTake+0x21c>)
 8004602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	e75d      	b.n	80044ce <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004612:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004614:	f000 f976 	bl	8004904 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004618:	f000 fcce 	bl	8004fb8 <xTaskResumeAll>
 800461c:	e757      	b.n	80044ce <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800461e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004620:	f000 f970 	bl	8004904 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004624:	f000 fcc8 	bl	8004fb8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004628:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800462a:	f000 f9bd 	bl	80049a8 <prvIsQueueEmpty>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	f43f af4c 	beq.w	80044ce <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00d      	beq.n	8004658 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800463c:	f001 ff04 	bl	8006448 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004640:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004642:	f000 f8b7 	bl	80047b4 <prvGetDisinheritPriorityAfterTimeout>
 8004646:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800464e:	4618      	mov	r0, r3
 8004650:	f001 f980 	bl	8005954 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004654:	f001 ff2a 	bl	80064ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004658:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800465a:	4618      	mov	r0, r3
 800465c:	3738      	adds	r7, #56	@ 0x38
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	e000ed04 	.word	0xe000ed04

08004668 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08e      	sub	sp, #56	@ 0x38
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10b      	bne.n	8004696 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800467e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	623b      	str	r3, [r7, #32]
}
 8004690:	bf00      	nop
 8004692:	bf00      	nop
 8004694:	e7fd      	b.n	8004692 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d103      	bne.n	80046a4 <xQueueReceiveFromISR+0x3c>
 800469c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <xQueueReceiveFromISR+0x40>
 80046a4:	2301      	movs	r3, #1
 80046a6:	e000      	b.n	80046aa <xQueueReceiveFromISR+0x42>
 80046a8:	2300      	movs	r3, #0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10b      	bne.n	80046c6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80046ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b2:	f383 8811 	msr	BASEPRI, r3
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	61fb      	str	r3, [r7, #28]
}
 80046c0:	bf00      	nop
 80046c2:	bf00      	nop
 80046c4:	e7fd      	b.n	80046c2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80046c6:	f001 ff9f 	bl	8006608 <vPortValidateInterruptPriority>
	__asm volatile
 80046ca:	f3ef 8211 	mrs	r2, BASEPRI
 80046ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	61ba      	str	r2, [r7, #24]
 80046e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80046e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ea:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d02f      	beq.n	8004752 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80046f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004700:	f000 f8da 	bl	80048b8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004706:	1e5a      	subs	r2, r3, #1
 8004708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800470c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004714:	d112      	bne.n	800473c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d016      	beq.n	800474c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800471e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004720:	3310      	adds	r3, #16
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fe60 	bl	80053e8 <xTaskRemoveFromEventList>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00e      	beq.n	800474c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00b      	beq.n	800474c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	e007      	b.n	800474c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800473c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004740:	3301      	adds	r3, #1
 8004742:	b2db      	uxtb	r3, r3
 8004744:	b25a      	sxtb	r2, r3
 8004746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004748:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800474c:	2301      	movs	r3, #1
 800474e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004750:	e001      	b.n	8004756 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004752:	2300      	movs	r3, #0
 8004754:	637b      	str	r3, [r7, #52]	@ 0x34
 8004756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004758:	613b      	str	r3, [r7, #16]
	__asm volatile
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f383 8811 	msr	BASEPRI, r3
}
 8004760:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004764:	4618      	mov	r0, r3
 8004766:	3738      	adds	r7, #56	@ 0x38
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10b      	bne.n	8004796 <vQueueDelete+0x2a>
	__asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	60bb      	str	r3, [r7, #8]
}
 8004790:	bf00      	nop
 8004792:	bf00      	nop
 8004794:	e7fd      	b.n	8004792 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 f95e 	bl	8004a58 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d102      	bne.n	80047ac <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f002 f83e 	bl	8006828 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80047ac:	bf00      	nop
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d006      	beq.n	80047d2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	e001      	b.n	80047d6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80047d6:	68fb      	ldr	r3, [r7, #12]
	}
 80047d8:	4618      	mov	r0, r3
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80047f0:	2300      	movs	r3, #0
 80047f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10d      	bne.n	800481e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d14d      	bne.n	80048a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	4618      	mov	r0, r3
 8004810:	f001 f830 	bl	8005874 <xTaskPriorityDisinherit>
 8004814:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	609a      	str	r2, [r3, #8]
 800481c:	e043      	b.n	80048a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d119      	bne.n	8004858 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6858      	ldr	r0, [r3, #4]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482c:	461a      	mov	r2, r3
 800482e:	68b9      	ldr	r1, [r7, #8]
 8004830:	f002 fb8d 	bl	8006f4e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483c:	441a      	add	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	429a      	cmp	r2, r3
 800484c:	d32b      	bcc.n	80048a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	605a      	str	r2, [r3, #4]
 8004856:	e026      	b.n	80048a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	68d8      	ldr	r0, [r3, #12]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004860:	461a      	mov	r2, r3
 8004862:	68b9      	ldr	r1, [r7, #8]
 8004864:	f002 fb73 	bl	8006f4e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004870:	425b      	negs	r3, r3
 8004872:	441a      	add	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	68da      	ldr	r2, [r3, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d207      	bcs.n	8004894 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488c:	425b      	negs	r3, r3
 800488e:	441a      	add	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b02      	cmp	r3, #2
 8004898:	d105      	bne.n	80048a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80048ae:	697b      	ldr	r3, [r7, #20]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d018      	beq.n	80048fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d2:	441a      	add	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68da      	ldr	r2, [r3, #12]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d303      	bcc.n	80048ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68d9      	ldr	r1, [r3, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f4:	461a      	mov	r2, r3
 80048f6:	6838      	ldr	r0, [r7, #0]
 80048f8:	f002 fb29 	bl	8006f4e <memcpy>
	}
}
 80048fc:	bf00      	nop
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800490c:	f001 fd9c 	bl	8006448 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004916:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004918:	e011      	b.n	800493e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491e:	2b00      	cmp	r3, #0
 8004920:	d012      	beq.n	8004948 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	3324      	adds	r3, #36	@ 0x24
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fd5e 	bl	80053e8 <xTaskRemoveFromEventList>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004932:	f000 fe37 	bl	80055a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004936:	7bfb      	ldrb	r3, [r7, #15]
 8004938:	3b01      	subs	r3, #1
 800493a:	b2db      	uxtb	r3, r3
 800493c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800493e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004942:	2b00      	cmp	r3, #0
 8004944:	dce9      	bgt.n	800491a <prvUnlockQueue+0x16>
 8004946:	e000      	b.n	800494a <prvUnlockQueue+0x46>
					break;
 8004948:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	22ff      	movs	r2, #255	@ 0xff
 800494e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004952:	f001 fdab 	bl	80064ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004956:	f001 fd77 	bl	8006448 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004960:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004962:	e011      	b.n	8004988 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d012      	beq.n	8004992 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3310      	adds	r3, #16
 8004970:	4618      	mov	r0, r3
 8004972:	f000 fd39 	bl	80053e8 <xTaskRemoveFromEventList>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800497c:	f000 fe12 	bl	80055a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004980:	7bbb      	ldrb	r3, [r7, #14]
 8004982:	3b01      	subs	r3, #1
 8004984:	b2db      	uxtb	r3, r3
 8004986:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004988:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800498c:	2b00      	cmp	r3, #0
 800498e:	dce9      	bgt.n	8004964 <prvUnlockQueue+0x60>
 8004990:	e000      	b.n	8004994 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004992:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	22ff      	movs	r2, #255	@ 0xff
 8004998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800499c:	f001 fd86 	bl	80064ac <vPortExitCritical>
}
 80049a0:	bf00      	nop
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049b0:	f001 fd4a 	bl	8006448 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d102      	bne.n	80049c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80049bc:	2301      	movs	r3, #1
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	e001      	b.n	80049c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049c6:	f001 fd71 	bl	80064ac <vPortExitCritical>

	return xReturn;
 80049ca:	68fb      	ldr	r3, [r7, #12]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049dc:	f001 fd34 	bl	8006448 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d102      	bne.n	80049f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80049ec:	2301      	movs	r3, #1
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	e001      	b.n	80049f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80049f2:	2300      	movs	r3, #0
 80049f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049f6:	f001 fd59 	bl	80064ac <vPortExitCritical>

	return xReturn;
 80049fa:	68fb      	ldr	r3, [r7, #12]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	e014      	b.n	8004a3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a14:	4a0f      	ldr	r2, [pc, #60]	@ (8004a54 <vQueueAddToRegistry+0x50>)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10b      	bne.n	8004a38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a20:	490c      	ldr	r1, [pc, #48]	@ (8004a54 <vQueueAddToRegistry+0x50>)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8004a54 <vQueueAddToRegistry+0x50>)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	4413      	add	r3, r2
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a36:	e006      	b.n	8004a46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2b07      	cmp	r3, #7
 8004a42:	d9e7      	bls.n	8004a14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	20000830 	.word	0x20000830

08004a58 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a60:	2300      	movs	r3, #0
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	e016      	b.n	8004a94 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004a66:	4a10      	ldr	r2, [pc, #64]	@ (8004aa8 <vQueueUnregisterQueue+0x50>)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d10b      	bne.n	8004a8e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004a76:	4a0c      	ldr	r2, [pc, #48]	@ (8004aa8 <vQueueUnregisterQueue+0x50>)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004a80:	4a09      	ldr	r2, [pc, #36]	@ (8004aa8 <vQueueUnregisterQueue+0x50>)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	00db      	lsls	r3, r3, #3
 8004a86:	4413      	add	r3, r2
 8004a88:	2200      	movs	r2, #0
 8004a8a:	605a      	str	r2, [r3, #4]
				break;
 8004a8c:	e006      	b.n	8004a9c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	3301      	adds	r3, #1
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b07      	cmp	r3, #7
 8004a98:	d9e5      	bls.n	8004a66 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004a9a:	bf00      	nop
 8004a9c:	bf00      	nop
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	20000830 	.word	0x20000830

08004aac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004abc:	f001 fcc4 	bl	8006448 <vPortEnterCritical>
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ac6:	b25b      	sxtb	r3, r3
 8004ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004acc:	d103      	bne.n	8004ad6 <vQueueWaitForMessageRestricted+0x2a>
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004adc:	b25b      	sxtb	r3, r3
 8004ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae2:	d103      	bne.n	8004aec <vQueueWaitForMessageRestricted+0x40>
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004aec:	f001 fcde 	bl	80064ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d106      	bne.n	8004b06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	3324      	adds	r3, #36	@ 0x24
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	68b9      	ldr	r1, [r7, #8]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fc45 	bl	8005390 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b06:	6978      	ldr	r0, [r7, #20]
 8004b08:	f7ff fefc 	bl	8004904 <prvUnlockQueue>
	}
 8004b0c:	bf00      	nop
 8004b0e:	3718      	adds	r7, #24
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b08e      	sub	sp, #56	@ 0x38
 8004b18:	af04      	add	r7, sp, #16
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
 8004b20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10b      	bne.n	8004b40 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	623b      	str	r3, [r7, #32]
}
 8004b3a:	bf00      	nop
 8004b3c:	bf00      	nop
 8004b3e:	e7fd      	b.n	8004b3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10b      	bne.n	8004b5e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	61fb      	str	r3, [r7, #28]
}
 8004b58:	bf00      	nop
 8004b5a:	bf00      	nop
 8004b5c:	e7fd      	b.n	8004b5a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b5e:	235c      	movs	r3, #92	@ 0x5c
 8004b60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	2b5c      	cmp	r3, #92	@ 0x5c
 8004b66:	d00b      	beq.n	8004b80 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b6c:	f383 8811 	msr	BASEPRI, r3
 8004b70:	f3bf 8f6f 	isb	sy
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	61bb      	str	r3, [r7, #24]
}
 8004b7a:	bf00      	nop
 8004b7c:	bf00      	nop
 8004b7e:	e7fd      	b.n	8004b7c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b80:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d01e      	beq.n	8004bc6 <xTaskCreateStatic+0xb2>
 8004b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d01b      	beq.n	8004bc6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b90:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b96:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	9303      	str	r3, [sp, #12]
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba6:	9302      	str	r3, [sp, #8]
 8004ba8:	f107 0314 	add.w	r3, r7, #20
 8004bac:	9301      	str	r3, [sp, #4]
 8004bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	68b9      	ldr	r1, [r7, #8]
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 f850 	bl	8004c5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bbe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004bc0:	f000 f8de 	bl	8004d80 <prvAddNewTaskToReadyList>
 8004bc4:	e001      	b.n	8004bca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004bca:	697b      	ldr	r3, [r7, #20]
	}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3728      	adds	r7, #40	@ 0x28
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08c      	sub	sp, #48	@ 0x30
 8004bd8:	af04      	add	r7, sp, #16
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	603b      	str	r3, [r7, #0]
 8004be0:	4613      	mov	r3, r2
 8004be2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004be4:	88fb      	ldrh	r3, [r7, #6]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4618      	mov	r0, r3
 8004bea:	f001 fd4f 	bl	800668c <pvPortMalloc>
 8004bee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00e      	beq.n	8004c14 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004bf6:	205c      	movs	r0, #92	@ 0x5c
 8004bf8:	f001 fd48 	bl	800668c <pvPortMalloc>
 8004bfc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d003      	beq.n	8004c0c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c0a:	e005      	b.n	8004c18 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c0c:	6978      	ldr	r0, [r7, #20]
 8004c0e:	f001 fe0b 	bl	8006828 <vPortFree>
 8004c12:	e001      	b.n	8004c18 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d017      	beq.n	8004c4e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c26:	88fa      	ldrh	r2, [r7, #6]
 8004c28:	2300      	movs	r3, #0
 8004c2a:	9303      	str	r3, [sp, #12]
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	9302      	str	r3, [sp, #8]
 8004c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c32:	9301      	str	r3, [sp, #4]
 8004c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c36:	9300      	str	r3, [sp, #0]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	68b9      	ldr	r1, [r7, #8]
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 f80e 	bl	8004c5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c42:	69f8      	ldr	r0, [r7, #28]
 8004c44:	f000 f89c 	bl	8004d80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	61bb      	str	r3, [r7, #24]
 8004c4c:	e002      	b.n	8004c54 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c52:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c54:	69bb      	ldr	r3, [r7, #24]
	}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3720      	adds	r7, #32
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b088      	sub	sp, #32
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	607a      	str	r2, [r7, #4]
 8004c6a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c6e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	461a      	mov	r2, r3
 8004c76:	21a5      	movs	r1, #165	@ 0xa5
 8004c78:	f002 f8ee 	bl	8006e58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c86:	3b01      	subs	r3, #1
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	f023 0307 	bic.w	r3, r3, #7
 8004c94:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00b      	beq.n	8004cb8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	617b      	str	r3, [r7, #20]
}
 8004cb2:	bf00      	nop
 8004cb4:	bf00      	nop
 8004cb6:	e7fd      	b.n	8004cb4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d01f      	beq.n	8004cfe <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61fb      	str	r3, [r7, #28]
 8004cc2:	e012      	b.n	8004cea <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	4413      	add	r3, r2
 8004cca:	7819      	ldrb	r1, [r3, #0]
 8004ccc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	3334      	adds	r3, #52	@ 0x34
 8004cd4:	460a      	mov	r2, r1
 8004cd6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	4413      	add	r3, r2
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d006      	beq.n	8004cf2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	61fb      	str	r3, [r7, #28]
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	2b0f      	cmp	r3, #15
 8004cee:	d9e9      	bls.n	8004cc4 <prvInitialiseNewTask+0x66>
 8004cf0:	e000      	b.n	8004cf4 <prvInitialiseNewTask+0x96>
			{
				break;
 8004cf2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004cfc:	e003      	b.n	8004d06 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d08:	2b37      	cmp	r3, #55	@ 0x37
 8004d0a:	d901      	bls.n	8004d10 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d0c:	2337      	movs	r3, #55	@ 0x37
 8004d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d14:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d1a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d1e:	2200      	movs	r2, #0
 8004d20:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d24:	3304      	adds	r3, #4
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fe fe34 	bl	8003994 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2e:	3318      	adds	r3, #24
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fe fe2f 	bl	8003994 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d4a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4e:	2200      	movs	r2, #0
 8004d50:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	68f9      	ldr	r1, [r7, #12]
 8004d5e:	69b8      	ldr	r0, [r7, #24]
 8004d60:	f001 fa3e 	bl	80061e0 <pxPortInitialiseStack>
 8004d64:	4602      	mov	r2, r0
 8004d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d002      	beq.n	8004d76 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d76:	bf00      	nop
 8004d78:	3720      	adds	r7, #32
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
	...

08004d80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d88:	f001 fb5e 	bl	8006448 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8004e44 <prvAddNewTaskToReadyList+0xc4>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3301      	adds	r3, #1
 8004d92:	4a2c      	ldr	r2, [pc, #176]	@ (8004e44 <prvAddNewTaskToReadyList+0xc4>)
 8004d94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d96:	4b2c      	ldr	r3, [pc, #176]	@ (8004e48 <prvAddNewTaskToReadyList+0xc8>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d109      	bne.n	8004db2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d9e:	4a2a      	ldr	r2, [pc, #168]	@ (8004e48 <prvAddNewTaskToReadyList+0xc8>)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004da4:	4b27      	ldr	r3, [pc, #156]	@ (8004e44 <prvAddNewTaskToReadyList+0xc4>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d110      	bne.n	8004dce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004dac:	f000 fc1e 	bl	80055ec <prvInitialiseTaskLists>
 8004db0:	e00d      	b.n	8004dce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004db2:	4b26      	ldr	r3, [pc, #152]	@ (8004e4c <prvAddNewTaskToReadyList+0xcc>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d109      	bne.n	8004dce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004dba:	4b23      	ldr	r3, [pc, #140]	@ (8004e48 <prvAddNewTaskToReadyList+0xc8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d802      	bhi.n	8004dce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8004e48 <prvAddNewTaskToReadyList+0xc8>)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004dce:	4b20      	ldr	r3, [pc, #128]	@ (8004e50 <prvAddNewTaskToReadyList+0xd0>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	4a1e      	ldr	r2, [pc, #120]	@ (8004e50 <prvAddNewTaskToReadyList+0xd0>)
 8004dd6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8004e50 <prvAddNewTaskToReadyList+0xd0>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004de4:	4b1b      	ldr	r3, [pc, #108]	@ (8004e54 <prvAddNewTaskToReadyList+0xd4>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d903      	bls.n	8004df4 <prvAddNewTaskToReadyList+0x74>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df0:	4a18      	ldr	r2, [pc, #96]	@ (8004e54 <prvAddNewTaskToReadyList+0xd4>)
 8004df2:	6013      	str	r3, [r2, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004df8:	4613      	mov	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4a15      	ldr	r2, [pc, #84]	@ (8004e58 <prvAddNewTaskToReadyList+0xd8>)
 8004e02:	441a      	add	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3304      	adds	r3, #4
 8004e08:	4619      	mov	r1, r3
 8004e0a:	4610      	mov	r0, r2
 8004e0c:	f7fe fdcf 	bl	80039ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e10:	f001 fb4c 	bl	80064ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e14:	4b0d      	ldr	r3, [pc, #52]	@ (8004e4c <prvAddNewTaskToReadyList+0xcc>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00e      	beq.n	8004e3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e48 <prvAddNewTaskToReadyList+0xc8>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d207      	bcs.n	8004e3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004e5c <prvAddNewTaskToReadyList+0xdc>)
 8004e2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e30:	601a      	str	r2, [r3, #0]
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e3a:	bf00      	nop
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20000d44 	.word	0x20000d44
 8004e48:	20000870 	.word	0x20000870
 8004e4c:	20000d50 	.word	0x20000d50
 8004e50:	20000d60 	.word	0x20000d60
 8004e54:	20000d4c 	.word	0x20000d4c
 8004e58:	20000874 	.word	0x20000874
 8004e5c:	e000ed04 	.word	0xe000ed04

08004e60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d018      	beq.n	8004ea4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e72:	4b14      	ldr	r3, [pc, #80]	@ (8004ec4 <vTaskDelay+0x64>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00b      	beq.n	8004e92 <vTaskDelay+0x32>
	__asm volatile
 8004e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	60bb      	str	r3, [r7, #8]
}
 8004e8c:	bf00      	nop
 8004e8e:	bf00      	nop
 8004e90:	e7fd      	b.n	8004e8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004e92:	f000 f883 	bl	8004f9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e96:	2100      	movs	r1, #0
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 fdf3 	bl	8005a84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e9e:	f000 f88b 	bl	8004fb8 <xTaskResumeAll>
 8004ea2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d107      	bne.n	8004eba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004eaa:	4b07      	ldr	r3, [pc, #28]	@ (8004ec8 <vTaskDelay+0x68>)
 8004eac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	f3bf 8f4f 	dsb	sy
 8004eb6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004eba:	bf00      	nop
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20000d6c 	.word	0x20000d6c
 8004ec8:	e000ed04 	.word	0xe000ed04

08004ecc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08a      	sub	sp, #40	@ 0x28
 8004ed0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004eda:	463a      	mov	r2, r7
 8004edc:	1d39      	adds	r1, r7, #4
 8004ede:	f107 0308 	add.w	r3, r7, #8
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fe fd02 	bl	80038ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ee8:	6839      	ldr	r1, [r7, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	9202      	str	r2, [sp, #8]
 8004ef0:	9301      	str	r3, [sp, #4]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	460a      	mov	r2, r1
 8004efa:	4922      	ldr	r1, [pc, #136]	@ (8004f84 <vTaskStartScheduler+0xb8>)
 8004efc:	4822      	ldr	r0, [pc, #136]	@ (8004f88 <vTaskStartScheduler+0xbc>)
 8004efe:	f7ff fe09 	bl	8004b14 <xTaskCreateStatic>
 8004f02:	4603      	mov	r3, r0
 8004f04:	4a21      	ldr	r2, [pc, #132]	@ (8004f8c <vTaskStartScheduler+0xc0>)
 8004f06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f08:	4b20      	ldr	r3, [pc, #128]	@ (8004f8c <vTaskStartScheduler+0xc0>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f10:	2301      	movs	r3, #1
 8004f12:	617b      	str	r3, [r7, #20]
 8004f14:	e001      	b.n	8004f1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f16:	2300      	movs	r3, #0
 8004f18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d102      	bne.n	8004f26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f20:	f000 fe04 	bl	8005b2c <xTimerCreateTimerTask>
 8004f24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d116      	bne.n	8004f5a <vTaskStartScheduler+0x8e>
	__asm volatile
 8004f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	613b      	str	r3, [r7, #16]
}
 8004f3e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f40:	4b13      	ldr	r3, [pc, #76]	@ (8004f90 <vTaskStartScheduler+0xc4>)
 8004f42:	f04f 32ff 	mov.w	r2, #4294967295
 8004f46:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f48:	4b12      	ldr	r3, [pc, #72]	@ (8004f94 <vTaskStartScheduler+0xc8>)
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f4e:	4b12      	ldr	r3, [pc, #72]	@ (8004f98 <vTaskStartScheduler+0xcc>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f54:	f001 f9d4 	bl	8006300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f58:	e00f      	b.n	8004f7a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f60:	d10b      	bne.n	8004f7a <vTaskStartScheduler+0xae>
	__asm volatile
 8004f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	60fb      	str	r3, [r7, #12]
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop
 8004f78:	e7fd      	b.n	8004f76 <vTaskStartScheduler+0xaa>
}
 8004f7a:	bf00      	nop
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	080074e0 	.word	0x080074e0
 8004f88:	080055bd 	.word	0x080055bd
 8004f8c:	20000d68 	.word	0x20000d68
 8004f90:	20000d64 	.word	0x20000d64
 8004f94:	20000d50 	.word	0x20000d50
 8004f98:	20000d48 	.word	0x20000d48

08004f9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004fa0:	4b04      	ldr	r3, [pc, #16]	@ (8004fb4 <vTaskSuspendAll+0x18>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	4a03      	ldr	r2, [pc, #12]	@ (8004fb4 <vTaskSuspendAll+0x18>)
 8004fa8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004faa:	bf00      	nop
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	20000d6c 	.word	0x20000d6c

08004fb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004fc6:	4b42      	ldr	r3, [pc, #264]	@ (80050d0 <xTaskResumeAll+0x118>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10b      	bne.n	8004fe6 <xTaskResumeAll+0x2e>
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	603b      	str	r3, [r7, #0]
}
 8004fe0:	bf00      	nop
 8004fe2:	bf00      	nop
 8004fe4:	e7fd      	b.n	8004fe2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004fe6:	f001 fa2f 	bl	8006448 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004fea:	4b39      	ldr	r3, [pc, #228]	@ (80050d0 <xTaskResumeAll+0x118>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	4a37      	ldr	r2, [pc, #220]	@ (80050d0 <xTaskResumeAll+0x118>)
 8004ff2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ff4:	4b36      	ldr	r3, [pc, #216]	@ (80050d0 <xTaskResumeAll+0x118>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d162      	bne.n	80050c2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ffc:	4b35      	ldr	r3, [pc, #212]	@ (80050d4 <xTaskResumeAll+0x11c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d05e      	beq.n	80050c2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005004:	e02f      	b.n	8005066 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005006:	4b34      	ldr	r3, [pc, #208]	@ (80050d8 <xTaskResumeAll+0x120>)
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	3318      	adds	r3, #24
 8005012:	4618      	mov	r0, r3
 8005014:	f7fe fd28 	bl	8003a68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	3304      	adds	r3, #4
 800501c:	4618      	mov	r0, r3
 800501e:	f7fe fd23 	bl	8003a68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005026:	4b2d      	ldr	r3, [pc, #180]	@ (80050dc <xTaskResumeAll+0x124>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d903      	bls.n	8005036 <xTaskResumeAll+0x7e>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005032:	4a2a      	ldr	r2, [pc, #168]	@ (80050dc <xTaskResumeAll+0x124>)
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800503a:	4613      	mov	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4a27      	ldr	r2, [pc, #156]	@ (80050e0 <xTaskResumeAll+0x128>)
 8005044:	441a      	add	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3304      	adds	r3, #4
 800504a:	4619      	mov	r1, r3
 800504c:	4610      	mov	r0, r2
 800504e:	f7fe fcae 	bl	80039ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005056:	4b23      	ldr	r3, [pc, #140]	@ (80050e4 <xTaskResumeAll+0x12c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505c:	429a      	cmp	r2, r3
 800505e:	d302      	bcc.n	8005066 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005060:	4b21      	ldr	r3, [pc, #132]	@ (80050e8 <xTaskResumeAll+0x130>)
 8005062:	2201      	movs	r2, #1
 8005064:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005066:	4b1c      	ldr	r3, [pc, #112]	@ (80050d8 <xTaskResumeAll+0x120>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1cb      	bne.n	8005006 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005074:	f000 fb58 	bl	8005728 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005078:	4b1c      	ldr	r3, [pc, #112]	@ (80050ec <xTaskResumeAll+0x134>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d010      	beq.n	80050a6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005084:	f000 f846 	bl	8005114 <xTaskIncrementTick>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800508e:	4b16      	ldr	r3, [pc, #88]	@ (80050e8 <xTaskResumeAll+0x130>)
 8005090:	2201      	movs	r2, #1
 8005092:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3b01      	subs	r3, #1
 8005098:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1f1      	bne.n	8005084 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80050a0:	4b12      	ldr	r3, [pc, #72]	@ (80050ec <xTaskResumeAll+0x134>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80050a6:	4b10      	ldr	r3, [pc, #64]	@ (80050e8 <xTaskResumeAll+0x130>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d009      	beq.n	80050c2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80050ae:	2301      	movs	r3, #1
 80050b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80050b2:	4b0f      	ldr	r3, [pc, #60]	@ (80050f0 <xTaskResumeAll+0x138>)
 80050b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050c2:	f001 f9f3 	bl	80064ac <vPortExitCritical>

	return xAlreadyYielded;
 80050c6:	68bb      	ldr	r3, [r7, #8]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20000d6c 	.word	0x20000d6c
 80050d4:	20000d44 	.word	0x20000d44
 80050d8:	20000d04 	.word	0x20000d04
 80050dc:	20000d4c 	.word	0x20000d4c
 80050e0:	20000874 	.word	0x20000874
 80050e4:	20000870 	.word	0x20000870
 80050e8:	20000d58 	.word	0x20000d58
 80050ec:	20000d54 	.word	0x20000d54
 80050f0:	e000ed04 	.word	0xe000ed04

080050f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80050fa:	4b05      	ldr	r3, [pc, #20]	@ (8005110 <xTaskGetTickCount+0x1c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005100:	687b      	ldr	r3, [r7, #4]
}
 8005102:	4618      	mov	r0, r3
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	20000d48 	.word	0x20000d48

08005114 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800511e:	4b4f      	ldr	r3, [pc, #316]	@ (800525c <xTaskIncrementTick+0x148>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	f040 8090 	bne.w	8005248 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005128:	4b4d      	ldr	r3, [pc, #308]	@ (8005260 <xTaskIncrementTick+0x14c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3301      	adds	r3, #1
 800512e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005130:	4a4b      	ldr	r2, [pc, #300]	@ (8005260 <xTaskIncrementTick+0x14c>)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d121      	bne.n	8005180 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800513c:	4b49      	ldr	r3, [pc, #292]	@ (8005264 <xTaskIncrementTick+0x150>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00b      	beq.n	800515e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	603b      	str	r3, [r7, #0]
}
 8005158:	bf00      	nop
 800515a:	bf00      	nop
 800515c:	e7fd      	b.n	800515a <xTaskIncrementTick+0x46>
 800515e:	4b41      	ldr	r3, [pc, #260]	@ (8005264 <xTaskIncrementTick+0x150>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	4b40      	ldr	r3, [pc, #256]	@ (8005268 <xTaskIncrementTick+0x154>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a3e      	ldr	r2, [pc, #248]	@ (8005264 <xTaskIncrementTick+0x150>)
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	4a3e      	ldr	r2, [pc, #248]	@ (8005268 <xTaskIncrementTick+0x154>)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6013      	str	r3, [r2, #0]
 8005172:	4b3e      	ldr	r3, [pc, #248]	@ (800526c <xTaskIncrementTick+0x158>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	3301      	adds	r3, #1
 8005178:	4a3c      	ldr	r2, [pc, #240]	@ (800526c <xTaskIncrementTick+0x158>)
 800517a:	6013      	str	r3, [r2, #0]
 800517c:	f000 fad4 	bl	8005728 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005180:	4b3b      	ldr	r3, [pc, #236]	@ (8005270 <xTaskIncrementTick+0x15c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	429a      	cmp	r2, r3
 8005188:	d349      	bcc.n	800521e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800518a:	4b36      	ldr	r3, [pc, #216]	@ (8005264 <xTaskIncrementTick+0x150>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d104      	bne.n	800519e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005194:	4b36      	ldr	r3, [pc, #216]	@ (8005270 <xTaskIncrementTick+0x15c>)
 8005196:	f04f 32ff 	mov.w	r2, #4294967295
 800519a:	601a      	str	r2, [r3, #0]
					break;
 800519c:	e03f      	b.n	800521e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800519e:	4b31      	ldr	r3, [pc, #196]	@ (8005264 <xTaskIncrementTick+0x150>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d203      	bcs.n	80051be <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80051b6:	4a2e      	ldr	r2, [pc, #184]	@ (8005270 <xTaskIncrementTick+0x15c>)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80051bc:	e02f      	b.n	800521e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	3304      	adds	r3, #4
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fe fc50 	bl	8003a68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d004      	beq.n	80051da <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	3318      	adds	r3, #24
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7fe fc47 	bl	8003a68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051de:	4b25      	ldr	r3, [pc, #148]	@ (8005274 <xTaskIncrementTick+0x160>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d903      	bls.n	80051ee <xTaskIncrementTick+0xda>
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ea:	4a22      	ldr	r2, [pc, #136]	@ (8005274 <xTaskIncrementTick+0x160>)
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051f2:	4613      	mov	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4a1f      	ldr	r2, [pc, #124]	@ (8005278 <xTaskIncrementTick+0x164>)
 80051fc:	441a      	add	r2, r3
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	3304      	adds	r3, #4
 8005202:	4619      	mov	r1, r3
 8005204:	4610      	mov	r0, r2
 8005206:	f7fe fbd2 	bl	80039ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800520e:	4b1b      	ldr	r3, [pc, #108]	@ (800527c <xTaskIncrementTick+0x168>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005214:	429a      	cmp	r2, r3
 8005216:	d3b8      	bcc.n	800518a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005218:	2301      	movs	r3, #1
 800521a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800521c:	e7b5      	b.n	800518a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800521e:	4b17      	ldr	r3, [pc, #92]	@ (800527c <xTaskIncrementTick+0x168>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005224:	4914      	ldr	r1, [pc, #80]	@ (8005278 <xTaskIncrementTick+0x164>)
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d901      	bls.n	800523a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005236:	2301      	movs	r3, #1
 8005238:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800523a:	4b11      	ldr	r3, [pc, #68]	@ (8005280 <xTaskIncrementTick+0x16c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d007      	beq.n	8005252 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005242:	2301      	movs	r3, #1
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	e004      	b.n	8005252 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005248:	4b0e      	ldr	r3, [pc, #56]	@ (8005284 <xTaskIncrementTick+0x170>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3301      	adds	r3, #1
 800524e:	4a0d      	ldr	r2, [pc, #52]	@ (8005284 <xTaskIncrementTick+0x170>)
 8005250:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005252:	697b      	ldr	r3, [r7, #20]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000d6c 	.word	0x20000d6c
 8005260:	20000d48 	.word	0x20000d48
 8005264:	20000cfc 	.word	0x20000cfc
 8005268:	20000d00 	.word	0x20000d00
 800526c:	20000d5c 	.word	0x20000d5c
 8005270:	20000d64 	.word	0x20000d64
 8005274:	20000d4c 	.word	0x20000d4c
 8005278:	20000874 	.word	0x20000874
 800527c:	20000870 	.word	0x20000870
 8005280:	20000d58 	.word	0x20000d58
 8005284:	20000d54 	.word	0x20000d54

08005288 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800528e:	4b28      	ldr	r3, [pc, #160]	@ (8005330 <vTaskSwitchContext+0xa8>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005296:	4b27      	ldr	r3, [pc, #156]	@ (8005334 <vTaskSwitchContext+0xac>)
 8005298:	2201      	movs	r2, #1
 800529a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800529c:	e042      	b.n	8005324 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800529e:	4b25      	ldr	r3, [pc, #148]	@ (8005334 <vTaskSwitchContext+0xac>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052a4:	4b24      	ldr	r3, [pc, #144]	@ (8005338 <vTaskSwitchContext+0xb0>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	60fb      	str	r3, [r7, #12]
 80052aa:	e011      	b.n	80052d0 <vTaskSwitchContext+0x48>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10b      	bne.n	80052ca <vTaskSwitchContext+0x42>
	__asm volatile
 80052b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	607b      	str	r3, [r7, #4]
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop
 80052c8:	e7fd      	b.n	80052c6 <vTaskSwitchContext+0x3e>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	3b01      	subs	r3, #1
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	491a      	ldr	r1, [pc, #104]	@ (800533c <vTaskSwitchContext+0xb4>)
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4613      	mov	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4413      	add	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0e3      	beq.n	80052ac <vTaskSwitchContext+0x24>
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	4613      	mov	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4a13      	ldr	r2, [pc, #76]	@ (800533c <vTaskSwitchContext+0xb4>)
 80052f0:	4413      	add	r3, r2
 80052f2:	60bb      	str	r3, [r7, #8]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	605a      	str	r2, [r3, #4]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	3308      	adds	r3, #8
 8005306:	429a      	cmp	r2, r3
 8005308:	d104      	bne.n	8005314 <vTaskSwitchContext+0x8c>
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	605a      	str	r2, [r3, #4]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	4a09      	ldr	r2, [pc, #36]	@ (8005340 <vTaskSwitchContext+0xb8>)
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	4a06      	ldr	r2, [pc, #24]	@ (8005338 <vTaskSwitchContext+0xb0>)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6013      	str	r3, [r2, #0]
}
 8005324:	bf00      	nop
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	20000d6c 	.word	0x20000d6c
 8005334:	20000d58 	.word	0x20000d58
 8005338:	20000d4c 	.word	0x20000d4c
 800533c:	20000874 	.word	0x20000874
 8005340:	20000870 	.word	0x20000870

08005344 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10b      	bne.n	800536c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	60fb      	str	r3, [r7, #12]
}
 8005366:	bf00      	nop
 8005368:	bf00      	nop
 800536a:	e7fd      	b.n	8005368 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800536c:	4b07      	ldr	r3, [pc, #28]	@ (800538c <vTaskPlaceOnEventList+0x48>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	3318      	adds	r3, #24
 8005372:	4619      	mov	r1, r3
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7fe fb3e 	bl	80039f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800537a:	2101      	movs	r1, #1
 800537c:	6838      	ldr	r0, [r7, #0]
 800537e:	f000 fb81 	bl	8005a84 <prvAddCurrentTaskToDelayedList>
}
 8005382:	bf00      	nop
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	20000870 	.word	0x20000870

08005390 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10b      	bne.n	80053ba <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	617b      	str	r3, [r7, #20]
}
 80053b4:	bf00      	nop
 80053b6:	bf00      	nop
 80053b8:	e7fd      	b.n	80053b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053ba:	4b0a      	ldr	r3, [pc, #40]	@ (80053e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3318      	adds	r3, #24
 80053c0:	4619      	mov	r1, r3
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f7fe faf3 	bl	80039ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80053ce:	f04f 33ff 	mov.w	r3, #4294967295
 80053d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80053d4:	6879      	ldr	r1, [r7, #4]
 80053d6:	68b8      	ldr	r0, [r7, #8]
 80053d8:	f000 fb54 	bl	8005a84 <prvAddCurrentTaskToDelayedList>
	}
 80053dc:	bf00      	nop
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	20000870 	.word	0x20000870

080053e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10b      	bne.n	8005416 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	60fb      	str	r3, [r7, #12]
}
 8005410:	bf00      	nop
 8005412:	bf00      	nop
 8005414:	e7fd      	b.n	8005412 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	3318      	adds	r3, #24
 800541a:	4618      	mov	r0, r3
 800541c:	f7fe fb24 	bl	8003a68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005420:	4b1d      	ldr	r3, [pc, #116]	@ (8005498 <xTaskRemoveFromEventList+0xb0>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d11d      	bne.n	8005464 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	3304      	adds	r3, #4
 800542c:	4618      	mov	r0, r3
 800542e:	f7fe fb1b 	bl	8003a68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005436:	4b19      	ldr	r3, [pc, #100]	@ (800549c <xTaskRemoveFromEventList+0xb4>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	429a      	cmp	r2, r3
 800543c:	d903      	bls.n	8005446 <xTaskRemoveFromEventList+0x5e>
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005442:	4a16      	ldr	r2, [pc, #88]	@ (800549c <xTaskRemoveFromEventList+0xb4>)
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800544a:	4613      	mov	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4a13      	ldr	r2, [pc, #76]	@ (80054a0 <xTaskRemoveFromEventList+0xb8>)
 8005454:	441a      	add	r2, r3
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	3304      	adds	r3, #4
 800545a:	4619      	mov	r1, r3
 800545c:	4610      	mov	r0, r2
 800545e:	f7fe faa6 	bl	80039ae <vListInsertEnd>
 8005462:	e005      	b.n	8005470 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	3318      	adds	r3, #24
 8005468:	4619      	mov	r1, r3
 800546a:	480e      	ldr	r0, [pc, #56]	@ (80054a4 <xTaskRemoveFromEventList+0xbc>)
 800546c:	f7fe fa9f 	bl	80039ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005474:	4b0c      	ldr	r3, [pc, #48]	@ (80054a8 <xTaskRemoveFromEventList+0xc0>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547a:	429a      	cmp	r2, r3
 800547c:	d905      	bls.n	800548a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800547e:	2301      	movs	r3, #1
 8005480:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005482:	4b0a      	ldr	r3, [pc, #40]	@ (80054ac <xTaskRemoveFromEventList+0xc4>)
 8005484:	2201      	movs	r2, #1
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	e001      	b.n	800548e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800548a:	2300      	movs	r3, #0
 800548c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800548e:	697b      	ldr	r3, [r7, #20]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3718      	adds	r7, #24
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	20000d6c 	.word	0x20000d6c
 800549c:	20000d4c 	.word	0x20000d4c
 80054a0:	20000874 	.word	0x20000874
 80054a4:	20000d04 	.word	0x20000d04
 80054a8:	20000870 	.word	0x20000870
 80054ac:	20000d58 	.word	0x20000d58

080054b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80054b8:	4b06      	ldr	r3, [pc, #24]	@ (80054d4 <vTaskInternalSetTimeOutState+0x24>)
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80054c0:	4b05      	ldr	r3, [pc, #20]	@ (80054d8 <vTaskInternalSetTimeOutState+0x28>)
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	605a      	str	r2, [r3, #4]
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	20000d5c 	.word	0x20000d5c
 80054d8:	20000d48 	.word	0x20000d48

080054dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10b      	bne.n	8005504 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80054ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	613b      	str	r3, [r7, #16]
}
 80054fe:	bf00      	nop
 8005500:	bf00      	nop
 8005502:	e7fd      	b.n	8005500 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10b      	bne.n	8005522 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800550a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	60fb      	str	r3, [r7, #12]
}
 800551c:	bf00      	nop
 800551e:	bf00      	nop
 8005520:	e7fd      	b.n	800551e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005522:	f000 ff91 	bl	8006448 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005526:	4b1d      	ldr	r3, [pc, #116]	@ (800559c <xTaskCheckForTimeOut+0xc0>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553e:	d102      	bne.n	8005546 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005540:	2300      	movs	r3, #0
 8005542:	61fb      	str	r3, [r7, #28]
 8005544:	e023      	b.n	800558e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	4b15      	ldr	r3, [pc, #84]	@ (80055a0 <xTaskCheckForTimeOut+0xc4>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	429a      	cmp	r2, r3
 8005550:	d007      	beq.n	8005562 <xTaskCheckForTimeOut+0x86>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	429a      	cmp	r2, r3
 800555a:	d302      	bcc.n	8005562 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800555c:	2301      	movs	r3, #1
 800555e:	61fb      	str	r3, [r7, #28]
 8005560:	e015      	b.n	800558e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	429a      	cmp	r2, r3
 800556a:	d20b      	bcs.n	8005584 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	1ad2      	subs	r2, r2, r3
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7ff ff99 	bl	80054b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800557e:	2300      	movs	r3, #0
 8005580:	61fb      	str	r3, [r7, #28]
 8005582:	e004      	b.n	800558e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2200      	movs	r2, #0
 8005588:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800558a:	2301      	movs	r3, #1
 800558c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800558e:	f000 ff8d 	bl	80064ac <vPortExitCritical>

	return xReturn;
 8005592:	69fb      	ldr	r3, [r7, #28]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3720      	adds	r7, #32
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	20000d48 	.word	0x20000d48
 80055a0:	20000d5c 	.word	0x20000d5c

080055a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80055a4:	b480      	push	{r7}
 80055a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80055a8:	4b03      	ldr	r3, [pc, #12]	@ (80055b8 <vTaskMissedYield+0x14>)
 80055aa:	2201      	movs	r2, #1
 80055ac:	601a      	str	r2, [r3, #0]
}
 80055ae:	bf00      	nop
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	20000d58 	.word	0x20000d58

080055bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80055c4:	f000 f852 	bl	800566c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80055c8:	4b06      	ldr	r3, [pc, #24]	@ (80055e4 <prvIdleTask+0x28>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d9f9      	bls.n	80055c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80055d0:	4b05      	ldr	r3, [pc, #20]	@ (80055e8 <prvIdleTask+0x2c>)
 80055d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80055e0:	e7f0      	b.n	80055c4 <prvIdleTask+0x8>
 80055e2:	bf00      	nop
 80055e4:	20000874 	.word	0x20000874
 80055e8:	e000ed04 	.word	0xe000ed04

080055ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055f2:	2300      	movs	r3, #0
 80055f4:	607b      	str	r3, [r7, #4]
 80055f6:	e00c      	b.n	8005612 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	4613      	mov	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4a12      	ldr	r2, [pc, #72]	@ (800564c <prvInitialiseTaskLists+0x60>)
 8005604:	4413      	add	r3, r2
 8005606:	4618      	mov	r0, r3
 8005608:	f7fe f9a4 	bl	8003954 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	3301      	adds	r3, #1
 8005610:	607b      	str	r3, [r7, #4]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b37      	cmp	r3, #55	@ 0x37
 8005616:	d9ef      	bls.n	80055f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005618:	480d      	ldr	r0, [pc, #52]	@ (8005650 <prvInitialiseTaskLists+0x64>)
 800561a:	f7fe f99b 	bl	8003954 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800561e:	480d      	ldr	r0, [pc, #52]	@ (8005654 <prvInitialiseTaskLists+0x68>)
 8005620:	f7fe f998 	bl	8003954 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005624:	480c      	ldr	r0, [pc, #48]	@ (8005658 <prvInitialiseTaskLists+0x6c>)
 8005626:	f7fe f995 	bl	8003954 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800562a:	480c      	ldr	r0, [pc, #48]	@ (800565c <prvInitialiseTaskLists+0x70>)
 800562c:	f7fe f992 	bl	8003954 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005630:	480b      	ldr	r0, [pc, #44]	@ (8005660 <prvInitialiseTaskLists+0x74>)
 8005632:	f7fe f98f 	bl	8003954 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005636:	4b0b      	ldr	r3, [pc, #44]	@ (8005664 <prvInitialiseTaskLists+0x78>)
 8005638:	4a05      	ldr	r2, [pc, #20]	@ (8005650 <prvInitialiseTaskLists+0x64>)
 800563a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800563c:	4b0a      	ldr	r3, [pc, #40]	@ (8005668 <prvInitialiseTaskLists+0x7c>)
 800563e:	4a05      	ldr	r2, [pc, #20]	@ (8005654 <prvInitialiseTaskLists+0x68>)
 8005640:	601a      	str	r2, [r3, #0]
}
 8005642:	bf00      	nop
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	20000874 	.word	0x20000874
 8005650:	20000cd4 	.word	0x20000cd4
 8005654:	20000ce8 	.word	0x20000ce8
 8005658:	20000d04 	.word	0x20000d04
 800565c:	20000d18 	.word	0x20000d18
 8005660:	20000d30 	.word	0x20000d30
 8005664:	20000cfc 	.word	0x20000cfc
 8005668:	20000d00 	.word	0x20000d00

0800566c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005672:	e019      	b.n	80056a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005674:	f000 fee8 	bl	8006448 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005678:	4b10      	ldr	r3, [pc, #64]	@ (80056bc <prvCheckTasksWaitingTermination+0x50>)
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	3304      	adds	r3, #4
 8005684:	4618      	mov	r0, r3
 8005686:	f7fe f9ef 	bl	8003a68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800568a:	4b0d      	ldr	r3, [pc, #52]	@ (80056c0 <prvCheckTasksWaitingTermination+0x54>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3b01      	subs	r3, #1
 8005690:	4a0b      	ldr	r2, [pc, #44]	@ (80056c0 <prvCheckTasksWaitingTermination+0x54>)
 8005692:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005694:	4b0b      	ldr	r3, [pc, #44]	@ (80056c4 <prvCheckTasksWaitingTermination+0x58>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3b01      	subs	r3, #1
 800569a:	4a0a      	ldr	r2, [pc, #40]	@ (80056c4 <prvCheckTasksWaitingTermination+0x58>)
 800569c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800569e:	f000 ff05 	bl	80064ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f810 	bl	80056c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056a8:	4b06      	ldr	r3, [pc, #24]	@ (80056c4 <prvCheckTasksWaitingTermination+0x58>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1e1      	bne.n	8005674 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80056b0:	bf00      	nop
 80056b2:	bf00      	nop
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	20000d18 	.word	0x20000d18
 80056c0:	20000d44 	.word	0x20000d44
 80056c4:	20000d2c 	.word	0x20000d2c

080056c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d108      	bne.n	80056ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056de:	4618      	mov	r0, r3
 80056e0:	f001 f8a2 	bl	8006828 <vPortFree>
				vPortFree( pxTCB );
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f001 f89f 	bl	8006828 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80056ea:	e019      	b.n	8005720 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d103      	bne.n	80056fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f001 f896 	bl	8006828 <vPortFree>
	}
 80056fc:	e010      	b.n	8005720 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005704:	2b02      	cmp	r3, #2
 8005706:	d00b      	beq.n	8005720 <prvDeleteTCB+0x58>
	__asm volatile
 8005708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	60fb      	str	r3, [r7, #12]
}
 800571a:	bf00      	nop
 800571c:	bf00      	nop
 800571e:	e7fd      	b.n	800571c <prvDeleteTCB+0x54>
	}
 8005720:	bf00      	nop
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800572e:	4b0c      	ldr	r3, [pc, #48]	@ (8005760 <prvResetNextTaskUnblockTime+0x38>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d104      	bne.n	8005742 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005738:	4b0a      	ldr	r3, [pc, #40]	@ (8005764 <prvResetNextTaskUnblockTime+0x3c>)
 800573a:	f04f 32ff 	mov.w	r2, #4294967295
 800573e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005740:	e008      	b.n	8005754 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005742:	4b07      	ldr	r3, [pc, #28]	@ (8005760 <prvResetNextTaskUnblockTime+0x38>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	4a04      	ldr	r2, [pc, #16]	@ (8005764 <prvResetNextTaskUnblockTime+0x3c>)
 8005752:	6013      	str	r3, [r2, #0]
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	20000cfc 	.word	0x20000cfc
 8005764:	20000d64 	.word	0x20000d64

08005768 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800576e:	4b0b      	ldr	r3, [pc, #44]	@ (800579c <xTaskGetSchedulerState+0x34>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d102      	bne.n	800577c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005776:	2301      	movs	r3, #1
 8005778:	607b      	str	r3, [r7, #4]
 800577a:	e008      	b.n	800578e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800577c:	4b08      	ldr	r3, [pc, #32]	@ (80057a0 <xTaskGetSchedulerState+0x38>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d102      	bne.n	800578a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005784:	2302      	movs	r3, #2
 8005786:	607b      	str	r3, [r7, #4]
 8005788:	e001      	b.n	800578e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800578a:	2300      	movs	r3, #0
 800578c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800578e:	687b      	ldr	r3, [r7, #4]
	}
 8005790:	4618      	mov	r0, r3
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	20000d50 	.word	0x20000d50
 80057a0:	20000d6c 	.word	0x20000d6c

080057a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80057b0:	2300      	movs	r3, #0
 80057b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d051      	beq.n	800585e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057be:	4b2a      	ldr	r3, [pc, #168]	@ (8005868 <xTaskPriorityInherit+0xc4>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d241      	bcs.n	800584c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	db06      	blt.n	80057de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057d0:	4b25      	ldr	r3, [pc, #148]	@ (8005868 <xTaskPriorityInherit+0xc4>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	6959      	ldr	r1, [r3, #20]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057e6:	4613      	mov	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4a1f      	ldr	r2, [pc, #124]	@ (800586c <xTaskPriorityInherit+0xc8>)
 80057f0:	4413      	add	r3, r2
 80057f2:	4299      	cmp	r1, r3
 80057f4:	d122      	bne.n	800583c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	3304      	adds	r3, #4
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fe f934 	bl	8003a68 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005800:	4b19      	ldr	r3, [pc, #100]	@ (8005868 <xTaskPriorityInherit+0xc4>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800580e:	4b18      	ldr	r3, [pc, #96]	@ (8005870 <xTaskPriorityInherit+0xcc>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	429a      	cmp	r2, r3
 8005814:	d903      	bls.n	800581e <xTaskPriorityInherit+0x7a>
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581a:	4a15      	ldr	r2, [pc, #84]	@ (8005870 <xTaskPriorityInherit+0xcc>)
 800581c:	6013      	str	r3, [r2, #0]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005822:	4613      	mov	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4a10      	ldr	r2, [pc, #64]	@ (800586c <xTaskPriorityInherit+0xc8>)
 800582c:	441a      	add	r2, r3
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	3304      	adds	r3, #4
 8005832:	4619      	mov	r1, r3
 8005834:	4610      	mov	r0, r2
 8005836:	f7fe f8ba 	bl	80039ae <vListInsertEnd>
 800583a:	e004      	b.n	8005846 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800583c:	4b0a      	ldr	r3, [pc, #40]	@ (8005868 <xTaskPriorityInherit+0xc4>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005846:	2301      	movs	r3, #1
 8005848:	60fb      	str	r3, [r7, #12]
 800584a:	e008      	b.n	800585e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005850:	4b05      	ldr	r3, [pc, #20]	@ (8005868 <xTaskPriorityInherit+0xc4>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005856:	429a      	cmp	r2, r3
 8005858:	d201      	bcs.n	800585e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800585a:	2301      	movs	r3, #1
 800585c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800585e:	68fb      	ldr	r3, [r7, #12]
	}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	20000870 	.word	0x20000870
 800586c:	20000874 	.word	0x20000874
 8005870:	20000d4c 	.word	0x20000d4c

08005874 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005880:	2300      	movs	r3, #0
 8005882:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d058      	beq.n	800593c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800588a:	4b2f      	ldr	r3, [pc, #188]	@ (8005948 <xTaskPriorityDisinherit+0xd4>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	429a      	cmp	r2, r3
 8005892:	d00b      	beq.n	80058ac <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	60fb      	str	r3, [r7, #12]
}
 80058a6:	bf00      	nop
 80058a8:	bf00      	nop
 80058aa:	e7fd      	b.n	80058a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10b      	bne.n	80058cc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80058b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	60bb      	str	r3, [r7, #8]
}
 80058c6:	bf00      	nop
 80058c8:	bf00      	nop
 80058ca:	e7fd      	b.n	80058c8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058d0:	1e5a      	subs	r2, r3, #1
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058de:	429a      	cmp	r2, r3
 80058e0:	d02c      	beq.n	800593c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d128      	bne.n	800593c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	3304      	adds	r3, #4
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fe f8ba 	bl	8003a68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005900:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800590c:	4b0f      	ldr	r3, [pc, #60]	@ (800594c <xTaskPriorityDisinherit+0xd8>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d903      	bls.n	800591c <xTaskPriorityDisinherit+0xa8>
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005918:	4a0c      	ldr	r2, [pc, #48]	@ (800594c <xTaskPriorityDisinherit+0xd8>)
 800591a:	6013      	str	r3, [r2, #0]
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005920:	4613      	mov	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4a09      	ldr	r2, [pc, #36]	@ (8005950 <xTaskPriorityDisinherit+0xdc>)
 800592a:	441a      	add	r2, r3
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	3304      	adds	r3, #4
 8005930:	4619      	mov	r1, r3
 8005932:	4610      	mov	r0, r2
 8005934:	f7fe f83b 	bl	80039ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005938:	2301      	movs	r3, #1
 800593a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800593c:	697b      	ldr	r3, [r7, #20]
	}
 800593e:	4618      	mov	r0, r3
 8005940:	3718      	adds	r7, #24
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	20000870 	.word	0x20000870
 800594c:	20000d4c 	.word	0x20000d4c
 8005950:	20000874 	.word	0x20000874

08005954 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005962:	2301      	movs	r3, #1
 8005964:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d06c      	beq.n	8005a46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10b      	bne.n	800598c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	60fb      	str	r3, [r7, #12]
}
 8005986:	bf00      	nop
 8005988:	bf00      	nop
 800598a:	e7fd      	b.n	8005988 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	429a      	cmp	r2, r3
 8005994:	d902      	bls.n	800599c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	61fb      	str	r3, [r7, #28]
 800599a:	e002      	b.n	80059a2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059a0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a6:	69fa      	ldr	r2, [r7, #28]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d04c      	beq.n	8005a46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d147      	bne.n	8005a46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80059b6:	4b26      	ldr	r3, [pc, #152]	@ (8005a50 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d10b      	bne.n	80059d8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80059c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c4:	f383 8811 	msr	BASEPRI, r3
 80059c8:	f3bf 8f6f 	isb	sy
 80059cc:	f3bf 8f4f 	dsb	sy
 80059d0:	60bb      	str	r3, [r7, #8]
}
 80059d2:	bf00      	nop
 80059d4:	bf00      	nop
 80059d6:	e7fd      	b.n	80059d4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	69fa      	ldr	r2, [r7, #28]
 80059e2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	db04      	blt.n	80059f6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	6959      	ldr	r1, [r3, #20]
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	4613      	mov	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4a13      	ldr	r2, [pc, #76]	@ (8005a54 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005a06:	4413      	add	r3, r2
 8005a08:	4299      	cmp	r1, r3
 8005a0a:	d11c      	bne.n	8005a46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7fe f829 	bl	8003a68 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8005a58 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d903      	bls.n	8005a2a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a26:	4a0c      	ldr	r2, [pc, #48]	@ (8005a58 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005a28:	6013      	str	r3, [r2, #0]
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4a07      	ldr	r2, [pc, #28]	@ (8005a54 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005a38:	441a      	add	r2, r3
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4610      	mov	r0, r2
 8005a42:	f7fd ffb4 	bl	80039ae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a46:	bf00      	nop
 8005a48:	3720      	adds	r7, #32
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000870 	.word	0x20000870
 8005a54:	20000874 	.word	0x20000874
 8005a58:	20000d4c 	.word	0x20000d4c

08005a5c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005a5c:	b480      	push	{r7}
 8005a5e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005a60:	4b07      	ldr	r3, [pc, #28]	@ (8005a80 <pvTaskIncrementMutexHeldCount+0x24>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d004      	beq.n	8005a72 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005a68:	4b05      	ldr	r3, [pc, #20]	@ (8005a80 <pvTaskIncrementMutexHeldCount+0x24>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a6e:	3201      	adds	r2, #1
 8005a70:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005a72:	4b03      	ldr	r3, [pc, #12]	@ (8005a80 <pvTaskIncrementMutexHeldCount+0x24>)
 8005a74:	681b      	ldr	r3, [r3, #0]
	}
 8005a76:	4618      	mov	r0, r3
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	20000870 	.word	0x20000870

08005a84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a8e:	4b21      	ldr	r3, [pc, #132]	@ (8005b14 <prvAddCurrentTaskToDelayedList+0x90>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a94:	4b20      	ldr	r3, [pc, #128]	@ (8005b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3304      	adds	r3, #4
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fd ffe4 	bl	8003a68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa6:	d10a      	bne.n	8005abe <prvAddCurrentTaskToDelayedList+0x3a>
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d007      	beq.n	8005abe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005aae:	4b1a      	ldr	r3, [pc, #104]	@ (8005b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	4819      	ldr	r0, [pc, #100]	@ (8005b1c <prvAddCurrentTaskToDelayedList+0x98>)
 8005ab8:	f7fd ff79 	bl	80039ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005abc:	e026      	b.n	8005b0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ac6:	4b14      	ldr	r3, [pc, #80]	@ (8005b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d209      	bcs.n	8005aea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ad6:	4b12      	ldr	r3, [pc, #72]	@ (8005b20 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	4b0f      	ldr	r3, [pc, #60]	@ (8005b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3304      	adds	r3, #4
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	4610      	mov	r0, r2
 8005ae4:	f7fd ff87 	bl	80039f6 <vListInsert>
}
 8005ae8:	e010      	b.n	8005b0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005aea:	4b0e      	ldr	r3, [pc, #56]	@ (8005b24 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	4b0a      	ldr	r3, [pc, #40]	@ (8005b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3304      	adds	r3, #4
 8005af4:	4619      	mov	r1, r3
 8005af6:	4610      	mov	r0, r2
 8005af8:	f7fd ff7d 	bl	80039f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005afc:	4b0a      	ldr	r3, [pc, #40]	@ (8005b28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d202      	bcs.n	8005b0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b06:	4a08      	ldr	r2, [pc, #32]	@ (8005b28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	6013      	str	r3, [r2, #0]
}
 8005b0c:	bf00      	nop
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	20000d48 	.word	0x20000d48
 8005b18:	20000870 	.word	0x20000870
 8005b1c:	20000d30 	.word	0x20000d30
 8005b20:	20000d00 	.word	0x20000d00
 8005b24:	20000cfc 	.word	0x20000cfc
 8005b28:	20000d64 	.word	0x20000d64

08005b2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b08a      	sub	sp, #40	@ 0x28
 8005b30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b32:	2300      	movs	r3, #0
 8005b34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b36:	f000 fb13 	bl	8006160 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8005bb0 <xTimerCreateTimerTask+0x84>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d021      	beq.n	8005b86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b42:	2300      	movs	r3, #0
 8005b44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b4a:	1d3a      	adds	r2, r7, #4
 8005b4c:	f107 0108 	add.w	r1, r7, #8
 8005b50:	f107 030c 	add.w	r3, r7, #12
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fd fee3 	bl	8003920 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b5a:	6879      	ldr	r1, [r7, #4]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	9202      	str	r2, [sp, #8]
 8005b62:	9301      	str	r3, [sp, #4]
 8005b64:	2302      	movs	r3, #2
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	2300      	movs	r3, #0
 8005b6a:	460a      	mov	r2, r1
 8005b6c:	4911      	ldr	r1, [pc, #68]	@ (8005bb4 <xTimerCreateTimerTask+0x88>)
 8005b6e:	4812      	ldr	r0, [pc, #72]	@ (8005bb8 <xTimerCreateTimerTask+0x8c>)
 8005b70:	f7fe ffd0 	bl	8004b14 <xTaskCreateStatic>
 8005b74:	4603      	mov	r3, r0
 8005b76:	4a11      	ldr	r2, [pc, #68]	@ (8005bbc <xTimerCreateTimerTask+0x90>)
 8005b78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005b7a:	4b10      	ldr	r3, [pc, #64]	@ (8005bbc <xTimerCreateTimerTask+0x90>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005b82:	2301      	movs	r3, #1
 8005b84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10b      	bne.n	8005ba4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b90:	f383 8811 	msr	BASEPRI, r3
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	613b      	str	r3, [r7, #16]
}
 8005b9e:	bf00      	nop
 8005ba0:	bf00      	nop
 8005ba2:	e7fd      	b.n	8005ba0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005ba4:	697b      	ldr	r3, [r7, #20]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	20000da0 	.word	0x20000da0
 8005bb4:	080074e8 	.word	0x080074e8
 8005bb8:	08005cf9 	.word	0x08005cf9
 8005bbc:	20000da4 	.word	0x20000da4

08005bc0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08a      	sub	sp, #40	@ 0x28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
 8005bcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10b      	bne.n	8005bf0 <xTimerGenericCommand+0x30>
	__asm volatile
 8005bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bdc:	f383 8811 	msr	BASEPRI, r3
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	623b      	str	r3, [r7, #32]
}
 8005bea:	bf00      	nop
 8005bec:	bf00      	nop
 8005bee:	e7fd      	b.n	8005bec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005bf0:	4b19      	ldr	r3, [pc, #100]	@ (8005c58 <xTimerGenericCommand+0x98>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d02a      	beq.n	8005c4e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b05      	cmp	r3, #5
 8005c08:	dc18      	bgt.n	8005c3c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c0a:	f7ff fdad 	bl	8005768 <xTaskGetSchedulerState>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d109      	bne.n	8005c28 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c14:	4b10      	ldr	r3, [pc, #64]	@ (8005c58 <xTimerGenericCommand+0x98>)
 8005c16:	6818      	ldr	r0, [r3, #0]
 8005c18:	f107 0110 	add.w	r1, r7, #16
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c20:	f7fe f900 	bl	8003e24 <xQueueGenericSend>
 8005c24:	6278      	str	r0, [r7, #36]	@ 0x24
 8005c26:	e012      	b.n	8005c4e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c28:	4b0b      	ldr	r3, [pc, #44]	@ (8005c58 <xTimerGenericCommand+0x98>)
 8005c2a:	6818      	ldr	r0, [r3, #0]
 8005c2c:	f107 0110 	add.w	r1, r7, #16
 8005c30:	2300      	movs	r3, #0
 8005c32:	2200      	movs	r2, #0
 8005c34:	f7fe f8f6 	bl	8003e24 <xQueueGenericSend>
 8005c38:	6278      	str	r0, [r7, #36]	@ 0x24
 8005c3a:	e008      	b.n	8005c4e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c3c:	4b06      	ldr	r3, [pc, #24]	@ (8005c58 <xTimerGenericCommand+0x98>)
 8005c3e:	6818      	ldr	r0, [r3, #0]
 8005c40:	f107 0110 	add.w	r1, r7, #16
 8005c44:	2300      	movs	r3, #0
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	f7fe f9ee 	bl	8004028 <xQueueGenericSendFromISR>
 8005c4c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3728      	adds	r7, #40	@ 0x28
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	20000da0 	.word	0x20000da0

08005c5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af02      	add	r7, sp, #8
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c66:	4b23      	ldr	r3, [pc, #140]	@ (8005cf4 <prvProcessExpiredTimer+0x98>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	3304      	adds	r3, #4
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fd fef7 	bl	8003a68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d023      	beq.n	8005cd0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	699a      	ldr	r2, [r3, #24]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	18d1      	adds	r1, r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	6978      	ldr	r0, [r7, #20]
 8005c96:	f000 f8d5 	bl	8005e44 <prvInsertTimerInActiveList>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d020      	beq.n	8005ce2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	2100      	movs	r1, #0
 8005caa:	6978      	ldr	r0, [r7, #20]
 8005cac:	f7ff ff88 	bl	8005bc0 <xTimerGenericCommand>
 8005cb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d114      	bne.n	8005ce2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	60fb      	str	r3, [r7, #12]
}
 8005cca:	bf00      	nop
 8005ccc:	bf00      	nop
 8005cce:	e7fd      	b.n	8005ccc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005cd6:	f023 0301 	bic.w	r3, r3, #1
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	6978      	ldr	r0, [r7, #20]
 8005ce8:	4798      	blx	r3
}
 8005cea:	bf00      	nop
 8005cec:	3718      	adds	r7, #24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	20000d98 	.word	0x20000d98

08005cf8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d00:	f107 0308 	add.w	r3, r7, #8
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 f859 	bl	8005dbc <prvGetNextExpireTime>
 8005d0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 f805 	bl	8005d20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d16:	f000 f8d7 	bl	8005ec8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d1a:	bf00      	nop
 8005d1c:	e7f0      	b.n	8005d00 <prvTimerTask+0x8>
	...

08005d20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d2a:	f7ff f937 	bl	8004f9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d2e:	f107 0308 	add.w	r3, r7, #8
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 f866 	bl	8005e04 <prvSampleTimeNow>
 8005d38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d130      	bne.n	8005da2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10a      	bne.n	8005d5c <prvProcessTimerOrBlockTask+0x3c>
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d806      	bhi.n	8005d5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d4e:	f7ff f933 	bl	8004fb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d52:	68f9      	ldr	r1, [r7, #12]
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7ff ff81 	bl	8005c5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d5a:	e024      	b.n	8005da6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d008      	beq.n	8005d74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d62:	4b13      	ldr	r3, [pc, #76]	@ (8005db0 <prvProcessTimerOrBlockTask+0x90>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <prvProcessTimerOrBlockTask+0x50>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e000      	b.n	8005d72 <prvProcessTimerOrBlockTask+0x52>
 8005d70:	2300      	movs	r3, #0
 8005d72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d74:	4b0f      	ldr	r3, [pc, #60]	@ (8005db4 <prvProcessTimerOrBlockTask+0x94>)
 8005d76:	6818      	ldr	r0, [r3, #0]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	4619      	mov	r1, r3
 8005d82:	f7fe fe93 	bl	8004aac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005d86:	f7ff f917 	bl	8004fb8 <xTaskResumeAll>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10a      	bne.n	8005da6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005d90:	4b09      	ldr	r3, [pc, #36]	@ (8005db8 <prvProcessTimerOrBlockTask+0x98>)
 8005d92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	f3bf 8f6f 	isb	sy
}
 8005da0:	e001      	b.n	8005da6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005da2:	f7ff f909 	bl	8004fb8 <xTaskResumeAll>
}
 8005da6:	bf00      	nop
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	20000d9c 	.word	0x20000d9c
 8005db4:	20000da0 	.word	0x20000da0
 8005db8:	e000ed04 	.word	0xe000ed04

08005dbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8005e00 <prvGetNextExpireTime+0x44>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d101      	bne.n	8005dd2 <prvGetNextExpireTime+0x16>
 8005dce:	2201      	movs	r2, #1
 8005dd0:	e000      	b.n	8005dd4 <prvGetNextExpireTime+0x18>
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d105      	bne.n	8005dec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005de0:	4b07      	ldr	r3, [pc, #28]	@ (8005e00 <prvGetNextExpireTime+0x44>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	60fb      	str	r3, [r7, #12]
 8005dea:	e001      	b.n	8005df0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005df0:	68fb      	ldr	r3, [r7, #12]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	20000d98 	.word	0x20000d98

08005e04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e0c:	f7ff f972 	bl	80050f4 <xTaskGetTickCount>
 8005e10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e12:	4b0b      	ldr	r3, [pc, #44]	@ (8005e40 <prvSampleTimeNow+0x3c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d205      	bcs.n	8005e28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005e1c:	f000 f93a 	bl	8006094 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	e002      	b.n	8005e2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e2e:	4a04      	ldr	r2, [pc, #16]	@ (8005e40 <prvSampleTimeNow+0x3c>)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e34:	68fb      	ldr	r3, [r7, #12]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	20000da8 	.word	0x20000da8

08005e44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
 8005e50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e52:	2300      	movs	r3, #0
 8005e54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d812      	bhi.n	8005e90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	1ad2      	subs	r2, r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d302      	bcc.n	8005e7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	e01b      	b.n	8005eb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e7e:	4b10      	ldr	r3, [pc, #64]	@ (8005ec0 <prvInsertTimerInActiveList+0x7c>)
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	3304      	adds	r3, #4
 8005e86:	4619      	mov	r1, r3
 8005e88:	4610      	mov	r0, r2
 8005e8a:	f7fd fdb4 	bl	80039f6 <vListInsert>
 8005e8e:	e012      	b.n	8005eb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d206      	bcs.n	8005ea6 <prvInsertTimerInActiveList+0x62>
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d302      	bcc.n	8005ea6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	617b      	str	r3, [r7, #20]
 8005ea4:	e007      	b.n	8005eb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ea6:	4b07      	ldr	r3, [pc, #28]	@ (8005ec4 <prvInsertTimerInActiveList+0x80>)
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	3304      	adds	r3, #4
 8005eae:	4619      	mov	r1, r3
 8005eb0:	4610      	mov	r0, r2
 8005eb2:	f7fd fda0 	bl	80039f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005eb6:	697b      	ldr	r3, [r7, #20]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3718      	adds	r7, #24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	20000d9c 	.word	0x20000d9c
 8005ec4:	20000d98 	.word	0x20000d98

08005ec8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b08e      	sub	sp, #56	@ 0x38
 8005ecc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ece:	e0ce      	b.n	800606e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	da19      	bge.n	8005f0a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005ed6:	1d3b      	adds	r3, r7, #4
 8005ed8:	3304      	adds	r3, #4
 8005eda:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10b      	bne.n	8005efa <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	61fb      	str	r3, [r7, #28]
}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop
 8005ef8:	e7fd      	b.n	8005ef6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f00:	6850      	ldr	r0, [r2, #4]
 8005f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f04:	6892      	ldr	r2, [r2, #8]
 8005f06:	4611      	mov	r1, r2
 8005f08:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f2c0 80ae 	blt.w	800606e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d004      	beq.n	8005f28 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f20:	3304      	adds	r3, #4
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fd fda0 	bl	8003a68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f28:	463b      	mov	r3, r7
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7ff ff6a 	bl	8005e04 <prvSampleTimeNow>
 8005f30:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b09      	cmp	r3, #9
 8005f36:	f200 8097 	bhi.w	8006068 <prvProcessReceivedCommands+0x1a0>
 8005f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f40 <prvProcessReceivedCommands+0x78>)
 8005f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f40:	08005f69 	.word	0x08005f69
 8005f44:	08005f69 	.word	0x08005f69
 8005f48:	08005f69 	.word	0x08005f69
 8005f4c:	08005fdf 	.word	0x08005fdf
 8005f50:	08005ff3 	.word	0x08005ff3
 8005f54:	0800603f 	.word	0x0800603f
 8005f58:	08005f69 	.word	0x08005f69
 8005f5c:	08005f69 	.word	0x08005f69
 8005f60:	08005fdf 	.word	0x08005fdf
 8005f64:	08005ff3 	.word	0x08005ff3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f6e:	f043 0301 	orr.w	r3, r3, #1
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	18d1      	adds	r1, r2, r3
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f88:	f7ff ff5c 	bl	8005e44 <prvInsertTimerInActiveList>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d06c      	beq.n	800606c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fa0:	f003 0304 	and.w	r3, r3, #4
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d061      	beq.n	800606c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	441a      	add	r2, r3
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fba:	f7ff fe01 	bl	8005bc0 <xTimerGenericCommand>
 8005fbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d152      	bne.n	800606c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fca:	f383 8811 	msr	BASEPRI, r3
 8005fce:	f3bf 8f6f 	isb	sy
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	61bb      	str	r3, [r7, #24]
}
 8005fd8:	bf00      	nop
 8005fda:	bf00      	nop
 8005fdc:	e7fd      	b.n	8005fda <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fe4:	f023 0301 	bic.w	r3, r3, #1
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005ff0:	e03d      	b.n	800606e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ff8:	f043 0301 	orr.w	r3, r3, #1
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006000:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006008:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800600a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10b      	bne.n	800602a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	617b      	str	r3, [r7, #20]
}
 8006024:	bf00      	nop
 8006026:	bf00      	nop
 8006028:	e7fd      	b.n	8006026 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800602a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800602c:	699a      	ldr	r2, [r3, #24]
 800602e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006030:	18d1      	adds	r1, r2, r3
 8006032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006036:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006038:	f7ff ff04 	bl	8005e44 <prvInsertTimerInActiveList>
					break;
 800603c:	e017      	b.n	800606e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800603e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006040:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d103      	bne.n	8006054 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800604c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800604e:	f000 fbeb 	bl	8006828 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006052:	e00c      	b.n	800606e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006056:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800605a:	f023 0301 	bic.w	r3, r3, #1
 800605e:	b2da      	uxtb	r2, r3
 8006060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006062:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006066:	e002      	b.n	800606e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006068:	bf00      	nop
 800606a:	e000      	b.n	800606e <prvProcessReceivedCommands+0x1a6>
					break;
 800606c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800606e:	4b08      	ldr	r3, [pc, #32]	@ (8006090 <prvProcessReceivedCommands+0x1c8>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	1d39      	adds	r1, r7, #4
 8006074:	2200      	movs	r2, #0
 8006076:	4618      	mov	r0, r3
 8006078:	f7fe f904 	bl	8004284 <xQueueReceive>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	f47f af26 	bne.w	8005ed0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006084:	bf00      	nop
 8006086:	bf00      	nop
 8006088:	3730      	adds	r7, #48	@ 0x30
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	20000da0 	.word	0x20000da0

08006094 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b088      	sub	sp, #32
 8006098:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800609a:	e049      	b.n	8006130 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800609c:	4b2e      	ldr	r3, [pc, #184]	@ (8006158 <prvSwitchTimerLists+0xc4>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060a6:	4b2c      	ldr	r3, [pc, #176]	@ (8006158 <prvSwitchTimerLists+0xc4>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	3304      	adds	r3, #4
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7fd fcd7 	bl	8003a68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d02f      	beq.n	8006130 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	4413      	add	r3, r2
 80060d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d90e      	bls.n	8006100 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006158 <prvSwitchTimerLists+0xc4>)
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	3304      	adds	r3, #4
 80060f6:	4619      	mov	r1, r3
 80060f8:	4610      	mov	r0, r2
 80060fa:	f7fd fc7c 	bl	80039f6 <vListInsert>
 80060fe:	e017      	b.n	8006130 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006100:	2300      	movs	r3, #0
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	2300      	movs	r3, #0
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	2100      	movs	r1, #0
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f7ff fd58 	bl	8005bc0 <xTimerGenericCommand>
 8006110:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10b      	bne.n	8006130 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800611c:	f383 8811 	msr	BASEPRI, r3
 8006120:	f3bf 8f6f 	isb	sy
 8006124:	f3bf 8f4f 	dsb	sy
 8006128:	603b      	str	r3, [r7, #0]
}
 800612a:	bf00      	nop
 800612c:	bf00      	nop
 800612e:	e7fd      	b.n	800612c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006130:	4b09      	ldr	r3, [pc, #36]	@ (8006158 <prvSwitchTimerLists+0xc4>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1b0      	bne.n	800609c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800613a:	4b07      	ldr	r3, [pc, #28]	@ (8006158 <prvSwitchTimerLists+0xc4>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006140:	4b06      	ldr	r3, [pc, #24]	@ (800615c <prvSwitchTimerLists+0xc8>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a04      	ldr	r2, [pc, #16]	@ (8006158 <prvSwitchTimerLists+0xc4>)
 8006146:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006148:	4a04      	ldr	r2, [pc, #16]	@ (800615c <prvSwitchTimerLists+0xc8>)
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	6013      	str	r3, [r2, #0]
}
 800614e:	bf00      	nop
 8006150:	3718      	adds	r7, #24
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	20000d98 	.word	0x20000d98
 800615c:	20000d9c 	.word	0x20000d9c

08006160 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006166:	f000 f96f 	bl	8006448 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800616a:	4b15      	ldr	r3, [pc, #84]	@ (80061c0 <prvCheckForValidListAndQueue+0x60>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d120      	bne.n	80061b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006172:	4814      	ldr	r0, [pc, #80]	@ (80061c4 <prvCheckForValidListAndQueue+0x64>)
 8006174:	f7fd fbee 	bl	8003954 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006178:	4813      	ldr	r0, [pc, #76]	@ (80061c8 <prvCheckForValidListAndQueue+0x68>)
 800617a:	f7fd fbeb 	bl	8003954 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800617e:	4b13      	ldr	r3, [pc, #76]	@ (80061cc <prvCheckForValidListAndQueue+0x6c>)
 8006180:	4a10      	ldr	r2, [pc, #64]	@ (80061c4 <prvCheckForValidListAndQueue+0x64>)
 8006182:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006184:	4b12      	ldr	r3, [pc, #72]	@ (80061d0 <prvCheckForValidListAndQueue+0x70>)
 8006186:	4a10      	ldr	r2, [pc, #64]	@ (80061c8 <prvCheckForValidListAndQueue+0x68>)
 8006188:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800618a:	2300      	movs	r3, #0
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	4b11      	ldr	r3, [pc, #68]	@ (80061d4 <prvCheckForValidListAndQueue+0x74>)
 8006190:	4a11      	ldr	r2, [pc, #68]	@ (80061d8 <prvCheckForValidListAndQueue+0x78>)
 8006192:	2110      	movs	r1, #16
 8006194:	200a      	movs	r0, #10
 8006196:	f7fd fcfb 	bl	8003b90 <xQueueGenericCreateStatic>
 800619a:	4603      	mov	r3, r0
 800619c:	4a08      	ldr	r2, [pc, #32]	@ (80061c0 <prvCheckForValidListAndQueue+0x60>)
 800619e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80061a0:	4b07      	ldr	r3, [pc, #28]	@ (80061c0 <prvCheckForValidListAndQueue+0x60>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d005      	beq.n	80061b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80061a8:	4b05      	ldr	r3, [pc, #20]	@ (80061c0 <prvCheckForValidListAndQueue+0x60>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	490b      	ldr	r1, [pc, #44]	@ (80061dc <prvCheckForValidListAndQueue+0x7c>)
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fe fc28 	bl	8004a04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061b4:	f000 f97a 	bl	80064ac <vPortExitCritical>
}
 80061b8:	bf00      	nop
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	20000da0 	.word	0x20000da0
 80061c4:	20000d70 	.word	0x20000d70
 80061c8:	20000d84 	.word	0x20000d84
 80061cc:	20000d98 	.word	0x20000d98
 80061d0:	20000d9c 	.word	0x20000d9c
 80061d4:	20000e4c 	.word	0x20000e4c
 80061d8:	20000dac 	.word	0x20000dac
 80061dc:	080074f0 	.word	0x080074f0

080061e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	3b04      	subs	r3, #4
 80061f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80061f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	3b04      	subs	r3, #4
 80061fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f023 0201 	bic.w	r2, r3, #1
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	3b04      	subs	r3, #4
 800620e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006210:	4a0c      	ldr	r2, [pc, #48]	@ (8006244 <pxPortInitialiseStack+0x64>)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	3b14      	subs	r3, #20
 800621a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3b04      	subs	r3, #4
 8006226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f06f 0202 	mvn.w	r2, #2
 800622e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	3b20      	subs	r3, #32
 8006234:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006236:	68fb      	ldr	r3, [r7, #12]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	08006249 	.word	0x08006249

08006248 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800624e:	2300      	movs	r3, #0
 8006250:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006252:	4b13      	ldr	r3, [pc, #76]	@ (80062a0 <prvTaskExitError+0x58>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800625a:	d00b      	beq.n	8006274 <prvTaskExitError+0x2c>
	__asm volatile
 800625c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	60fb      	str	r3, [r7, #12]
}
 800626e:	bf00      	nop
 8006270:	bf00      	nop
 8006272:	e7fd      	b.n	8006270 <prvTaskExitError+0x28>
	__asm volatile
 8006274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006278:	f383 8811 	msr	BASEPRI, r3
 800627c:	f3bf 8f6f 	isb	sy
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	60bb      	str	r3, [r7, #8]
}
 8006286:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006288:	bf00      	nop
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d0fc      	beq.n	800628a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006290:	bf00      	nop
 8006292:	bf00      	nop
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	2000000c 	.word	0x2000000c
	...

080062b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062b0:	4b07      	ldr	r3, [pc, #28]	@ (80062d0 <pxCurrentTCBConst2>)
 80062b2:	6819      	ldr	r1, [r3, #0]
 80062b4:	6808      	ldr	r0, [r1, #0]
 80062b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ba:	f380 8809 	msr	PSP, r0
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f04f 0000 	mov.w	r0, #0
 80062c6:	f380 8811 	msr	BASEPRI, r0
 80062ca:	4770      	bx	lr
 80062cc:	f3af 8000 	nop.w

080062d0 <pxCurrentTCBConst2>:
 80062d0:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062d4:	bf00      	nop
 80062d6:	bf00      	nop

080062d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80062d8:	4808      	ldr	r0, [pc, #32]	@ (80062fc <prvPortStartFirstTask+0x24>)
 80062da:	6800      	ldr	r0, [r0, #0]
 80062dc:	6800      	ldr	r0, [r0, #0]
 80062de:	f380 8808 	msr	MSP, r0
 80062e2:	f04f 0000 	mov.w	r0, #0
 80062e6:	f380 8814 	msr	CONTROL, r0
 80062ea:	b662      	cpsie	i
 80062ec:	b661      	cpsie	f
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	df00      	svc	0
 80062f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062fa:	bf00      	nop
 80062fc:	e000ed08 	.word	0xe000ed08

08006300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006306:	4b47      	ldr	r3, [pc, #284]	@ (8006424 <xPortStartScheduler+0x124>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a47      	ldr	r2, [pc, #284]	@ (8006428 <xPortStartScheduler+0x128>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d10b      	bne.n	8006328 <xPortStartScheduler+0x28>
	__asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	60fb      	str	r3, [r7, #12]
}
 8006322:	bf00      	nop
 8006324:	bf00      	nop
 8006326:	e7fd      	b.n	8006324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006328:	4b3e      	ldr	r3, [pc, #248]	@ (8006424 <xPortStartScheduler+0x124>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a3f      	ldr	r2, [pc, #252]	@ (800642c <xPortStartScheduler+0x12c>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d10b      	bne.n	800634a <xPortStartScheduler+0x4a>
	__asm volatile
 8006332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	613b      	str	r3, [r7, #16]
}
 8006344:	bf00      	nop
 8006346:	bf00      	nop
 8006348:	e7fd      	b.n	8006346 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800634a:	4b39      	ldr	r3, [pc, #228]	@ (8006430 <xPortStartScheduler+0x130>)
 800634c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	b2db      	uxtb	r3, r3
 8006354:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	22ff      	movs	r2, #255	@ 0xff
 800635a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	b2db      	uxtb	r3, r3
 8006362:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006364:	78fb      	ldrb	r3, [r7, #3]
 8006366:	b2db      	uxtb	r3, r3
 8006368:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800636c:	b2da      	uxtb	r2, r3
 800636e:	4b31      	ldr	r3, [pc, #196]	@ (8006434 <xPortStartScheduler+0x134>)
 8006370:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006372:	4b31      	ldr	r3, [pc, #196]	@ (8006438 <xPortStartScheduler+0x138>)
 8006374:	2207      	movs	r2, #7
 8006376:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006378:	e009      	b.n	800638e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800637a:	4b2f      	ldr	r3, [pc, #188]	@ (8006438 <xPortStartScheduler+0x138>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3b01      	subs	r3, #1
 8006380:	4a2d      	ldr	r2, [pc, #180]	@ (8006438 <xPortStartScheduler+0x138>)
 8006382:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006384:	78fb      	ldrb	r3, [r7, #3]
 8006386:	b2db      	uxtb	r3, r3
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	b2db      	uxtb	r3, r3
 800638c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800638e:	78fb      	ldrb	r3, [r7, #3]
 8006390:	b2db      	uxtb	r3, r3
 8006392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006396:	2b80      	cmp	r3, #128	@ 0x80
 8006398:	d0ef      	beq.n	800637a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800639a:	4b27      	ldr	r3, [pc, #156]	@ (8006438 <xPortStartScheduler+0x138>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f1c3 0307 	rsb	r3, r3, #7
 80063a2:	2b04      	cmp	r3, #4
 80063a4:	d00b      	beq.n	80063be <xPortStartScheduler+0xbe>
	__asm volatile
 80063a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	60bb      	str	r3, [r7, #8]
}
 80063b8:	bf00      	nop
 80063ba:	bf00      	nop
 80063bc:	e7fd      	b.n	80063ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063be:	4b1e      	ldr	r3, [pc, #120]	@ (8006438 <xPortStartScheduler+0x138>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	021b      	lsls	r3, r3, #8
 80063c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006438 <xPortStartScheduler+0x138>)
 80063c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006438 <xPortStartScheduler+0x138>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80063d0:	4a19      	ldr	r2, [pc, #100]	@ (8006438 <xPortStartScheduler+0x138>)
 80063d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	b2da      	uxtb	r2, r3
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063dc:	4b17      	ldr	r3, [pc, #92]	@ (800643c <xPortStartScheduler+0x13c>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a16      	ldr	r2, [pc, #88]	@ (800643c <xPortStartScheduler+0x13c>)
 80063e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80063e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063e8:	4b14      	ldr	r3, [pc, #80]	@ (800643c <xPortStartScheduler+0x13c>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a13      	ldr	r2, [pc, #76]	@ (800643c <xPortStartScheduler+0x13c>)
 80063ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80063f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063f4:	f000 f8da 	bl	80065ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063f8:	4b11      	ldr	r3, [pc, #68]	@ (8006440 <xPortStartScheduler+0x140>)
 80063fa:	2200      	movs	r2, #0
 80063fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80063fe:	f000 f8f9 	bl	80065f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006402:	4b10      	ldr	r3, [pc, #64]	@ (8006444 <xPortStartScheduler+0x144>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a0f      	ldr	r2, [pc, #60]	@ (8006444 <xPortStartScheduler+0x144>)
 8006408:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800640c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800640e:	f7ff ff63 	bl	80062d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006412:	f7fe ff39 	bl	8005288 <vTaskSwitchContext>
	prvTaskExitError();
 8006416:	f7ff ff17 	bl	8006248 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	e000ed00 	.word	0xe000ed00
 8006428:	410fc271 	.word	0x410fc271
 800642c:	410fc270 	.word	0x410fc270
 8006430:	e000e400 	.word	0xe000e400
 8006434:	20000e9c 	.word	0x20000e9c
 8006438:	20000ea0 	.word	0x20000ea0
 800643c:	e000ed20 	.word	0xe000ed20
 8006440:	2000000c 	.word	0x2000000c
 8006444:	e000ef34 	.word	0xe000ef34

08006448 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
	__asm volatile
 800644e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	607b      	str	r3, [r7, #4]
}
 8006460:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006462:	4b10      	ldr	r3, [pc, #64]	@ (80064a4 <vPortEnterCritical+0x5c>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3301      	adds	r3, #1
 8006468:	4a0e      	ldr	r2, [pc, #56]	@ (80064a4 <vPortEnterCritical+0x5c>)
 800646a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800646c:	4b0d      	ldr	r3, [pc, #52]	@ (80064a4 <vPortEnterCritical+0x5c>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d110      	bne.n	8006496 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006474:	4b0c      	ldr	r3, [pc, #48]	@ (80064a8 <vPortEnterCritical+0x60>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00b      	beq.n	8006496 <vPortEnterCritical+0x4e>
	__asm volatile
 800647e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	603b      	str	r3, [r7, #0]
}
 8006490:	bf00      	nop
 8006492:	bf00      	nop
 8006494:	e7fd      	b.n	8006492 <vPortEnterCritical+0x4a>
	}
}
 8006496:	bf00      	nop
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	2000000c 	.word	0x2000000c
 80064a8:	e000ed04 	.word	0xe000ed04

080064ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064b2:	4b12      	ldr	r3, [pc, #72]	@ (80064fc <vPortExitCritical+0x50>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10b      	bne.n	80064d2 <vPortExitCritical+0x26>
	__asm volatile
 80064ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	607b      	str	r3, [r7, #4]
}
 80064cc:	bf00      	nop
 80064ce:	bf00      	nop
 80064d0:	e7fd      	b.n	80064ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80064d2:	4b0a      	ldr	r3, [pc, #40]	@ (80064fc <vPortExitCritical+0x50>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	3b01      	subs	r3, #1
 80064d8:	4a08      	ldr	r2, [pc, #32]	@ (80064fc <vPortExitCritical+0x50>)
 80064da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064dc:	4b07      	ldr	r3, [pc, #28]	@ (80064fc <vPortExitCritical+0x50>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d105      	bne.n	80064f0 <vPortExitCritical+0x44>
 80064e4:	2300      	movs	r3, #0
 80064e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	f383 8811 	msr	BASEPRI, r3
}
 80064ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	2000000c 	.word	0x2000000c

08006500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006500:	f3ef 8009 	mrs	r0, PSP
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	4b15      	ldr	r3, [pc, #84]	@ (8006560 <pxCurrentTCBConst>)
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	f01e 0f10 	tst.w	lr, #16
 8006510:	bf08      	it	eq
 8006512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651a:	6010      	str	r0, [r2, #0]
 800651c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006520:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006524:	f380 8811 	msr	BASEPRI, r0
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	f7fe feaa 	bl	8005288 <vTaskSwitchContext>
 8006534:	f04f 0000 	mov.w	r0, #0
 8006538:	f380 8811 	msr	BASEPRI, r0
 800653c:	bc09      	pop	{r0, r3}
 800653e:	6819      	ldr	r1, [r3, #0]
 8006540:	6808      	ldr	r0, [r1, #0]
 8006542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006546:	f01e 0f10 	tst.w	lr, #16
 800654a:	bf08      	it	eq
 800654c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006550:	f380 8809 	msr	PSP, r0
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	f3af 8000 	nop.w

08006560 <pxCurrentTCBConst>:
 8006560:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006564:	bf00      	nop
 8006566:	bf00      	nop

08006568 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	607b      	str	r3, [r7, #4]
}
 8006580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006582:	f7fe fdc7 	bl	8005114 <xTaskIncrementTick>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d003      	beq.n	8006594 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800658c:	4b06      	ldr	r3, [pc, #24]	@ (80065a8 <xPortSysTickHandler+0x40>)
 800658e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	2300      	movs	r3, #0
 8006596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	f383 8811 	msr	BASEPRI, r3
}
 800659e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065a0:	bf00      	nop
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	e000ed04 	.word	0xe000ed04

080065ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065ac:	b480      	push	{r7}
 80065ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065b0:	4b0b      	ldr	r3, [pc, #44]	@ (80065e0 <vPortSetupTimerInterrupt+0x34>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065b6:	4b0b      	ldr	r3, [pc, #44]	@ (80065e4 <vPortSetupTimerInterrupt+0x38>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065bc:	4b0a      	ldr	r3, [pc, #40]	@ (80065e8 <vPortSetupTimerInterrupt+0x3c>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a0a      	ldr	r2, [pc, #40]	@ (80065ec <vPortSetupTimerInterrupt+0x40>)
 80065c2:	fba2 2303 	umull	r2, r3, r2, r3
 80065c6:	099b      	lsrs	r3, r3, #6
 80065c8:	4a09      	ldr	r2, [pc, #36]	@ (80065f0 <vPortSetupTimerInterrupt+0x44>)
 80065ca:	3b01      	subs	r3, #1
 80065cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065ce:	4b04      	ldr	r3, [pc, #16]	@ (80065e0 <vPortSetupTimerInterrupt+0x34>)
 80065d0:	2207      	movs	r2, #7
 80065d2:	601a      	str	r2, [r3, #0]
}
 80065d4:	bf00      	nop
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	e000e010 	.word	0xe000e010
 80065e4:	e000e018 	.word	0xe000e018
 80065e8:	20000000 	.word	0x20000000
 80065ec:	10624dd3 	.word	0x10624dd3
 80065f0:	e000e014 	.word	0xe000e014

080065f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006604 <vPortEnableVFP+0x10>
 80065f8:	6801      	ldr	r1, [r0, #0]
 80065fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80065fe:	6001      	str	r1, [r0, #0]
 8006600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006602:	bf00      	nop
 8006604:	e000ed88 	.word	0xe000ed88

08006608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800660e:	f3ef 8305 	mrs	r3, IPSR
 8006612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b0f      	cmp	r3, #15
 8006618:	d915      	bls.n	8006646 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800661a:	4a18      	ldr	r2, [pc, #96]	@ (800667c <vPortValidateInterruptPriority+0x74>)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4413      	add	r3, r2
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006624:	4b16      	ldr	r3, [pc, #88]	@ (8006680 <vPortValidateInterruptPriority+0x78>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	7afa      	ldrb	r2, [r7, #11]
 800662a:	429a      	cmp	r2, r3
 800662c:	d20b      	bcs.n	8006646 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	607b      	str	r3, [r7, #4]
}
 8006640:	bf00      	nop
 8006642:	bf00      	nop
 8006644:	e7fd      	b.n	8006642 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006646:	4b0f      	ldr	r3, [pc, #60]	@ (8006684 <vPortValidateInterruptPriority+0x7c>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800664e:	4b0e      	ldr	r3, [pc, #56]	@ (8006688 <vPortValidateInterruptPriority+0x80>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	429a      	cmp	r2, r3
 8006654:	d90b      	bls.n	800666e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	603b      	str	r3, [r7, #0]
}
 8006668:	bf00      	nop
 800666a:	bf00      	nop
 800666c:	e7fd      	b.n	800666a <vPortValidateInterruptPriority+0x62>
	}
 800666e:	bf00      	nop
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	e000e3f0 	.word	0xe000e3f0
 8006680:	20000e9c 	.word	0x20000e9c
 8006684:	e000ed0c 	.word	0xe000ed0c
 8006688:	20000ea0 	.word	0x20000ea0

0800668c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b08a      	sub	sp, #40	@ 0x28
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006694:	2300      	movs	r3, #0
 8006696:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006698:	f7fe fc80 	bl	8004f9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800669c:	4b5c      	ldr	r3, [pc, #368]	@ (8006810 <pvPortMalloc+0x184>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d101      	bne.n	80066a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066a4:	f000 f924 	bl	80068f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066a8:	4b5a      	ldr	r3, [pc, #360]	@ (8006814 <pvPortMalloc+0x188>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4013      	ands	r3, r2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f040 8095 	bne.w	80067e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d01e      	beq.n	80066fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80066bc:	2208      	movs	r2, #8
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4413      	add	r3, r2
 80066c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f003 0307 	and.w	r3, r3, #7
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d015      	beq.n	80066fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f023 0307 	bic.w	r3, r3, #7
 80066d4:	3308      	adds	r3, #8
 80066d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f003 0307 	and.w	r3, r3, #7
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00b      	beq.n	80066fa <pvPortMalloc+0x6e>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	617b      	str	r3, [r7, #20]
}
 80066f4:	bf00      	nop
 80066f6:	bf00      	nop
 80066f8:	e7fd      	b.n	80066f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d06f      	beq.n	80067e0 <pvPortMalloc+0x154>
 8006700:	4b45      	ldr	r3, [pc, #276]	@ (8006818 <pvPortMalloc+0x18c>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	429a      	cmp	r2, r3
 8006708:	d86a      	bhi.n	80067e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800670a:	4b44      	ldr	r3, [pc, #272]	@ (800681c <pvPortMalloc+0x190>)
 800670c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800670e:	4b43      	ldr	r3, [pc, #268]	@ (800681c <pvPortMalloc+0x190>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006714:	e004      	b.n	8006720 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006718:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800671a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	429a      	cmp	r2, r3
 8006728:	d903      	bls.n	8006732 <pvPortMalloc+0xa6>
 800672a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1f1      	bne.n	8006716 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006732:	4b37      	ldr	r3, [pc, #220]	@ (8006810 <pvPortMalloc+0x184>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006738:	429a      	cmp	r2, r3
 800673a:	d051      	beq.n	80067e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2208      	movs	r2, #8
 8006742:	4413      	add	r3, r2
 8006744:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	6a3b      	ldr	r3, [r7, #32]
 800674c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800674e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006750:	685a      	ldr	r2, [r3, #4]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	1ad2      	subs	r2, r2, r3
 8006756:	2308      	movs	r3, #8
 8006758:	005b      	lsls	r3, r3, #1
 800675a:	429a      	cmp	r2, r3
 800675c:	d920      	bls.n	80067a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800675e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4413      	add	r3, r2
 8006764:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	f003 0307 	and.w	r3, r3, #7
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00b      	beq.n	8006788 <pvPortMalloc+0xfc>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	613b      	str	r3, [r7, #16]
}
 8006782:	bf00      	nop
 8006784:	bf00      	nop
 8006786:	e7fd      	b.n	8006784 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	1ad2      	subs	r2, r2, r3
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800679a:	69b8      	ldr	r0, [r7, #24]
 800679c:	f000 f90a 	bl	80069b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006818 <pvPortMalloc+0x18c>)
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	4a1b      	ldr	r2, [pc, #108]	@ (8006818 <pvPortMalloc+0x18c>)
 80067ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067ae:	4b1a      	ldr	r3, [pc, #104]	@ (8006818 <pvPortMalloc+0x18c>)
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006820 <pvPortMalloc+0x194>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d203      	bcs.n	80067c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067ba:	4b17      	ldr	r3, [pc, #92]	@ (8006818 <pvPortMalloc+0x18c>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a18      	ldr	r2, [pc, #96]	@ (8006820 <pvPortMalloc+0x194>)
 80067c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c4:	685a      	ldr	r2, [r3, #4]
 80067c6:	4b13      	ldr	r3, [pc, #76]	@ (8006814 <pvPortMalloc+0x188>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	431a      	orrs	r2, r3
 80067cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d2:	2200      	movs	r2, #0
 80067d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80067d6:	4b13      	ldr	r3, [pc, #76]	@ (8006824 <pvPortMalloc+0x198>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3301      	adds	r3, #1
 80067dc:	4a11      	ldr	r2, [pc, #68]	@ (8006824 <pvPortMalloc+0x198>)
 80067de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067e0:	f7fe fbea 	bl	8004fb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	f003 0307 	and.w	r3, r3, #7
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00b      	beq.n	8006806 <pvPortMalloc+0x17a>
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	60fb      	str	r3, [r7, #12]
}
 8006800:	bf00      	nop
 8006802:	bf00      	nop
 8006804:	e7fd      	b.n	8006802 <pvPortMalloc+0x176>
	return pvReturn;
 8006806:	69fb      	ldr	r3, [r7, #28]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3728      	adds	r7, #40	@ 0x28
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	20001a64 	.word	0x20001a64
 8006814:	20001a78 	.word	0x20001a78
 8006818:	20001a68 	.word	0x20001a68
 800681c:	20001a5c 	.word	0x20001a5c
 8006820:	20001a6c 	.word	0x20001a6c
 8006824:	20001a70 	.word	0x20001a70

08006828 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d04f      	beq.n	80068da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800683a:	2308      	movs	r3, #8
 800683c:	425b      	negs	r3, r3
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	4413      	add	r3, r2
 8006842:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	4b25      	ldr	r3, [pc, #148]	@ (80068e4 <vPortFree+0xbc>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4013      	ands	r3, r2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10b      	bne.n	800686e <vPortFree+0x46>
	__asm volatile
 8006856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	60fb      	str	r3, [r7, #12]
}
 8006868:	bf00      	nop
 800686a:	bf00      	nop
 800686c:	e7fd      	b.n	800686a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00b      	beq.n	800688e <vPortFree+0x66>
	__asm volatile
 8006876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800687a:	f383 8811 	msr	BASEPRI, r3
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	60bb      	str	r3, [r7, #8]
}
 8006888:	bf00      	nop
 800688a:	bf00      	nop
 800688c:	e7fd      	b.n	800688a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	4b14      	ldr	r3, [pc, #80]	@ (80068e4 <vPortFree+0xbc>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4013      	ands	r3, r2
 8006898:	2b00      	cmp	r3, #0
 800689a:	d01e      	beq.n	80068da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d11a      	bne.n	80068da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	4b0e      	ldr	r3, [pc, #56]	@ (80068e4 <vPortFree+0xbc>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	43db      	mvns	r3, r3
 80068ae:	401a      	ands	r2, r3
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068b4:	f7fe fb72 	bl	8004f9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	4b0a      	ldr	r3, [pc, #40]	@ (80068e8 <vPortFree+0xc0>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4413      	add	r3, r2
 80068c2:	4a09      	ldr	r2, [pc, #36]	@ (80068e8 <vPortFree+0xc0>)
 80068c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068c6:	6938      	ldr	r0, [r7, #16]
 80068c8:	f000 f874 	bl	80069b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80068cc:	4b07      	ldr	r3, [pc, #28]	@ (80068ec <vPortFree+0xc4>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	3301      	adds	r3, #1
 80068d2:	4a06      	ldr	r2, [pc, #24]	@ (80068ec <vPortFree+0xc4>)
 80068d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80068d6:	f7fe fb6f 	bl	8004fb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068da:	bf00      	nop
 80068dc:	3718      	adds	r7, #24
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20001a78 	.word	0x20001a78
 80068e8:	20001a68 	.word	0x20001a68
 80068ec:	20001a74 	.word	0x20001a74

080068f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068f6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80068fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068fc:	4b27      	ldr	r3, [pc, #156]	@ (800699c <prvHeapInit+0xac>)
 80068fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f003 0307 	and.w	r3, r3, #7
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00c      	beq.n	8006924 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	3307      	adds	r3, #7
 800690e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f023 0307 	bic.w	r3, r3, #7
 8006916:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	4a1f      	ldr	r2, [pc, #124]	@ (800699c <prvHeapInit+0xac>)
 8006920:	4413      	add	r3, r2
 8006922:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006928:	4a1d      	ldr	r2, [pc, #116]	@ (80069a0 <prvHeapInit+0xb0>)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800692e:	4b1c      	ldr	r3, [pc, #112]	@ (80069a0 <prvHeapInit+0xb0>)
 8006930:	2200      	movs	r2, #0
 8006932:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	4413      	add	r3, r2
 800693a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800693c:	2208      	movs	r2, #8
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	1a9b      	subs	r3, r3, r2
 8006942:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f023 0307 	bic.w	r3, r3, #7
 800694a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4a15      	ldr	r2, [pc, #84]	@ (80069a4 <prvHeapInit+0xb4>)
 8006950:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006952:	4b14      	ldr	r3, [pc, #80]	@ (80069a4 <prvHeapInit+0xb4>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2200      	movs	r2, #0
 8006958:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800695a:	4b12      	ldr	r3, [pc, #72]	@ (80069a4 <prvHeapInit+0xb4>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2200      	movs	r2, #0
 8006960:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	1ad2      	subs	r2, r2, r3
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006970:	4b0c      	ldr	r3, [pc, #48]	@ (80069a4 <prvHeapInit+0xb4>)
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	4a0a      	ldr	r2, [pc, #40]	@ (80069a8 <prvHeapInit+0xb8>)
 800697e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	4a09      	ldr	r2, [pc, #36]	@ (80069ac <prvHeapInit+0xbc>)
 8006986:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006988:	4b09      	ldr	r3, [pc, #36]	@ (80069b0 <prvHeapInit+0xc0>)
 800698a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800698e:	601a      	str	r2, [r3, #0]
}
 8006990:	bf00      	nop
 8006992:	3714      	adds	r7, #20
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	20000ea4 	.word	0x20000ea4
 80069a0:	20001a5c 	.word	0x20001a5c
 80069a4:	20001a64 	.word	0x20001a64
 80069a8:	20001a6c 	.word	0x20001a6c
 80069ac:	20001a68 	.word	0x20001a68
 80069b0:	20001a78 	.word	0x20001a78

080069b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069bc:	4b28      	ldr	r3, [pc, #160]	@ (8006a60 <prvInsertBlockIntoFreeList+0xac>)
 80069be:	60fb      	str	r3, [r7, #12]
 80069c0:	e002      	b.n	80069c8 <prvInsertBlockIntoFreeList+0x14>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	60fb      	str	r3, [r7, #12]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d8f7      	bhi.n	80069c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	4413      	add	r3, r2
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d108      	bne.n	80069f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	441a      	add	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	441a      	add	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d118      	bne.n	8006a3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	4b15      	ldr	r3, [pc, #84]	@ (8006a64 <prvInsertBlockIntoFreeList+0xb0>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d00d      	beq.n	8006a32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685a      	ldr	r2, [r3, #4]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	441a      	add	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	601a      	str	r2, [r3, #0]
 8006a30:	e008      	b.n	8006a44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a32:	4b0c      	ldr	r3, [pc, #48]	@ (8006a64 <prvInsertBlockIntoFreeList+0xb0>)
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	601a      	str	r2, [r3, #0]
 8006a3a:	e003      	b.n	8006a44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d002      	beq.n	8006a52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a52:	bf00      	nop
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	20001a5c 	.word	0x20001a5c
 8006a64:	20001a64 	.word	0x20001a64

08006a68 <std>:
 8006a68:	2300      	movs	r3, #0
 8006a6a:	b510      	push	{r4, lr}
 8006a6c:	4604      	mov	r4, r0
 8006a6e:	e9c0 3300 	strd	r3, r3, [r0]
 8006a72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a76:	6083      	str	r3, [r0, #8]
 8006a78:	8181      	strh	r1, [r0, #12]
 8006a7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a7c:	81c2      	strh	r2, [r0, #14]
 8006a7e:	6183      	str	r3, [r0, #24]
 8006a80:	4619      	mov	r1, r3
 8006a82:	2208      	movs	r2, #8
 8006a84:	305c      	adds	r0, #92	@ 0x5c
 8006a86:	f000 f9e7 	bl	8006e58 <memset>
 8006a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ac0 <std+0x58>)
 8006a8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ac4 <std+0x5c>)
 8006a90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a92:	4b0d      	ldr	r3, [pc, #52]	@ (8006ac8 <std+0x60>)
 8006a94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a96:	4b0d      	ldr	r3, [pc, #52]	@ (8006acc <std+0x64>)
 8006a98:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad0 <std+0x68>)
 8006a9c:	6224      	str	r4, [r4, #32]
 8006a9e:	429c      	cmp	r4, r3
 8006aa0:	d006      	beq.n	8006ab0 <std+0x48>
 8006aa2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006aa6:	4294      	cmp	r4, r2
 8006aa8:	d002      	beq.n	8006ab0 <std+0x48>
 8006aaa:	33d0      	adds	r3, #208	@ 0xd0
 8006aac:	429c      	cmp	r4, r3
 8006aae:	d105      	bne.n	8006abc <std+0x54>
 8006ab0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ab8:	f000 ba46 	b.w	8006f48 <__retarget_lock_init_recursive>
 8006abc:	bd10      	pop	{r4, pc}
 8006abe:	bf00      	nop
 8006ac0:	08006ca9 	.word	0x08006ca9
 8006ac4:	08006ccb 	.word	0x08006ccb
 8006ac8:	08006d03 	.word	0x08006d03
 8006acc:	08006d27 	.word	0x08006d27
 8006ad0:	20001a7c 	.word	0x20001a7c

08006ad4 <stdio_exit_handler>:
 8006ad4:	4a02      	ldr	r2, [pc, #8]	@ (8006ae0 <stdio_exit_handler+0xc>)
 8006ad6:	4903      	ldr	r1, [pc, #12]	@ (8006ae4 <stdio_exit_handler+0x10>)
 8006ad8:	4803      	ldr	r0, [pc, #12]	@ (8006ae8 <stdio_exit_handler+0x14>)
 8006ada:	f000 b869 	b.w	8006bb0 <_fwalk_sglue>
 8006ade:	bf00      	nop
 8006ae0:	20000010 	.word	0x20000010
 8006ae4:	08007265 	.word	0x08007265
 8006ae8:	20000020 	.word	0x20000020

08006aec <cleanup_stdio>:
 8006aec:	6841      	ldr	r1, [r0, #4]
 8006aee:	4b0c      	ldr	r3, [pc, #48]	@ (8006b20 <cleanup_stdio+0x34>)
 8006af0:	4299      	cmp	r1, r3
 8006af2:	b510      	push	{r4, lr}
 8006af4:	4604      	mov	r4, r0
 8006af6:	d001      	beq.n	8006afc <cleanup_stdio+0x10>
 8006af8:	f000 fbb4 	bl	8007264 <_fflush_r>
 8006afc:	68a1      	ldr	r1, [r4, #8]
 8006afe:	4b09      	ldr	r3, [pc, #36]	@ (8006b24 <cleanup_stdio+0x38>)
 8006b00:	4299      	cmp	r1, r3
 8006b02:	d002      	beq.n	8006b0a <cleanup_stdio+0x1e>
 8006b04:	4620      	mov	r0, r4
 8006b06:	f000 fbad 	bl	8007264 <_fflush_r>
 8006b0a:	68e1      	ldr	r1, [r4, #12]
 8006b0c:	4b06      	ldr	r3, [pc, #24]	@ (8006b28 <cleanup_stdio+0x3c>)
 8006b0e:	4299      	cmp	r1, r3
 8006b10:	d004      	beq.n	8006b1c <cleanup_stdio+0x30>
 8006b12:	4620      	mov	r0, r4
 8006b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b18:	f000 bba4 	b.w	8007264 <_fflush_r>
 8006b1c:	bd10      	pop	{r4, pc}
 8006b1e:	bf00      	nop
 8006b20:	20001a7c 	.word	0x20001a7c
 8006b24:	20001ae4 	.word	0x20001ae4
 8006b28:	20001b4c 	.word	0x20001b4c

08006b2c <global_stdio_init.part.0>:
 8006b2c:	b510      	push	{r4, lr}
 8006b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b5c <global_stdio_init.part.0+0x30>)
 8006b30:	4c0b      	ldr	r4, [pc, #44]	@ (8006b60 <global_stdio_init.part.0+0x34>)
 8006b32:	4a0c      	ldr	r2, [pc, #48]	@ (8006b64 <global_stdio_init.part.0+0x38>)
 8006b34:	601a      	str	r2, [r3, #0]
 8006b36:	4620      	mov	r0, r4
 8006b38:	2200      	movs	r2, #0
 8006b3a:	2104      	movs	r1, #4
 8006b3c:	f7ff ff94 	bl	8006a68 <std>
 8006b40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b44:	2201      	movs	r2, #1
 8006b46:	2109      	movs	r1, #9
 8006b48:	f7ff ff8e 	bl	8006a68 <std>
 8006b4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b50:	2202      	movs	r2, #2
 8006b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b56:	2112      	movs	r1, #18
 8006b58:	f7ff bf86 	b.w	8006a68 <std>
 8006b5c:	20001bb4 	.word	0x20001bb4
 8006b60:	20001a7c 	.word	0x20001a7c
 8006b64:	08006ad5 	.word	0x08006ad5

08006b68 <__sfp_lock_acquire>:
 8006b68:	4801      	ldr	r0, [pc, #4]	@ (8006b70 <__sfp_lock_acquire+0x8>)
 8006b6a:	f000 b9ee 	b.w	8006f4a <__retarget_lock_acquire_recursive>
 8006b6e:	bf00      	nop
 8006b70:	20001bbd 	.word	0x20001bbd

08006b74 <__sfp_lock_release>:
 8006b74:	4801      	ldr	r0, [pc, #4]	@ (8006b7c <__sfp_lock_release+0x8>)
 8006b76:	f000 b9e9 	b.w	8006f4c <__retarget_lock_release_recursive>
 8006b7a:	bf00      	nop
 8006b7c:	20001bbd 	.word	0x20001bbd

08006b80 <__sinit>:
 8006b80:	b510      	push	{r4, lr}
 8006b82:	4604      	mov	r4, r0
 8006b84:	f7ff fff0 	bl	8006b68 <__sfp_lock_acquire>
 8006b88:	6a23      	ldr	r3, [r4, #32]
 8006b8a:	b11b      	cbz	r3, 8006b94 <__sinit+0x14>
 8006b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b90:	f7ff bff0 	b.w	8006b74 <__sfp_lock_release>
 8006b94:	4b04      	ldr	r3, [pc, #16]	@ (8006ba8 <__sinit+0x28>)
 8006b96:	6223      	str	r3, [r4, #32]
 8006b98:	4b04      	ldr	r3, [pc, #16]	@ (8006bac <__sinit+0x2c>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1f5      	bne.n	8006b8c <__sinit+0xc>
 8006ba0:	f7ff ffc4 	bl	8006b2c <global_stdio_init.part.0>
 8006ba4:	e7f2      	b.n	8006b8c <__sinit+0xc>
 8006ba6:	bf00      	nop
 8006ba8:	08006aed 	.word	0x08006aed
 8006bac:	20001bb4 	.word	0x20001bb4

08006bb0 <_fwalk_sglue>:
 8006bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bb4:	4607      	mov	r7, r0
 8006bb6:	4688      	mov	r8, r1
 8006bb8:	4614      	mov	r4, r2
 8006bba:	2600      	movs	r6, #0
 8006bbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006bc0:	f1b9 0901 	subs.w	r9, r9, #1
 8006bc4:	d505      	bpl.n	8006bd2 <_fwalk_sglue+0x22>
 8006bc6:	6824      	ldr	r4, [r4, #0]
 8006bc8:	2c00      	cmp	r4, #0
 8006bca:	d1f7      	bne.n	8006bbc <_fwalk_sglue+0xc>
 8006bcc:	4630      	mov	r0, r6
 8006bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bd2:	89ab      	ldrh	r3, [r5, #12]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d907      	bls.n	8006be8 <_fwalk_sglue+0x38>
 8006bd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	d003      	beq.n	8006be8 <_fwalk_sglue+0x38>
 8006be0:	4629      	mov	r1, r5
 8006be2:	4638      	mov	r0, r7
 8006be4:	47c0      	blx	r8
 8006be6:	4306      	orrs	r6, r0
 8006be8:	3568      	adds	r5, #104	@ 0x68
 8006bea:	e7e9      	b.n	8006bc0 <_fwalk_sglue+0x10>

08006bec <_puts_r>:
 8006bec:	6a03      	ldr	r3, [r0, #32]
 8006bee:	b570      	push	{r4, r5, r6, lr}
 8006bf0:	6884      	ldr	r4, [r0, #8]
 8006bf2:	4605      	mov	r5, r0
 8006bf4:	460e      	mov	r6, r1
 8006bf6:	b90b      	cbnz	r3, 8006bfc <_puts_r+0x10>
 8006bf8:	f7ff ffc2 	bl	8006b80 <__sinit>
 8006bfc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006bfe:	07db      	lsls	r3, r3, #31
 8006c00:	d405      	bmi.n	8006c0e <_puts_r+0x22>
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	0598      	lsls	r0, r3, #22
 8006c06:	d402      	bmi.n	8006c0e <_puts_r+0x22>
 8006c08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c0a:	f000 f99e 	bl	8006f4a <__retarget_lock_acquire_recursive>
 8006c0e:	89a3      	ldrh	r3, [r4, #12]
 8006c10:	0719      	lsls	r1, r3, #28
 8006c12:	d502      	bpl.n	8006c1a <_puts_r+0x2e>
 8006c14:	6923      	ldr	r3, [r4, #16]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d135      	bne.n	8006c86 <_puts_r+0x9a>
 8006c1a:	4621      	mov	r1, r4
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	f000 f8c5 	bl	8006dac <__swsetup_r>
 8006c22:	b380      	cbz	r0, 8006c86 <_puts_r+0x9a>
 8006c24:	f04f 35ff 	mov.w	r5, #4294967295
 8006c28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c2a:	07da      	lsls	r2, r3, #31
 8006c2c:	d405      	bmi.n	8006c3a <_puts_r+0x4e>
 8006c2e:	89a3      	ldrh	r3, [r4, #12]
 8006c30:	059b      	lsls	r3, r3, #22
 8006c32:	d402      	bmi.n	8006c3a <_puts_r+0x4e>
 8006c34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c36:	f000 f989 	bl	8006f4c <__retarget_lock_release_recursive>
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	bd70      	pop	{r4, r5, r6, pc}
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	da04      	bge.n	8006c4c <_puts_r+0x60>
 8006c42:	69a2      	ldr	r2, [r4, #24]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	dc17      	bgt.n	8006c78 <_puts_r+0x8c>
 8006c48:	290a      	cmp	r1, #10
 8006c4a:	d015      	beq.n	8006c78 <_puts_r+0x8c>
 8006c4c:	6823      	ldr	r3, [r4, #0]
 8006c4e:	1c5a      	adds	r2, r3, #1
 8006c50:	6022      	str	r2, [r4, #0]
 8006c52:	7019      	strb	r1, [r3, #0]
 8006c54:	68a3      	ldr	r3, [r4, #8]
 8006c56:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	60a3      	str	r3, [r4, #8]
 8006c5e:	2900      	cmp	r1, #0
 8006c60:	d1ed      	bne.n	8006c3e <_puts_r+0x52>
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	da11      	bge.n	8006c8a <_puts_r+0x9e>
 8006c66:	4622      	mov	r2, r4
 8006c68:	210a      	movs	r1, #10
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	f000 f85f 	bl	8006d2e <__swbuf_r>
 8006c70:	3001      	adds	r0, #1
 8006c72:	d0d7      	beq.n	8006c24 <_puts_r+0x38>
 8006c74:	250a      	movs	r5, #10
 8006c76:	e7d7      	b.n	8006c28 <_puts_r+0x3c>
 8006c78:	4622      	mov	r2, r4
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	f000 f857 	bl	8006d2e <__swbuf_r>
 8006c80:	3001      	adds	r0, #1
 8006c82:	d1e7      	bne.n	8006c54 <_puts_r+0x68>
 8006c84:	e7ce      	b.n	8006c24 <_puts_r+0x38>
 8006c86:	3e01      	subs	r6, #1
 8006c88:	e7e4      	b.n	8006c54 <_puts_r+0x68>
 8006c8a:	6823      	ldr	r3, [r4, #0]
 8006c8c:	1c5a      	adds	r2, r3, #1
 8006c8e:	6022      	str	r2, [r4, #0]
 8006c90:	220a      	movs	r2, #10
 8006c92:	701a      	strb	r2, [r3, #0]
 8006c94:	e7ee      	b.n	8006c74 <_puts_r+0x88>
	...

08006c98 <puts>:
 8006c98:	4b02      	ldr	r3, [pc, #8]	@ (8006ca4 <puts+0xc>)
 8006c9a:	4601      	mov	r1, r0
 8006c9c:	6818      	ldr	r0, [r3, #0]
 8006c9e:	f7ff bfa5 	b.w	8006bec <_puts_r>
 8006ca2:	bf00      	nop
 8006ca4:	2000001c 	.word	0x2000001c

08006ca8 <__sread>:
 8006ca8:	b510      	push	{r4, lr}
 8006caa:	460c      	mov	r4, r1
 8006cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cb0:	f000 f8fc 	bl	8006eac <_read_r>
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	bfab      	itete	ge
 8006cb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006cba:	89a3      	ldrhlt	r3, [r4, #12]
 8006cbc:	181b      	addge	r3, r3, r0
 8006cbe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006cc2:	bfac      	ite	ge
 8006cc4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006cc6:	81a3      	strhlt	r3, [r4, #12]
 8006cc8:	bd10      	pop	{r4, pc}

08006cca <__swrite>:
 8006cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cce:	461f      	mov	r7, r3
 8006cd0:	898b      	ldrh	r3, [r1, #12]
 8006cd2:	05db      	lsls	r3, r3, #23
 8006cd4:	4605      	mov	r5, r0
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	4616      	mov	r6, r2
 8006cda:	d505      	bpl.n	8006ce8 <__swrite+0x1e>
 8006cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f000 f8d0 	bl	8006e88 <_lseek_r>
 8006ce8:	89a3      	ldrh	r3, [r4, #12]
 8006cea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006cf2:	81a3      	strh	r3, [r4, #12]
 8006cf4:	4632      	mov	r2, r6
 8006cf6:	463b      	mov	r3, r7
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cfe:	f000 b8e7 	b.w	8006ed0 <_write_r>

08006d02 <__sseek>:
 8006d02:	b510      	push	{r4, lr}
 8006d04:	460c      	mov	r4, r1
 8006d06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d0a:	f000 f8bd 	bl	8006e88 <_lseek_r>
 8006d0e:	1c43      	adds	r3, r0, #1
 8006d10:	89a3      	ldrh	r3, [r4, #12]
 8006d12:	bf15      	itete	ne
 8006d14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d1e:	81a3      	strheq	r3, [r4, #12]
 8006d20:	bf18      	it	ne
 8006d22:	81a3      	strhne	r3, [r4, #12]
 8006d24:	bd10      	pop	{r4, pc}

08006d26 <__sclose>:
 8006d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d2a:	f000 b89d 	b.w	8006e68 <_close_r>

08006d2e <__swbuf_r>:
 8006d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d30:	460e      	mov	r6, r1
 8006d32:	4614      	mov	r4, r2
 8006d34:	4605      	mov	r5, r0
 8006d36:	b118      	cbz	r0, 8006d40 <__swbuf_r+0x12>
 8006d38:	6a03      	ldr	r3, [r0, #32]
 8006d3a:	b90b      	cbnz	r3, 8006d40 <__swbuf_r+0x12>
 8006d3c:	f7ff ff20 	bl	8006b80 <__sinit>
 8006d40:	69a3      	ldr	r3, [r4, #24]
 8006d42:	60a3      	str	r3, [r4, #8]
 8006d44:	89a3      	ldrh	r3, [r4, #12]
 8006d46:	071a      	lsls	r2, r3, #28
 8006d48:	d501      	bpl.n	8006d4e <__swbuf_r+0x20>
 8006d4a:	6923      	ldr	r3, [r4, #16]
 8006d4c:	b943      	cbnz	r3, 8006d60 <__swbuf_r+0x32>
 8006d4e:	4621      	mov	r1, r4
 8006d50:	4628      	mov	r0, r5
 8006d52:	f000 f82b 	bl	8006dac <__swsetup_r>
 8006d56:	b118      	cbz	r0, 8006d60 <__swbuf_r+0x32>
 8006d58:	f04f 37ff 	mov.w	r7, #4294967295
 8006d5c:	4638      	mov	r0, r7
 8006d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d60:	6823      	ldr	r3, [r4, #0]
 8006d62:	6922      	ldr	r2, [r4, #16]
 8006d64:	1a98      	subs	r0, r3, r2
 8006d66:	6963      	ldr	r3, [r4, #20]
 8006d68:	b2f6      	uxtb	r6, r6
 8006d6a:	4283      	cmp	r3, r0
 8006d6c:	4637      	mov	r7, r6
 8006d6e:	dc05      	bgt.n	8006d7c <__swbuf_r+0x4e>
 8006d70:	4621      	mov	r1, r4
 8006d72:	4628      	mov	r0, r5
 8006d74:	f000 fa76 	bl	8007264 <_fflush_r>
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	d1ed      	bne.n	8006d58 <__swbuf_r+0x2a>
 8006d7c:	68a3      	ldr	r3, [r4, #8]
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	60a3      	str	r3, [r4, #8]
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	6022      	str	r2, [r4, #0]
 8006d88:	701e      	strb	r6, [r3, #0]
 8006d8a:	6962      	ldr	r2, [r4, #20]
 8006d8c:	1c43      	adds	r3, r0, #1
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d004      	beq.n	8006d9c <__swbuf_r+0x6e>
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	07db      	lsls	r3, r3, #31
 8006d96:	d5e1      	bpl.n	8006d5c <__swbuf_r+0x2e>
 8006d98:	2e0a      	cmp	r6, #10
 8006d9a:	d1df      	bne.n	8006d5c <__swbuf_r+0x2e>
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	4628      	mov	r0, r5
 8006da0:	f000 fa60 	bl	8007264 <_fflush_r>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	d0d9      	beq.n	8006d5c <__swbuf_r+0x2e>
 8006da8:	e7d6      	b.n	8006d58 <__swbuf_r+0x2a>
	...

08006dac <__swsetup_r>:
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	4b29      	ldr	r3, [pc, #164]	@ (8006e54 <__swsetup_r+0xa8>)
 8006db0:	4605      	mov	r5, r0
 8006db2:	6818      	ldr	r0, [r3, #0]
 8006db4:	460c      	mov	r4, r1
 8006db6:	b118      	cbz	r0, 8006dc0 <__swsetup_r+0x14>
 8006db8:	6a03      	ldr	r3, [r0, #32]
 8006dba:	b90b      	cbnz	r3, 8006dc0 <__swsetup_r+0x14>
 8006dbc:	f7ff fee0 	bl	8006b80 <__sinit>
 8006dc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dc4:	0719      	lsls	r1, r3, #28
 8006dc6:	d422      	bmi.n	8006e0e <__swsetup_r+0x62>
 8006dc8:	06da      	lsls	r2, r3, #27
 8006dca:	d407      	bmi.n	8006ddc <__swsetup_r+0x30>
 8006dcc:	2209      	movs	r2, #9
 8006dce:	602a      	str	r2, [r5, #0]
 8006dd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dd4:	81a3      	strh	r3, [r4, #12]
 8006dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8006dda:	e033      	b.n	8006e44 <__swsetup_r+0x98>
 8006ddc:	0758      	lsls	r0, r3, #29
 8006dde:	d512      	bpl.n	8006e06 <__swsetup_r+0x5a>
 8006de0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006de2:	b141      	cbz	r1, 8006df6 <__swsetup_r+0x4a>
 8006de4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006de8:	4299      	cmp	r1, r3
 8006dea:	d002      	beq.n	8006df2 <__swsetup_r+0x46>
 8006dec:	4628      	mov	r0, r5
 8006dee:	f000 f8bd 	bl	8006f6c <_free_r>
 8006df2:	2300      	movs	r3, #0
 8006df4:	6363      	str	r3, [r4, #52]	@ 0x34
 8006df6:	89a3      	ldrh	r3, [r4, #12]
 8006df8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006dfc:	81a3      	strh	r3, [r4, #12]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	6063      	str	r3, [r4, #4]
 8006e02:	6923      	ldr	r3, [r4, #16]
 8006e04:	6023      	str	r3, [r4, #0]
 8006e06:	89a3      	ldrh	r3, [r4, #12]
 8006e08:	f043 0308 	orr.w	r3, r3, #8
 8006e0c:	81a3      	strh	r3, [r4, #12]
 8006e0e:	6923      	ldr	r3, [r4, #16]
 8006e10:	b94b      	cbnz	r3, 8006e26 <__swsetup_r+0x7a>
 8006e12:	89a3      	ldrh	r3, [r4, #12]
 8006e14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006e18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e1c:	d003      	beq.n	8006e26 <__swsetup_r+0x7a>
 8006e1e:	4621      	mov	r1, r4
 8006e20:	4628      	mov	r0, r5
 8006e22:	f000 fa6d 	bl	8007300 <__smakebuf_r>
 8006e26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e2a:	f013 0201 	ands.w	r2, r3, #1
 8006e2e:	d00a      	beq.n	8006e46 <__swsetup_r+0x9a>
 8006e30:	2200      	movs	r2, #0
 8006e32:	60a2      	str	r2, [r4, #8]
 8006e34:	6962      	ldr	r2, [r4, #20]
 8006e36:	4252      	negs	r2, r2
 8006e38:	61a2      	str	r2, [r4, #24]
 8006e3a:	6922      	ldr	r2, [r4, #16]
 8006e3c:	b942      	cbnz	r2, 8006e50 <__swsetup_r+0xa4>
 8006e3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006e42:	d1c5      	bne.n	8006dd0 <__swsetup_r+0x24>
 8006e44:	bd38      	pop	{r3, r4, r5, pc}
 8006e46:	0799      	lsls	r1, r3, #30
 8006e48:	bf58      	it	pl
 8006e4a:	6962      	ldrpl	r2, [r4, #20]
 8006e4c:	60a2      	str	r2, [r4, #8]
 8006e4e:	e7f4      	b.n	8006e3a <__swsetup_r+0x8e>
 8006e50:	2000      	movs	r0, #0
 8006e52:	e7f7      	b.n	8006e44 <__swsetup_r+0x98>
 8006e54:	2000001c 	.word	0x2000001c

08006e58 <memset>:
 8006e58:	4402      	add	r2, r0
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d100      	bne.n	8006e62 <memset+0xa>
 8006e60:	4770      	bx	lr
 8006e62:	f803 1b01 	strb.w	r1, [r3], #1
 8006e66:	e7f9      	b.n	8006e5c <memset+0x4>

08006e68 <_close_r>:
 8006e68:	b538      	push	{r3, r4, r5, lr}
 8006e6a:	4d06      	ldr	r5, [pc, #24]	@ (8006e84 <_close_r+0x1c>)
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	4604      	mov	r4, r0
 8006e70:	4608      	mov	r0, r1
 8006e72:	602b      	str	r3, [r5, #0]
 8006e74:	f7f9 fe4b 	bl	8000b0e <_close>
 8006e78:	1c43      	adds	r3, r0, #1
 8006e7a:	d102      	bne.n	8006e82 <_close_r+0x1a>
 8006e7c:	682b      	ldr	r3, [r5, #0]
 8006e7e:	b103      	cbz	r3, 8006e82 <_close_r+0x1a>
 8006e80:	6023      	str	r3, [r4, #0]
 8006e82:	bd38      	pop	{r3, r4, r5, pc}
 8006e84:	20001bb8 	.word	0x20001bb8

08006e88 <_lseek_r>:
 8006e88:	b538      	push	{r3, r4, r5, lr}
 8006e8a:	4d07      	ldr	r5, [pc, #28]	@ (8006ea8 <_lseek_r+0x20>)
 8006e8c:	4604      	mov	r4, r0
 8006e8e:	4608      	mov	r0, r1
 8006e90:	4611      	mov	r1, r2
 8006e92:	2200      	movs	r2, #0
 8006e94:	602a      	str	r2, [r5, #0]
 8006e96:	461a      	mov	r2, r3
 8006e98:	f7f9 fe60 	bl	8000b5c <_lseek>
 8006e9c:	1c43      	adds	r3, r0, #1
 8006e9e:	d102      	bne.n	8006ea6 <_lseek_r+0x1e>
 8006ea0:	682b      	ldr	r3, [r5, #0]
 8006ea2:	b103      	cbz	r3, 8006ea6 <_lseek_r+0x1e>
 8006ea4:	6023      	str	r3, [r4, #0]
 8006ea6:	bd38      	pop	{r3, r4, r5, pc}
 8006ea8:	20001bb8 	.word	0x20001bb8

08006eac <_read_r>:
 8006eac:	b538      	push	{r3, r4, r5, lr}
 8006eae:	4d07      	ldr	r5, [pc, #28]	@ (8006ecc <_read_r+0x20>)
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	4608      	mov	r0, r1
 8006eb4:	4611      	mov	r1, r2
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	602a      	str	r2, [r5, #0]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	f7f9 fdee 	bl	8000a9c <_read>
 8006ec0:	1c43      	adds	r3, r0, #1
 8006ec2:	d102      	bne.n	8006eca <_read_r+0x1e>
 8006ec4:	682b      	ldr	r3, [r5, #0]
 8006ec6:	b103      	cbz	r3, 8006eca <_read_r+0x1e>
 8006ec8:	6023      	str	r3, [r4, #0]
 8006eca:	bd38      	pop	{r3, r4, r5, pc}
 8006ecc:	20001bb8 	.word	0x20001bb8

08006ed0 <_write_r>:
 8006ed0:	b538      	push	{r3, r4, r5, lr}
 8006ed2:	4d07      	ldr	r5, [pc, #28]	@ (8006ef0 <_write_r+0x20>)
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	4608      	mov	r0, r1
 8006ed8:	4611      	mov	r1, r2
 8006eda:	2200      	movs	r2, #0
 8006edc:	602a      	str	r2, [r5, #0]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f7f9 fdf9 	bl	8000ad6 <_write>
 8006ee4:	1c43      	adds	r3, r0, #1
 8006ee6:	d102      	bne.n	8006eee <_write_r+0x1e>
 8006ee8:	682b      	ldr	r3, [r5, #0]
 8006eea:	b103      	cbz	r3, 8006eee <_write_r+0x1e>
 8006eec:	6023      	str	r3, [r4, #0]
 8006eee:	bd38      	pop	{r3, r4, r5, pc}
 8006ef0:	20001bb8 	.word	0x20001bb8

08006ef4 <__errno>:
 8006ef4:	4b01      	ldr	r3, [pc, #4]	@ (8006efc <__errno+0x8>)
 8006ef6:	6818      	ldr	r0, [r3, #0]
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	2000001c 	.word	0x2000001c

08006f00 <__libc_init_array>:
 8006f00:	b570      	push	{r4, r5, r6, lr}
 8006f02:	4d0d      	ldr	r5, [pc, #52]	@ (8006f38 <__libc_init_array+0x38>)
 8006f04:	4c0d      	ldr	r4, [pc, #52]	@ (8006f3c <__libc_init_array+0x3c>)
 8006f06:	1b64      	subs	r4, r4, r5
 8006f08:	10a4      	asrs	r4, r4, #2
 8006f0a:	2600      	movs	r6, #0
 8006f0c:	42a6      	cmp	r6, r4
 8006f0e:	d109      	bne.n	8006f24 <__libc_init_array+0x24>
 8006f10:	4d0b      	ldr	r5, [pc, #44]	@ (8006f40 <__libc_init_array+0x40>)
 8006f12:	4c0c      	ldr	r4, [pc, #48]	@ (8006f44 <__libc_init_array+0x44>)
 8006f14:	f000 fa62 	bl	80073dc <_init>
 8006f18:	1b64      	subs	r4, r4, r5
 8006f1a:	10a4      	asrs	r4, r4, #2
 8006f1c:	2600      	movs	r6, #0
 8006f1e:	42a6      	cmp	r6, r4
 8006f20:	d105      	bne.n	8006f2e <__libc_init_array+0x2e>
 8006f22:	bd70      	pop	{r4, r5, r6, pc}
 8006f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f28:	4798      	blx	r3
 8006f2a:	3601      	adds	r6, #1
 8006f2c:	e7ee      	b.n	8006f0c <__libc_init_array+0xc>
 8006f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f32:	4798      	blx	r3
 8006f34:	3601      	adds	r6, #1
 8006f36:	e7f2      	b.n	8006f1e <__libc_init_array+0x1e>
 8006f38:	080075c4 	.word	0x080075c4
 8006f3c:	080075c4 	.word	0x080075c4
 8006f40:	080075c4 	.word	0x080075c4
 8006f44:	080075c8 	.word	0x080075c8

08006f48 <__retarget_lock_init_recursive>:
 8006f48:	4770      	bx	lr

08006f4a <__retarget_lock_acquire_recursive>:
 8006f4a:	4770      	bx	lr

08006f4c <__retarget_lock_release_recursive>:
 8006f4c:	4770      	bx	lr

08006f4e <memcpy>:
 8006f4e:	440a      	add	r2, r1
 8006f50:	4291      	cmp	r1, r2
 8006f52:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f56:	d100      	bne.n	8006f5a <memcpy+0xc>
 8006f58:	4770      	bx	lr
 8006f5a:	b510      	push	{r4, lr}
 8006f5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f64:	4291      	cmp	r1, r2
 8006f66:	d1f9      	bne.n	8006f5c <memcpy+0xe>
 8006f68:	bd10      	pop	{r4, pc}
	...

08006f6c <_free_r>:
 8006f6c:	b538      	push	{r3, r4, r5, lr}
 8006f6e:	4605      	mov	r5, r0
 8006f70:	2900      	cmp	r1, #0
 8006f72:	d041      	beq.n	8006ff8 <_free_r+0x8c>
 8006f74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f78:	1f0c      	subs	r4, r1, #4
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	bfb8      	it	lt
 8006f7e:	18e4      	addlt	r4, r4, r3
 8006f80:	f000 f8e0 	bl	8007144 <__malloc_lock>
 8006f84:	4a1d      	ldr	r2, [pc, #116]	@ (8006ffc <_free_r+0x90>)
 8006f86:	6813      	ldr	r3, [r2, #0]
 8006f88:	b933      	cbnz	r3, 8006f98 <_free_r+0x2c>
 8006f8a:	6063      	str	r3, [r4, #4]
 8006f8c:	6014      	str	r4, [r2, #0]
 8006f8e:	4628      	mov	r0, r5
 8006f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f94:	f000 b8dc 	b.w	8007150 <__malloc_unlock>
 8006f98:	42a3      	cmp	r3, r4
 8006f9a:	d908      	bls.n	8006fae <_free_r+0x42>
 8006f9c:	6820      	ldr	r0, [r4, #0]
 8006f9e:	1821      	adds	r1, r4, r0
 8006fa0:	428b      	cmp	r3, r1
 8006fa2:	bf01      	itttt	eq
 8006fa4:	6819      	ldreq	r1, [r3, #0]
 8006fa6:	685b      	ldreq	r3, [r3, #4]
 8006fa8:	1809      	addeq	r1, r1, r0
 8006faa:	6021      	streq	r1, [r4, #0]
 8006fac:	e7ed      	b.n	8006f8a <_free_r+0x1e>
 8006fae:	461a      	mov	r2, r3
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	b10b      	cbz	r3, 8006fb8 <_free_r+0x4c>
 8006fb4:	42a3      	cmp	r3, r4
 8006fb6:	d9fa      	bls.n	8006fae <_free_r+0x42>
 8006fb8:	6811      	ldr	r1, [r2, #0]
 8006fba:	1850      	adds	r0, r2, r1
 8006fbc:	42a0      	cmp	r0, r4
 8006fbe:	d10b      	bne.n	8006fd8 <_free_r+0x6c>
 8006fc0:	6820      	ldr	r0, [r4, #0]
 8006fc2:	4401      	add	r1, r0
 8006fc4:	1850      	adds	r0, r2, r1
 8006fc6:	4283      	cmp	r3, r0
 8006fc8:	6011      	str	r1, [r2, #0]
 8006fca:	d1e0      	bne.n	8006f8e <_free_r+0x22>
 8006fcc:	6818      	ldr	r0, [r3, #0]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	6053      	str	r3, [r2, #4]
 8006fd2:	4408      	add	r0, r1
 8006fd4:	6010      	str	r0, [r2, #0]
 8006fd6:	e7da      	b.n	8006f8e <_free_r+0x22>
 8006fd8:	d902      	bls.n	8006fe0 <_free_r+0x74>
 8006fda:	230c      	movs	r3, #12
 8006fdc:	602b      	str	r3, [r5, #0]
 8006fde:	e7d6      	b.n	8006f8e <_free_r+0x22>
 8006fe0:	6820      	ldr	r0, [r4, #0]
 8006fe2:	1821      	adds	r1, r4, r0
 8006fe4:	428b      	cmp	r3, r1
 8006fe6:	bf04      	itt	eq
 8006fe8:	6819      	ldreq	r1, [r3, #0]
 8006fea:	685b      	ldreq	r3, [r3, #4]
 8006fec:	6063      	str	r3, [r4, #4]
 8006fee:	bf04      	itt	eq
 8006ff0:	1809      	addeq	r1, r1, r0
 8006ff2:	6021      	streq	r1, [r4, #0]
 8006ff4:	6054      	str	r4, [r2, #4]
 8006ff6:	e7ca      	b.n	8006f8e <_free_r+0x22>
 8006ff8:	bd38      	pop	{r3, r4, r5, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20001bc4 	.word	0x20001bc4

08007000 <sbrk_aligned>:
 8007000:	b570      	push	{r4, r5, r6, lr}
 8007002:	4e0f      	ldr	r6, [pc, #60]	@ (8007040 <sbrk_aligned+0x40>)
 8007004:	460c      	mov	r4, r1
 8007006:	6831      	ldr	r1, [r6, #0]
 8007008:	4605      	mov	r5, r0
 800700a:	b911      	cbnz	r1, 8007012 <sbrk_aligned+0x12>
 800700c:	f000 f9d6 	bl	80073bc <_sbrk_r>
 8007010:	6030      	str	r0, [r6, #0]
 8007012:	4621      	mov	r1, r4
 8007014:	4628      	mov	r0, r5
 8007016:	f000 f9d1 	bl	80073bc <_sbrk_r>
 800701a:	1c43      	adds	r3, r0, #1
 800701c:	d103      	bne.n	8007026 <sbrk_aligned+0x26>
 800701e:	f04f 34ff 	mov.w	r4, #4294967295
 8007022:	4620      	mov	r0, r4
 8007024:	bd70      	pop	{r4, r5, r6, pc}
 8007026:	1cc4      	adds	r4, r0, #3
 8007028:	f024 0403 	bic.w	r4, r4, #3
 800702c:	42a0      	cmp	r0, r4
 800702e:	d0f8      	beq.n	8007022 <sbrk_aligned+0x22>
 8007030:	1a21      	subs	r1, r4, r0
 8007032:	4628      	mov	r0, r5
 8007034:	f000 f9c2 	bl	80073bc <_sbrk_r>
 8007038:	3001      	adds	r0, #1
 800703a:	d1f2      	bne.n	8007022 <sbrk_aligned+0x22>
 800703c:	e7ef      	b.n	800701e <sbrk_aligned+0x1e>
 800703e:	bf00      	nop
 8007040:	20001bc0 	.word	0x20001bc0

08007044 <_malloc_r>:
 8007044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007048:	1ccd      	adds	r5, r1, #3
 800704a:	f025 0503 	bic.w	r5, r5, #3
 800704e:	3508      	adds	r5, #8
 8007050:	2d0c      	cmp	r5, #12
 8007052:	bf38      	it	cc
 8007054:	250c      	movcc	r5, #12
 8007056:	2d00      	cmp	r5, #0
 8007058:	4606      	mov	r6, r0
 800705a:	db01      	blt.n	8007060 <_malloc_r+0x1c>
 800705c:	42a9      	cmp	r1, r5
 800705e:	d904      	bls.n	800706a <_malloc_r+0x26>
 8007060:	230c      	movs	r3, #12
 8007062:	6033      	str	r3, [r6, #0]
 8007064:	2000      	movs	r0, #0
 8007066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800706a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007140 <_malloc_r+0xfc>
 800706e:	f000 f869 	bl	8007144 <__malloc_lock>
 8007072:	f8d8 3000 	ldr.w	r3, [r8]
 8007076:	461c      	mov	r4, r3
 8007078:	bb44      	cbnz	r4, 80070cc <_malloc_r+0x88>
 800707a:	4629      	mov	r1, r5
 800707c:	4630      	mov	r0, r6
 800707e:	f7ff ffbf 	bl	8007000 <sbrk_aligned>
 8007082:	1c43      	adds	r3, r0, #1
 8007084:	4604      	mov	r4, r0
 8007086:	d158      	bne.n	800713a <_malloc_r+0xf6>
 8007088:	f8d8 4000 	ldr.w	r4, [r8]
 800708c:	4627      	mov	r7, r4
 800708e:	2f00      	cmp	r7, #0
 8007090:	d143      	bne.n	800711a <_malloc_r+0xd6>
 8007092:	2c00      	cmp	r4, #0
 8007094:	d04b      	beq.n	800712e <_malloc_r+0xea>
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	4639      	mov	r1, r7
 800709a:	4630      	mov	r0, r6
 800709c:	eb04 0903 	add.w	r9, r4, r3
 80070a0:	f000 f98c 	bl	80073bc <_sbrk_r>
 80070a4:	4581      	cmp	r9, r0
 80070a6:	d142      	bne.n	800712e <_malloc_r+0xea>
 80070a8:	6821      	ldr	r1, [r4, #0]
 80070aa:	1a6d      	subs	r5, r5, r1
 80070ac:	4629      	mov	r1, r5
 80070ae:	4630      	mov	r0, r6
 80070b0:	f7ff ffa6 	bl	8007000 <sbrk_aligned>
 80070b4:	3001      	adds	r0, #1
 80070b6:	d03a      	beq.n	800712e <_malloc_r+0xea>
 80070b8:	6823      	ldr	r3, [r4, #0]
 80070ba:	442b      	add	r3, r5
 80070bc:	6023      	str	r3, [r4, #0]
 80070be:	f8d8 3000 	ldr.w	r3, [r8]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	bb62      	cbnz	r2, 8007120 <_malloc_r+0xdc>
 80070c6:	f8c8 7000 	str.w	r7, [r8]
 80070ca:	e00f      	b.n	80070ec <_malloc_r+0xa8>
 80070cc:	6822      	ldr	r2, [r4, #0]
 80070ce:	1b52      	subs	r2, r2, r5
 80070d0:	d420      	bmi.n	8007114 <_malloc_r+0xd0>
 80070d2:	2a0b      	cmp	r2, #11
 80070d4:	d917      	bls.n	8007106 <_malloc_r+0xc2>
 80070d6:	1961      	adds	r1, r4, r5
 80070d8:	42a3      	cmp	r3, r4
 80070da:	6025      	str	r5, [r4, #0]
 80070dc:	bf18      	it	ne
 80070de:	6059      	strne	r1, [r3, #4]
 80070e0:	6863      	ldr	r3, [r4, #4]
 80070e2:	bf08      	it	eq
 80070e4:	f8c8 1000 	streq.w	r1, [r8]
 80070e8:	5162      	str	r2, [r4, r5]
 80070ea:	604b      	str	r3, [r1, #4]
 80070ec:	4630      	mov	r0, r6
 80070ee:	f000 f82f 	bl	8007150 <__malloc_unlock>
 80070f2:	f104 000b 	add.w	r0, r4, #11
 80070f6:	1d23      	adds	r3, r4, #4
 80070f8:	f020 0007 	bic.w	r0, r0, #7
 80070fc:	1ac2      	subs	r2, r0, r3
 80070fe:	bf1c      	itt	ne
 8007100:	1a1b      	subne	r3, r3, r0
 8007102:	50a3      	strne	r3, [r4, r2]
 8007104:	e7af      	b.n	8007066 <_malloc_r+0x22>
 8007106:	6862      	ldr	r2, [r4, #4]
 8007108:	42a3      	cmp	r3, r4
 800710a:	bf0c      	ite	eq
 800710c:	f8c8 2000 	streq.w	r2, [r8]
 8007110:	605a      	strne	r2, [r3, #4]
 8007112:	e7eb      	b.n	80070ec <_malloc_r+0xa8>
 8007114:	4623      	mov	r3, r4
 8007116:	6864      	ldr	r4, [r4, #4]
 8007118:	e7ae      	b.n	8007078 <_malloc_r+0x34>
 800711a:	463c      	mov	r4, r7
 800711c:	687f      	ldr	r7, [r7, #4]
 800711e:	e7b6      	b.n	800708e <_malloc_r+0x4a>
 8007120:	461a      	mov	r2, r3
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	42a3      	cmp	r3, r4
 8007126:	d1fb      	bne.n	8007120 <_malloc_r+0xdc>
 8007128:	2300      	movs	r3, #0
 800712a:	6053      	str	r3, [r2, #4]
 800712c:	e7de      	b.n	80070ec <_malloc_r+0xa8>
 800712e:	230c      	movs	r3, #12
 8007130:	6033      	str	r3, [r6, #0]
 8007132:	4630      	mov	r0, r6
 8007134:	f000 f80c 	bl	8007150 <__malloc_unlock>
 8007138:	e794      	b.n	8007064 <_malloc_r+0x20>
 800713a:	6005      	str	r5, [r0, #0]
 800713c:	e7d6      	b.n	80070ec <_malloc_r+0xa8>
 800713e:	bf00      	nop
 8007140:	20001bc4 	.word	0x20001bc4

08007144 <__malloc_lock>:
 8007144:	4801      	ldr	r0, [pc, #4]	@ (800714c <__malloc_lock+0x8>)
 8007146:	f7ff bf00 	b.w	8006f4a <__retarget_lock_acquire_recursive>
 800714a:	bf00      	nop
 800714c:	20001bbc 	.word	0x20001bbc

08007150 <__malloc_unlock>:
 8007150:	4801      	ldr	r0, [pc, #4]	@ (8007158 <__malloc_unlock+0x8>)
 8007152:	f7ff befb 	b.w	8006f4c <__retarget_lock_release_recursive>
 8007156:	bf00      	nop
 8007158:	20001bbc 	.word	0x20001bbc

0800715c <__sflush_r>:
 800715c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007164:	0716      	lsls	r6, r2, #28
 8007166:	4605      	mov	r5, r0
 8007168:	460c      	mov	r4, r1
 800716a:	d454      	bmi.n	8007216 <__sflush_r+0xba>
 800716c:	684b      	ldr	r3, [r1, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	dc02      	bgt.n	8007178 <__sflush_r+0x1c>
 8007172:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007174:	2b00      	cmp	r3, #0
 8007176:	dd48      	ble.n	800720a <__sflush_r+0xae>
 8007178:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800717a:	2e00      	cmp	r6, #0
 800717c:	d045      	beq.n	800720a <__sflush_r+0xae>
 800717e:	2300      	movs	r3, #0
 8007180:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007184:	682f      	ldr	r7, [r5, #0]
 8007186:	6a21      	ldr	r1, [r4, #32]
 8007188:	602b      	str	r3, [r5, #0]
 800718a:	d030      	beq.n	80071ee <__sflush_r+0x92>
 800718c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800718e:	89a3      	ldrh	r3, [r4, #12]
 8007190:	0759      	lsls	r1, r3, #29
 8007192:	d505      	bpl.n	80071a0 <__sflush_r+0x44>
 8007194:	6863      	ldr	r3, [r4, #4]
 8007196:	1ad2      	subs	r2, r2, r3
 8007198:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800719a:	b10b      	cbz	r3, 80071a0 <__sflush_r+0x44>
 800719c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800719e:	1ad2      	subs	r2, r2, r3
 80071a0:	2300      	movs	r3, #0
 80071a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80071a4:	6a21      	ldr	r1, [r4, #32]
 80071a6:	4628      	mov	r0, r5
 80071a8:	47b0      	blx	r6
 80071aa:	1c43      	adds	r3, r0, #1
 80071ac:	89a3      	ldrh	r3, [r4, #12]
 80071ae:	d106      	bne.n	80071be <__sflush_r+0x62>
 80071b0:	6829      	ldr	r1, [r5, #0]
 80071b2:	291d      	cmp	r1, #29
 80071b4:	d82b      	bhi.n	800720e <__sflush_r+0xb2>
 80071b6:	4a2a      	ldr	r2, [pc, #168]	@ (8007260 <__sflush_r+0x104>)
 80071b8:	40ca      	lsrs	r2, r1
 80071ba:	07d6      	lsls	r6, r2, #31
 80071bc:	d527      	bpl.n	800720e <__sflush_r+0xb2>
 80071be:	2200      	movs	r2, #0
 80071c0:	6062      	str	r2, [r4, #4]
 80071c2:	04d9      	lsls	r1, r3, #19
 80071c4:	6922      	ldr	r2, [r4, #16]
 80071c6:	6022      	str	r2, [r4, #0]
 80071c8:	d504      	bpl.n	80071d4 <__sflush_r+0x78>
 80071ca:	1c42      	adds	r2, r0, #1
 80071cc:	d101      	bne.n	80071d2 <__sflush_r+0x76>
 80071ce:	682b      	ldr	r3, [r5, #0]
 80071d0:	b903      	cbnz	r3, 80071d4 <__sflush_r+0x78>
 80071d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80071d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071d6:	602f      	str	r7, [r5, #0]
 80071d8:	b1b9      	cbz	r1, 800720a <__sflush_r+0xae>
 80071da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071de:	4299      	cmp	r1, r3
 80071e0:	d002      	beq.n	80071e8 <__sflush_r+0x8c>
 80071e2:	4628      	mov	r0, r5
 80071e4:	f7ff fec2 	bl	8006f6c <_free_r>
 80071e8:	2300      	movs	r3, #0
 80071ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80071ec:	e00d      	b.n	800720a <__sflush_r+0xae>
 80071ee:	2301      	movs	r3, #1
 80071f0:	4628      	mov	r0, r5
 80071f2:	47b0      	blx	r6
 80071f4:	4602      	mov	r2, r0
 80071f6:	1c50      	adds	r0, r2, #1
 80071f8:	d1c9      	bne.n	800718e <__sflush_r+0x32>
 80071fa:	682b      	ldr	r3, [r5, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d0c6      	beq.n	800718e <__sflush_r+0x32>
 8007200:	2b1d      	cmp	r3, #29
 8007202:	d001      	beq.n	8007208 <__sflush_r+0xac>
 8007204:	2b16      	cmp	r3, #22
 8007206:	d11e      	bne.n	8007246 <__sflush_r+0xea>
 8007208:	602f      	str	r7, [r5, #0]
 800720a:	2000      	movs	r0, #0
 800720c:	e022      	b.n	8007254 <__sflush_r+0xf8>
 800720e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007212:	b21b      	sxth	r3, r3
 8007214:	e01b      	b.n	800724e <__sflush_r+0xf2>
 8007216:	690f      	ldr	r7, [r1, #16]
 8007218:	2f00      	cmp	r7, #0
 800721a:	d0f6      	beq.n	800720a <__sflush_r+0xae>
 800721c:	0793      	lsls	r3, r2, #30
 800721e:	680e      	ldr	r6, [r1, #0]
 8007220:	bf08      	it	eq
 8007222:	694b      	ldreq	r3, [r1, #20]
 8007224:	600f      	str	r7, [r1, #0]
 8007226:	bf18      	it	ne
 8007228:	2300      	movne	r3, #0
 800722a:	eba6 0807 	sub.w	r8, r6, r7
 800722e:	608b      	str	r3, [r1, #8]
 8007230:	f1b8 0f00 	cmp.w	r8, #0
 8007234:	dde9      	ble.n	800720a <__sflush_r+0xae>
 8007236:	6a21      	ldr	r1, [r4, #32]
 8007238:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800723a:	4643      	mov	r3, r8
 800723c:	463a      	mov	r2, r7
 800723e:	4628      	mov	r0, r5
 8007240:	47b0      	blx	r6
 8007242:	2800      	cmp	r0, #0
 8007244:	dc08      	bgt.n	8007258 <__sflush_r+0xfc>
 8007246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800724a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800724e:	81a3      	strh	r3, [r4, #12]
 8007250:	f04f 30ff 	mov.w	r0, #4294967295
 8007254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007258:	4407      	add	r7, r0
 800725a:	eba8 0800 	sub.w	r8, r8, r0
 800725e:	e7e7      	b.n	8007230 <__sflush_r+0xd4>
 8007260:	20400001 	.word	0x20400001

08007264 <_fflush_r>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	690b      	ldr	r3, [r1, #16]
 8007268:	4605      	mov	r5, r0
 800726a:	460c      	mov	r4, r1
 800726c:	b913      	cbnz	r3, 8007274 <_fflush_r+0x10>
 800726e:	2500      	movs	r5, #0
 8007270:	4628      	mov	r0, r5
 8007272:	bd38      	pop	{r3, r4, r5, pc}
 8007274:	b118      	cbz	r0, 800727e <_fflush_r+0x1a>
 8007276:	6a03      	ldr	r3, [r0, #32]
 8007278:	b90b      	cbnz	r3, 800727e <_fflush_r+0x1a>
 800727a:	f7ff fc81 	bl	8006b80 <__sinit>
 800727e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d0f3      	beq.n	800726e <_fflush_r+0xa>
 8007286:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007288:	07d0      	lsls	r0, r2, #31
 800728a:	d404      	bmi.n	8007296 <_fflush_r+0x32>
 800728c:	0599      	lsls	r1, r3, #22
 800728e:	d402      	bmi.n	8007296 <_fflush_r+0x32>
 8007290:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007292:	f7ff fe5a 	bl	8006f4a <__retarget_lock_acquire_recursive>
 8007296:	4628      	mov	r0, r5
 8007298:	4621      	mov	r1, r4
 800729a:	f7ff ff5f 	bl	800715c <__sflush_r>
 800729e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072a0:	07da      	lsls	r2, r3, #31
 80072a2:	4605      	mov	r5, r0
 80072a4:	d4e4      	bmi.n	8007270 <_fflush_r+0xc>
 80072a6:	89a3      	ldrh	r3, [r4, #12]
 80072a8:	059b      	lsls	r3, r3, #22
 80072aa:	d4e1      	bmi.n	8007270 <_fflush_r+0xc>
 80072ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072ae:	f7ff fe4d 	bl	8006f4c <__retarget_lock_release_recursive>
 80072b2:	e7dd      	b.n	8007270 <_fflush_r+0xc>

080072b4 <__swhatbuf_r>:
 80072b4:	b570      	push	{r4, r5, r6, lr}
 80072b6:	460c      	mov	r4, r1
 80072b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072bc:	2900      	cmp	r1, #0
 80072be:	b096      	sub	sp, #88	@ 0x58
 80072c0:	4615      	mov	r5, r2
 80072c2:	461e      	mov	r6, r3
 80072c4:	da0d      	bge.n	80072e2 <__swhatbuf_r+0x2e>
 80072c6:	89a3      	ldrh	r3, [r4, #12]
 80072c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80072cc:	f04f 0100 	mov.w	r1, #0
 80072d0:	bf14      	ite	ne
 80072d2:	2340      	movne	r3, #64	@ 0x40
 80072d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80072d8:	2000      	movs	r0, #0
 80072da:	6031      	str	r1, [r6, #0]
 80072dc:	602b      	str	r3, [r5, #0]
 80072de:	b016      	add	sp, #88	@ 0x58
 80072e0:	bd70      	pop	{r4, r5, r6, pc}
 80072e2:	466a      	mov	r2, sp
 80072e4:	f000 f848 	bl	8007378 <_fstat_r>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	dbec      	blt.n	80072c6 <__swhatbuf_r+0x12>
 80072ec:	9901      	ldr	r1, [sp, #4]
 80072ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80072f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80072f6:	4259      	negs	r1, r3
 80072f8:	4159      	adcs	r1, r3
 80072fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80072fe:	e7eb      	b.n	80072d8 <__swhatbuf_r+0x24>

08007300 <__smakebuf_r>:
 8007300:	898b      	ldrh	r3, [r1, #12]
 8007302:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007304:	079d      	lsls	r5, r3, #30
 8007306:	4606      	mov	r6, r0
 8007308:	460c      	mov	r4, r1
 800730a:	d507      	bpl.n	800731c <__smakebuf_r+0x1c>
 800730c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007310:	6023      	str	r3, [r4, #0]
 8007312:	6123      	str	r3, [r4, #16]
 8007314:	2301      	movs	r3, #1
 8007316:	6163      	str	r3, [r4, #20]
 8007318:	b003      	add	sp, #12
 800731a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800731c:	ab01      	add	r3, sp, #4
 800731e:	466a      	mov	r2, sp
 8007320:	f7ff ffc8 	bl	80072b4 <__swhatbuf_r>
 8007324:	9f00      	ldr	r7, [sp, #0]
 8007326:	4605      	mov	r5, r0
 8007328:	4639      	mov	r1, r7
 800732a:	4630      	mov	r0, r6
 800732c:	f7ff fe8a 	bl	8007044 <_malloc_r>
 8007330:	b948      	cbnz	r0, 8007346 <__smakebuf_r+0x46>
 8007332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007336:	059a      	lsls	r2, r3, #22
 8007338:	d4ee      	bmi.n	8007318 <__smakebuf_r+0x18>
 800733a:	f023 0303 	bic.w	r3, r3, #3
 800733e:	f043 0302 	orr.w	r3, r3, #2
 8007342:	81a3      	strh	r3, [r4, #12]
 8007344:	e7e2      	b.n	800730c <__smakebuf_r+0xc>
 8007346:	89a3      	ldrh	r3, [r4, #12]
 8007348:	6020      	str	r0, [r4, #0]
 800734a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800734e:	81a3      	strh	r3, [r4, #12]
 8007350:	9b01      	ldr	r3, [sp, #4]
 8007352:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007356:	b15b      	cbz	r3, 8007370 <__smakebuf_r+0x70>
 8007358:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800735c:	4630      	mov	r0, r6
 800735e:	f000 f81d 	bl	800739c <_isatty_r>
 8007362:	b128      	cbz	r0, 8007370 <__smakebuf_r+0x70>
 8007364:	89a3      	ldrh	r3, [r4, #12]
 8007366:	f023 0303 	bic.w	r3, r3, #3
 800736a:	f043 0301 	orr.w	r3, r3, #1
 800736e:	81a3      	strh	r3, [r4, #12]
 8007370:	89a3      	ldrh	r3, [r4, #12]
 8007372:	431d      	orrs	r5, r3
 8007374:	81a5      	strh	r5, [r4, #12]
 8007376:	e7cf      	b.n	8007318 <__smakebuf_r+0x18>

08007378 <_fstat_r>:
 8007378:	b538      	push	{r3, r4, r5, lr}
 800737a:	4d07      	ldr	r5, [pc, #28]	@ (8007398 <_fstat_r+0x20>)
 800737c:	2300      	movs	r3, #0
 800737e:	4604      	mov	r4, r0
 8007380:	4608      	mov	r0, r1
 8007382:	4611      	mov	r1, r2
 8007384:	602b      	str	r3, [r5, #0]
 8007386:	f7f9 fbce 	bl	8000b26 <_fstat>
 800738a:	1c43      	adds	r3, r0, #1
 800738c:	d102      	bne.n	8007394 <_fstat_r+0x1c>
 800738e:	682b      	ldr	r3, [r5, #0]
 8007390:	b103      	cbz	r3, 8007394 <_fstat_r+0x1c>
 8007392:	6023      	str	r3, [r4, #0]
 8007394:	bd38      	pop	{r3, r4, r5, pc}
 8007396:	bf00      	nop
 8007398:	20001bb8 	.word	0x20001bb8

0800739c <_isatty_r>:
 800739c:	b538      	push	{r3, r4, r5, lr}
 800739e:	4d06      	ldr	r5, [pc, #24]	@ (80073b8 <_isatty_r+0x1c>)
 80073a0:	2300      	movs	r3, #0
 80073a2:	4604      	mov	r4, r0
 80073a4:	4608      	mov	r0, r1
 80073a6:	602b      	str	r3, [r5, #0]
 80073a8:	f7f9 fbcd 	bl	8000b46 <_isatty>
 80073ac:	1c43      	adds	r3, r0, #1
 80073ae:	d102      	bne.n	80073b6 <_isatty_r+0x1a>
 80073b0:	682b      	ldr	r3, [r5, #0]
 80073b2:	b103      	cbz	r3, 80073b6 <_isatty_r+0x1a>
 80073b4:	6023      	str	r3, [r4, #0]
 80073b6:	bd38      	pop	{r3, r4, r5, pc}
 80073b8:	20001bb8 	.word	0x20001bb8

080073bc <_sbrk_r>:
 80073bc:	b538      	push	{r3, r4, r5, lr}
 80073be:	4d06      	ldr	r5, [pc, #24]	@ (80073d8 <_sbrk_r+0x1c>)
 80073c0:	2300      	movs	r3, #0
 80073c2:	4604      	mov	r4, r0
 80073c4:	4608      	mov	r0, r1
 80073c6:	602b      	str	r3, [r5, #0]
 80073c8:	f7f9 fbd6 	bl	8000b78 <_sbrk>
 80073cc:	1c43      	adds	r3, r0, #1
 80073ce:	d102      	bne.n	80073d6 <_sbrk_r+0x1a>
 80073d0:	682b      	ldr	r3, [r5, #0]
 80073d2:	b103      	cbz	r3, 80073d6 <_sbrk_r+0x1a>
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	bd38      	pop	{r3, r4, r5, pc}
 80073d8:	20001bb8 	.word	0x20001bb8

080073dc <_init>:
 80073dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073de:	bf00      	nop
 80073e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073e2:	bc08      	pop	{r3}
 80073e4:	469e      	mov	lr, r3
 80073e6:	4770      	bx	lr

080073e8 <_fini>:
 80073e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ea:	bf00      	nop
 80073ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ee:	bc08      	pop	{r3}
 80073f0:	469e      	mov	lr, r3
 80073f2:	4770      	bx	lr
