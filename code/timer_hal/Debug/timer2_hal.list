
timer2_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ccc  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001e58  08001e58  00002e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e98  08001e98  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001e98  08001e98  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001e98  08001e98  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e98  08001e98  00002e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001e9c  08001e9c  00002e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001ea0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08001eac  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001eac  00003078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009beb  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017b8  00000000  00000000  0000cc27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0000e3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000086c  00000000  00000000  0000eed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020dda  00000000  00000000  0000f73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b54e  00000000  00000000  00030516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbf49  00000000  00000000  0003ba64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001079ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d4c  00000000  00000000  001079f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0010a73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001e40 	.word	0x08001e40

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08001e40 	.word	0x08001e40

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 f99b 	bl	800050a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f80e 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f88a 	bl	80002f0 <MX_GPIO_Init>
  MX_TIM6_Init();
 80001dc:	f000 f850 	bl	8000280 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Init(&htim6);
 80001e0:	4803      	ldr	r0, [pc, #12]	@ (80001f0 <main+0x24>)
 80001e2:	f001 fb27 	bl	8001834 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim6);
 80001e6:	4802      	ldr	r0, [pc, #8]	@ (80001f0 <main+0x24>)
 80001e8:	f001 fb7c 	bl	80018e4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ec:	bf00      	nop
 80001ee:	e7fd      	b.n	80001ec <main+0x20>
 80001f0:	20000028 	.word	0x20000028

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b096      	sub	sp, #88	@ 0x58
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0314 	add.w	r3, r7, #20
 80001fe:	2244      	movs	r2, #68	@ 0x44
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f001 fdf0 	bl	8001de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	463b      	mov	r3, r7
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000216:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800021a:	f000 fcb5 	bl	8000b88 <HAL_PWREx_ControlVoltageScaling>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000224:	f000 f896 	bl	8000354 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000228:	2310      	movs	r3, #16
 800022a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800022c:	2301      	movs	r3, #1
 800022e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000230:	2300      	movs	r3, #0
 8000232:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000234:	2360      	movs	r3, #96	@ 0x60
 8000236:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000238:	2300      	movs	r3, #0
 800023a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023c:	f107 0314 	add.w	r3, r7, #20
 8000240:	4618      	mov	r0, r3
 8000242:	f000 fcf7 	bl	8000c34 <HAL_RCC_OscConfig>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800024c:	f000 f882 	bl	8000354 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000250:	230f      	movs	r3, #15
 8000252:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000254:	2300      	movs	r3, #0
 8000256:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000264:	463b      	mov	r3, r7
 8000266:	2100      	movs	r1, #0
 8000268:	4618      	mov	r0, r3
 800026a:	f001 f8f7 	bl	800145c <HAL_RCC_ClockConfig>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000274:	f000 f86e 	bl	8000354 <Error_Handler>
  }
}
 8000278:	bf00      	nop
 800027a:	3758      	adds	r7, #88	@ 0x58
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}

08000280 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000290:	4b15      	ldr	r3, [pc, #84]	@ (80002e8 <MX_TIM6_Init+0x68>)
 8000292:	4a16      	ldr	r2, [pc, #88]	@ (80002ec <MX_TIM6_Init+0x6c>)
 8000294:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 8000296:	4b14      	ldr	r3, [pc, #80]	@ (80002e8 <MX_TIM6_Init+0x68>)
 8000298:	f242 7210 	movw	r2, #10000	@ 0x2710
 800029c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800029e:	4b12      	ldr	r3, [pc, #72]	@ (80002e8 <MX_TIM6_Init+0x68>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 80002a4:	4b10      	ldr	r3, [pc, #64]	@ (80002e8 <MX_TIM6_Init+0x68>)
 80002a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80002aa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ac:	4b0e      	ldr	r3, [pc, #56]	@ (80002e8 <MX_TIM6_Init+0x68>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80002b2:	480d      	ldr	r0, [pc, #52]	@ (80002e8 <MX_TIM6_Init+0x68>)
 80002b4:	f001 fabe 	bl	8001834 <HAL_TIM_Base_Init>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80002be:	f000 f849 	bl	8000354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002c2:	2300      	movs	r3, #0
 80002c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4619      	mov	r1, r3
 80002ce:	4806      	ldr	r0, [pc, #24]	@ (80002e8 <MX_TIM6_Init+0x68>)
 80002d0:	f001 fd06 	bl	8001ce0 <HAL_TIMEx_MasterConfigSynchronization>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80002da:	f000 f83b 	bl	8000354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	20000028 	.word	0x20000028
 80002ec:	40001000 	.word	0x40001000

080002f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b086      	sub	sp, #24
 80002f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	605a      	str	r2, [r3, #4]
 80002fe:	609a      	str	r2, [r3, #8]
 8000300:	60da      	str	r2, [r3, #12]
 8000302:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000304:	4b11      	ldr	r3, [pc, #68]	@ (800034c <MX_GPIO_Init+0x5c>)
 8000306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000308:	4a10      	ldr	r2, [pc, #64]	@ (800034c <MX_GPIO_Init+0x5c>)
 800030a:	f043 0302 	orr.w	r3, r3, #2
 800030e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000310:	4b0e      	ldr	r3, [pc, #56]	@ (800034c <MX_GPIO_Init+0x5c>)
 8000312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000314:	f003 0302 	and.w	r3, r3, #2
 8000318:	603b      	str	r3, [r7, #0]
 800031a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000322:	480b      	ldr	r0, [pc, #44]	@ (8000350 <MX_GPIO_Init+0x60>)
 8000324:	f000 fc0a 	bl	8000b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000328:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800032c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032e:	2301      	movs	r3, #1
 8000330:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000332:	2300      	movs	r3, #0
 8000334:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000336:	2300      	movs	r3, #0
 8000338:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	4619      	mov	r1, r3
 800033e:	4804      	ldr	r0, [pc, #16]	@ (8000350 <MX_GPIO_Init+0x60>)
 8000340:	f000 fa6a 	bl	8000818 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000344:	bf00      	nop
 8000346:	3718      	adds	r7, #24
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	40021000 	.word	0x40021000
 8000350:	48000400 	.word	0x48000400

08000354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000358:	b672      	cpsid	i
}
 800035a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800035c:	bf00      	nop
 800035e:	e7fd      	b.n	800035c <Error_Handler+0x8>

08000360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000366:	4b0f      	ldr	r3, [pc, #60]	@ (80003a4 <HAL_MspInit+0x44>)
 8000368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800036a:	4a0e      	ldr	r2, [pc, #56]	@ (80003a4 <HAL_MspInit+0x44>)
 800036c:	f043 0301 	orr.w	r3, r3, #1
 8000370:	6613      	str	r3, [r2, #96]	@ 0x60
 8000372:	4b0c      	ldr	r3, [pc, #48]	@ (80003a4 <HAL_MspInit+0x44>)
 8000374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800037e:	4b09      	ldr	r3, [pc, #36]	@ (80003a4 <HAL_MspInit+0x44>)
 8000380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000382:	4a08      	ldr	r2, [pc, #32]	@ (80003a4 <HAL_MspInit+0x44>)
 8000384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000388:	6593      	str	r3, [r2, #88]	@ 0x58
 800038a:	4b06      	ldr	r3, [pc, #24]	@ (80003a4 <HAL_MspInit+0x44>)
 800038c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800038e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000392:	603b      	str	r3, [r7, #0]
 8000394:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	40021000 	.word	0x40021000

080003a8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a0d      	ldr	r2, [pc, #52]	@ (80003ec <HAL_TIM_Base_MspInit+0x44>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d113      	bne.n	80003e2 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80003ba:	4b0d      	ldr	r3, [pc, #52]	@ (80003f0 <HAL_TIM_Base_MspInit+0x48>)
 80003bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003be:	4a0c      	ldr	r2, [pc, #48]	@ (80003f0 <HAL_TIM_Base_MspInit+0x48>)
 80003c0:	f043 0310 	orr.w	r3, r3, #16
 80003c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80003c6:	4b0a      	ldr	r3, [pc, #40]	@ (80003f0 <HAL_TIM_Base_MspInit+0x48>)
 80003c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003ca:	f003 0310 	and.w	r3, r3, #16
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80003d2:	2200      	movs	r2, #0
 80003d4:	2100      	movs	r1, #0
 80003d6:	2036      	movs	r0, #54	@ 0x36
 80003d8:	f000 f9e7 	bl	80007aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80003dc:	2036      	movs	r0, #54	@ 0x36
 80003de:	f000 fa00 	bl	80007e2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 80003e2:	bf00      	nop
 80003e4:	3710      	adds	r7, #16
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40001000 	.word	0x40001000
 80003f0:	40021000 	.word	0x40021000

080003f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003f8:	bf00      	nop
 80003fa:	e7fd      	b.n	80003f8 <NMI_Handler+0x4>

080003fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000400:	bf00      	nop
 8000402:	e7fd      	b.n	8000400 <HardFault_Handler+0x4>

08000404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000408:	bf00      	nop
 800040a:	e7fd      	b.n	8000408 <MemManage_Handler+0x4>

0800040c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000410:	bf00      	nop
 8000412:	e7fd      	b.n	8000410 <BusFault_Handler+0x4>

08000414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000418:	bf00      	nop
 800041a:	e7fd      	b.n	8000418 <UsageFault_Handler+0x4>

0800041c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr

0800042a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800042e:	bf00      	nop
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr

08000446 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000446:	b580      	push	{r7, lr}
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800044a:	f000 f8b3 	bl	80005b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
	...

08000454 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1)//ON
 8000458:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800045c:	480b      	ldr	r0, [pc, #44]	@ (800048c <TIM6_DAC_IRQHandler+0x38>)
 800045e:	f000 fb55 	bl	8000b0c <HAL_GPIO_ReadPin>
 8000462:	4603      	mov	r3, r0
 8000464:	2b01      	cmp	r3, #1
 8000466:	d106      	bne.n	8000476 <TIM6_DAC_IRQHandler+0x22>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//off
 8000468:	2200      	movs	r2, #0
 800046a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800046e:	4807      	ldr	r0, [pc, #28]	@ (800048c <TIM6_DAC_IRQHandler+0x38>)
 8000470:	f000 fb64 	bl	8000b3c <HAL_GPIO_WritePin>
 8000474:	e005      	b.n	8000482 <TIM6_DAC_IRQHandler+0x2e>
	}
	else//off
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//on
 8000476:	2201      	movs	r2, #1
 8000478:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800047c:	4803      	ldr	r0, [pc, #12]	@ (800048c <TIM6_DAC_IRQHandler+0x38>)
 800047e:	f000 fb5d 	bl	8000b3c <HAL_GPIO_WritePin>
	}

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000482:	4803      	ldr	r0, [pc, #12]	@ (8000490 <TIM6_DAC_IRQHandler+0x3c>)
 8000484:	f001 fa82 	bl	800198c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}
 800048c:	48000400 	.word	0x48000400
 8000490:	20000028 	.word	0x20000028

08000494 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000498:	4b06      	ldr	r3, [pc, #24]	@ (80004b4 <SystemInit+0x20>)
 800049a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800049e:	4a05      	ldr	r2, [pc, #20]	@ (80004b4 <SystemInit+0x20>)
 80004a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	e000ed00 	.word	0xe000ed00

080004b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80004b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80004f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004bc:	f7ff ffea 	bl	8000494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c0:	480c      	ldr	r0, [pc, #48]	@ (80004f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80004c2:	490d      	ldr	r1, [pc, #52]	@ (80004f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004c4:	4a0d      	ldr	r2, [pc, #52]	@ (80004fc <LoopForever+0xe>)
  movs r3, #0
 80004c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c8:	e002      	b.n	80004d0 <LoopCopyDataInit>

080004ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ce:	3304      	adds	r3, #4

080004d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d4:	d3f9      	bcc.n	80004ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000500 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000504 <LoopForever+0x16>)
  movs r3, #0
 80004da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004dc:	e001      	b.n	80004e2 <LoopFillZerobss>

080004de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e0:	3204      	adds	r2, #4

080004e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e4:	d3fb      	bcc.n	80004de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004e6:	f001 fc87 	bl	8001df8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004ea:	f7ff fe6f 	bl	80001cc <main>

080004ee <LoopForever>:

LoopForever:
    b LoopForever
 80004ee:	e7fe      	b.n	80004ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80004f0:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80004f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004fc:	08001ea0 	.word	0x08001ea0
  ldr r2, =_sbss
 8000500:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000504:	20000078 	.word	0x20000078

08000508 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000508:	e7fe      	b.n	8000508 <ADC1_IRQHandler>

0800050a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	b082      	sub	sp, #8
 800050e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000510:	2300      	movs	r3, #0
 8000512:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000514:	2003      	movs	r0, #3
 8000516:	f000 f93d 	bl	8000794 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800051a:	200f      	movs	r0, #15
 800051c:	f000 f80e 	bl	800053c <HAL_InitTick>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d002      	beq.n	800052c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000526:	2301      	movs	r3, #1
 8000528:	71fb      	strb	r3, [r7, #7]
 800052a:	e001      	b.n	8000530 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800052c:	f7ff ff18 	bl	8000360 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000530:	79fb      	ldrb	r3, [r7, #7]
}
 8000532:	4618      	mov	r0, r3
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
	...

0800053c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000544:	2300      	movs	r3, #0
 8000546:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000548:	4b17      	ldr	r3, [pc, #92]	@ (80005a8 <HAL_InitTick+0x6c>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d023      	beq.n	8000598 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000550:	4b16      	ldr	r3, [pc, #88]	@ (80005ac <HAL_InitTick+0x70>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b14      	ldr	r3, [pc, #80]	@ (80005a8 <HAL_InitTick+0x6c>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f949 	bl	80007fe <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d10f      	bne.n	8000592 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2b0f      	cmp	r3, #15
 8000576:	d809      	bhi.n	800058c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000578:	2200      	movs	r2, #0
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	f04f 30ff 	mov.w	r0, #4294967295
 8000580:	f000 f913 	bl	80007aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000584:	4a0a      	ldr	r2, [pc, #40]	@ (80005b0 <HAL_InitTick+0x74>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6013      	str	r3, [r2, #0]
 800058a:	e007      	b.n	800059c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800058c:	2301      	movs	r3, #1
 800058e:	73fb      	strb	r3, [r7, #15]
 8000590:	e004      	b.n	800059c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000592:	2301      	movs	r3, #1
 8000594:	73fb      	strb	r3, [r7, #15]
 8000596:	e001      	b.n	800059c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000598:	2301      	movs	r3, #1
 800059a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800059c:	7bfb      	ldrb	r3, [r7, #15]
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000008 	.word	0x20000008
 80005ac:	20000000 	.word	0x20000000
 80005b0:	20000004 	.word	0x20000004

080005b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005b8:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <HAL_IncTick+0x20>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <HAL_IncTick+0x24>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a04      	ldr	r2, [pc, #16]	@ (80005d8 <HAL_IncTick+0x24>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000008 	.word	0x20000008
 80005d8:	20000074 	.word	0x20000074

080005dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b03      	ldr	r3, [pc, #12]	@ (80005f0 <HAL_GetTick+0x14>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000074 	.word	0x20000074

080005f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800061c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000620:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000626:	4a04      	ldr	r2, [pc, #16]	@ (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	60d3      	str	r3, [r2, #12]
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b04      	ldr	r3, [pc, #16]	@ (8000654 <__NVIC_GetPriorityGrouping+0x18>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	f003 0307 	and.w	r3, r3, #7
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	db0b      	blt.n	8000682 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	f003 021f 	and.w	r2, r3, #31
 8000670:	4907      	ldr	r1, [pc, #28]	@ (8000690 <__NVIC_EnableIRQ+0x38>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	095b      	lsrs	r3, r3, #5
 8000678:	2001      	movs	r0, #1
 800067a:	fa00 f202 	lsl.w	r2, r0, r2
 800067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000e100 	.word	0xe000e100

08000694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	6039      	str	r1, [r7, #0]
 800069e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	db0a      	blt.n	80006be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	490c      	ldr	r1, [pc, #48]	@ (80006e0 <__NVIC_SetPriority+0x4c>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	0112      	lsls	r2, r2, #4
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	440b      	add	r3, r1
 80006b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006bc:	e00a      	b.n	80006d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4908      	ldr	r1, [pc, #32]	@ (80006e4 <__NVIC_SetPriority+0x50>)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	3b04      	subs	r3, #4
 80006cc:	0112      	lsls	r2, r2, #4
 80006ce:	b2d2      	uxtb	r2, r2
 80006d0:	440b      	add	r3, r1
 80006d2:	761a      	strb	r2, [r3, #24]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000e100 	.word	0xe000e100
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b089      	sub	sp, #36	@ 0x24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	f1c3 0307 	rsb	r3, r3, #7
 8000702:	2b04      	cmp	r3, #4
 8000704:	bf28      	it	cs
 8000706:	2304      	movcs	r3, #4
 8000708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3304      	adds	r3, #4
 800070e:	2b06      	cmp	r3, #6
 8000710:	d902      	bls.n	8000718 <NVIC_EncodePriority+0x30>
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3b03      	subs	r3, #3
 8000716:	e000      	b.n	800071a <NVIC_EncodePriority+0x32>
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	f04f 32ff 	mov.w	r2, #4294967295
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	43da      	mvns	r2, r3
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	401a      	ands	r2, r3
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000730:	f04f 31ff 	mov.w	r1, #4294967295
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	43d9      	mvns	r1, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	4313      	orrs	r3, r2
         );
}
 8000742:	4618      	mov	r0, r3
 8000744:	3724      	adds	r7, #36	@ 0x24
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
	...

08000750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000760:	d301      	bcc.n	8000766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000762:	2301      	movs	r3, #1
 8000764:	e00f      	b.n	8000786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000766:	4a0a      	ldr	r2, [pc, #40]	@ (8000790 <SysTick_Config+0x40>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3b01      	subs	r3, #1
 800076c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076e:	210f      	movs	r1, #15
 8000770:	f04f 30ff 	mov.w	r0, #4294967295
 8000774:	f7ff ff8e 	bl	8000694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000778:	4b05      	ldr	r3, [pc, #20]	@ (8000790 <SysTick_Config+0x40>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077e:	4b04      	ldr	r3, [pc, #16]	@ (8000790 <SysTick_Config+0x40>)
 8000780:	2207      	movs	r2, #7
 8000782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	e000e010 	.word	0xe000e010

08000794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff29 	bl	80005f4 <__NVIC_SetPriorityGrouping>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007bc:	f7ff ff3e 	bl	800063c <__NVIC_GetPriorityGrouping>
 80007c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	68b9      	ldr	r1, [r7, #8]
 80007c6:	6978      	ldr	r0, [r7, #20]
 80007c8:	f7ff ff8e 	bl	80006e8 <NVIC_EncodePriority>
 80007cc:	4602      	mov	r2, r0
 80007ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff5d 	bl	8000694 <__NVIC_SetPriority>
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff31 	bl	8000658 <__NVIC_EnableIRQ>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ffa2 	bl	8000750 <SysTick_Config>
 800080c:	4603      	mov	r3, r0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000818:	b480      	push	{r7}
 800081a:	b087      	sub	sp, #28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000826:	e154      	b.n	8000ad2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	2101      	movs	r1, #1
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	fa01 f303 	lsl.w	r3, r1, r3
 8000834:	4013      	ands	r3, r2
 8000836:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	2b00      	cmp	r3, #0
 800083c:	f000 8146 	beq.w	8000acc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	f003 0303 	and.w	r3, r3, #3
 8000848:	2b01      	cmp	r3, #1
 800084a:	d005      	beq.n	8000858 <HAL_GPIO_Init+0x40>
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	f003 0303 	and.w	r3, r3, #3
 8000854:	2b02      	cmp	r3, #2
 8000856:	d130      	bne.n	80008ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	2203      	movs	r2, #3
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	43db      	mvns	r3, r3
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	4013      	ands	r3, r2
 800086e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	68da      	ldr	r2, [r3, #12]
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	693a      	ldr	r2, [r7, #16]
 800087e:	4313      	orrs	r3, r2
 8000880:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	693a      	ldr	r2, [r7, #16]
 8000886:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800088e:	2201      	movs	r2, #1
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	43db      	mvns	r3, r3
 8000898:	693a      	ldr	r2, [r7, #16]
 800089a:	4013      	ands	r3, r2
 800089c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	091b      	lsrs	r3, r3, #4
 80008a4:	f003 0201 	and.w	r2, r3, #1
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	f003 0303 	and.w	r3, r3, #3
 80008c2:	2b03      	cmp	r3, #3
 80008c4:	d017      	beq.n	80008f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	68db      	ldr	r3, [r3, #12]
 80008ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	2203      	movs	r2, #3
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	43db      	mvns	r3, r3
 80008d8:	693a      	ldr	r2, [r7, #16]
 80008da:	4013      	ands	r3, r2
 80008dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	689a      	ldr	r2, [r3, #8]
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	f003 0303 	and.w	r3, r3, #3
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d123      	bne.n	800094a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	08da      	lsrs	r2, r3, #3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3208      	adds	r2, #8
 800090a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800090e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	220f      	movs	r2, #15
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	43db      	mvns	r3, r3
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	4013      	ands	r3, r2
 8000924:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	691a      	ldr	r2, [r3, #16]
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	f003 0307 	and.w	r3, r3, #7
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	4313      	orrs	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	08da      	lsrs	r2, r3, #3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3208      	adds	r2, #8
 8000944:	6939      	ldr	r1, [r7, #16]
 8000946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	2203      	movs	r2, #3
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43db      	mvns	r3, r3
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	4013      	ands	r3, r2
 8000960:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	f003 0203 	and.w	r2, r3, #3
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	4313      	orrs	r3, r2
 8000976:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000986:	2b00      	cmp	r3, #0
 8000988:	f000 80a0 	beq.w	8000acc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098c:	4b58      	ldr	r3, [pc, #352]	@ (8000af0 <HAL_GPIO_Init+0x2d8>)
 800098e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000990:	4a57      	ldr	r2, [pc, #348]	@ (8000af0 <HAL_GPIO_Init+0x2d8>)
 8000992:	f043 0301 	orr.w	r3, r3, #1
 8000996:	6613      	str	r3, [r2, #96]	@ 0x60
 8000998:	4b55      	ldr	r3, [pc, #340]	@ (8000af0 <HAL_GPIO_Init+0x2d8>)
 800099a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009a4:	4a53      	ldr	r2, [pc, #332]	@ (8000af4 <HAL_GPIO_Init+0x2dc>)
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	089b      	lsrs	r3, r3, #2
 80009aa:	3302      	adds	r3, #2
 80009ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	f003 0303 	and.w	r3, r3, #3
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	220f      	movs	r2, #15
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	43db      	mvns	r3, r3
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4013      	ands	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80009ce:	d019      	beq.n	8000a04 <HAL_GPIO_Init+0x1ec>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a49      	ldr	r2, [pc, #292]	@ (8000af8 <HAL_GPIO_Init+0x2e0>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d013      	beq.n	8000a00 <HAL_GPIO_Init+0x1e8>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a48      	ldr	r2, [pc, #288]	@ (8000afc <HAL_GPIO_Init+0x2e4>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d00d      	beq.n	80009fc <HAL_GPIO_Init+0x1e4>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a47      	ldr	r2, [pc, #284]	@ (8000b00 <HAL_GPIO_Init+0x2e8>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d007      	beq.n	80009f8 <HAL_GPIO_Init+0x1e0>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a46      	ldr	r2, [pc, #280]	@ (8000b04 <HAL_GPIO_Init+0x2ec>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d101      	bne.n	80009f4 <HAL_GPIO_Init+0x1dc>
 80009f0:	2304      	movs	r3, #4
 80009f2:	e008      	b.n	8000a06 <HAL_GPIO_Init+0x1ee>
 80009f4:	2307      	movs	r3, #7
 80009f6:	e006      	b.n	8000a06 <HAL_GPIO_Init+0x1ee>
 80009f8:	2303      	movs	r3, #3
 80009fa:	e004      	b.n	8000a06 <HAL_GPIO_Init+0x1ee>
 80009fc:	2302      	movs	r3, #2
 80009fe:	e002      	b.n	8000a06 <HAL_GPIO_Init+0x1ee>
 8000a00:	2301      	movs	r3, #1
 8000a02:	e000      	b.n	8000a06 <HAL_GPIO_Init+0x1ee>
 8000a04:	2300      	movs	r3, #0
 8000a06:	697a      	ldr	r2, [r7, #20]
 8000a08:	f002 0203 	and.w	r2, r2, #3
 8000a0c:	0092      	lsls	r2, r2, #2
 8000a0e:	4093      	lsls	r3, r2
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a16:	4937      	ldr	r1, [pc, #220]	@ (8000af4 <HAL_GPIO_Init+0x2dc>)
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	089b      	lsrs	r3, r3, #2
 8000a1c:	3302      	adds	r3, #2
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a24:	4b38      	ldr	r3, [pc, #224]	@ (8000b08 <HAL_GPIO_Init+0x2f0>)
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	4013      	ands	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d003      	beq.n	8000a48 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a48:	4a2f      	ldr	r2, [pc, #188]	@ (8000b08 <HAL_GPIO_Init+0x2f0>)
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a4e:	4b2e      	ldr	r3, [pc, #184]	@ (8000b08 <HAL_GPIO_Init+0x2f0>)
 8000a50:	68db      	ldr	r3, [r3, #12]
 8000a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	43db      	mvns	r3, r3
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d003      	beq.n	8000a72 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a72:	4a25      	ldr	r2, [pc, #148]	@ (8000b08 <HAL_GPIO_Init+0x2f0>)
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a78:	4b23      	ldr	r3, [pc, #140]	@ (8000b08 <HAL_GPIO_Init+0x2f0>)
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	43db      	mvns	r3, r3
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	4013      	ands	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d003      	beq.n	8000a9c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8000b08 <HAL_GPIO_Init+0x2f0>)
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000aa2:	4b19      	ldr	r3, [pc, #100]	@ (8000b08 <HAL_GPIO_Init+0x2f0>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d003      	beq.n	8000ac6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ac6:	4a10      	ldr	r2, [pc, #64]	@ (8000b08 <HAL_GPIO_Init+0x2f0>)
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	f47f aea3 	bne.w	8000828 <HAL_GPIO_Init+0x10>
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	bf00      	nop
 8000ae6:	371c      	adds	r7, #28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	40021000 	.word	0x40021000
 8000af4:	40010000 	.word	0x40010000
 8000af8:	48000400 	.word	0x48000400
 8000afc:	48000800 	.word	0x48000800
 8000b00:	48000c00 	.word	0x48000c00
 8000b04:	48001000 	.word	0x48001000
 8000b08:	40010400 	.word	0x40010400

08000b0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	460b      	mov	r3, r1
 8000b16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	691a      	ldr	r2, [r3, #16]
 8000b1c:	887b      	ldrh	r3, [r7, #2]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b24:	2301      	movs	r3, #1
 8000b26:	73fb      	strb	r3, [r7, #15]
 8000b28:	e001      	b.n	8000b2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	807b      	strh	r3, [r7, #2]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b4c:	787b      	ldrb	r3, [r7, #1]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d003      	beq.n	8000b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b52:	887a      	ldrh	r2, [r7, #2]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b58:	e002      	b.n	8000b60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b5a:	887a      	ldrh	r2, [r7, #2]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b70:	4b04      	ldr	r3, [pc, #16]	@ (8000b84 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40007000 	.word	0x40007000

08000b88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000b96:	d130      	bne.n	8000bfa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b98:	4b23      	ldr	r3, [pc, #140]	@ (8000c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000ba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ba4:	d038      	beq.n	8000c18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba6:	4b20      	ldr	r3, [pc, #128]	@ (8000c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000bae:	4a1e      	ldr	r2, [pc, #120]	@ (8000c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bb0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bb4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2232      	movs	r2, #50	@ 0x32
 8000bbc:	fb02 f303 	mul.w	r3, r2, r3
 8000bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc6:	0c9b      	lsrs	r3, r3, #18
 8000bc8:	3301      	adds	r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bcc:	e002      	b.n	8000bd4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bd4:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000be0:	d102      	bne.n	8000be8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d1f2      	bne.n	8000bce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000be8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bea:	695b      	ldr	r3, [r3, #20]
 8000bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bf4:	d110      	bne.n	8000c18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	e00f      	b.n	8000c1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c06:	d007      	beq.n	8000c18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c08:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c10:	4a05      	ldr	r2, [pc, #20]	@ (8000c28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40007000 	.word	0x40007000
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	431bde83 	.word	0x431bde83

08000c34 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d102      	bne.n	8000c48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	f000 bc02 	b.w	800144c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c48:	4b96      	ldr	r3, [pc, #600]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	f003 030c 	and.w	r3, r3, #12
 8000c50:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c52:	4b94      	ldr	r3, [pc, #592]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	f003 0303 	and.w	r3, r3, #3
 8000c5a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f003 0310 	and.w	r3, r3, #16
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f000 80e4 	beq.w	8000e32 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d007      	beq.n	8000c80 <HAL_RCC_OscConfig+0x4c>
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	2b0c      	cmp	r3, #12
 8000c74:	f040 808b 	bne.w	8000d8e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	f040 8087 	bne.w	8000d8e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c80:	4b88      	ldr	r3, [pc, #544]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f003 0302 	and.w	r3, r3, #2
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d005      	beq.n	8000c98 <HAL_RCC_OscConfig+0x64>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d101      	bne.n	8000c98 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e3d9      	b.n	800144c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6a1a      	ldr	r2, [r3, #32]
 8000c9c:	4b81      	ldr	r3, [pc, #516]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 0308 	and.w	r3, r3, #8
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d004      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x7e>
 8000ca8:	4b7e      	ldr	r3, [pc, #504]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000cb0:	e005      	b.n	8000cbe <HAL_RCC_OscConfig+0x8a>
 8000cb2:	4b7c      	ldr	r3, [pc, #496]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000cb8:	091b      	lsrs	r3, r3, #4
 8000cba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d223      	bcs.n	8000d0a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a1b      	ldr	r3, [r3, #32]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 fd54 	bl	8001774 <RCC_SetFlashLatencyFromMSIRange>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e3ba      	b.n	800144c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cd6:	4b73      	ldr	r3, [pc, #460]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a72      	ldr	r2, [pc, #456]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000cdc:	f043 0308 	orr.w	r3, r3, #8
 8000ce0:	6013      	str	r3, [r2, #0]
 8000ce2:	4b70      	ldr	r3, [pc, #448]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a1b      	ldr	r3, [r3, #32]
 8000cee:	496d      	ldr	r1, [pc, #436]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cf4:	4b6b      	ldr	r3, [pc, #428]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	69db      	ldr	r3, [r3, #28]
 8000d00:	021b      	lsls	r3, r3, #8
 8000d02:	4968      	ldr	r1, [pc, #416]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000d04:	4313      	orrs	r3, r2
 8000d06:	604b      	str	r3, [r1, #4]
 8000d08:	e025      	b.n	8000d56 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d0a:	4b66      	ldr	r3, [pc, #408]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a65      	ldr	r2, [pc, #404]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000d10:	f043 0308 	orr.w	r3, r3, #8
 8000d14:	6013      	str	r3, [r2, #0]
 8000d16:	4b63      	ldr	r3, [pc, #396]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6a1b      	ldr	r3, [r3, #32]
 8000d22:	4960      	ldr	r1, [pc, #384]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000d24:	4313      	orrs	r3, r2
 8000d26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d28:	4b5e      	ldr	r3, [pc, #376]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	69db      	ldr	r3, [r3, #28]
 8000d34:	021b      	lsls	r3, r3, #8
 8000d36:	495b      	ldr	r1, [pc, #364]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d109      	bne.n	8000d56 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a1b      	ldr	r3, [r3, #32]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 fd14 	bl	8001774 <RCC_SetFlashLatencyFromMSIRange>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e37a      	b.n	800144c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d56:	f000 fc81 	bl	800165c <HAL_RCC_GetSysClockFreq>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	4b51      	ldr	r3, [pc, #324]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	091b      	lsrs	r3, r3, #4
 8000d62:	f003 030f 	and.w	r3, r3, #15
 8000d66:	4950      	ldr	r1, [pc, #320]	@ (8000ea8 <HAL_RCC_OscConfig+0x274>)
 8000d68:	5ccb      	ldrb	r3, [r1, r3]
 8000d6a:	f003 031f 	and.w	r3, r3, #31
 8000d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d72:	4a4e      	ldr	r2, [pc, #312]	@ (8000eac <HAL_RCC_OscConfig+0x278>)
 8000d74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d76:	4b4e      	ldr	r3, [pc, #312]	@ (8000eb0 <HAL_RCC_OscConfig+0x27c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fbde 	bl	800053c <HAL_InitTick>
 8000d80:	4603      	mov	r3, r0
 8000d82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d052      	beq.n	8000e30 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	e35e      	b.n	800144c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d032      	beq.n	8000dfc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d96:	4b43      	ldr	r3, [pc, #268]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a42      	ldr	r2, [pc, #264]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000da2:	f7ff fc1b 	bl	80005dc <HAL_GetTick>
 8000da6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000da8:	e008      	b.n	8000dbc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000daa:	f7ff fc17 	bl	80005dc <HAL_GetTick>
 8000dae:	4602      	mov	r2, r0
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d901      	bls.n	8000dbc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000db8:	2303      	movs	r3, #3
 8000dba:	e347      	b.n	800144c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dbc:	4b39      	ldr	r3, [pc, #228]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 0302 	and.w	r3, r3, #2
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d0f0      	beq.n	8000daa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dc8:	4b36      	ldr	r3, [pc, #216]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a35      	ldr	r2, [pc, #212]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000dce:	f043 0308 	orr.w	r3, r3, #8
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	4b33      	ldr	r3, [pc, #204]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6a1b      	ldr	r3, [r3, #32]
 8000de0:	4930      	ldr	r1, [pc, #192]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000de2:	4313      	orrs	r3, r2
 8000de4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000de6:	4b2f      	ldr	r3, [pc, #188]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	021b      	lsls	r3, r3, #8
 8000df4:	492b      	ldr	r1, [pc, #172]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000df6:	4313      	orrs	r3, r2
 8000df8:	604b      	str	r3, [r1, #4]
 8000dfa:	e01a      	b.n	8000e32 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000dfc:	4b29      	ldr	r3, [pc, #164]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a28      	ldr	r2, [pc, #160]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000e02:	f023 0301 	bic.w	r3, r3, #1
 8000e06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e08:	f7ff fbe8 	bl	80005dc <HAL_GetTick>
 8000e0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e0e:	e008      	b.n	8000e22 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e10:	f7ff fbe4 	bl	80005dc <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d901      	bls.n	8000e22 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e314      	b.n	800144c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e22:	4b20      	ldr	r3, [pc, #128]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d1f0      	bne.n	8000e10 <HAL_RCC_OscConfig+0x1dc>
 8000e2e:	e000      	b.n	8000e32 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d073      	beq.n	8000f26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	2b08      	cmp	r3, #8
 8000e42:	d005      	beq.n	8000e50 <HAL_RCC_OscConfig+0x21c>
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	2b0c      	cmp	r3, #12
 8000e48:	d10e      	bne.n	8000e68 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	d10b      	bne.n	8000e68 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e50:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d063      	beq.n	8000f24 <HAL_RCC_OscConfig+0x2f0>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d15f      	bne.n	8000f24 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e2f1      	b.n	800144c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e70:	d106      	bne.n	8000e80 <HAL_RCC_OscConfig+0x24c>
 8000e72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	e025      	b.n	8000ecc <HAL_RCC_OscConfig+0x298>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e88:	d114      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x280>
 8000e8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000e90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	4b03      	ldr	r3, [pc, #12]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a02      	ldr	r2, [pc, #8]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ea0:	6013      	str	r3, [r2, #0]
 8000ea2:	e013      	b.n	8000ecc <HAL_RCC_OscConfig+0x298>
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	08001e58 	.word	0x08001e58
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	20000004 	.word	0x20000004
 8000eb4:	4ba0      	ldr	r3, [pc, #640]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a9f      	ldr	r2, [pc, #636]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 8000eba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ebe:	6013      	str	r3, [r2, #0]
 8000ec0:	4b9d      	ldr	r3, [pc, #628]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a9c      	ldr	r2, [pc, #624]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 8000ec6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d013      	beq.n	8000efc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ed4:	f7ff fb82 	bl	80005dc <HAL_GetTick>
 8000ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eda:	e008      	b.n	8000eee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000edc:	f7ff fb7e 	bl	80005dc <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b64      	cmp	r3, #100	@ 0x64
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e2ae      	b.n	800144c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eee:	4b92      	ldr	r3, [pc, #584]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0f0      	beq.n	8000edc <HAL_RCC_OscConfig+0x2a8>
 8000efa:	e014      	b.n	8000f26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000efc:	f7ff fb6e 	bl	80005dc <HAL_GetTick>
 8000f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f02:	e008      	b.n	8000f16 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f04:	f7ff fb6a 	bl	80005dc <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	2b64      	cmp	r3, #100	@ 0x64
 8000f10:	d901      	bls.n	8000f16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f12:	2303      	movs	r3, #3
 8000f14:	e29a      	b.n	800144c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f16:	4b88      	ldr	r3, [pc, #544]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1f0      	bne.n	8000f04 <HAL_RCC_OscConfig+0x2d0>
 8000f22:	e000      	b.n	8000f26 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d060      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	2b04      	cmp	r3, #4
 8000f36:	d005      	beq.n	8000f44 <HAL_RCC_OscConfig+0x310>
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	2b0c      	cmp	r3, #12
 8000f3c:	d119      	bne.n	8000f72 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d116      	bne.n	8000f72 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f44:	4b7c      	ldr	r3, [pc, #496]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d005      	beq.n	8000f5c <HAL_RCC_OscConfig+0x328>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d101      	bne.n	8000f5c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e277      	b.n	800144c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f5c:	4b76      	ldr	r3, [pc, #472]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	061b      	lsls	r3, r3, #24
 8000f6a:	4973      	ldr	r1, [pc, #460]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f70:	e040      	b.n	8000ff4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d023      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f7a:	4b6f      	ldr	r3, [pc, #444]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a6e      	ldr	r2, [pc, #440]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 8000f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f86:	f7ff fb29 	bl	80005dc <HAL_GetTick>
 8000f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f8c:	e008      	b.n	8000fa0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f8e:	f7ff fb25 	bl	80005dc <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e255      	b.n	800144c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fa0:	4b65      	ldr	r3, [pc, #404]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0f0      	beq.n	8000f8e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fac:	4b62      	ldr	r3, [pc, #392]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	061b      	lsls	r3, r3, #24
 8000fba:	495f      	ldr	r1, [pc, #380]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	604b      	str	r3, [r1, #4]
 8000fc0:	e018      	b.n	8000ff4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fc2:	4b5d      	ldr	r3, [pc, #372]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a5c      	ldr	r2, [pc, #368]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 8000fc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fce:	f7ff fb05 	bl	80005dc <HAL_GetTick>
 8000fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fd4:	e008      	b.n	8000fe8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fd6:	f7ff fb01 	bl	80005dc <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e231      	b.n	800144c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fe8:	4b53      	ldr	r3, [pc, #332]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1f0      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0308 	and.w	r3, r3, #8
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d03c      	beq.n	800107a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d01c      	beq.n	8001042 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001008:	4b4b      	ldr	r3, [pc, #300]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 800100a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800100e:	4a4a      	ldr	r2, [pc, #296]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001018:	f7ff fae0 	bl	80005dc <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001020:	f7ff fadc 	bl	80005dc <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e20c      	b.n	800144c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001032:	4b41      	ldr	r3, [pc, #260]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 8001034:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0ef      	beq.n	8001020 <HAL_RCC_OscConfig+0x3ec>
 8001040:	e01b      	b.n	800107a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001042:	4b3d      	ldr	r3, [pc, #244]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 8001044:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001048:	4a3b      	ldr	r2, [pc, #236]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 800104a:	f023 0301 	bic.w	r3, r3, #1
 800104e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001052:	f7ff fac3 	bl	80005dc <HAL_GetTick>
 8001056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001058:	e008      	b.n	800106c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800105a:	f7ff fabf 	bl	80005dc <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e1ef      	b.n	800144c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800106c:	4b32      	ldr	r3, [pc, #200]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 800106e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1ef      	bne.n	800105a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0304 	and.w	r3, r3, #4
 8001082:	2b00      	cmp	r3, #0
 8001084:	f000 80a6 	beq.w	80011d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001088:	2300      	movs	r3, #0
 800108a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800108c:	4b2a      	ldr	r3, [pc, #168]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 800108e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001090:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d10d      	bne.n	80010b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001098:	4b27      	ldr	r3, [pc, #156]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 800109a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109c:	4a26      	ldr	r2, [pc, #152]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 800109e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80010a4:	4b24      	ldr	r3, [pc, #144]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 80010a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010b0:	2301      	movs	r3, #1
 80010b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010b4:	4b21      	ldr	r3, [pc, #132]	@ (800113c <HAL_RCC_OscConfig+0x508>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d118      	bne.n	80010f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010c0:	4b1e      	ldr	r3, [pc, #120]	@ (800113c <HAL_RCC_OscConfig+0x508>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a1d      	ldr	r2, [pc, #116]	@ (800113c <HAL_RCC_OscConfig+0x508>)
 80010c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010cc:	f7ff fa86 	bl	80005dc <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010d4:	f7ff fa82 	bl	80005dc <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e1b2      	b.n	800144c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <HAL_RCC_OscConfig+0x508>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f0      	beq.n	80010d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d108      	bne.n	800110c <HAL_RCC_OscConfig+0x4d8>
 80010fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 80010fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001100:	4a0d      	ldr	r2, [pc, #52]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800110a:	e029      	b.n	8001160 <HAL_RCC_OscConfig+0x52c>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	2b05      	cmp	r3, #5
 8001112:	d115      	bne.n	8001140 <HAL_RCC_OscConfig+0x50c>
 8001114:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 8001116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800111a:	4a07      	ldr	r2, [pc, #28]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 800111c:	f043 0304 	orr.w	r3, r3, #4
 8001120:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001124:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 8001126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800112a:	4a03      	ldr	r2, [pc, #12]	@ (8001138 <HAL_RCC_OscConfig+0x504>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001134:	e014      	b.n	8001160 <HAL_RCC_OscConfig+0x52c>
 8001136:	bf00      	nop
 8001138:	40021000 	.word	0x40021000
 800113c:	40007000 	.word	0x40007000
 8001140:	4b9a      	ldr	r3, [pc, #616]	@ (80013ac <HAL_RCC_OscConfig+0x778>)
 8001142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001146:	4a99      	ldr	r2, [pc, #612]	@ (80013ac <HAL_RCC_OscConfig+0x778>)
 8001148:	f023 0301 	bic.w	r3, r3, #1
 800114c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001150:	4b96      	ldr	r3, [pc, #600]	@ (80013ac <HAL_RCC_OscConfig+0x778>)
 8001152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001156:	4a95      	ldr	r2, [pc, #596]	@ (80013ac <HAL_RCC_OscConfig+0x778>)
 8001158:	f023 0304 	bic.w	r3, r3, #4
 800115c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d016      	beq.n	8001196 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001168:	f7ff fa38 	bl	80005dc <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800116e:	e00a      	b.n	8001186 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001170:	f7ff fa34 	bl	80005dc <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800117e:	4293      	cmp	r3, r2
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e162      	b.n	800144c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001186:	4b89      	ldr	r3, [pc, #548]	@ (80013ac <HAL_RCC_OscConfig+0x778>)
 8001188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0ed      	beq.n	8001170 <HAL_RCC_OscConfig+0x53c>
 8001194:	e015      	b.n	80011c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001196:	f7ff fa21 	bl	80005dc <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800119c:	e00a      	b.n	80011b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800119e:	f7ff fa1d 	bl	80005dc <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d901      	bls.n	80011b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e14b      	b.n	800144c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011b4:	4b7d      	ldr	r3, [pc, #500]	@ (80013ac <HAL_RCC_OscConfig+0x778>)
 80011b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1ed      	bne.n	800119e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011c2:	7ffb      	ldrb	r3, [r7, #31]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d105      	bne.n	80011d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011c8:	4b78      	ldr	r3, [pc, #480]	@ (80013ac <HAL_RCC_OscConfig+0x778>)
 80011ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011cc:	4a77      	ldr	r2, [pc, #476]	@ (80013ac <HAL_RCC_OscConfig+0x778>)
 80011ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011d2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0320 	and.w	r3, r3, #32
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d03c      	beq.n	800125a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d01c      	beq.n	8001222 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80011e8:	4b70      	ldr	r3, [pc, #448]	@ (80013ac <HAL_RCC_OscConfig+0x778>)
 80011ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80011ee:	4a6f      	ldr	r2, [pc, #444]	@ (80013ac <HAL_RCC_OscConfig+0x778>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f8:	f7ff f9f0 	bl	80005dc <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001200:	f7ff f9ec 	bl	80005dc <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e11c      	b.n	800144c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001212:	4b66      	ldr	r3, [pc, #408]	@ (80013ac <HAL_RCC_OscConfig+0x778>)
 8001214:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0ef      	beq.n	8001200 <HAL_RCC_OscConfig+0x5cc>
 8001220:	e01b      	b.n	800125a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001222:	4b62      	ldr	r3, [pc, #392]	@ (80013ac <HAL_RCC_OscConfig+0x778>)
 8001224:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001228:	4a60      	ldr	r2, [pc, #384]	@ (80013ac <HAL_RCC_OscConfig+0x778>)
 800122a:	f023 0301 	bic.w	r3, r3, #1
 800122e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001232:	f7ff f9d3 	bl	80005dc <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800123a:	f7ff f9cf 	bl	80005dc <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e0ff      	b.n	800144c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800124c:	4b57      	ldr	r3, [pc, #348]	@ (80013ac <HAL_RCC_OscConfig+0x778>)
 800124e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1ef      	bne.n	800123a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 80f3 	beq.w	800144a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001268:	2b02      	cmp	r3, #2
 800126a:	f040 80c9 	bne.w	8001400 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800126e:	4b4f      	ldr	r3, [pc, #316]	@ (80013ac <HAL_RCC_OscConfig+0x778>)
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	f003 0203 	and.w	r2, r3, #3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800127e:	429a      	cmp	r2, r3
 8001280:	d12c      	bne.n	80012dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128c:	3b01      	subs	r3, #1
 800128e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001290:	429a      	cmp	r2, r3
 8001292:	d123      	bne.n	80012dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800129e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d11b      	bne.n	80012dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d113      	bne.n	80012dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012be:	085b      	lsrs	r3, r3, #1
 80012c0:	3b01      	subs	r3, #1
 80012c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d109      	bne.n	80012dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d2:	085b      	lsrs	r3, r3, #1
 80012d4:	3b01      	subs	r3, #1
 80012d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012d8:	429a      	cmp	r2, r3
 80012da:	d06b      	beq.n	80013b4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	2b0c      	cmp	r3, #12
 80012e0:	d062      	beq.n	80013a8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80012e2:	4b32      	ldr	r3, [pc, #200]	@ (80013ac <HAL_RCC_OscConfig+0x778>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e0ac      	b.n	800144c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80012f2:	4b2e      	ldr	r3, [pc, #184]	@ (80013ac <HAL_RCC_OscConfig+0x778>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a2d      	ldr	r2, [pc, #180]	@ (80013ac <HAL_RCC_OscConfig+0x778>)
 80012f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012fe:	f7ff f96d 	bl	80005dc <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001306:	f7ff f969 	bl	80005dc <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e099      	b.n	800144c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001318:	4b24      	ldr	r3, [pc, #144]	@ (80013ac <HAL_RCC_OscConfig+0x778>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1f0      	bne.n	8001306 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001324:	4b21      	ldr	r3, [pc, #132]	@ (80013ac <HAL_RCC_OscConfig+0x778>)
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	4b21      	ldr	r3, [pc, #132]	@ (80013b0 <HAL_RCC_OscConfig+0x77c>)
 800132a:	4013      	ands	r3, r2
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001334:	3a01      	subs	r2, #1
 8001336:	0112      	lsls	r2, r2, #4
 8001338:	4311      	orrs	r1, r2
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800133e:	0212      	lsls	r2, r2, #8
 8001340:	4311      	orrs	r1, r2
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001346:	0852      	lsrs	r2, r2, #1
 8001348:	3a01      	subs	r2, #1
 800134a:	0552      	lsls	r2, r2, #21
 800134c:	4311      	orrs	r1, r2
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001352:	0852      	lsrs	r2, r2, #1
 8001354:	3a01      	subs	r2, #1
 8001356:	0652      	lsls	r2, r2, #25
 8001358:	4311      	orrs	r1, r2
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800135e:	06d2      	lsls	r2, r2, #27
 8001360:	430a      	orrs	r2, r1
 8001362:	4912      	ldr	r1, [pc, #72]	@ (80013ac <HAL_RCC_OscConfig+0x778>)
 8001364:	4313      	orrs	r3, r2
 8001366:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001368:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <HAL_RCC_OscConfig+0x778>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0f      	ldr	r2, [pc, #60]	@ (80013ac <HAL_RCC_OscConfig+0x778>)
 800136e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001372:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001374:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <HAL_RCC_OscConfig+0x778>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	4a0c      	ldr	r2, [pc, #48]	@ (80013ac <HAL_RCC_OscConfig+0x778>)
 800137a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800137e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001380:	f7ff f92c 	bl	80005dc <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001388:	f7ff f928 	bl	80005dc <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e058      	b.n	800144c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800139a:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <HAL_RCC_OscConfig+0x778>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013a6:	e050      	b.n	800144a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e04f      	b.n	800144c <HAL_RCC_OscConfig+0x818>
 80013ac:	40021000 	.word	0x40021000
 80013b0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013b4:	4b27      	ldr	r3, [pc, #156]	@ (8001454 <HAL_RCC_OscConfig+0x820>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d144      	bne.n	800144a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80013c0:	4b24      	ldr	r3, [pc, #144]	@ (8001454 <HAL_RCC_OscConfig+0x820>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a23      	ldr	r2, [pc, #140]	@ (8001454 <HAL_RCC_OscConfig+0x820>)
 80013c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013cc:	4b21      	ldr	r3, [pc, #132]	@ (8001454 <HAL_RCC_OscConfig+0x820>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	4a20      	ldr	r2, [pc, #128]	@ (8001454 <HAL_RCC_OscConfig+0x820>)
 80013d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80013d8:	f7ff f900 	bl	80005dc <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e0:	f7ff f8fc 	bl	80005dc <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e02c      	b.n	800144c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013f2:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <HAL_RCC_OscConfig+0x820>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0x7ac>
 80013fe:	e024      	b.n	800144a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	2b0c      	cmp	r3, #12
 8001404:	d01f      	beq.n	8001446 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001406:	4b13      	ldr	r3, [pc, #76]	@ (8001454 <HAL_RCC_OscConfig+0x820>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a12      	ldr	r2, [pc, #72]	@ (8001454 <HAL_RCC_OscConfig+0x820>)
 800140c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001412:	f7ff f8e3 	bl	80005dc <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141a:	f7ff f8df 	bl	80005dc <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e00f      	b.n	800144c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800142c:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <HAL_RCC_OscConfig+0x820>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1f0      	bne.n	800141a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001438:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <HAL_RCC_OscConfig+0x820>)
 800143a:	68da      	ldr	r2, [r3, #12]
 800143c:	4905      	ldr	r1, [pc, #20]	@ (8001454 <HAL_RCC_OscConfig+0x820>)
 800143e:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <HAL_RCC_OscConfig+0x824>)
 8001440:	4013      	ands	r3, r2
 8001442:	60cb      	str	r3, [r1, #12]
 8001444:	e001      	b.n	800144a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3720      	adds	r7, #32
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40021000 	.word	0x40021000
 8001458:	feeefffc 	.word	0xfeeefffc

0800145c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e0e7      	b.n	8001640 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001470:	4b75      	ldr	r3, [pc, #468]	@ (8001648 <HAL_RCC_ClockConfig+0x1ec>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d910      	bls.n	80014a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147e:	4b72      	ldr	r3, [pc, #456]	@ (8001648 <HAL_RCC_ClockConfig+0x1ec>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 0207 	bic.w	r2, r3, #7
 8001486:	4970      	ldr	r1, [pc, #448]	@ (8001648 <HAL_RCC_ClockConfig+0x1ec>)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	4313      	orrs	r3, r2
 800148c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800148e:	4b6e      	ldr	r3, [pc, #440]	@ (8001648 <HAL_RCC_ClockConfig+0x1ec>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d001      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0cf      	b.n	8001640 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d010      	beq.n	80014ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	4b66      	ldr	r3, [pc, #408]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d908      	bls.n	80014ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014bc:	4b63      	ldr	r3, [pc, #396]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	4960      	ldr	r1, [pc, #384]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d04c      	beq.n	8001574 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d107      	bne.n	80014f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014e2:	4b5a      	ldr	r3, [pc, #360]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d121      	bne.n	8001532 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e0a6      	b.n	8001640 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d107      	bne.n	800150a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014fa:	4b54      	ldr	r3, [pc, #336]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d115      	bne.n	8001532 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e09a      	b.n	8001640 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d107      	bne.n	8001522 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001512:	4b4e      	ldr	r3, [pc, #312]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d109      	bne.n	8001532 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e08e      	b.n	8001640 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001522:	4b4a      	ldr	r3, [pc, #296]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e086      	b.n	8001640 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001532:	4b46      	ldr	r3, [pc, #280]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f023 0203 	bic.w	r2, r3, #3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4943      	ldr	r1, [pc, #268]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 8001540:	4313      	orrs	r3, r2
 8001542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001544:	f7ff f84a 	bl	80005dc <HAL_GetTick>
 8001548:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154a:	e00a      	b.n	8001562 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800154c:	f7ff f846 	bl	80005dc <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800155a:	4293      	cmp	r3, r2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e06e      	b.n	8001640 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001562:	4b3a      	ldr	r3, [pc, #232]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 020c 	and.w	r2, r3, #12
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	429a      	cmp	r2, r3
 8001572:	d1eb      	bne.n	800154c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d010      	beq.n	80015a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	4b31      	ldr	r3, [pc, #196]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800158c:	429a      	cmp	r2, r3
 800158e:	d208      	bcs.n	80015a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001590:	4b2e      	ldr	r3, [pc, #184]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	492b      	ldr	r1, [pc, #172]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015a2:	4b29      	ldr	r3, [pc, #164]	@ (8001648 <HAL_RCC_ClockConfig+0x1ec>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d210      	bcs.n	80015d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b0:	4b25      	ldr	r3, [pc, #148]	@ (8001648 <HAL_RCC_ClockConfig+0x1ec>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f023 0207 	bic.w	r2, r3, #7
 80015b8:	4923      	ldr	r1, [pc, #140]	@ (8001648 <HAL_RCC_ClockConfig+0x1ec>)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	4313      	orrs	r3, r2
 80015be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c0:	4b21      	ldr	r3, [pc, #132]	@ (8001648 <HAL_RCC_ClockConfig+0x1ec>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d001      	beq.n	80015d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e036      	b.n	8001640 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d008      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015de:	4b1b      	ldr	r3, [pc, #108]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	4918      	ldr	r1, [pc, #96]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d009      	beq.n	8001610 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015fc:	4b13      	ldr	r3, [pc, #76]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	4910      	ldr	r1, [pc, #64]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 800160c:	4313      	orrs	r3, r2
 800160e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001610:	f000 f824 	bl	800165c <HAL_RCC_GetSysClockFreq>
 8001614:	4602      	mov	r2, r0
 8001616:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <HAL_RCC_ClockConfig+0x1f0>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	091b      	lsrs	r3, r3, #4
 800161c:	f003 030f 	and.w	r3, r3, #15
 8001620:	490b      	ldr	r1, [pc, #44]	@ (8001650 <HAL_RCC_ClockConfig+0x1f4>)
 8001622:	5ccb      	ldrb	r3, [r1, r3]
 8001624:	f003 031f 	and.w	r3, r3, #31
 8001628:	fa22 f303 	lsr.w	r3, r2, r3
 800162c:	4a09      	ldr	r2, [pc, #36]	@ (8001654 <HAL_RCC_ClockConfig+0x1f8>)
 800162e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001630:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <HAL_RCC_ClockConfig+0x1fc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff81 	bl	800053c <HAL_InitTick>
 800163a:	4603      	mov	r3, r0
 800163c:	72fb      	strb	r3, [r7, #11]

  return status;
 800163e:	7afb      	ldrb	r3, [r7, #11]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40022000 	.word	0x40022000
 800164c:	40021000 	.word	0x40021000
 8001650:	08001e58 	.word	0x08001e58
 8001654:	20000000 	.word	0x20000000
 8001658:	20000004 	.word	0x20000004

0800165c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800165c:	b480      	push	{r7}
 800165e:	b089      	sub	sp, #36	@ 0x24
 8001660:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800166a:	4b3e      	ldr	r3, [pc, #248]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x108>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001674:	4b3b      	ldr	r3, [pc, #236]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x108>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <HAL_RCC_GetSysClockFreq+0x34>
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	2b0c      	cmp	r3, #12
 8001688:	d121      	bne.n	80016ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d11e      	bne.n	80016ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001690:	4b34      	ldr	r3, [pc, #208]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x108>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	2b00      	cmp	r3, #0
 800169a:	d107      	bne.n	80016ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800169c:	4b31      	ldr	r3, [pc, #196]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x108>)
 800169e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016a2:	0a1b      	lsrs	r3, r3, #8
 80016a4:	f003 030f 	and.w	r3, r3, #15
 80016a8:	61fb      	str	r3, [r7, #28]
 80016aa:	e005      	b.n	80016b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80016ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x108>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	091b      	lsrs	r3, r3, #4
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80016b8:	4a2b      	ldr	r2, [pc, #172]	@ (8001768 <HAL_RCC_GetSysClockFreq+0x10c>)
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d10d      	bne.n	80016e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016cc:	e00a      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d102      	bne.n	80016da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016d4:	4b25      	ldr	r3, [pc, #148]	@ (800176c <HAL_RCC_GetSysClockFreq+0x110>)
 80016d6:	61bb      	str	r3, [r7, #24]
 80016d8:	e004      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d101      	bne.n	80016e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016e0:	4b23      	ldr	r3, [pc, #140]	@ (8001770 <HAL_RCC_GetSysClockFreq+0x114>)
 80016e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	2b0c      	cmp	r3, #12
 80016e8:	d134      	bne.n	8001754 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x108>)
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d003      	beq.n	8001702 <HAL_RCC_GetSysClockFreq+0xa6>
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d003      	beq.n	8001708 <HAL_RCC_GetSysClockFreq+0xac>
 8001700:	e005      	b.n	800170e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001702:	4b1a      	ldr	r3, [pc, #104]	@ (800176c <HAL_RCC_GetSysClockFreq+0x110>)
 8001704:	617b      	str	r3, [r7, #20]
      break;
 8001706:	e005      	b.n	8001714 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001708:	4b19      	ldr	r3, [pc, #100]	@ (8001770 <HAL_RCC_GetSysClockFreq+0x114>)
 800170a:	617b      	str	r3, [r7, #20]
      break;
 800170c:	e002      	b.n	8001714 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	617b      	str	r3, [r7, #20]
      break;
 8001712:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001714:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x108>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	3301      	adds	r3, #1
 8001720:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x108>)
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	0a1b      	lsrs	r3, r3, #8
 8001728:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	fb03 f202 	mul.w	r2, r3, r2
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	fbb2 f3f3 	udiv	r3, r2, r3
 8001738:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800173a:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x108>)
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	0e5b      	lsrs	r3, r3, #25
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	3301      	adds	r3, #1
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001752:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001754:	69bb      	ldr	r3, [r7, #24]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3724      	adds	r7, #36	@ 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000
 8001768:	08001e68 	.word	0x08001e68
 800176c:	00f42400 	.word	0x00f42400
 8001770:	007a1200 	.word	0x007a1200

08001774 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001780:	4b2a      	ldr	r3, [pc, #168]	@ (800182c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800178c:	f7ff f9ee 	bl	8000b6c <HAL_PWREx_GetVoltageRange>
 8001790:	6178      	str	r0, [r7, #20]
 8001792:	e014      	b.n	80017be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001794:	4b25      	ldr	r3, [pc, #148]	@ (800182c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001798:	4a24      	ldr	r2, [pc, #144]	@ (800182c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800179a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800179e:	6593      	str	r3, [r2, #88]	@ 0x58
 80017a0:	4b22      	ldr	r3, [pc, #136]	@ (800182c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80017ac:	f7ff f9de 	bl	8000b6c <HAL_PWREx_GetVoltageRange>
 80017b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80017b2:	4b1e      	ldr	r3, [pc, #120]	@ (800182c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b6:	4a1d      	ldr	r2, [pc, #116]	@ (800182c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017c4:	d10b      	bne.n	80017de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b80      	cmp	r3, #128	@ 0x80
 80017ca:	d919      	bls.n	8001800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2ba0      	cmp	r3, #160	@ 0xa0
 80017d0:	d902      	bls.n	80017d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017d2:	2302      	movs	r3, #2
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	e013      	b.n	8001800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017d8:	2301      	movs	r3, #1
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	e010      	b.n	8001800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b80      	cmp	r3, #128	@ 0x80
 80017e2:	d902      	bls.n	80017ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80017e4:	2303      	movs	r3, #3
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	e00a      	b.n	8001800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b80      	cmp	r3, #128	@ 0x80
 80017ee:	d102      	bne.n	80017f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017f0:	2302      	movs	r3, #2
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	e004      	b.n	8001800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b70      	cmp	r3, #112	@ 0x70
 80017fa:	d101      	bne.n	8001800 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017fc:	2301      	movs	r3, #1
 80017fe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001800:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f023 0207 	bic.w	r2, r3, #7
 8001808:	4909      	ldr	r1, [pc, #36]	@ (8001830 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4313      	orrs	r3, r2
 800180e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001810:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	429a      	cmp	r2, r3
 800181c:	d001      	beq.n	8001822 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40021000 	.word	0x40021000
 8001830:	40022000 	.word	0x40022000

08001834 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e049      	b.n	80018da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d106      	bne.n	8001860 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7fe fda4 	bl	80003a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2202      	movs	r2, #2
 8001864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3304      	adds	r3, #4
 8001870:	4619      	mov	r1, r3
 8001872:	4610      	mov	r0, r2
 8001874:	f000 f9c4 	bl	8001c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d001      	beq.n	80018fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e03b      	b.n	8001974 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2202      	movs	r2, #2
 8001900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0201 	orr.w	r2, r2, #1
 8001912:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a19      	ldr	r2, [pc, #100]	@ (8001980 <HAL_TIM_Base_Start_IT+0x9c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d009      	beq.n	8001932 <HAL_TIM_Base_Start_IT+0x4e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001926:	d004      	beq.n	8001932 <HAL_TIM_Base_Start_IT+0x4e>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a15      	ldr	r2, [pc, #84]	@ (8001984 <HAL_TIM_Base_Start_IT+0xa0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d115      	bne.n	800195e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	4b13      	ldr	r3, [pc, #76]	@ (8001988 <HAL_TIM_Base_Start_IT+0xa4>)
 800193a:	4013      	ands	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2b06      	cmp	r3, #6
 8001942:	d015      	beq.n	8001970 <HAL_TIM_Base_Start_IT+0x8c>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800194a:	d011      	beq.n	8001970 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0201 	orr.w	r2, r2, #1
 800195a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800195c:	e008      	b.n	8001970 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f042 0201 	orr.w	r2, r2, #1
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	e000      	b.n	8001972 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001970:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	40012c00 	.word	0x40012c00
 8001984:	40014000 	.word	0x40014000
 8001988:	00010007 	.word	0x00010007

0800198c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d020      	beq.n	80019f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d01b      	beq.n	80019f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f06f 0202 	mvn.w	r2, #2
 80019c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f8f3 	bl	8001bc2 <HAL_TIM_IC_CaptureCallback>
 80019dc:	e005      	b.n	80019ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f8e5 	bl	8001bae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 f8f6 	bl	8001bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d020      	beq.n	8001a3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d01b      	beq.n	8001a3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f06f 0204 	mvn.w	r2, #4
 8001a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2202      	movs	r2, #2
 8001a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f8cd 	bl	8001bc2 <HAL_TIM_IC_CaptureCallback>
 8001a28:	e005      	b.n	8001a36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f8bf 	bl	8001bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 f8d0 	bl	8001bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d020      	beq.n	8001a88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d01b      	beq.n	8001a88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f06f 0208 	mvn.w	r2, #8
 8001a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 f8a7 	bl	8001bc2 <HAL_TIM_IC_CaptureCallback>
 8001a74:	e005      	b.n	8001a82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 f899 	bl	8001bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 f8aa 	bl	8001bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	f003 0310 	and.w	r3, r3, #16
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d020      	beq.n	8001ad4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f003 0310 	and.w	r3, r3, #16
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d01b      	beq.n	8001ad4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f06f 0210 	mvn.w	r2, #16
 8001aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2208      	movs	r2, #8
 8001aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f881 	bl	8001bc2 <HAL_TIM_IC_CaptureCallback>
 8001ac0:	e005      	b.n	8001ace <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f873 	bl	8001bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f884 	bl	8001bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00c      	beq.n	8001af8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d007      	beq.n	8001af8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f06f 0201 	mvn.w	r2, #1
 8001af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f851 	bl	8001b9a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d104      	bne.n	8001b0c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00c      	beq.n	8001b26 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d007      	beq.n	8001b26 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f94d 	bl	8001dc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00c      	beq.n	8001b4a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d007      	beq.n	8001b4a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 f945 	bl	8001dd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00c      	beq.n	8001b6e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d007      	beq.n	8001b6e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f83e 	bl	8001bea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	f003 0320 	and.w	r3, r3, #32
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00c      	beq.n	8001b92 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f003 0320 	and.w	r3, r3, #32
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d007      	beq.n	8001b92 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f06f 0220 	mvn.w	r2, #32
 8001b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f90d 	bl	8001dac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a30      	ldr	r2, [pc, #192]	@ (8001cd4 <TIM_Base_SetConfig+0xd4>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d003      	beq.n	8001c20 <TIM_Base_SetConfig+0x20>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c1e:	d108      	bne.n	8001c32 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a27      	ldr	r2, [pc, #156]	@ (8001cd4 <TIM_Base_SetConfig+0xd4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d00b      	beq.n	8001c52 <TIM_Base_SetConfig+0x52>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c40:	d007      	beq.n	8001c52 <TIM_Base_SetConfig+0x52>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a24      	ldr	r2, [pc, #144]	@ (8001cd8 <TIM_Base_SetConfig+0xd8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d003      	beq.n	8001c52 <TIM_Base_SetConfig+0x52>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a23      	ldr	r2, [pc, #140]	@ (8001cdc <TIM_Base_SetConfig+0xdc>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d108      	bne.n	8001c64 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a12      	ldr	r2, [pc, #72]	@ (8001cd4 <TIM_Base_SetConfig+0xd4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d007      	beq.n	8001ca0 <TIM_Base_SetConfig+0xa0>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a11      	ldr	r2, [pc, #68]	@ (8001cd8 <TIM_Base_SetConfig+0xd8>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d003      	beq.n	8001ca0 <TIM_Base_SetConfig+0xa0>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a10      	ldr	r2, [pc, #64]	@ (8001cdc <TIM_Base_SetConfig+0xdc>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d103      	bne.n	8001ca8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	691a      	ldr	r2, [r3, #16]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d105      	bne.n	8001cc6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	f023 0201 	bic.w	r2, r3, #1
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	611a      	str	r2, [r3, #16]
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40012c00 	.word	0x40012c00
 8001cd8:	40014000 	.word	0x40014000
 8001cdc:	40014400 	.word	0x40014400

08001ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e04f      	b.n	8001d98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a21      	ldr	r2, [pc, #132]	@ (8001da4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d108      	bne.n	8001d34 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001d28:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a14      	ldr	r2, [pc, #80]	@ (8001da4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d009      	beq.n	8001d6c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d60:	d004      	beq.n	8001d6c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a10      	ldr	r2, [pc, #64]	@ (8001da8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d10c      	bne.n	8001d86 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	40012c00 	.word	0x40012c00
 8001da8:	40014000 	.word	0x40014000

08001dac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <memset>:
 8001de8:	4402      	add	r2, r0
 8001dea:	4603      	mov	r3, r0
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d100      	bne.n	8001df2 <memset+0xa>
 8001df0:	4770      	bx	lr
 8001df2:	f803 1b01 	strb.w	r1, [r3], #1
 8001df6:	e7f9      	b.n	8001dec <memset+0x4>

08001df8 <__libc_init_array>:
 8001df8:	b570      	push	{r4, r5, r6, lr}
 8001dfa:	4d0d      	ldr	r5, [pc, #52]	@ (8001e30 <__libc_init_array+0x38>)
 8001dfc:	4c0d      	ldr	r4, [pc, #52]	@ (8001e34 <__libc_init_array+0x3c>)
 8001dfe:	1b64      	subs	r4, r4, r5
 8001e00:	10a4      	asrs	r4, r4, #2
 8001e02:	2600      	movs	r6, #0
 8001e04:	42a6      	cmp	r6, r4
 8001e06:	d109      	bne.n	8001e1c <__libc_init_array+0x24>
 8001e08:	4d0b      	ldr	r5, [pc, #44]	@ (8001e38 <__libc_init_array+0x40>)
 8001e0a:	4c0c      	ldr	r4, [pc, #48]	@ (8001e3c <__libc_init_array+0x44>)
 8001e0c:	f000 f818 	bl	8001e40 <_init>
 8001e10:	1b64      	subs	r4, r4, r5
 8001e12:	10a4      	asrs	r4, r4, #2
 8001e14:	2600      	movs	r6, #0
 8001e16:	42a6      	cmp	r6, r4
 8001e18:	d105      	bne.n	8001e26 <__libc_init_array+0x2e>
 8001e1a:	bd70      	pop	{r4, r5, r6, pc}
 8001e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e20:	4798      	blx	r3
 8001e22:	3601      	adds	r6, #1
 8001e24:	e7ee      	b.n	8001e04 <__libc_init_array+0xc>
 8001e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e2a:	4798      	blx	r3
 8001e2c:	3601      	adds	r6, #1
 8001e2e:	e7f2      	b.n	8001e16 <__libc_init_array+0x1e>
 8001e30:	08001e98 	.word	0x08001e98
 8001e34:	08001e98 	.word	0x08001e98
 8001e38:	08001e98 	.word	0x08001e98
 8001e3c:	08001e9c 	.word	0x08001e9c

08001e40 <_init>:
 8001e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e42:	bf00      	nop
 8001e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e46:	bc08      	pop	{r3}
 8001e48:	469e      	mov	lr, r3
 8001e4a:	4770      	bx	lr

08001e4c <_fini>:
 8001e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e4e:	bf00      	nop
 8001e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e52:	bc08      	pop	{r3}
 8001e54:	469e      	mov	lr, r3
 8001e56:	4770      	bx	lr
