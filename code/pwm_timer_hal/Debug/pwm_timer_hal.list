
pwm_timer_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027c8  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002954  08002954  00003954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002994  08002994  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002994  08002994  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002994  08002994  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002994  08002994  00003994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002998  08002998  00003998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800299c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  080029a8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080029a8  000040c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a087  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ed  00000000  00000000  0000e0c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  0000fab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008de  00000000  00000000  00010630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f86  00000000  00000000  00010f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c303  00000000  00000000  00031e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc1cb  00000000  00000000  0003e197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a362  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f9c  00000000  00000000  0010a3a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0010d344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800293c 	.word	0x0800293c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	0800293c 	.word	0x0800293c

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fa5b 	bl	800068a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f82a 	bl	800022c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f91c 	bl	8000414 <MX_GPIO_Init>
  MX_DMA_Init();
 80001dc:	f000 f8fc 	bl	80003d8 <MX_DMA_Init>
  MX_TIM1_Init();
 80001e0:	f000 f86a 	bl	80002b8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Init(&htim1);
 80001e4:	4810      	ldr	r0, [pc, #64]	@ (8000228 <main+0x5c>)
 80001e6:	f001 fd41 	bl	8001c6c <HAL_TIM_PWM_Init>
//  TIM1->CCR1 =50;// COUNT VALUE TO MATCH THE ARR AUTO RELOAD REGISTER
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80001ea:	2100      	movs	r1, #0
 80001ec:	480e      	ldr	r0, [pc, #56]	@ (8000228 <main+0x5c>)
 80001ee:	f001 fd95 	bl	8001d1c <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 30);
 80001f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000228 <main+0x5c>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	221e      	movs	r2, #30
 80001f8:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(1000);
 80001fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001fe:	f000 fab9 	bl	8000774 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 80);
 8000202:	4b09      	ldr	r3, [pc, #36]	@ (8000228 <main+0x5c>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	2250      	movs	r2, #80	@ 0x50
 8000208:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(1000);
 800020a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800020e:	f000 fab1 	bl	8000774 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 130);
 8000212:	4b05      	ldr	r3, [pc, #20]	@ (8000228 <main+0x5c>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	2282      	movs	r2, #130	@ 0x82
 8000218:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(1000);
 800021a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800021e:	f000 faa9 	bl	8000774 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 30);
 8000222:	bf00      	nop
 8000224:	e7e5      	b.n	80001f2 <main+0x26>
 8000226:	bf00      	nop
 8000228:	20000028 	.word	0x20000028

0800022c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b096      	sub	sp, #88	@ 0x58
 8000230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000232:	f107 0314 	add.w	r3, r7, #20
 8000236:	2244      	movs	r2, #68	@ 0x44
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f002 fb52 	bl	80028e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000240:	463b      	mov	r3, r7
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]
 800024c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800024e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000252:	f000 feb5 	bl	8000fc0 <HAL_PWREx_ControlVoltageScaling>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800025c:	f000 f8f2 	bl	8000444 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000260:	2310      	movs	r3, #16
 8000262:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000264:	2301      	movs	r3, #1
 8000266:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000268:	2300      	movs	r3, #0
 800026a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800026c:	2360      	movs	r3, #96	@ 0x60
 800026e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000270:	2300      	movs	r3, #0
 8000272:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000274:	f107 0314 	add.w	r3, r7, #20
 8000278:	4618      	mov	r0, r3
 800027a:	f000 fef7 	bl	800106c <HAL_RCC_OscConfig>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000284:	f000 f8de 	bl	8000444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000288:	230f      	movs	r3, #15
 800028a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800028c:	2300      	movs	r3, #0
 800028e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800029c:	463b      	mov	r3, r7
 800029e:	2100      	movs	r1, #0
 80002a0:	4618      	mov	r0, r3
 80002a2:	f001 faf7 	bl	8001894 <HAL_RCC_ClockConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002ac:	f000 f8ca 	bl	8000444 <Error_Handler>
  }
}
 80002b0:	bf00      	nop
 80002b2:	3758      	adds	r7, #88	@ 0x58
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b096      	sub	sp, #88	@ 0x58
 80002bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002be:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002ca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	611a      	str	r2, [r3, #16]
 80002da:	615a      	str	r2, [r3, #20]
 80002dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	222c      	movs	r2, #44	@ 0x2c
 80002e2:	2100      	movs	r1, #0
 80002e4:	4618      	mov	r0, r3
 80002e6:	f002 fafd 	bl	80028e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002ea:	4b39      	ldr	r3, [pc, #228]	@ (80003d0 <MX_TIM1_Init+0x118>)
 80002ec:	4a39      	ldr	r2, [pc, #228]	@ (80003d4 <MX_TIM1_Init+0x11c>)
 80002ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 80002f0:	4b37      	ldr	r3, [pc, #220]	@ (80003d0 <MX_TIM1_Init+0x118>)
 80002f2:	224f      	movs	r2, #79	@ 0x4f
 80002f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002f6:	4b36      	ldr	r3, [pc, #216]	@ (80003d0 <MX_TIM1_Init+0x118>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80002fc:	4b34      	ldr	r3, [pc, #208]	@ (80003d0 <MX_TIM1_Init+0x118>)
 80002fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000302:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000304:	4b32      	ldr	r3, [pc, #200]	@ (80003d0 <MX_TIM1_Init+0x118>)
 8000306:	2200      	movs	r2, #0
 8000308:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800030a:	4b31      	ldr	r3, [pc, #196]	@ (80003d0 <MX_TIM1_Init+0x118>)
 800030c:	2200      	movs	r2, #0
 800030e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000310:	4b2f      	ldr	r3, [pc, #188]	@ (80003d0 <MX_TIM1_Init+0x118>)
 8000312:	2200      	movs	r2, #0
 8000314:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000316:	482e      	ldr	r0, [pc, #184]	@ (80003d0 <MX_TIM1_Init+0x118>)
 8000318:	f001 fca8 	bl	8001c6c <HAL_TIM_PWM_Init>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000322:	f000 f88f 	bl	8000444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000326:	2300      	movs	r3, #0
 8000328:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800032a:	2300      	movs	r3, #0
 800032c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800032e:	2300      	movs	r3, #0
 8000330:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000332:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000336:	4619      	mov	r1, r3
 8000338:	4825      	ldr	r0, [pc, #148]	@ (80003d0 <MX_TIM1_Init+0x118>)
 800033a:	f002 f9f5 	bl	8002728 <HAL_TIMEx_MasterConfigSynchronization>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000344:	f000 f87e 	bl	8000444 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000348:	2360      	movs	r3, #96	@ 0x60
 800034a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800034c:	2300      	movs	r3, #0
 800034e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000350:	2300      	movs	r3, #0
 8000352:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000354:	2300      	movs	r3, #0
 8000356:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000358:	2300      	movs	r3, #0
 800035a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800035c:	2300      	movs	r3, #0
 800035e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000360:	2300      	movs	r3, #0
 8000362:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000364:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000368:	2200      	movs	r2, #0
 800036a:	4619      	mov	r1, r3
 800036c:	4818      	ldr	r0, [pc, #96]	@ (80003d0 <MX_TIM1_Init+0x118>)
 800036e:	f001 fdb3 	bl	8001ed8 <HAL_TIM_PWM_ConfigChannel>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000378:	f000 f864 	bl	8000444 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800037c:	2300      	movs	r3, #0
 800037e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000380:	2300      	movs	r3, #0
 8000382:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000384:	2300      	movs	r3, #0
 8000386:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000388:	2300      	movs	r3, #0
 800038a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000390:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000394:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000396:	2300      	movs	r3, #0
 8000398:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800039a:	2300      	movs	r3, #0
 800039c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800039e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80003a2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003a8:	2300      	movs	r3, #0
 80003aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	4619      	mov	r1, r3
 80003b0:	4807      	ldr	r0, [pc, #28]	@ (80003d0 <MX_TIM1_Init+0x118>)
 80003b2:	f002 fa1f 	bl	80027f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80003bc:	f000 f842 	bl	8000444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80003c0:	4803      	ldr	r0, [pc, #12]	@ (80003d0 <MX_TIM1_Init+0x118>)
 80003c2:	f000 f8b5 	bl	8000530 <HAL_TIM_MspPostInit>

}
 80003c6:	bf00      	nop
 80003c8:	3758      	adds	r7, #88	@ 0x58
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	20000028 	.word	0x20000028
 80003d4:	40012c00 	.word	0x40012c00

080003d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003de:	4b0c      	ldr	r3, [pc, #48]	@ (8000410 <MX_DMA_Init+0x38>)
 80003e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80003e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000410 <MX_DMA_Init+0x38>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6493      	str	r3, [r2, #72]	@ 0x48
 80003ea:	4b09      	ldr	r3, [pc, #36]	@ (8000410 <MX_DMA_Init+0x38>)
 80003ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2100      	movs	r1, #0
 80003fa:	200c      	movs	r0, #12
 80003fc:	f000 fab9 	bl	8000972 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000400:	200c      	movs	r0, #12
 8000402:	f000 fad2 	bl	80009aa <HAL_NVIC_EnableIRQ>

}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40021000 	.word	0x40021000

08000414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041a:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <MX_GPIO_Init+0x2c>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800041e:	4a08      	ldr	r2, [pc, #32]	@ (8000440 <MX_GPIO_Init+0x2c>)
 8000420:	f043 0301 	orr.w	r3, r3, #1
 8000424:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000426:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <MX_GPIO_Init+0x2c>)
 8000428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	40021000 	.word	0x40021000

08000444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000448:	b672      	cpsid	i
}
 800044a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800044c:	bf00      	nop
 800044e:	e7fd      	b.n	800044c <Error_Handler+0x8>

08000450 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000456:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <HAL_MspInit+0x44>)
 8000458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800045a:	4a0e      	ldr	r2, [pc, #56]	@ (8000494 <HAL_MspInit+0x44>)
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	6613      	str	r3, [r2, #96]	@ 0x60
 8000462:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <HAL_MspInit+0x44>)
 8000464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046e:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <HAL_MspInit+0x44>)
 8000470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000472:	4a08      	ldr	r2, [pc, #32]	@ (8000494 <HAL_MspInit+0x44>)
 8000474:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000478:	6593      	str	r3, [r2, #88]	@ 0x58
 800047a:	4b06      	ldr	r3, [pc, #24]	@ (8000494 <HAL_MspInit+0x44>)
 800047c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800047e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000482:	603b      	str	r3, [r7, #0]
 8000484:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000486:	bf00      	nop
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	40021000 	.word	0x40021000

08000498 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a1e      	ldr	r2, [pc, #120]	@ (8000520 <HAL_TIM_PWM_MspInit+0x88>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d136      	bne.n	8000518 <HAL_TIM_PWM_MspInit+0x80>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80004aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000524 <HAL_TIM_PWM_MspInit+0x8c>)
 80004ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004ae:	4a1d      	ldr	r2, [pc, #116]	@ (8000524 <HAL_TIM_PWM_MspInit+0x8c>)
 80004b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80004b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80004b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000524 <HAL_TIM_PWM_MspInit+0x8c>)
 80004b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80004c2:	4b19      	ldr	r3, [pc, #100]	@ (8000528 <HAL_TIM_PWM_MspInit+0x90>)
 80004c4:	4a19      	ldr	r2, [pc, #100]	@ (800052c <HAL_TIM_PWM_MspInit+0x94>)
 80004c6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 80004c8:	4b17      	ldr	r3, [pc, #92]	@ (8000528 <HAL_TIM_PWM_MspInit+0x90>)
 80004ca:	2207      	movs	r2, #7
 80004cc:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80004ce:	4b16      	ldr	r3, [pc, #88]	@ (8000528 <HAL_TIM_PWM_MspInit+0x90>)
 80004d0:	2210      	movs	r2, #16
 80004d2:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80004d4:	4b14      	ldr	r3, [pc, #80]	@ (8000528 <HAL_TIM_PWM_MspInit+0x90>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80004da:	4b13      	ldr	r3, [pc, #76]	@ (8000528 <HAL_TIM_PWM_MspInit+0x90>)
 80004dc:	2280      	movs	r2, #128	@ 0x80
 80004de:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80004e0:	4b11      	ldr	r3, [pc, #68]	@ (8000528 <HAL_TIM_PWM_MspInit+0x90>)
 80004e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004e6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80004e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000528 <HAL_TIM_PWM_MspInit+0x90>)
 80004ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80004ee:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80004f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000528 <HAL_TIM_PWM_MspInit+0x90>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80004f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000528 <HAL_TIM_PWM_MspInit+0x90>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80004fc:	480a      	ldr	r0, [pc, #40]	@ (8000528 <HAL_TIM_PWM_MspInit+0x90>)
 80004fe:	f000 fa6f 	bl	80009e0 <HAL_DMA_Init>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <HAL_TIM_PWM_MspInit+0x74>
    {
      Error_Handler();
 8000508:	f7ff ff9c 	bl	8000444 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a06      	ldr	r2, [pc, #24]	@ (8000528 <HAL_TIM_PWM_MspInit+0x90>)
 8000510:	625a      	str	r2, [r3, #36]	@ 0x24
 8000512:	4a05      	ldr	r2, [pc, #20]	@ (8000528 <HAL_TIM_PWM_MspInit+0x90>)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000518:	bf00      	nop
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40012c00 	.word	0x40012c00
 8000524:	40021000 	.word	0x40021000
 8000528:	20000074 	.word	0x20000074
 800052c:	4002001c 	.word	0x4002001c

08000530 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a12      	ldr	r2, [pc, #72]	@ (8000598 <HAL_TIM_MspPostInit+0x68>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d11d      	bne.n	800058e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	4b12      	ldr	r3, [pc, #72]	@ (800059c <HAL_TIM_MspPostInit+0x6c>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000556:	4a11      	ldr	r2, [pc, #68]	@ (800059c <HAL_TIM_MspPostInit+0x6c>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055e:	4b0f      	ldr	r3, [pc, #60]	@ (800059c <HAL_TIM_MspPostInit+0x6c>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800056a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800056e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000570:	2302      	movs	r3, #2
 8000572:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000578:	2300      	movs	r3, #0
 800057a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800057c:	2301      	movs	r3, #1
 800057e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4619      	mov	r1, r3
 8000586:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800058a:	f000 fb91 	bl	8000cb0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800058e:	bf00      	nop
 8000590:	3720      	adds	r7, #32
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40012c00 	.word	0x40012c00
 800059c:	40021000 	.word	0x40021000

080005a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005a4:	bf00      	nop
 80005a6:	e7fd      	b.n	80005a4 <NMI_Handler+0x4>

080005a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <HardFault_Handler+0x4>

080005b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <MemManage_Handler+0x4>

080005b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <BusFault_Handler+0x4>

080005c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <UsageFault_Handler+0x4>

080005c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005da:	bf00      	nop
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005f6:	f000 f89d 	bl	8000734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000604:	4802      	ldr	r0, [pc, #8]	@ (8000610 <DMA1_Channel2_IRQHandler+0x10>)
 8000606:	f000 faa3 	bl	8000b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000074 	.word	0x20000074

08000614 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000618:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <SystemInit+0x20>)
 800061a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800061e:	4a05      	ldr	r2, [pc, #20]	@ (8000634 <SystemInit+0x20>)
 8000620:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000624:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000638:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000670 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800063c:	f7ff ffea 	bl	8000614 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000640:	480c      	ldr	r0, [pc, #48]	@ (8000674 <LoopForever+0x6>)
  ldr r1, =_edata
 8000642:	490d      	ldr	r1, [pc, #52]	@ (8000678 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000644:	4a0d      	ldr	r2, [pc, #52]	@ (800067c <LoopForever+0xe>)
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000648:	e002      	b.n	8000650 <LoopCopyDataInit>

0800064a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800064a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800064c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064e:	3304      	adds	r3, #4

08000650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000654:	d3f9      	bcc.n	800064a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000656:	4a0a      	ldr	r2, [pc, #40]	@ (8000680 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000658:	4c0a      	ldr	r4, [pc, #40]	@ (8000684 <LoopForever+0x16>)
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800065c:	e001      	b.n	8000662 <LoopFillZerobss>

0800065e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000660:	3204      	adds	r2, #4

08000662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000664:	d3fb      	bcc.n	800065e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000666:	f002 f945 	bl	80028f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800066a:	f7ff fdaf 	bl	80001cc <main>

0800066e <LoopForever>:

LoopForever:
    b LoopForever
 800066e:	e7fe      	b.n	800066e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000670:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000678:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800067c:	0800299c 	.word	0x0800299c
  ldr r2, =_sbss
 8000680:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000684:	200000c0 	.word	0x200000c0

08000688 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000688:	e7fe      	b.n	8000688 <ADC1_IRQHandler>

0800068a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b082      	sub	sp, #8
 800068e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000690:	2300      	movs	r3, #0
 8000692:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000694:	2003      	movs	r0, #3
 8000696:	f000 f961 	bl	800095c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800069a:	200f      	movs	r0, #15
 800069c:	f000 f80e 	bl	80006bc <HAL_InitTick>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d002      	beq.n	80006ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
 80006a8:	71fb      	strb	r3, [r7, #7]
 80006aa:	e001      	b.n	80006b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006ac:	f7ff fed0 	bl	8000450 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006b0:	79fb      	ldrb	r3, [r7, #7]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006c4:	2300      	movs	r3, #0
 80006c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006c8:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <HAL_InitTick+0x6c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d023      	beq.n	8000718 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006d0:	4b16      	ldr	r3, [pc, #88]	@ (800072c <HAL_InitTick+0x70>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <HAL_InitTick+0x6c>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	4619      	mov	r1, r3
 80006da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006de:	fbb3 f3f1 	udiv	r3, r3, r1
 80006e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 f96d 	bl	80009c6 <HAL_SYSTICK_Config>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d10f      	bne.n	8000712 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2b0f      	cmp	r3, #15
 80006f6:	d809      	bhi.n	800070c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f8:	2200      	movs	r2, #0
 80006fa:	6879      	ldr	r1, [r7, #4]
 80006fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000700:	f000 f937 	bl	8000972 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000704:	4a0a      	ldr	r2, [pc, #40]	@ (8000730 <HAL_InitTick+0x74>)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6013      	str	r3, [r2, #0]
 800070a:	e007      	b.n	800071c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800070c:	2301      	movs	r3, #1
 800070e:	73fb      	strb	r3, [r7, #15]
 8000710:	e004      	b.n	800071c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000712:	2301      	movs	r3, #1
 8000714:	73fb      	strb	r3, [r7, #15]
 8000716:	e001      	b.n	800071c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000718:	2301      	movs	r3, #1
 800071a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800071c:	7bfb      	ldrb	r3, [r7, #15]
}
 800071e:	4618      	mov	r0, r3
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000008 	.word	0x20000008
 800072c:	20000000 	.word	0x20000000
 8000730:	20000004 	.word	0x20000004

08000734 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000738:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <HAL_IncTick+0x20>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	461a      	mov	r2, r3
 800073e:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <HAL_IncTick+0x24>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4413      	add	r3, r2
 8000744:	4a04      	ldr	r2, [pc, #16]	@ (8000758 <HAL_IncTick+0x24>)
 8000746:	6013      	str	r3, [r2, #0]
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	20000008 	.word	0x20000008
 8000758:	200000bc 	.word	0x200000bc

0800075c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  return uwTick;
 8000760:	4b03      	ldr	r3, [pc, #12]	@ (8000770 <HAL_GetTick+0x14>)
 8000762:	681b      	ldr	r3, [r3, #0]
}
 8000764:	4618      	mov	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	200000bc 	.word	0x200000bc

08000774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800077c:	f7ff ffee 	bl	800075c <HAL_GetTick>
 8000780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800078c:	d005      	beq.n	800079a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800078e:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <HAL_Delay+0x44>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	461a      	mov	r2, r3
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	4413      	add	r3, r2
 8000798:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800079a:	bf00      	nop
 800079c:	f7ff ffde 	bl	800075c <HAL_GetTick>
 80007a0:	4602      	mov	r2, r0
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	1ad3      	subs	r3, r2, r3
 80007a6:	68fa      	ldr	r2, [r7, #12]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d8f7      	bhi.n	800079c <HAL_Delay+0x28>
  {
  }
}
 80007ac:	bf00      	nop
 80007ae:	bf00      	nop
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000008 	.word	0x20000008

080007bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f003 0307 	and.w	r3, r3, #7
 80007ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <__NVIC_SetPriorityGrouping+0x44>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007d2:	68ba      	ldr	r2, [r7, #8]
 80007d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007d8:	4013      	ands	r3, r2
 80007da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ee:	4a04      	ldr	r2, [pc, #16]	@ (8000800 <__NVIC_SetPriorityGrouping+0x44>)
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	60d3      	str	r3, [r2, #12]
}
 80007f4:	bf00      	nop
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000808:	4b04      	ldr	r3, [pc, #16]	@ (800081c <__NVIC_GetPriorityGrouping+0x18>)
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	0a1b      	lsrs	r3, r3, #8
 800080e:	f003 0307 	and.w	r3, r3, #7
}
 8000812:	4618      	mov	r0, r3
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	2b00      	cmp	r3, #0
 8000830:	db0b      	blt.n	800084a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	f003 021f 	and.w	r2, r3, #31
 8000838:	4907      	ldr	r1, [pc, #28]	@ (8000858 <__NVIC_EnableIRQ+0x38>)
 800083a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083e:	095b      	lsrs	r3, r3, #5
 8000840:	2001      	movs	r0, #1
 8000842:	fa00 f202 	lsl.w	r2, r0, r2
 8000846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	e000e100 	.word	0xe000e100

0800085c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	6039      	str	r1, [r7, #0]
 8000866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086c:	2b00      	cmp	r3, #0
 800086e:	db0a      	blt.n	8000886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	b2da      	uxtb	r2, r3
 8000874:	490c      	ldr	r1, [pc, #48]	@ (80008a8 <__NVIC_SetPriority+0x4c>)
 8000876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087a:	0112      	lsls	r2, r2, #4
 800087c:	b2d2      	uxtb	r2, r2
 800087e:	440b      	add	r3, r1
 8000880:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000884:	e00a      	b.n	800089c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	b2da      	uxtb	r2, r3
 800088a:	4908      	ldr	r1, [pc, #32]	@ (80008ac <__NVIC_SetPriority+0x50>)
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	f003 030f 	and.w	r3, r3, #15
 8000892:	3b04      	subs	r3, #4
 8000894:	0112      	lsls	r2, r2, #4
 8000896:	b2d2      	uxtb	r2, r2
 8000898:	440b      	add	r3, r1
 800089a:	761a      	strb	r2, [r3, #24]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	e000e100 	.word	0xe000e100
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b089      	sub	sp, #36	@ 0x24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	f1c3 0307 	rsb	r3, r3, #7
 80008ca:	2b04      	cmp	r3, #4
 80008cc:	bf28      	it	cs
 80008ce:	2304      	movcs	r3, #4
 80008d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	3304      	adds	r3, #4
 80008d6:	2b06      	cmp	r3, #6
 80008d8:	d902      	bls.n	80008e0 <NVIC_EncodePriority+0x30>
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	3b03      	subs	r3, #3
 80008de:	e000      	b.n	80008e2 <NVIC_EncodePriority+0x32>
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e4:	f04f 32ff 	mov.w	r2, #4294967295
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	43da      	mvns	r2, r3
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	401a      	ands	r2, r3
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008f8:	f04f 31ff 	mov.w	r1, #4294967295
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000902:	43d9      	mvns	r1, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000908:	4313      	orrs	r3, r2
         );
}
 800090a:	4618      	mov	r0, r3
 800090c:	3724      	adds	r7, #36	@ 0x24
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
	...

08000918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3b01      	subs	r3, #1
 8000924:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000928:	d301      	bcc.n	800092e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800092a:	2301      	movs	r3, #1
 800092c:	e00f      	b.n	800094e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800092e:	4a0a      	ldr	r2, [pc, #40]	@ (8000958 <SysTick_Config+0x40>)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3b01      	subs	r3, #1
 8000934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000936:	210f      	movs	r1, #15
 8000938:	f04f 30ff 	mov.w	r0, #4294967295
 800093c:	f7ff ff8e 	bl	800085c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000940:	4b05      	ldr	r3, [pc, #20]	@ (8000958 <SysTick_Config+0x40>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000946:	4b04      	ldr	r3, [pc, #16]	@ (8000958 <SysTick_Config+0x40>)
 8000948:	2207      	movs	r2, #7
 800094a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	e000e010 	.word	0xe000e010

0800095c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f7ff ff29 	bl	80007bc <__NVIC_SetPriorityGrouping>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b086      	sub	sp, #24
 8000976:	af00      	add	r7, sp, #0
 8000978:	4603      	mov	r3, r0
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	607a      	str	r2, [r7, #4]
 800097e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000984:	f7ff ff3e 	bl	8000804 <__NVIC_GetPriorityGrouping>
 8000988:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	68b9      	ldr	r1, [r7, #8]
 800098e:	6978      	ldr	r0, [r7, #20]
 8000990:	f7ff ff8e 	bl	80008b0 <NVIC_EncodePriority>
 8000994:	4602      	mov	r2, r0
 8000996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800099a:	4611      	mov	r1, r2
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff ff5d 	bl	800085c <__NVIC_SetPriority>
}
 80009a2:	bf00      	nop
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b082      	sub	sp, #8
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	4603      	mov	r3, r0
 80009b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff31 	bl	8000820 <__NVIC_EnableIRQ>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f7ff ffa2 	bl	8000918 <SysTick_Config>
 80009d4:	4603      	mov	r3, r0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d101      	bne.n	80009f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e098      	b.n	8000b24 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	461a      	mov	r2, r3
 80009f8:	4b4d      	ldr	r3, [pc, #308]	@ (8000b30 <HAL_DMA_Init+0x150>)
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d80f      	bhi.n	8000a1e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	461a      	mov	r2, r3
 8000a04:	4b4b      	ldr	r3, [pc, #300]	@ (8000b34 <HAL_DMA_Init+0x154>)
 8000a06:	4413      	add	r3, r2
 8000a08:	4a4b      	ldr	r2, [pc, #300]	@ (8000b38 <HAL_DMA_Init+0x158>)
 8000a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0e:	091b      	lsrs	r3, r3, #4
 8000a10:	009a      	lsls	r2, r3, #2
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a48      	ldr	r2, [pc, #288]	@ (8000b3c <HAL_DMA_Init+0x15c>)
 8000a1a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a1c:	e00e      	b.n	8000a3c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	461a      	mov	r2, r3
 8000a24:	4b46      	ldr	r3, [pc, #280]	@ (8000b40 <HAL_DMA_Init+0x160>)
 8000a26:	4413      	add	r3, r2
 8000a28:	4a43      	ldr	r2, [pc, #268]	@ (8000b38 <HAL_DMA_Init+0x158>)
 8000a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2e:	091b      	lsrs	r3, r3, #4
 8000a30:	009a      	lsls	r2, r3, #2
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a42      	ldr	r2, [pc, #264]	@ (8000b44 <HAL_DMA_Init+0x164>)
 8000a3a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2202      	movs	r2, #2
 8000a40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000a56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000a60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	691b      	ldr	r3, [r3, #16]
 8000a66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6a1b      	ldr	r3, [r3, #32]
 8000a7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	68fa      	ldr	r2, [r7, #12]
 8000a8c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000a96:	d039      	beq.n	8000b0c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9c:	4a27      	ldr	r2, [pc, #156]	@ (8000b3c <HAL_DMA_Init+0x15c>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d11a      	bne.n	8000ad8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000aa2:	4b29      	ldr	r3, [pc, #164]	@ (8000b48 <HAL_DMA_Init+0x168>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aaa:	f003 031c 	and.w	r3, r3, #28
 8000aae:	210f      	movs	r1, #15
 8000ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	4924      	ldr	r1, [pc, #144]	@ (8000b48 <HAL_DMA_Init+0x168>)
 8000ab8:	4013      	ands	r3, r2
 8000aba:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000abc:	4b22      	ldr	r3, [pc, #136]	@ (8000b48 <HAL_DMA_Init+0x168>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6859      	ldr	r1, [r3, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac8:	f003 031c 	and.w	r3, r3, #28
 8000acc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad0:	491d      	ldr	r1, [pc, #116]	@ (8000b48 <HAL_DMA_Init+0x168>)
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	600b      	str	r3, [r1, #0]
 8000ad6:	e019      	b.n	8000b0c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <HAL_DMA_Init+0x16c>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae0:	f003 031c 	and.w	r3, r3, #28
 8000ae4:	210f      	movs	r1, #15
 8000ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aea:	43db      	mvns	r3, r3
 8000aec:	4917      	ldr	r1, [pc, #92]	@ (8000b4c <HAL_DMA_Init+0x16c>)
 8000aee:	4013      	ands	r3, r2
 8000af0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000af2:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <HAL_DMA_Init+0x16c>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6859      	ldr	r1, [r3, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afe:	f003 031c 	and.w	r3, r3, #28
 8000b02:	fa01 f303 	lsl.w	r3, r1, r3
 8000b06:	4911      	ldr	r1, [pc, #68]	@ (8000b4c <HAL_DMA_Init+0x16c>)
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2201      	movs	r2, #1
 8000b16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	40020407 	.word	0x40020407
 8000b34:	bffdfff8 	.word	0xbffdfff8
 8000b38:	cccccccd 	.word	0xcccccccd
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	bffdfbf8 	.word	0xbffdfbf8
 8000b44:	40020400 	.word	0x40020400
 8000b48:	400200a8 	.word	0x400200a8
 8000b4c:	400204a8 	.word	0x400204a8

08000b50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6c:	f003 031c 	and.w	r3, r3, #28
 8000b70:	2204      	movs	r2, #4
 8000b72:	409a      	lsls	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4013      	ands	r3, r2
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d026      	beq.n	8000bca <HAL_DMA_IRQHandler+0x7a>
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d021      	beq.n	8000bca <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f003 0320 	and.w	r3, r3, #32
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d107      	bne.n	8000ba4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f022 0204 	bic.w	r2, r2, #4
 8000ba2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba8:	f003 021c 	and.w	r2, r3, #28
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb0:	2104      	movs	r1, #4
 8000bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d071      	beq.n	8000ca4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000bc8:	e06c      	b.n	8000ca4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bce:	f003 031c 	and.w	r3, r3, #28
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	409a      	lsls	r2, r3
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d02e      	beq.n	8000c3c <HAL_DMA_IRQHandler+0xec>
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d029      	beq.n	8000c3c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f003 0320 	and.w	r3, r3, #32
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d10b      	bne.n	8000c0e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f022 020a 	bic.w	r2, r2, #10
 8000c04:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c12:	f003 021c 	and.w	r2, r3, #28
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1a:	2102      	movs	r1, #2
 8000c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c20:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2200      	movs	r2, #0
 8000c26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d038      	beq.n	8000ca4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000c3a:	e033      	b.n	8000ca4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c40:	f003 031c 	and.w	r3, r3, #28
 8000c44:	2208      	movs	r2, #8
 8000c46:	409a      	lsls	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d02a      	beq.n	8000ca6 <HAL_DMA_IRQHandler+0x156>
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	f003 0308 	and.w	r3, r3, #8
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d025      	beq.n	8000ca6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f022 020e 	bic.w	r2, r2, #14
 8000c68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6e:	f003 021c 	and.w	r2, r3, #28
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c76:	2101      	movs	r1, #1
 8000c78:	fa01 f202 	lsl.w	r2, r1, r2
 8000c7c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2201      	movs	r2, #1
 8000c82:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2201      	movs	r2, #1
 8000c88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d004      	beq.n	8000ca6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
}
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b087      	sub	sp, #28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cbe:	e154      	b.n	8000f6a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f000 8146 	beq.w	8000f64 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 0303 	and.w	r3, r3, #3
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d005      	beq.n	8000cf0 <HAL_GPIO_Init+0x40>
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d130      	bne.n	8000d52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	68da      	ldr	r2, [r3, #12]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d26:	2201      	movs	r2, #1
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	091b      	lsrs	r3, r3, #4
 8000d3c:	f003 0201 	and.w	r2, r3, #1
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 0303 	and.w	r3, r3, #3
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	d017      	beq.n	8000d8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	2203      	movs	r2, #3
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d123      	bne.n	8000de2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	08da      	lsrs	r2, r3, #3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3208      	adds	r2, #8
 8000da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	220f      	movs	r2, #15
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	691a      	ldr	r2, [r3, #16]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	f003 0307 	and.w	r3, r3, #7
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	08da      	lsrs	r2, r3, #3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3208      	adds	r2, #8
 8000ddc:	6939      	ldr	r1, [r7, #16]
 8000dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	2203      	movs	r2, #3
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 0203 	and.w	r2, r3, #3
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 80a0 	beq.w	8000f64 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e24:	4b58      	ldr	r3, [pc, #352]	@ (8000f88 <HAL_GPIO_Init+0x2d8>)
 8000e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e28:	4a57      	ldr	r2, [pc, #348]	@ (8000f88 <HAL_GPIO_Init+0x2d8>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e30:	4b55      	ldr	r3, [pc, #340]	@ (8000f88 <HAL_GPIO_Init+0x2d8>)
 8000e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e3c:	4a53      	ldr	r2, [pc, #332]	@ (8000f8c <HAL_GPIO_Init+0x2dc>)
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	089b      	lsrs	r3, r3, #2
 8000e42:	3302      	adds	r3, #2
 8000e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	220f      	movs	r2, #15
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e66:	d019      	beq.n	8000e9c <HAL_GPIO_Init+0x1ec>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a49      	ldr	r2, [pc, #292]	@ (8000f90 <HAL_GPIO_Init+0x2e0>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d013      	beq.n	8000e98 <HAL_GPIO_Init+0x1e8>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a48      	ldr	r2, [pc, #288]	@ (8000f94 <HAL_GPIO_Init+0x2e4>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d00d      	beq.n	8000e94 <HAL_GPIO_Init+0x1e4>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a47      	ldr	r2, [pc, #284]	@ (8000f98 <HAL_GPIO_Init+0x2e8>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d007      	beq.n	8000e90 <HAL_GPIO_Init+0x1e0>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a46      	ldr	r2, [pc, #280]	@ (8000f9c <HAL_GPIO_Init+0x2ec>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d101      	bne.n	8000e8c <HAL_GPIO_Init+0x1dc>
 8000e88:	2304      	movs	r3, #4
 8000e8a:	e008      	b.n	8000e9e <HAL_GPIO_Init+0x1ee>
 8000e8c:	2307      	movs	r3, #7
 8000e8e:	e006      	b.n	8000e9e <HAL_GPIO_Init+0x1ee>
 8000e90:	2303      	movs	r3, #3
 8000e92:	e004      	b.n	8000e9e <HAL_GPIO_Init+0x1ee>
 8000e94:	2302      	movs	r3, #2
 8000e96:	e002      	b.n	8000e9e <HAL_GPIO_Init+0x1ee>
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e000      	b.n	8000e9e <HAL_GPIO_Init+0x1ee>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	f002 0203 	and.w	r2, r2, #3
 8000ea4:	0092      	lsls	r2, r2, #2
 8000ea6:	4093      	lsls	r3, r2
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000eae:	4937      	ldr	r1, [pc, #220]	@ (8000f8c <HAL_GPIO_Init+0x2dc>)
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	089b      	lsrs	r3, r3, #2
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ebc:	4b38      	ldr	r3, [pc, #224]	@ (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ee0:	4a2f      	ldr	r2, [pc, #188]	@ (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f0a:	4a25      	ldr	r2, [pc, #148]	@ (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f10:	4b23      	ldr	r3, [pc, #140]	@ (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f34:	4a1a      	ldr	r2, [pc, #104]	@ (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f3a:	4b19      	ldr	r3, [pc, #100]	@ (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f5e:	4a10      	ldr	r2, [pc, #64]	@ (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	3301      	adds	r3, #1
 8000f68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	fa22 f303 	lsr.w	r3, r2, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f47f aea3 	bne.w	8000cc0 <HAL_GPIO_Init+0x10>
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	bf00      	nop
 8000f7e:	371c      	adds	r7, #28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40010000 	.word	0x40010000
 8000f90:	48000400 	.word	0x48000400
 8000f94:	48000800 	.word	0x48000800
 8000f98:	48000c00 	.word	0x48000c00
 8000f9c:	48001000 	.word	0x48001000
 8000fa0:	40010400 	.word	0x40010400

08000fa4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fa8:	4b04      	ldr	r3, [pc, #16]	@ (8000fbc <HAL_PWREx_GetVoltageRange+0x18>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40007000 	.word	0x40007000

08000fc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000fce:	d130      	bne.n	8001032 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fd0:	4b23      	ldr	r3, [pc, #140]	@ (8001060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000fdc:	d038      	beq.n	8001050 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fde:	4b20      	ldr	r3, [pc, #128]	@ (8001060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000fe6:	4a1e      	ldr	r2, [pc, #120]	@ (8001060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fe8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000fee:	4b1d      	ldr	r3, [pc, #116]	@ (8001064 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2232      	movs	r2, #50	@ 0x32
 8000ff4:	fb02 f303 	mul.w	r3, r2, r3
 8000ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8001068 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffe:	0c9b      	lsrs	r3, r3, #18
 8001000:	3301      	adds	r3, #1
 8001002:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001004:	e002      	b.n	800100c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3b01      	subs	r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800100c:	4b14      	ldr	r3, [pc, #80]	@ (8001060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001014:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001018:	d102      	bne.n	8001020 <HAL_PWREx_ControlVoltageScaling+0x60>
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1f2      	bne.n	8001006 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001020:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001028:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800102c:	d110      	bne.n	8001050 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e00f      	b.n	8001052 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001032:	4b0b      	ldr	r3, [pc, #44]	@ (8001060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800103a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800103e:	d007      	beq.n	8001050 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001040:	4b07      	ldr	r3, [pc, #28]	@ (8001060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001048:	4a05      	ldr	r2, [pc, #20]	@ (8001060 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800104a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800104e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40007000 	.word	0x40007000
 8001064:	20000000 	.word	0x20000000
 8001068:	431bde83 	.word	0x431bde83

0800106c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d102      	bne.n	8001080 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	f000 bc02 	b.w	8001884 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001080:	4b96      	ldr	r3, [pc, #600]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 030c 	and.w	r3, r3, #12
 8001088:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800108a:	4b94      	ldr	r3, [pc, #592]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0310 	and.w	r3, r3, #16
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 80e4 	beq.w	800126a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d007      	beq.n	80010b8 <HAL_RCC_OscConfig+0x4c>
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	2b0c      	cmp	r3, #12
 80010ac:	f040 808b 	bne.w	80011c6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	f040 8087 	bne.w	80011c6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010b8:	4b88      	ldr	r3, [pc, #544]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d005      	beq.n	80010d0 <HAL_RCC_OscConfig+0x64>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e3d9      	b.n	8001884 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a1a      	ldr	r2, [r3, #32]
 80010d4:	4b81      	ldr	r3, [pc, #516]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0308 	and.w	r3, r3, #8
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d004      	beq.n	80010ea <HAL_RCC_OscConfig+0x7e>
 80010e0:	4b7e      	ldr	r3, [pc, #504]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80010e8:	e005      	b.n	80010f6 <HAL_RCC_OscConfig+0x8a>
 80010ea:	4b7c      	ldr	r3, [pc, #496]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 80010ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010f0:	091b      	lsrs	r3, r3, #4
 80010f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d223      	bcs.n	8001142 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a1b      	ldr	r3, [r3, #32]
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 fd54 	bl	8001bac <RCC_SetFlashLatencyFromMSIRange>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e3ba      	b.n	8001884 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800110e:	4b73      	ldr	r3, [pc, #460]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a72      	ldr	r2, [pc, #456]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001114:	f043 0308 	orr.w	r3, r3, #8
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	4b70      	ldr	r3, [pc, #448]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a1b      	ldr	r3, [r3, #32]
 8001126:	496d      	ldr	r1, [pc, #436]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001128:	4313      	orrs	r3, r2
 800112a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800112c:	4b6b      	ldr	r3, [pc, #428]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69db      	ldr	r3, [r3, #28]
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	4968      	ldr	r1, [pc, #416]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 800113c:	4313      	orrs	r3, r2
 800113e:	604b      	str	r3, [r1, #4]
 8001140:	e025      	b.n	800118e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001142:	4b66      	ldr	r3, [pc, #408]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a65      	ldr	r2, [pc, #404]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001148:	f043 0308 	orr.w	r3, r3, #8
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	4b63      	ldr	r3, [pc, #396]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	4960      	ldr	r1, [pc, #384]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 800115c:	4313      	orrs	r3, r2
 800115e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001160:	4b5e      	ldr	r3, [pc, #376]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	495b      	ldr	r1, [pc, #364]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001170:	4313      	orrs	r3, r2
 8001172:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d109      	bne.n	800118e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	4618      	mov	r0, r3
 8001180:	f000 fd14 	bl	8001bac <RCC_SetFlashLatencyFromMSIRange>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e37a      	b.n	8001884 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800118e:	f000 fc81 	bl	8001a94 <HAL_RCC_GetSysClockFreq>
 8001192:	4602      	mov	r2, r0
 8001194:	4b51      	ldr	r3, [pc, #324]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	091b      	lsrs	r3, r3, #4
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	4950      	ldr	r1, [pc, #320]	@ (80012e0 <HAL_RCC_OscConfig+0x274>)
 80011a0:	5ccb      	ldrb	r3, [r1, r3]
 80011a2:	f003 031f 	and.w	r3, r3, #31
 80011a6:	fa22 f303 	lsr.w	r3, r2, r3
 80011aa:	4a4e      	ldr	r2, [pc, #312]	@ (80012e4 <HAL_RCC_OscConfig+0x278>)
 80011ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011ae:	4b4e      	ldr	r3, [pc, #312]	@ (80012e8 <HAL_RCC_OscConfig+0x27c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fa82 	bl	80006bc <HAL_InitTick>
 80011b8:	4603      	mov	r3, r0
 80011ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d052      	beq.n	8001268 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	e35e      	b.n	8001884 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d032      	beq.n	8001234 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011ce:	4b43      	ldr	r3, [pc, #268]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a42      	ldr	r2, [pc, #264]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011da:	f7ff fabf 	bl	800075c <HAL_GetTick>
 80011de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011e2:	f7ff fabb 	bl	800075c <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e347      	b.n	8001884 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011f4:	4b39      	ldr	r3, [pc, #228]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0f0      	beq.n	80011e2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001200:	4b36      	ldr	r3, [pc, #216]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a35      	ldr	r2, [pc, #212]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001206:	f043 0308 	orr.w	r3, r3, #8
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	4b33      	ldr	r3, [pc, #204]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	4930      	ldr	r1, [pc, #192]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 800121a:	4313      	orrs	r3, r2
 800121c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800121e:	4b2f      	ldr	r3, [pc, #188]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	021b      	lsls	r3, r3, #8
 800122c:	492b      	ldr	r1, [pc, #172]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 800122e:	4313      	orrs	r3, r2
 8001230:	604b      	str	r3, [r1, #4]
 8001232:	e01a      	b.n	800126a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001234:	4b29      	ldr	r3, [pc, #164]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a28      	ldr	r2, [pc, #160]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 800123a:	f023 0301 	bic.w	r3, r3, #1
 800123e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001240:	f7ff fa8c 	bl	800075c <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001248:	f7ff fa88 	bl	800075c <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e314      	b.n	8001884 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800125a:	4b20      	ldr	r3, [pc, #128]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f0      	bne.n	8001248 <HAL_RCC_OscConfig+0x1dc>
 8001266:	e000      	b.n	800126a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001268:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d073      	beq.n	800135e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	2b08      	cmp	r3, #8
 800127a:	d005      	beq.n	8001288 <HAL_RCC_OscConfig+0x21c>
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	2b0c      	cmp	r3, #12
 8001280:	d10e      	bne.n	80012a0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	2b03      	cmp	r3, #3
 8001286:	d10b      	bne.n	80012a0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001288:	4b14      	ldr	r3, [pc, #80]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d063      	beq.n	800135c <HAL_RCC_OscConfig+0x2f0>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d15f      	bne.n	800135c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e2f1      	b.n	8001884 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012a8:	d106      	bne.n	80012b8 <HAL_RCC_OscConfig+0x24c>
 80012aa:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a0b      	ldr	r2, [pc, #44]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 80012b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e025      	b.n	8001304 <HAL_RCC_OscConfig+0x298>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012c0:	d114      	bne.n	80012ec <HAL_RCC_OscConfig+0x280>
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a05      	ldr	r2, [pc, #20]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 80012c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b03      	ldr	r3, [pc, #12]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a02      	ldr	r2, [pc, #8]	@ (80012dc <HAL_RCC_OscConfig+0x270>)
 80012d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e013      	b.n	8001304 <HAL_RCC_OscConfig+0x298>
 80012dc:	40021000 	.word	0x40021000
 80012e0:	08002954 	.word	0x08002954
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000004 	.word	0x20000004
 80012ec:	4ba0      	ldr	r3, [pc, #640]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a9f      	ldr	r2, [pc, #636]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80012f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	4b9d      	ldr	r3, [pc, #628]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a9c      	ldr	r2, [pc, #624]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80012fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d013      	beq.n	8001334 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130c:	f7ff fa26 	bl	800075c <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001314:	f7ff fa22 	bl	800075c <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b64      	cmp	r3, #100	@ 0x64
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e2ae      	b.n	8001884 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001326:	4b92      	ldr	r3, [pc, #584]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f0      	beq.n	8001314 <HAL_RCC_OscConfig+0x2a8>
 8001332:	e014      	b.n	800135e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001334:	f7ff fa12 	bl	800075c <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800133c:	f7ff fa0e 	bl	800075c <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b64      	cmp	r3, #100	@ 0x64
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e29a      	b.n	8001884 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800134e:	4b88      	ldr	r3, [pc, #544]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f0      	bne.n	800133c <HAL_RCC_OscConfig+0x2d0>
 800135a:	e000      	b.n	800135e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d060      	beq.n	800142c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	2b04      	cmp	r3, #4
 800136e:	d005      	beq.n	800137c <HAL_RCC_OscConfig+0x310>
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	2b0c      	cmp	r3, #12
 8001374:	d119      	bne.n	80013aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	2b02      	cmp	r3, #2
 800137a:	d116      	bne.n	80013aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800137c:	4b7c      	ldr	r3, [pc, #496]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001384:	2b00      	cmp	r3, #0
 8001386:	d005      	beq.n	8001394 <HAL_RCC_OscConfig+0x328>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e277      	b.n	8001884 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001394:	4b76      	ldr	r3, [pc, #472]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	061b      	lsls	r3, r3, #24
 80013a2:	4973      	ldr	r1, [pc, #460]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013a8:	e040      	b.n	800142c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d023      	beq.n	80013fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b2:	4b6f      	ldr	r3, [pc, #444]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a6e      	ldr	r2, [pc, #440]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80013b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013be:	f7ff f9cd 	bl	800075c <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c6:	f7ff f9c9 	bl	800075c <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e255      	b.n	8001884 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013d8:	4b65      	ldr	r3, [pc, #404]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0f0      	beq.n	80013c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e4:	4b62      	ldr	r3, [pc, #392]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	061b      	lsls	r3, r3, #24
 80013f2:	495f      	ldr	r1, [pc, #380]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	604b      	str	r3, [r1, #4]
 80013f8:	e018      	b.n	800142c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a5c      	ldr	r2, [pc, #368]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 8001400:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001406:	f7ff f9a9 	bl	800075c <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800140e:	f7ff f9a5 	bl	800075c <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e231      	b.n	8001884 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001420:	4b53      	ldr	r3, [pc, #332]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1f0      	bne.n	800140e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	2b00      	cmp	r3, #0
 8001436:	d03c      	beq.n	80014b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d01c      	beq.n	800147a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001440:	4b4b      	ldr	r3, [pc, #300]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 8001442:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001446:	4a4a      	ldr	r2, [pc, #296]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001450:	f7ff f984 	bl	800075c <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001458:	f7ff f980 	bl	800075c <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e20c      	b.n	8001884 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800146a:	4b41      	ldr	r3, [pc, #260]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 800146c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0ef      	beq.n	8001458 <HAL_RCC_OscConfig+0x3ec>
 8001478:	e01b      	b.n	80014b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800147a:	4b3d      	ldr	r3, [pc, #244]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 800147c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001480:	4a3b      	ldr	r2, [pc, #236]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 8001482:	f023 0301 	bic.w	r3, r3, #1
 8001486:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800148a:	f7ff f967 	bl	800075c <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001492:	f7ff f963 	bl	800075c <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e1ef      	b.n	8001884 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014a4:	4b32      	ldr	r3, [pc, #200]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80014a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1ef      	bne.n	8001492 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 80a6 	beq.w	800160c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014c0:	2300      	movs	r3, #0
 80014c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80014c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d10d      	bne.n	80014ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014d0:	4b27      	ldr	r3, [pc, #156]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80014d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d4:	4a26      	ldr	r2, [pc, #152]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80014d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014da:	6593      	str	r3, [r2, #88]	@ 0x58
 80014dc:	4b24      	ldr	r3, [pc, #144]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 80014de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014e8:	2301      	movs	r3, #1
 80014ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ec:	4b21      	ldr	r3, [pc, #132]	@ (8001574 <HAL_RCC_OscConfig+0x508>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d118      	bne.n	800152a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001574 <HAL_RCC_OscConfig+0x508>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a1d      	ldr	r2, [pc, #116]	@ (8001574 <HAL_RCC_OscConfig+0x508>)
 80014fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001502:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001504:	f7ff f92a 	bl	800075c <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800150c:	f7ff f926 	bl	800075c <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e1b2      	b.n	8001884 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800151e:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <HAL_RCC_OscConfig+0x508>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d108      	bne.n	8001544 <HAL_RCC_OscConfig+0x4d8>
 8001532:	4b0f      	ldr	r3, [pc, #60]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 8001534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001538:	4a0d      	ldr	r2, [pc, #52]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001542:	e029      	b.n	8001598 <HAL_RCC_OscConfig+0x52c>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b05      	cmp	r3, #5
 800154a:	d115      	bne.n	8001578 <HAL_RCC_OscConfig+0x50c>
 800154c:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 800154e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001552:	4a07      	ldr	r2, [pc, #28]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800155c:	4b04      	ldr	r3, [pc, #16]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 800155e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001562:	4a03      	ldr	r2, [pc, #12]	@ (8001570 <HAL_RCC_OscConfig+0x504>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800156c:	e014      	b.n	8001598 <HAL_RCC_OscConfig+0x52c>
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000
 8001574:	40007000 	.word	0x40007000
 8001578:	4b9a      	ldr	r3, [pc, #616]	@ (80017e4 <HAL_RCC_OscConfig+0x778>)
 800157a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800157e:	4a99      	ldr	r2, [pc, #612]	@ (80017e4 <HAL_RCC_OscConfig+0x778>)
 8001580:	f023 0301 	bic.w	r3, r3, #1
 8001584:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001588:	4b96      	ldr	r3, [pc, #600]	@ (80017e4 <HAL_RCC_OscConfig+0x778>)
 800158a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800158e:	4a95      	ldr	r2, [pc, #596]	@ (80017e4 <HAL_RCC_OscConfig+0x778>)
 8001590:	f023 0304 	bic.w	r3, r3, #4
 8001594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d016      	beq.n	80015ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a0:	f7ff f8dc 	bl	800075c <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015a6:	e00a      	b.n	80015be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a8:	f7ff f8d8 	bl	800075c <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e162      	b.n	8001884 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015be:	4b89      	ldr	r3, [pc, #548]	@ (80017e4 <HAL_RCC_OscConfig+0x778>)
 80015c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0ed      	beq.n	80015a8 <HAL_RCC_OscConfig+0x53c>
 80015cc:	e015      	b.n	80015fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ce:	f7ff f8c5 	bl	800075c <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015d4:	e00a      	b.n	80015ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015d6:	f7ff f8c1 	bl	800075c <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e14b      	b.n	8001884 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015ec:	4b7d      	ldr	r3, [pc, #500]	@ (80017e4 <HAL_RCC_OscConfig+0x778>)
 80015ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1ed      	bne.n	80015d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015fa:	7ffb      	ldrb	r3, [r7, #31]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d105      	bne.n	800160c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001600:	4b78      	ldr	r3, [pc, #480]	@ (80017e4 <HAL_RCC_OscConfig+0x778>)
 8001602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001604:	4a77      	ldr	r2, [pc, #476]	@ (80017e4 <HAL_RCC_OscConfig+0x778>)
 8001606:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800160a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0320 	and.w	r3, r3, #32
 8001614:	2b00      	cmp	r3, #0
 8001616:	d03c      	beq.n	8001692 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161c:	2b00      	cmp	r3, #0
 800161e:	d01c      	beq.n	800165a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001620:	4b70      	ldr	r3, [pc, #448]	@ (80017e4 <HAL_RCC_OscConfig+0x778>)
 8001622:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001626:	4a6f      	ldr	r2, [pc, #444]	@ (80017e4 <HAL_RCC_OscConfig+0x778>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001630:	f7ff f894 	bl	800075c <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001638:	f7ff f890 	bl	800075c <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e11c      	b.n	8001884 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800164a:	4b66      	ldr	r3, [pc, #408]	@ (80017e4 <HAL_RCC_OscConfig+0x778>)
 800164c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0ef      	beq.n	8001638 <HAL_RCC_OscConfig+0x5cc>
 8001658:	e01b      	b.n	8001692 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800165a:	4b62      	ldr	r3, [pc, #392]	@ (80017e4 <HAL_RCC_OscConfig+0x778>)
 800165c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001660:	4a60      	ldr	r2, [pc, #384]	@ (80017e4 <HAL_RCC_OscConfig+0x778>)
 8001662:	f023 0301 	bic.w	r3, r3, #1
 8001666:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166a:	f7ff f877 	bl	800075c <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001672:	f7ff f873 	bl	800075c <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e0ff      	b.n	8001884 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001684:	4b57      	ldr	r3, [pc, #348]	@ (80017e4 <HAL_RCC_OscConfig+0x778>)
 8001686:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1ef      	bne.n	8001672 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 80f3 	beq.w	8001882 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	f040 80c9 	bne.w	8001838 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80016a6:	4b4f      	ldr	r3, [pc, #316]	@ (80017e4 <HAL_RCC_OscConfig+0x778>)
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	f003 0203 	and.w	r2, r3, #3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d12c      	bne.n	8001714 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c4:	3b01      	subs	r3, #1
 80016c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d123      	bne.n	8001714 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016d8:	429a      	cmp	r2, r3
 80016da:	d11b      	bne.n	8001714 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d113      	bne.n	8001714 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016f6:	085b      	lsrs	r3, r3, #1
 80016f8:	3b01      	subs	r3, #1
 80016fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d109      	bne.n	8001714 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170a:	085b      	lsrs	r3, r3, #1
 800170c:	3b01      	subs	r3, #1
 800170e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001710:	429a      	cmp	r2, r3
 8001712:	d06b      	beq.n	80017ec <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	2b0c      	cmp	r3, #12
 8001718:	d062      	beq.n	80017e0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800171a:	4b32      	ldr	r3, [pc, #200]	@ (80017e4 <HAL_RCC_OscConfig+0x778>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e0ac      	b.n	8001884 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800172a:	4b2e      	ldr	r3, [pc, #184]	@ (80017e4 <HAL_RCC_OscConfig+0x778>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a2d      	ldr	r2, [pc, #180]	@ (80017e4 <HAL_RCC_OscConfig+0x778>)
 8001730:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001734:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001736:	f7ff f811 	bl	800075c <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800173e:	f7ff f80d 	bl	800075c <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e099      	b.n	8001884 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001750:	4b24      	ldr	r3, [pc, #144]	@ (80017e4 <HAL_RCC_OscConfig+0x778>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1f0      	bne.n	800173e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800175c:	4b21      	ldr	r3, [pc, #132]	@ (80017e4 <HAL_RCC_OscConfig+0x778>)
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	4b21      	ldr	r3, [pc, #132]	@ (80017e8 <HAL_RCC_OscConfig+0x77c>)
 8001762:	4013      	ands	r3, r2
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800176c:	3a01      	subs	r2, #1
 800176e:	0112      	lsls	r2, r2, #4
 8001770:	4311      	orrs	r1, r2
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001776:	0212      	lsls	r2, r2, #8
 8001778:	4311      	orrs	r1, r2
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800177e:	0852      	lsrs	r2, r2, #1
 8001780:	3a01      	subs	r2, #1
 8001782:	0552      	lsls	r2, r2, #21
 8001784:	4311      	orrs	r1, r2
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800178a:	0852      	lsrs	r2, r2, #1
 800178c:	3a01      	subs	r2, #1
 800178e:	0652      	lsls	r2, r2, #25
 8001790:	4311      	orrs	r1, r2
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001796:	06d2      	lsls	r2, r2, #27
 8001798:	430a      	orrs	r2, r1
 800179a:	4912      	ldr	r1, [pc, #72]	@ (80017e4 <HAL_RCC_OscConfig+0x778>)
 800179c:	4313      	orrs	r3, r2
 800179e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80017a0:	4b10      	ldr	r3, [pc, #64]	@ (80017e4 <HAL_RCC_OscConfig+0x778>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0f      	ldr	r2, [pc, #60]	@ (80017e4 <HAL_RCC_OscConfig+0x778>)
 80017a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017ac:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <HAL_RCC_OscConfig+0x778>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	4a0c      	ldr	r2, [pc, #48]	@ (80017e4 <HAL_RCC_OscConfig+0x778>)
 80017b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017b8:	f7fe ffd0 	bl	800075c <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c0:	f7fe ffcc 	bl	800075c <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e058      	b.n	8001884 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017d2:	4b04      	ldr	r3, [pc, #16]	@ (80017e4 <HAL_RCC_OscConfig+0x778>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017de:	e050      	b.n	8001882 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e04f      	b.n	8001884 <HAL_RCC_OscConfig+0x818>
 80017e4:	40021000 	.word	0x40021000
 80017e8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ec:	4b27      	ldr	r3, [pc, #156]	@ (800188c <HAL_RCC_OscConfig+0x820>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d144      	bne.n	8001882 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017f8:	4b24      	ldr	r3, [pc, #144]	@ (800188c <HAL_RCC_OscConfig+0x820>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a23      	ldr	r2, [pc, #140]	@ (800188c <HAL_RCC_OscConfig+0x820>)
 80017fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001802:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001804:	4b21      	ldr	r3, [pc, #132]	@ (800188c <HAL_RCC_OscConfig+0x820>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	4a20      	ldr	r2, [pc, #128]	@ (800188c <HAL_RCC_OscConfig+0x820>)
 800180a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800180e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001810:	f7fe ffa4 	bl	800075c <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001818:	f7fe ffa0 	bl	800075c <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e02c      	b.n	8001884 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800182a:	4b18      	ldr	r3, [pc, #96]	@ (800188c <HAL_RCC_OscConfig+0x820>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0x7ac>
 8001836:	e024      	b.n	8001882 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	2b0c      	cmp	r3, #12
 800183c:	d01f      	beq.n	800187e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183e:	4b13      	ldr	r3, [pc, #76]	@ (800188c <HAL_RCC_OscConfig+0x820>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a12      	ldr	r2, [pc, #72]	@ (800188c <HAL_RCC_OscConfig+0x820>)
 8001844:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184a:	f7fe ff87 	bl	800075c <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001852:	f7fe ff83 	bl	800075c <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e00f      	b.n	8001884 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001864:	4b09      	ldr	r3, [pc, #36]	@ (800188c <HAL_RCC_OscConfig+0x820>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1f0      	bne.n	8001852 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001870:	4b06      	ldr	r3, [pc, #24]	@ (800188c <HAL_RCC_OscConfig+0x820>)
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	4905      	ldr	r1, [pc, #20]	@ (800188c <HAL_RCC_OscConfig+0x820>)
 8001876:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <HAL_RCC_OscConfig+0x824>)
 8001878:	4013      	ands	r3, r2
 800187a:	60cb      	str	r3, [r1, #12]
 800187c:	e001      	b.n	8001882 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3720      	adds	r7, #32
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40021000 	.word	0x40021000
 8001890:	feeefffc 	.word	0xfeeefffc

08001894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0e7      	b.n	8001a78 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018a8:	4b75      	ldr	r3, [pc, #468]	@ (8001a80 <HAL_RCC_ClockConfig+0x1ec>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d910      	bls.n	80018d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b6:	4b72      	ldr	r3, [pc, #456]	@ (8001a80 <HAL_RCC_ClockConfig+0x1ec>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f023 0207 	bic.w	r2, r3, #7
 80018be:	4970      	ldr	r1, [pc, #448]	@ (8001a80 <HAL_RCC_ClockConfig+0x1ec>)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c6:	4b6e      	ldr	r3, [pc, #440]	@ (8001a80 <HAL_RCC_ClockConfig+0x1ec>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0cf      	b.n	8001a78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d010      	beq.n	8001906 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	4b66      	ldr	r3, [pc, #408]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f0>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d908      	bls.n	8001906 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018f4:	4b63      	ldr	r3, [pc, #396]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f0>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	4960      	ldr	r1, [pc, #384]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f0>)
 8001902:	4313      	orrs	r3, r2
 8001904:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	d04c      	beq.n	80019ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b03      	cmp	r3, #3
 8001918:	d107      	bne.n	800192a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800191a:	4b5a      	ldr	r3, [pc, #360]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d121      	bne.n	800196a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e0a6      	b.n	8001a78 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d107      	bne.n	8001942 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001932:	4b54      	ldr	r3, [pc, #336]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d115      	bne.n	800196a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e09a      	b.n	8001a78 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d107      	bne.n	800195a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800194a:	4b4e      	ldr	r3, [pc, #312]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d109      	bne.n	800196a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e08e      	b.n	8001a78 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800195a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e086      	b.n	8001a78 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800196a:	4b46      	ldr	r3, [pc, #280]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f0>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f023 0203 	bic.w	r2, r3, #3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	4943      	ldr	r1, [pc, #268]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f0>)
 8001978:	4313      	orrs	r3, r2
 800197a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800197c:	f7fe feee 	bl	800075c <HAL_GetTick>
 8001980:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001982:	e00a      	b.n	800199a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001984:	f7fe feea 	bl	800075c <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001992:	4293      	cmp	r3, r2
 8001994:	d901      	bls.n	800199a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e06e      	b.n	8001a78 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199a:	4b3a      	ldr	r3, [pc, #232]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f0>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 020c 	and.w	r2, r3, #12
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d1eb      	bne.n	8001984 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d010      	beq.n	80019da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	4b31      	ldr	r3, [pc, #196]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f0>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d208      	bcs.n	80019da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f0>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	492b      	ldr	r1, [pc, #172]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f0>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019da:	4b29      	ldr	r3, [pc, #164]	@ (8001a80 <HAL_RCC_ClockConfig+0x1ec>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d210      	bcs.n	8001a0a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e8:	4b25      	ldr	r3, [pc, #148]	@ (8001a80 <HAL_RCC_ClockConfig+0x1ec>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f023 0207 	bic.w	r2, r3, #7
 80019f0:	4923      	ldr	r1, [pc, #140]	@ (8001a80 <HAL_RCC_ClockConfig+0x1ec>)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f8:	4b21      	ldr	r3, [pc, #132]	@ (8001a80 <HAL_RCC_ClockConfig+0x1ec>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d001      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e036      	b.n	8001a78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d008      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a16:	4b1b      	ldr	r3, [pc, #108]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f0>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	4918      	ldr	r1, [pc, #96]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f0>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d009      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a34:	4b13      	ldr	r3, [pc, #76]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f0>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	4910      	ldr	r1, [pc, #64]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f0>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a48:	f000 f824 	bl	8001a94 <HAL_RCC_GetSysClockFreq>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f0>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	091b      	lsrs	r3, r3, #4
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	490b      	ldr	r1, [pc, #44]	@ (8001a88 <HAL_RCC_ClockConfig+0x1f4>)
 8001a5a:	5ccb      	ldrb	r3, [r1, r3]
 8001a5c:	f003 031f 	and.w	r3, r3, #31
 8001a60:	fa22 f303 	lsr.w	r3, r2, r3
 8001a64:	4a09      	ldr	r2, [pc, #36]	@ (8001a8c <HAL_RCC_ClockConfig+0x1f8>)
 8001a66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a68:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <HAL_RCC_ClockConfig+0x1fc>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fe25 	bl	80006bc <HAL_InitTick>
 8001a72:	4603      	mov	r3, r0
 8001a74:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a76:	7afb      	ldrb	r3, [r7, #11]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40022000 	.word	0x40022000
 8001a84:	40021000 	.word	0x40021000
 8001a88:	08002954 	.word	0x08002954
 8001a8c:	20000000 	.word	0x20000000
 8001a90:	20000004 	.word	0x20000004

08001a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b089      	sub	sp, #36	@ 0x24
 8001a98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aac:	4b3b      	ldr	r3, [pc, #236]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	2b0c      	cmp	r3, #12
 8001ac0:	d121      	bne.n	8001b06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d11e      	bne.n	8001b06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ac8:	4b34      	ldr	r3, [pc, #208]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d107      	bne.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ad4:	4b31      	ldr	r3, [pc, #196]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ada:	0a1b      	lsrs	r3, r3, #8
 8001adc:	f003 030f 	and.w	r3, r3, #15
 8001ae0:	61fb      	str	r3, [r7, #28]
 8001ae2:	e005      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	091b      	lsrs	r3, r3, #4
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001af0:	4a2b      	ldr	r2, [pc, #172]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10d      	bne.n	8001b1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b04:	e00a      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d102      	bne.n	8001b12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b0c:	4b25      	ldr	r3, [pc, #148]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b0e:	61bb      	str	r3, [r7, #24]
 8001b10:	e004      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d101      	bne.n	8001b1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b18:	4b23      	ldr	r3, [pc, #140]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	2b0c      	cmp	r3, #12
 8001b20:	d134      	bne.n	8001b8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b22:	4b1e      	ldr	r3, [pc, #120]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d003      	beq.n	8001b3a <HAL_RCC_GetSysClockFreq+0xa6>
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d003      	beq.n	8001b40 <HAL_RCC_GetSysClockFreq+0xac>
 8001b38:	e005      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b3c:	617b      	str	r3, [r7, #20]
      break;
 8001b3e:	e005      	b.n	8001b4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b40:	4b19      	ldr	r3, [pc, #100]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b42:	617b      	str	r3, [r7, #20]
      break;
 8001b44:	e002      	b.n	8001b4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	617b      	str	r3, [r7, #20]
      break;
 8001b4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b4c:	4b13      	ldr	r3, [pc, #76]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	091b      	lsrs	r3, r3, #4
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	3301      	adds	r3, #1
 8001b58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b5a:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	0a1b      	lsrs	r3, r3, #8
 8001b60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	fb03 f202 	mul.w	r2, r3, r2
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b72:	4b0a      	ldr	r3, [pc, #40]	@ (8001b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	0e5b      	lsrs	r3, r3, #25
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b8c:	69bb      	ldr	r3, [r7, #24]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3724      	adds	r7, #36	@ 0x24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	08002964 	.word	0x08002964
 8001ba4:	00f42400 	.word	0x00f42400
 8001ba8:	007a1200 	.word	0x007a1200

08001bac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bc4:	f7ff f9ee 	bl	8000fa4 <HAL_PWREx_GetVoltageRange>
 8001bc8:	6178      	str	r0, [r7, #20]
 8001bca:	e014      	b.n	8001bf6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bcc:	4b25      	ldr	r3, [pc, #148]	@ (8001c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd0:	4a24      	ldr	r2, [pc, #144]	@ (8001c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bd8:	4b22      	ldr	r3, [pc, #136]	@ (8001c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001be4:	f7ff f9de 	bl	8000fa4 <HAL_PWREx_GetVoltageRange>
 8001be8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bea:	4b1e      	ldr	r3, [pc, #120]	@ (8001c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bee:	4a1d      	ldr	r2, [pc, #116]	@ (8001c64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bf4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bfc:	d10b      	bne.n	8001c16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b80      	cmp	r3, #128	@ 0x80
 8001c02:	d919      	bls.n	8001c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2ba0      	cmp	r3, #160	@ 0xa0
 8001c08:	d902      	bls.n	8001c10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	e013      	b.n	8001c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c10:	2301      	movs	r3, #1
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	e010      	b.n	8001c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b80      	cmp	r3, #128	@ 0x80
 8001c1a:	d902      	bls.n	8001c22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	e00a      	b.n	8001c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b80      	cmp	r3, #128	@ 0x80
 8001c26:	d102      	bne.n	8001c2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c28:	2302      	movs	r3, #2
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	e004      	b.n	8001c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b70      	cmp	r3, #112	@ 0x70
 8001c32:	d101      	bne.n	8001c38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c34:	2301      	movs	r3, #1
 8001c36:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c38:	4b0b      	ldr	r3, [pc, #44]	@ (8001c68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f023 0207 	bic.w	r2, r3, #7
 8001c40:	4909      	ldr	r1, [pc, #36]	@ (8001c68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c48:	4b07      	ldr	r3, [pc, #28]	@ (8001c68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d001      	beq.n	8001c5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40022000 	.word	0x40022000

08001c6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e049      	b.n	8001d12 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d106      	bne.n	8001c98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7fe fc00 	bl	8000498 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4610      	mov	r0, r2
 8001cac:	f000 fa28 	bl	8002100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d109      	bne.n	8001d40 <HAL_TIM_PWM_Start+0x24>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	bf14      	ite	ne
 8001d38:	2301      	movne	r3, #1
 8001d3a:	2300      	moveq	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	e03c      	b.n	8001dba <HAL_TIM_PWM_Start+0x9e>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d109      	bne.n	8001d5a <HAL_TIM_PWM_Start+0x3e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	bf14      	ite	ne
 8001d52:	2301      	movne	r3, #1
 8001d54:	2300      	moveq	r3, #0
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	e02f      	b.n	8001dba <HAL_TIM_PWM_Start+0x9e>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d109      	bne.n	8001d74 <HAL_TIM_PWM_Start+0x58>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	bf14      	ite	ne
 8001d6c:	2301      	movne	r3, #1
 8001d6e:	2300      	moveq	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	e022      	b.n	8001dba <HAL_TIM_PWM_Start+0x9e>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	2b0c      	cmp	r3, #12
 8001d78:	d109      	bne.n	8001d8e <HAL_TIM_PWM_Start+0x72>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	bf14      	ite	ne
 8001d86:	2301      	movne	r3, #1
 8001d88:	2300      	moveq	r3, #0
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	e015      	b.n	8001dba <HAL_TIM_PWM_Start+0x9e>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	2b10      	cmp	r3, #16
 8001d92:	d109      	bne.n	8001da8 <HAL_TIM_PWM_Start+0x8c>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	bf14      	ite	ne
 8001da0:	2301      	movne	r3, #1
 8001da2:	2300      	moveq	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	e008      	b.n	8001dba <HAL_TIM_PWM_Start+0x9e>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	bf14      	ite	ne
 8001db4:	2301      	movne	r3, #1
 8001db6:	2300      	moveq	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e07e      	b.n	8001ec0 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d104      	bne.n	8001dd2 <HAL_TIM_PWM_Start+0xb6>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2202      	movs	r2, #2
 8001dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dd0:	e023      	b.n	8001e1a <HAL_TIM_PWM_Start+0xfe>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d104      	bne.n	8001de2 <HAL_TIM_PWM_Start+0xc6>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001de0:	e01b      	b.n	8001e1a <HAL_TIM_PWM_Start+0xfe>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d104      	bne.n	8001df2 <HAL_TIM_PWM_Start+0xd6>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001df0:	e013      	b.n	8001e1a <HAL_TIM_PWM_Start+0xfe>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2b0c      	cmp	r3, #12
 8001df6:	d104      	bne.n	8001e02 <HAL_TIM_PWM_Start+0xe6>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001e00:	e00b      	b.n	8001e1a <HAL_TIM_PWM_Start+0xfe>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	2b10      	cmp	r3, #16
 8001e06:	d104      	bne.n	8001e12 <HAL_TIM_PWM_Start+0xf6>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e10:	e003      	b.n	8001e1a <HAL_TIM_PWM_Start+0xfe>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2202      	movs	r2, #2
 8001e16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	6839      	ldr	r1, [r7, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 fc5a 	bl	80026dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a26      	ldr	r2, [pc, #152]	@ (8001ec8 <HAL_TIM_PWM_Start+0x1ac>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d009      	beq.n	8001e46 <HAL_TIM_PWM_Start+0x12a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a25      	ldr	r2, [pc, #148]	@ (8001ecc <HAL_TIM_PWM_Start+0x1b0>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d004      	beq.n	8001e46 <HAL_TIM_PWM_Start+0x12a>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a23      	ldr	r2, [pc, #140]	@ (8001ed0 <HAL_TIM_PWM_Start+0x1b4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d101      	bne.n	8001e4a <HAL_TIM_PWM_Start+0x12e>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_TIM_PWM_Start+0x130>
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d007      	beq.n	8001e60 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e5e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a18      	ldr	r2, [pc, #96]	@ (8001ec8 <HAL_TIM_PWM_Start+0x1ac>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d009      	beq.n	8001e7e <HAL_TIM_PWM_Start+0x162>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e72:	d004      	beq.n	8001e7e <HAL_TIM_PWM_Start+0x162>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a14      	ldr	r2, [pc, #80]	@ (8001ecc <HAL_TIM_PWM_Start+0x1b0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d115      	bne.n	8001eaa <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	4b13      	ldr	r3, [pc, #76]	@ (8001ed4 <HAL_TIM_PWM_Start+0x1b8>)
 8001e86:	4013      	ands	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2b06      	cmp	r3, #6
 8001e8e:	d015      	beq.n	8001ebc <HAL_TIM_PWM_Start+0x1a0>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e96:	d011      	beq.n	8001ebc <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ea8:	e008      	b.n	8001ebc <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0201 	orr.w	r2, r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	e000      	b.n	8001ebe <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ebc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40012c00 	.word	0x40012c00
 8001ecc:	40014000 	.word	0x40014000
 8001ed0:	40014400 	.word	0x40014400
 8001ed4:	00010007 	.word	0x00010007

08001ed8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e0ff      	b.n	80020f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b14      	cmp	r3, #20
 8001f02:	f200 80f0 	bhi.w	80020e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001f06:	a201      	add	r2, pc, #4	@ (adr r2, 8001f0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f0c:	08001f61 	.word	0x08001f61
 8001f10:	080020e7 	.word	0x080020e7
 8001f14:	080020e7 	.word	0x080020e7
 8001f18:	080020e7 	.word	0x080020e7
 8001f1c:	08001fa1 	.word	0x08001fa1
 8001f20:	080020e7 	.word	0x080020e7
 8001f24:	080020e7 	.word	0x080020e7
 8001f28:	080020e7 	.word	0x080020e7
 8001f2c:	08001fe3 	.word	0x08001fe3
 8001f30:	080020e7 	.word	0x080020e7
 8001f34:	080020e7 	.word	0x080020e7
 8001f38:	080020e7 	.word	0x080020e7
 8001f3c:	08002023 	.word	0x08002023
 8001f40:	080020e7 	.word	0x080020e7
 8001f44:	080020e7 	.word	0x080020e7
 8001f48:	080020e7 	.word	0x080020e7
 8001f4c:	08002065 	.word	0x08002065
 8001f50:	080020e7 	.word	0x080020e7
 8001f54:	080020e7 	.word	0x080020e7
 8001f58:	080020e7 	.word	0x080020e7
 8001f5c:	080020a5 	.word	0x080020a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 f93a 	bl	80021e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699a      	ldr	r2, [r3, #24]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0208 	orr.w	r2, r2, #8
 8001f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	699a      	ldr	r2, [r3, #24]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0204 	bic.w	r2, r2, #4
 8001f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6999      	ldr	r1, [r3, #24]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	691a      	ldr	r2, [r3, #16]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	619a      	str	r2, [r3, #24]
      break;
 8001f9e:	e0a5      	b.n	80020ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 f996 	bl	80022d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	699a      	ldr	r2, [r3, #24]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699a      	ldr	r2, [r3, #24]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6999      	ldr	r1, [r3, #24]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	021a      	lsls	r2, r3, #8
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	619a      	str	r2, [r3, #24]
      break;
 8001fe0:	e084      	b.n	80020ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68b9      	ldr	r1, [r7, #8]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 f9ef 	bl	80023cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	69da      	ldr	r2, [r3, #28]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 0208 	orr.w	r2, r2, #8
 8001ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	69da      	ldr	r2, [r3, #28]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0204 	bic.w	r2, r2, #4
 800200c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	69d9      	ldr	r1, [r3, #28]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	61da      	str	r2, [r3, #28]
      break;
 8002020:	e064      	b.n	80020ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68b9      	ldr	r1, [r7, #8]
 8002028:	4618      	mov	r0, r3
 800202a:	f000 fa47 	bl	80024bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	69da      	ldr	r2, [r3, #28]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800203c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	69da      	ldr	r2, [r3, #28]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800204c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	69d9      	ldr	r1, [r3, #28]
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	021a      	lsls	r2, r3, #8
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	61da      	str	r2, [r3, #28]
      break;
 8002062:	e043      	b.n	80020ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	4618      	mov	r0, r3
 800206c:	f000 fa84 	bl	8002578 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0208 	orr.w	r2, r2, #8
 800207e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0204 	bic.w	r2, r2, #4
 800208e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	691a      	ldr	r2, [r3, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80020a2:	e023      	b.n	80020ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 fabc 	bl	8002628 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	021a      	lsls	r2, r3, #8
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80020e4:	e002      	b.n	80020ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	75fb      	strb	r3, [r7, #23]
      break;
 80020ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80020f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop

08002100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a30      	ldr	r2, [pc, #192]	@ (80021d4 <TIM_Base_SetConfig+0xd4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d003      	beq.n	8002120 <TIM_Base_SetConfig+0x20>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800211e:	d108      	bne.n	8002132 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	4313      	orrs	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a27      	ldr	r2, [pc, #156]	@ (80021d4 <TIM_Base_SetConfig+0xd4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00b      	beq.n	8002152 <TIM_Base_SetConfig+0x52>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002140:	d007      	beq.n	8002152 <TIM_Base_SetConfig+0x52>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a24      	ldr	r2, [pc, #144]	@ (80021d8 <TIM_Base_SetConfig+0xd8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d003      	beq.n	8002152 <TIM_Base_SetConfig+0x52>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a23      	ldr	r2, [pc, #140]	@ (80021dc <TIM_Base_SetConfig+0xdc>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d108      	bne.n	8002164 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4313      	orrs	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	4313      	orrs	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a12      	ldr	r2, [pc, #72]	@ (80021d4 <TIM_Base_SetConfig+0xd4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d007      	beq.n	80021a0 <TIM_Base_SetConfig+0xa0>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a11      	ldr	r2, [pc, #68]	@ (80021d8 <TIM_Base_SetConfig+0xd8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d003      	beq.n	80021a0 <TIM_Base_SetConfig+0xa0>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a10      	ldr	r2, [pc, #64]	@ (80021dc <TIM_Base_SetConfig+0xdc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d103      	bne.n	80021a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d105      	bne.n	80021c6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f023 0201 	bic.w	r2, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	611a      	str	r2, [r3, #16]
  }
}
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40012c00 	.word	0x40012c00
 80021d8:	40014000 	.word	0x40014000
 80021dc:	40014400 	.word	0x40014400

080021e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	f023 0201 	bic.w	r2, r3, #1
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800220e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f023 0303 	bic.w	r3, r3, #3
 800221a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	4313      	orrs	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f023 0302 	bic.w	r3, r3, #2
 800222c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4313      	orrs	r3, r2
 8002236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a24      	ldr	r2, [pc, #144]	@ (80022cc <TIM_OC1_SetConfig+0xec>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d007      	beq.n	8002250 <TIM_OC1_SetConfig+0x70>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a23      	ldr	r2, [pc, #140]	@ (80022d0 <TIM_OC1_SetConfig+0xf0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d003      	beq.n	8002250 <TIM_OC1_SetConfig+0x70>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a22      	ldr	r2, [pc, #136]	@ (80022d4 <TIM_OC1_SetConfig+0xf4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d10c      	bne.n	800226a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f023 0308 	bic.w	r3, r3, #8
 8002256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	4313      	orrs	r3, r2
 8002260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f023 0304 	bic.w	r3, r3, #4
 8002268:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a17      	ldr	r2, [pc, #92]	@ (80022cc <TIM_OC1_SetConfig+0xec>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d007      	beq.n	8002282 <TIM_OC1_SetConfig+0xa2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a16      	ldr	r2, [pc, #88]	@ (80022d0 <TIM_OC1_SetConfig+0xf0>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d003      	beq.n	8002282 <TIM_OC1_SetConfig+0xa2>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a15      	ldr	r2, [pc, #84]	@ (80022d4 <TIM_OC1_SetConfig+0xf4>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d111      	bne.n	80022a6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	621a      	str	r2, [r3, #32]
}
 80022c0:	bf00      	nop
 80022c2:	371c      	adds	r7, #28
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	40012c00 	.word	0x40012c00
 80022d0:	40014000 	.word	0x40014000
 80022d4:	40014400 	.word	0x40014400

080022d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	f023 0210 	bic.w	r2, r3, #16
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002306:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800230a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	021b      	lsls	r3, r3, #8
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	4313      	orrs	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	f023 0320 	bic.w	r3, r3, #32
 8002326:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	4313      	orrs	r3, r2
 8002332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a22      	ldr	r2, [pc, #136]	@ (80023c0 <TIM_OC2_SetConfig+0xe8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d10d      	bne.n	8002358 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	4313      	orrs	r3, r2
 800234e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002356:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a19      	ldr	r2, [pc, #100]	@ (80023c0 <TIM_OC2_SetConfig+0xe8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d007      	beq.n	8002370 <TIM_OC2_SetConfig+0x98>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a18      	ldr	r2, [pc, #96]	@ (80023c4 <TIM_OC2_SetConfig+0xec>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d003      	beq.n	8002370 <TIM_OC2_SetConfig+0x98>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a17      	ldr	r2, [pc, #92]	@ (80023c8 <TIM_OC2_SetConfig+0xf0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d113      	bne.n	8002398 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002376:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800237e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	621a      	str	r2, [r3, #32]
}
 80023b2:	bf00      	nop
 80023b4:	371c      	adds	r7, #28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40012c00 	.word	0x40012c00
 80023c4:	40014000 	.word	0x40014000
 80023c8:	40014400 	.word	0x40014400

080023cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b087      	sub	sp, #28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f023 0303 	bic.w	r3, r3, #3
 8002406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	4313      	orrs	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	021b      	lsls	r3, r3, #8
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	4313      	orrs	r3, r2
 8002424:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a21      	ldr	r2, [pc, #132]	@ (80024b0 <TIM_OC3_SetConfig+0xe4>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d10d      	bne.n	800244a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002434:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	4313      	orrs	r3, r2
 8002440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a18      	ldr	r2, [pc, #96]	@ (80024b0 <TIM_OC3_SetConfig+0xe4>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d007      	beq.n	8002462 <TIM_OC3_SetConfig+0x96>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a17      	ldr	r2, [pc, #92]	@ (80024b4 <TIM_OC3_SetConfig+0xe8>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d003      	beq.n	8002462 <TIM_OC3_SetConfig+0x96>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a16      	ldr	r2, [pc, #88]	@ (80024b8 <TIM_OC3_SetConfig+0xec>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d113      	bne.n	800248a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002468:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002470:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	621a      	str	r2, [r3, #32]
}
 80024a4:	bf00      	nop
 80024a6:	371c      	adds	r7, #28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	40012c00 	.word	0x40012c00
 80024b4:	40014000 	.word	0x40014000
 80024b8:	40014400 	.word	0x40014400

080024bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024bc:	b480      	push	{r7}
 80024be:	b087      	sub	sp, #28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	021b      	lsls	r3, r3, #8
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	4313      	orrs	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800250a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	031b      	lsls	r3, r3, #12
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a14      	ldr	r2, [pc, #80]	@ (800256c <TIM_OC4_SetConfig+0xb0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d007      	beq.n	8002530 <TIM_OC4_SetConfig+0x74>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a13      	ldr	r2, [pc, #76]	@ (8002570 <TIM_OC4_SetConfig+0xb4>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d003      	beq.n	8002530 <TIM_OC4_SetConfig+0x74>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a12      	ldr	r2, [pc, #72]	@ (8002574 <TIM_OC4_SetConfig+0xb8>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d109      	bne.n	8002544 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002536:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	019b      	lsls	r3, r3, #6
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4313      	orrs	r3, r2
 8002542:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	621a      	str	r2, [r3, #32]
}
 800255e:	bf00      	nop
 8002560:	371c      	adds	r7, #28
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40012c00 	.word	0x40012c00
 8002570:	40014000 	.word	0x40014000
 8002574:	40014400 	.word	0x40014400

08002578 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800259e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80025bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	041b      	lsls	r3, r3, #16
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a13      	ldr	r2, [pc, #76]	@ (800261c <TIM_OC5_SetConfig+0xa4>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d007      	beq.n	80025e2 <TIM_OC5_SetConfig+0x6a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a12      	ldr	r2, [pc, #72]	@ (8002620 <TIM_OC5_SetConfig+0xa8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d003      	beq.n	80025e2 <TIM_OC5_SetConfig+0x6a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a11      	ldr	r2, [pc, #68]	@ (8002624 <TIM_OC5_SetConfig+0xac>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d109      	bne.n	80025f6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	021b      	lsls	r3, r3, #8
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	621a      	str	r2, [r3, #32]
}
 8002610:	bf00      	nop
 8002612:	371c      	adds	r7, #28
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	40012c00 	.word	0x40012c00
 8002620:	40014000 	.word	0x40014000
 8002624:	40014400 	.word	0x40014400

08002628 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800264e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002656:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800265a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4313      	orrs	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800266e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	051b      	lsls	r3, r3, #20
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a14      	ldr	r2, [pc, #80]	@ (80026d0 <TIM_OC6_SetConfig+0xa8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d007      	beq.n	8002694 <TIM_OC6_SetConfig+0x6c>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a13      	ldr	r2, [pc, #76]	@ (80026d4 <TIM_OC6_SetConfig+0xac>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d003      	beq.n	8002694 <TIM_OC6_SetConfig+0x6c>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a12      	ldr	r2, [pc, #72]	@ (80026d8 <TIM_OC6_SetConfig+0xb0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d109      	bne.n	80026a8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800269a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	029b      	lsls	r3, r3, #10
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	621a      	str	r2, [r3, #32]
}
 80026c2:	bf00      	nop
 80026c4:	371c      	adds	r7, #28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40012c00 	.word	0x40012c00
 80026d4:	40014000 	.word	0x40014000
 80026d8:	40014400 	.word	0x40014400

080026dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	2201      	movs	r2, #1
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a1a      	ldr	r2, [r3, #32]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	401a      	ands	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a1a      	ldr	r2, [r3, #32]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	fa01 f303 	lsl.w	r3, r1, r3
 8002714:	431a      	orrs	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	621a      	str	r2, [r3, #32]
}
 800271a:	bf00      	nop
 800271c:	371c      	adds	r7, #28
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800273c:	2302      	movs	r3, #2
 800273e:	e04f      	b.n	80027e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a21      	ldr	r2, [pc, #132]	@ (80027ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d108      	bne.n	800277c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002770:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	4313      	orrs	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002782:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a14      	ldr	r2, [pc, #80]	@ (80027ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d009      	beq.n	80027b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027a8:	d004      	beq.n	80027b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a10      	ldr	r2, [pc, #64]	@ (80027f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d10c      	bne.n	80027ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	68ba      	ldr	r2, [r7, #8]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	40012c00 	.word	0x40012c00
 80027f0:	40014000 	.word	0x40014000

080027f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800280c:	2302      	movs	r3, #2
 800280e:	e060      	b.n	80028d2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	4313      	orrs	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4313      	orrs	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	4313      	orrs	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002876:	4313      	orrs	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	041b      	lsls	r3, r3, #16
 8002886:	4313      	orrs	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a14      	ldr	r2, [pc, #80]	@ (80028e0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d115      	bne.n	80028c0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289e:	051b      	lsls	r3, r3, #20
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	4313      	orrs	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40012c00 	.word	0x40012c00

080028e4 <memset>:
 80028e4:	4402      	add	r2, r0
 80028e6:	4603      	mov	r3, r0
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d100      	bne.n	80028ee <memset+0xa>
 80028ec:	4770      	bx	lr
 80028ee:	f803 1b01 	strb.w	r1, [r3], #1
 80028f2:	e7f9      	b.n	80028e8 <memset+0x4>

080028f4 <__libc_init_array>:
 80028f4:	b570      	push	{r4, r5, r6, lr}
 80028f6:	4d0d      	ldr	r5, [pc, #52]	@ (800292c <__libc_init_array+0x38>)
 80028f8:	4c0d      	ldr	r4, [pc, #52]	@ (8002930 <__libc_init_array+0x3c>)
 80028fa:	1b64      	subs	r4, r4, r5
 80028fc:	10a4      	asrs	r4, r4, #2
 80028fe:	2600      	movs	r6, #0
 8002900:	42a6      	cmp	r6, r4
 8002902:	d109      	bne.n	8002918 <__libc_init_array+0x24>
 8002904:	4d0b      	ldr	r5, [pc, #44]	@ (8002934 <__libc_init_array+0x40>)
 8002906:	4c0c      	ldr	r4, [pc, #48]	@ (8002938 <__libc_init_array+0x44>)
 8002908:	f000 f818 	bl	800293c <_init>
 800290c:	1b64      	subs	r4, r4, r5
 800290e:	10a4      	asrs	r4, r4, #2
 8002910:	2600      	movs	r6, #0
 8002912:	42a6      	cmp	r6, r4
 8002914:	d105      	bne.n	8002922 <__libc_init_array+0x2e>
 8002916:	bd70      	pop	{r4, r5, r6, pc}
 8002918:	f855 3b04 	ldr.w	r3, [r5], #4
 800291c:	4798      	blx	r3
 800291e:	3601      	adds	r6, #1
 8002920:	e7ee      	b.n	8002900 <__libc_init_array+0xc>
 8002922:	f855 3b04 	ldr.w	r3, [r5], #4
 8002926:	4798      	blx	r3
 8002928:	3601      	adds	r6, #1
 800292a:	e7f2      	b.n	8002912 <__libc_init_array+0x1e>
 800292c:	08002994 	.word	0x08002994
 8002930:	08002994 	.word	0x08002994
 8002934:	08002994 	.word	0x08002994
 8002938:	08002998 	.word	0x08002998

0800293c <_init>:
 800293c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293e:	bf00      	nop
 8002940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002942:	bc08      	pop	{r3}
 8002944:	469e      	mov	lr, r3
 8002946:	4770      	bx	lr

08002948 <_fini>:
 8002948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294a:	bf00      	nop
 800294c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294e:	bc08      	pop	{r3}
 8002950:	469e      	mov	lr, r3
 8002952:	4770      	bx	lr
