
esp01_station_mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004048  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  080041d8  080041d8  000051d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004308  08004308  00006094  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004308  08004308  00005308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004310  08004310  00006094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004310  08004310  00005310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004314  08004314  00005314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  08004318  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  20000094  080043ac  00006094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  080043ac  00006394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf91  00000000  00000000  000060c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e0c  00000000  00000000  00012055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  00013e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000786  00000000  00000000  00014840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021805  00000000  00000000  00014fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0a3  00000000  00000000  000367cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca856  00000000  00000000  0004286e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d0c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c60  00000000  00000000  0010d108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0010fd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080041c0 	.word	0x080041c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	080041c0 	.word	0x080041c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b090      	sub	sp, #64	@ 0x40
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fb14 	bl	8000bde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f895 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f939 	bl	8000830 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005be:	f000 f8d7 	bl	8000770 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005c2:	f000 f905 	bl	80007d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, En_index, strlen(En_index), 50);// FOR DEBUGG
 80005c6:	4839      	ldr	r0, [pc, #228]	@ (80006ac <main+0x100>)
 80005c8:	f7ff fe02 	bl	80001d0 <strlen>
 80005cc:	4603      	mov	r3, r0
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	2332      	movs	r3, #50	@ 0x32
 80005d2:	4936      	ldr	r1, [pc, #216]	@ (80006ac <main+0x100>)
 80005d4:	4836      	ldr	r0, [pc, #216]	@ (80006b0 <main+0x104>)
 80005d6:	f002 f8e3 	bl	80027a0 <HAL_UART_Transmit>
  esp01_send("AT\r\n", 1000); // DEVICE STATE CHECK AT ATTENTATION COMMANDS FIRMWARE
 80005da:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80005de:	4835      	ldr	r0, [pc, #212]	@ (80006b4 <main+0x108>)
 80005e0:	f000 f966 	bl	80008b0 <esp01_send>
  esp01_send("AT+RST\r\n", 1000);
 80005e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80005e8:	4833      	ldr	r0, [pc, #204]	@ (80006b8 <main+0x10c>)
 80005ea:	f000 f961 	bl	80008b0 <esp01_send>
  esp01_send("AT+CWMODE=1\r\n", 1000);// MODE = STATION MODE ACCESS TO AP
 80005ee:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80005f2:	4832      	ldr	r0, [pc, #200]	@ (80006bc <main+0x110>)
 80005f4:	f000 f95c 	bl	80008b0 <esp01_send>
  esp01_send("AT+CWJAP=\"Nord\",\"12345678\"\r\n", 5000);// WIFI PASSWORD
 80005f8:	f241 3188 	movw	r1, #5000	@ 0x1388
 80005fc:	4830      	ldr	r0, [pc, #192]	@ (80006c0 <main+0x114>)
 80005fe:	f000 f957 	bl	80008b0 <esp01_send>
  HAL_UART_Transmit(&huart2, Ex_index, strlen(Ex_index), 50);//FOR DEBUG
 8000602:	4830      	ldr	r0, [pc, #192]	@ (80006c4 <main+0x118>)
 8000604:	f7ff fde4 	bl	80001d0 <strlen>
 8000608:	4603      	mov	r3, r0
 800060a:	b29a      	uxth	r2, r3
 800060c:	2332      	movs	r3, #50	@ 0x32
 800060e:	492d      	ldr	r1, [pc, #180]	@ (80006c4 <main+0x118>)
 8000610:	4827      	ldr	r0, [pc, #156]	@ (80006b0 <main+0x104>)
 8000612:	f002 f8c5 	bl	80027a0 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    led_state = !led_state;// LED STATE
 8000616:	4b2c      	ldr	r3, [pc, #176]	@ (80006c8 <main+0x11c>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	bf0c      	ite	eq
 800061e:	2301      	moveq	r3, #1
 8000620:	2300      	movne	r3, #0
 8000622:	b2db      	uxtb	r3, r3
 8000624:	461a      	mov	r2, r3
 8000626:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <main+0x11c>)
 8000628:	701a      	strb	r2, [r3, #0]
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, led_state ? GPIO_PIN_RESET : GPIO_PIN_SET);// COMPARE IT
 800062a:	4b27      	ldr	r3, [pc, #156]	@ (80006c8 <main+0x11c>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	bf0c      	ite	eq
 8000632:	2301      	moveq	r3, #1
 8000634:	2300      	movne	r3, #0
 8000636:	b2db      	uxtb	r3, r3
 8000638:	461a      	mov	r2, r3
 800063a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800063e:	4823      	ldr	r0, [pc, #140]	@ (80006cc <main+0x120>)
 8000640:	f000 fe70 	bl	8001324 <HAL_GPIO_WritePin>

	    sprintf(tx_buffer, "AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");//
 8000644:	4922      	ldr	r1, [pc, #136]	@ (80006d0 <main+0x124>)
 8000646:	4823      	ldr	r0, [pc, #140]	@ (80006d4 <main+0x128>)
 8000648:	f003 f91a 	bl	8003880 <siprintf>
	    esp01_send(tx_buffer, 2000);
 800064c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000650:	4820      	ldr	r0, [pc, #128]	@ (80006d4 <main+0x128>)
 8000652:	f000 f92d 	bl	80008b0 <esp01_send>

	    sprintf(tx_buffer,"GET /update?api_key=KQ5DOATSE1U2AD3C&field1=%d\r\n\r\n",led_state);// GET REQUEST IN HTTP
 8000656:	4b1c      	ldr	r3, [pc, #112]	@ (80006c8 <main+0x11c>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	461a      	mov	r2, r3
 800065c:	491e      	ldr	r1, [pc, #120]	@ (80006d8 <main+0x12c>)
 800065e:	481d      	ldr	r0, [pc, #116]	@ (80006d4 <main+0x128>)
 8000660:	f003 f90e 	bl	8003880 <siprintf>
	    char send_cmd[64];
	    sprintf(send_cmd, "AT+CIPSEND=%d\r\n", strlen(tx_buffer));
 8000664:	481b      	ldr	r0, [pc, #108]	@ (80006d4 <main+0x128>)
 8000666:	f7ff fdb3 	bl	80001d0 <strlen>
 800066a:	4602      	mov	r2, r0
 800066c:	463b      	mov	r3, r7
 800066e:	491b      	ldr	r1, [pc, #108]	@ (80006dc <main+0x130>)
 8000670:	4618      	mov	r0, r3
 8000672:	f003 f905 	bl	8003880 <siprintf>
	    esp01_send(send_cmd, 1000);
 8000676:	463b      	mov	r3, r7
 8000678:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800067c:	4618      	mov	r0, r3
 800067e:	f000 f917 	bl	80008b0 <esp01_send>
	    esp01_send(tx_buffer, 2000);
 8000682:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000686:	4813      	ldr	r0, [pc, #76]	@ (80006d4 <main+0x128>)
 8000688:	f000 f912 	bl	80008b0 <esp01_send>

	    HAL_Delay(2000); // wait before next update
 800068c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000690:	f000 fb1a 	bl	8000cc8 <HAL_Delay>
	    HAL_UART_Transmit(&huart2, Co_index, strlen(Co_index), 50);// FOR DEBUG
 8000694:	4812      	ldr	r0, [pc, #72]	@ (80006e0 <main+0x134>)
 8000696:	f7ff fd9b 	bl	80001d0 <strlen>
 800069a:	4603      	mov	r3, r0
 800069c:	b29a      	uxth	r2, r3
 800069e:	2332      	movs	r3, #50	@ 0x32
 80006a0:	490f      	ldr	r1, [pc, #60]	@ (80006e0 <main+0x134>)
 80006a2:	4803      	ldr	r0, [pc, #12]	@ (80006b0 <main+0x104>)
 80006a4:	f002 f87c 	bl	80027a0 <HAL_UART_Transmit>
  {
 80006a8:	bf00      	nop
 80006aa:	e7b4      	b.n	8000616 <main+0x6a>
 80006ac:	20000000 	.word	0x20000000
 80006b0:	20000138 	.word	0x20000138
 80006b4:	080041d8 	.word	0x080041d8
 80006b8:	080041e0 	.word	0x080041e0
 80006bc:	080041ec 	.word	0x080041ec
 80006c0:	080041fc 	.word	0x080041fc
 80006c4:	20000014 	.word	0x20000014
 80006c8:	20000240 	.word	0x20000240
 80006cc:	48000400 	.word	0x48000400
 80006d0:	0800421c 	.word	0x0800421c
 80006d4:	200001c0 	.word	0x200001c0
 80006d8:	08004248 	.word	0x08004248
 80006dc:	0800427c 	.word	0x0800427c
 80006e0:	20000024 	.word	0x20000024

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b096      	sub	sp, #88	@ 0x58
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	2244      	movs	r2, #68	@ 0x44
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 f8e6 	bl	80038c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	463b      	mov	r3, r7
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000706:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800070a:	f000 fe31 	bl	8001370 <HAL_PWREx_ControlVoltageScaling>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000714:	f000 f8e6 	bl	80008e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000720:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000722:	2310      	movs	r3, #16
 8000724:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000726:	2300      	movs	r3, #0
 8000728:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4618      	mov	r0, r3
 8000730:	f000 fe74 	bl	800141c <HAL_RCC_OscConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800073a:	f000 f8d3 	bl	80008e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	230f      	movs	r3, #15
 8000740:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000742:	2301      	movs	r3, #1
 8000744:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000752:	463b      	mov	r3, r7
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f001 fa74 	bl	8001c44 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000762:	f000 f8bf 	bl	80008e4 <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3758      	adds	r7, #88	@ 0x58
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000774:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <MX_USART1_UART_Init+0x58>)
 8000776:	4a15      	ldr	r2, [pc, #84]	@ (80007cc <MX_USART1_UART_Init+0x5c>)
 8000778:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800077a:	4b13      	ldr	r3, [pc, #76]	@ (80007c8 <MX_USART1_UART_Init+0x58>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <MX_USART1_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <MX_USART1_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <MX_USART1_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <MX_USART1_UART_Init+0x58>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <MX_USART1_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <MX_USART1_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <MX_USART1_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <MX_USART1_UART_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <MX_USART1_UART_Init+0x58>)
 80007b4:	f001 ffa6 	bl	8002704 <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007be:	f000 f891 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200000b0 	.word	0x200000b0
 80007cc:	40013800 	.word	0x40013800

080007d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d4:	4b14      	ldr	r3, [pc, #80]	@ (8000828 <MX_USART2_UART_Init+0x58>)
 80007d6:	4a15      	ldr	r2, [pc, #84]	@ (800082c <MX_USART2_UART_Init+0x5c>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007da:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <MX_USART2_UART_Init+0x58>)
 80007dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <MX_USART2_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_USART2_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <MX_USART2_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <MX_USART2_UART_Init+0x58>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <MX_USART2_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <MX_USART2_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000806:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <MX_USART2_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800080c:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_USART2_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	@ (8000828 <MX_USART2_UART_Init+0x58>)
 8000814:	f001 ff76 	bl	8002704 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800081e:	f000 f861 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000138 	.word	0x20000138
 800082c:	40004400 	.word	0x40004400

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	4b18      	ldr	r3, [pc, #96]	@ (80008a8 <MX_GPIO_Init+0x78>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a17      	ldr	r2, [pc, #92]	@ (80008a8 <MX_GPIO_Init+0x78>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b15      	ldr	r3, [pc, #84]	@ (80008a8 <MX_GPIO_Init+0x78>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <MX_GPIO_Init+0x78>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	4a11      	ldr	r2, [pc, #68]	@ (80008a8 <MX_GPIO_Init+0x78>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086a:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <MX_GPIO_Init+0x78>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800087c:	480b      	ldr	r0, [pc, #44]	@ (80008ac <MX_GPIO_Init+0x7c>)
 800087e:	f000 fd51 	bl	8001324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000882:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000886:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	2301      	movs	r3, #1
 800088a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	4619      	mov	r1, r3
 800089a:	4804      	ldr	r0, [pc, #16]	@ (80008ac <MX_GPIO_Init+0x7c>)
 800089c:	f000 fbc8 	bl	8001030 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008a0:	bf00      	nop
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40021000 	.word	0x40021000
 80008ac:	48000400 	.word	0x48000400

080008b0 <esp01_send>:

/* USER CODE BEGIN 4 */
void esp01_send(char *cmd, uint32_t delay)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*)cmd, strlen(cmd), 1000);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff fc88 	bl	80001d0 <strlen>
 80008c0:	4603      	mov	r3, r0
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008c8:	6879      	ldr	r1, [r7, #4]
 80008ca:	4805      	ldr	r0, [pc, #20]	@ (80008e0 <esp01_send+0x30>)
 80008cc:	f001 ff68 	bl	80027a0 <HAL_UART_Transmit>
  HAL_Delay(delay);
 80008d0:	6838      	ldr	r0, [r7, #0]
 80008d2:	f000 f9f9 	bl	8000cc8 <HAL_Delay>
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200000b0 	.word	0x200000b0

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <Error_Handler+0x8>

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000934 <HAL_MspInit+0x44>)
 80008f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000934 <HAL_MspInit+0x44>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6613      	str	r3, [r2, #96]	@ 0x60
 8000902:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <HAL_MspInit+0x44>)
 8000904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <HAL_MspInit+0x44>)
 8000910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000912:	4a08      	ldr	r2, [pc, #32]	@ (8000934 <HAL_MspInit+0x44>)
 8000914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000918:	6593      	str	r3, [r2, #88]	@ 0x58
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <HAL_MspInit+0x44>)
 800091c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800091e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40021000 	.word	0x40021000

08000938 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b0a4      	sub	sp, #144	@ 0x90
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	2260      	movs	r2, #96	@ 0x60
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f002 ffb3 	bl	80038c4 <memset>
  if(huart->Instance==USART1)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a46      	ldr	r2, [pc, #280]	@ (8000a7c <HAL_UART_MspInit+0x144>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d144      	bne.n	80009f2 <HAL_UART_MspInit+0xba>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000968:	2301      	movs	r3, #1
 800096a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800096c:	2300      	movs	r3, #0
 800096e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4618      	mov	r0, r3
 8000976:	f001 fb89 	bl	800208c <HAL_RCCEx_PeriphCLKConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000980:	f7ff ffb0 	bl	80008e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000984:	4b3e      	ldr	r3, [pc, #248]	@ (8000a80 <HAL_UART_MspInit+0x148>)
 8000986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000988:	4a3d      	ldr	r2, [pc, #244]	@ (8000a80 <HAL_UART_MspInit+0x148>)
 800098a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800098e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000990:	4b3b      	ldr	r3, [pc, #236]	@ (8000a80 <HAL_UART_MspInit+0x148>)
 8000992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000994:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000998:	61bb      	str	r3, [r7, #24]
 800099a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099c:	4b38      	ldr	r3, [pc, #224]	@ (8000a80 <HAL_UART_MspInit+0x148>)
 800099e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a0:	4a37      	ldr	r2, [pc, #220]	@ (8000a80 <HAL_UART_MspInit+0x148>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a8:	4b35      	ldr	r3, [pc, #212]	@ (8000a80 <HAL_UART_MspInit+0x148>)
 80009aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009b4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c6:	2303      	movs	r3, #3
 80009c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009cc:	2307      	movs	r3, #7
 80009ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80009d6:	4619      	mov	r1, r3
 80009d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009dc:	f000 fb28 	bl	8001030 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2100      	movs	r1, #0
 80009e4:	2025      	movs	r0, #37	@ 0x25
 80009e6:	f000 fa6e 	bl	8000ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009ea:	2025      	movs	r0, #37	@ 0x25
 80009ec:	f000 fa87 	bl	8000efe <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80009f0:	e03f      	b.n	8000a72 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a23      	ldr	r2, [pc, #140]	@ (8000a84 <HAL_UART_MspInit+0x14c>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d13a      	bne.n	8000a72 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f001 fb3f 	bl	800208c <HAL_RCCEx_PeriphCLKConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8000a14:	f7ff ff66 	bl	80008e4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a18:	4b19      	ldr	r3, [pc, #100]	@ (8000a80 <HAL_UART_MspInit+0x148>)
 8000a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a1c:	4a18      	ldr	r2, [pc, #96]	@ (8000a80 <HAL_UART_MspInit+0x148>)
 8000a1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a22:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a24:	4b16      	ldr	r3, [pc, #88]	@ (8000a80 <HAL_UART_MspInit+0x148>)
 8000a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a30:	4b13      	ldr	r3, [pc, #76]	@ (8000a80 <HAL_UART_MspInit+0x148>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a34:	4a12      	ldr	r2, [pc, #72]	@ (8000a80 <HAL_UART_MspInit+0x148>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3c:	4b10      	ldr	r3, [pc, #64]	@ (8000a80 <HAL_UART_MspInit+0x148>)
 8000a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a48:	230c      	movs	r3, #12
 8000a4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a5e:	2307      	movs	r3, #7
 8000a60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6e:	f000 fadf 	bl	8001030 <HAL_GPIO_Init>
}
 8000a72:	bf00      	nop
 8000a74:	3790      	adds	r7, #144	@ 0x90
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40013800 	.word	0x40013800
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40004400 	.word	0x40004400

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <NMI_Handler+0x4>

08000a90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <MemManage_Handler+0x4>

08000aa0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <UsageFault_Handler+0x4>

08000ab0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ade:	f000 f8d3 	bl	8000c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000aec:	4802      	ldr	r0, [pc, #8]	@ (8000af8 <USART1_IRQHandler+0x10>)
 8000aee:	f001 fee1 	bl	80028b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200000b0 	.word	0x200000b0

08000afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b04:	4a14      	ldr	r2, [pc, #80]	@ (8000b58 <_sbrk+0x5c>)
 8000b06:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <_sbrk+0x60>)
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b10:	4b13      	ldr	r3, [pc, #76]	@ (8000b60 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b18:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <_sbrk+0x64>)
 8000b1a:	4a12      	ldr	r2, [pc, #72]	@ (8000b64 <_sbrk+0x68>)
 8000b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b1e:	4b10      	ldr	r3, [pc, #64]	@ (8000b60 <_sbrk+0x64>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d207      	bcs.n	8000b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b2c:	f002 fed2 	bl	80038d4 <__errno>
 8000b30:	4603      	mov	r3, r0
 8000b32:	220c      	movs	r2, #12
 8000b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3a:	e009      	b.n	8000b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b3c:	4b08      	ldr	r3, [pc, #32]	@ (8000b60 <_sbrk+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b42:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	4a05      	ldr	r2, [pc, #20]	@ (8000b60 <_sbrk+0x64>)
 8000b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3718      	adds	r7, #24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	2000c000 	.word	0x2000c000
 8000b5c:	00000400 	.word	0x00000400
 8000b60:	20000244 	.word	0x20000244
 8000b64:	20000398 	.word	0x20000398

08000b68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <SystemInit+0x20>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b72:	4a05      	ldr	r2, [pc, #20]	@ (8000b88 <SystemInit+0x20>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b90:	f7ff ffea 	bl	8000b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b94:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b96:	490d      	ldr	r1, [pc, #52]	@ (8000bcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b98:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd0 <LoopForever+0xe>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bac:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd8 <LoopForever+0x16>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bba:	f002 fe91 	bl	80038e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bbe:	f7ff fcf5 	bl	80005ac <main>

08000bc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bc2:	e7fe      	b.n	8000bc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000bd0:	08004318 	.word	0x08004318
  ldr r2, =_sbss
 8000bd4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000bd8:	20000394 	.word	0x20000394

08000bdc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC1_IRQHandler>

08000bde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be4:	2300      	movs	r3, #0
 8000be6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 f961 	bl	8000eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bee:	200f      	movs	r0, #15
 8000bf0:	f000 f80e 	bl	8000c10 <HAL_InitTick>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d002      	beq.n	8000c00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	71fb      	strb	r3, [r7, #7]
 8000bfe:	e001      	b.n	8000c04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c00:	f7ff fe76 	bl	80008f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c04:	79fb      	ldrb	r3, [r7, #7]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c1c:	4b17      	ldr	r3, [pc, #92]	@ (8000c7c <HAL_InitTick+0x6c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d023      	beq.n	8000c6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c24:	4b16      	ldr	r3, [pc, #88]	@ (8000c80 <HAL_InitTick+0x70>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <HAL_InitTick+0x6c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f96d 	bl	8000f1a <HAL_SYSTICK_Config>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d10f      	bne.n	8000c66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b0f      	cmp	r3, #15
 8000c4a:	d809      	bhi.n	8000c60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	6879      	ldr	r1, [r7, #4]
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f000 f937 	bl	8000ec6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c58:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <HAL_InitTick+0x74>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6013      	str	r3, [r2, #0]
 8000c5e:	e007      	b.n	8000c70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	73fb      	strb	r3, [r7, #15]
 8000c64:	e004      	b.n	8000c70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	73fb      	strb	r3, [r7, #15]
 8000c6a:	e001      	b.n	8000c70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000040 	.word	0x20000040
 8000c80:	20000038 	.word	0x20000038
 8000c84:	2000003c 	.word	0x2000003c

08000c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <HAL_IncTick+0x20>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <HAL_IncTick+0x24>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a04      	ldr	r2, [pc, #16]	@ (8000cac <HAL_IncTick+0x24>)
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000040 	.word	0x20000040
 8000cac:	20000248 	.word	0x20000248

08000cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb4:	4b03      	ldr	r3, [pc, #12]	@ (8000cc4 <HAL_GetTick+0x14>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000248 	.word	0x20000248

08000cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd0:	f7ff ffee 	bl	8000cb0 <HAL_GetTick>
 8000cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce0:	d005      	beq.n	8000cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d0c <HAL_Delay+0x44>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4413      	add	r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cee:	bf00      	nop
 8000cf0:	f7ff ffde 	bl	8000cb0 <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d8f7      	bhi.n	8000cf0 <HAL_Delay+0x28>
  {
  }
}
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000040 	.word	0x20000040

08000d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d20:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d42:	4a04      	ldr	r2, [pc, #16]	@ (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	60d3      	str	r3, [r2, #12]
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d5c:	4b04      	ldr	r3, [pc, #16]	@ (8000d70 <__NVIC_GetPriorityGrouping+0x18>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	f003 0307 	and.w	r3, r3, #7
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	db0b      	blt.n	8000d9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	f003 021f 	and.w	r2, r3, #31
 8000d8c:	4907      	ldr	r1, [pc, #28]	@ (8000dac <__NVIC_EnableIRQ+0x38>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	095b      	lsrs	r3, r3, #5
 8000d94:	2001      	movs	r0, #1
 8000d96:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000e100 	.word	0xe000e100

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	@ (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	@ (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	@ 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	@ 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
	...

08000e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e7c:	d301      	bcc.n	8000e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00f      	b.n	8000ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e82:	4a0a      	ldr	r2, [pc, #40]	@ (8000eac <SysTick_Config+0x40>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8a:	210f      	movs	r1, #15
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	f7ff ff8e 	bl	8000db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e94:	4b05      	ldr	r3, [pc, #20]	@ (8000eac <SysTick_Config+0x40>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9a:	4b04      	ldr	r3, [pc, #16]	@ (8000eac <SysTick_Config+0x40>)
 8000e9c:	2207      	movs	r2, #7
 8000e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	e000e010 	.word	0xe000e010

08000eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ff29 	bl	8000d10 <__NVIC_SetPriorityGrouping>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b086      	sub	sp, #24
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
 8000ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed8:	f7ff ff3e 	bl	8000d58 <__NVIC_GetPriorityGrouping>
 8000edc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	68b9      	ldr	r1, [r7, #8]
 8000ee2:	6978      	ldr	r0, [r7, #20]
 8000ee4:	f7ff ff8e 	bl	8000e04 <NVIC_EncodePriority>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff5d 	bl	8000db0 <__NVIC_SetPriority>
}
 8000ef6:	bf00      	nop
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff31 	bl	8000d74 <__NVIC_EnableIRQ>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff ffa2 	bl	8000e6c <SysTick_Config>
 8000f28:	4603      	mov	r3, r0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b085      	sub	sp, #20
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d008      	beq.n	8000f5c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e022      	b.n	8000fa2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f022 020e 	bic.w	r2, r2, #14
 8000f6a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f022 0201 	bic.w	r2, r2, #1
 8000f7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f80:	f003 021c 	and.w	r2, r3, #28
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f88:	2101      	movs	r1, #1
 8000f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2201      	movs	r2, #1
 8000f94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b084      	sub	sp, #16
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d005      	beq.n	8000fd2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2204      	movs	r2, #4
 8000fca:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
 8000fd0:	e029      	b.n	8001026 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f022 020e 	bic.w	r2, r2, #14
 8000fe0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f022 0201 	bic.w	r2, r2, #1
 8000ff0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff6:	f003 021c 	and.w	r2, r3, #28
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffe:	2101      	movs	r1, #1
 8001000:	fa01 f202 	lsl.w	r2, r1, r2
 8001004:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2201      	movs	r2, #1
 800100a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	4798      	blx	r3
    }
  }
  return status;
 8001026:	7bfb      	ldrb	r3, [r7, #15]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001030:	b480      	push	{r7}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800103e:	e154      	b.n	80012ea <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	2101      	movs	r1, #1
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	fa01 f303 	lsl.w	r3, r1, r3
 800104c:	4013      	ands	r3, r2
 800104e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2b00      	cmp	r3, #0
 8001054:	f000 8146 	beq.w	80012e4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	2b01      	cmp	r3, #1
 8001062:	d005      	beq.n	8001070 <HAL_GPIO_Init+0x40>
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d130      	bne.n	80010d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	2203      	movs	r2, #3
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	68da      	ldr	r2, [r3, #12]
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010a6:	2201      	movs	r2, #1
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	091b      	lsrs	r3, r3, #4
 80010bc:	f003 0201 	and.w	r2, r3, #1
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d017      	beq.n	800110e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	2203      	movs	r2, #3
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d123      	bne.n	8001162 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	08da      	lsrs	r2, r3, #3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3208      	adds	r2, #8
 8001122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	220f      	movs	r2, #15
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	691a      	ldr	r2, [r3, #16]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	f003 0307 	and.w	r3, r3, #7
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	08da      	lsrs	r2, r3, #3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3208      	adds	r2, #8
 800115c:	6939      	ldr	r1, [r7, #16]
 800115e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	2203      	movs	r2, #3
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 0203 	and.w	r2, r3, #3
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f000 80a0 	beq.w	80012e4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a4:	4b58      	ldr	r3, [pc, #352]	@ (8001308 <HAL_GPIO_Init+0x2d8>)
 80011a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011a8:	4a57      	ldr	r2, [pc, #348]	@ (8001308 <HAL_GPIO_Init+0x2d8>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80011b0:	4b55      	ldr	r3, [pc, #340]	@ (8001308 <HAL_GPIO_Init+0x2d8>)
 80011b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011bc:	4a53      	ldr	r2, [pc, #332]	@ (800130c <HAL_GPIO_Init+0x2dc>)
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	089b      	lsrs	r3, r3, #2
 80011c2:	3302      	adds	r3, #2
 80011c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	220f      	movs	r2, #15
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011e6:	d019      	beq.n	800121c <HAL_GPIO_Init+0x1ec>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a49      	ldr	r2, [pc, #292]	@ (8001310 <HAL_GPIO_Init+0x2e0>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d013      	beq.n	8001218 <HAL_GPIO_Init+0x1e8>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a48      	ldr	r2, [pc, #288]	@ (8001314 <HAL_GPIO_Init+0x2e4>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d00d      	beq.n	8001214 <HAL_GPIO_Init+0x1e4>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a47      	ldr	r2, [pc, #284]	@ (8001318 <HAL_GPIO_Init+0x2e8>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d007      	beq.n	8001210 <HAL_GPIO_Init+0x1e0>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a46      	ldr	r2, [pc, #280]	@ (800131c <HAL_GPIO_Init+0x2ec>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d101      	bne.n	800120c <HAL_GPIO_Init+0x1dc>
 8001208:	2304      	movs	r3, #4
 800120a:	e008      	b.n	800121e <HAL_GPIO_Init+0x1ee>
 800120c:	2307      	movs	r3, #7
 800120e:	e006      	b.n	800121e <HAL_GPIO_Init+0x1ee>
 8001210:	2303      	movs	r3, #3
 8001212:	e004      	b.n	800121e <HAL_GPIO_Init+0x1ee>
 8001214:	2302      	movs	r3, #2
 8001216:	e002      	b.n	800121e <HAL_GPIO_Init+0x1ee>
 8001218:	2301      	movs	r3, #1
 800121a:	e000      	b.n	800121e <HAL_GPIO_Init+0x1ee>
 800121c:	2300      	movs	r3, #0
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	f002 0203 	and.w	r2, r2, #3
 8001224:	0092      	lsls	r2, r2, #2
 8001226:	4093      	lsls	r3, r2
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800122e:	4937      	ldr	r1, [pc, #220]	@ (800130c <HAL_GPIO_Init+0x2dc>)
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	089b      	lsrs	r3, r3, #2
 8001234:	3302      	adds	r3, #2
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800123c:	4b38      	ldr	r3, [pc, #224]	@ (8001320 <HAL_GPIO_Init+0x2f0>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	43db      	mvns	r3, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001260:	4a2f      	ldr	r2, [pc, #188]	@ (8001320 <HAL_GPIO_Init+0x2f0>)
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001266:	4b2e      	ldr	r3, [pc, #184]	@ (8001320 <HAL_GPIO_Init+0x2f0>)
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	43db      	mvns	r3, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4313      	orrs	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800128a:	4a25      	ldr	r2, [pc, #148]	@ (8001320 <HAL_GPIO_Init+0x2f0>)
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001290:	4b23      	ldr	r3, [pc, #140]	@ (8001320 <HAL_GPIO_Init+0x2f0>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	43db      	mvns	r3, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012b4:	4a1a      	ldr	r2, [pc, #104]	@ (8001320 <HAL_GPIO_Init+0x2f0>)
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012ba:	4b19      	ldr	r3, [pc, #100]	@ (8001320 <HAL_GPIO_Init+0x2f0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4013      	ands	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4313      	orrs	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012de:	4a10      	ldr	r2, [pc, #64]	@ (8001320 <HAL_GPIO_Init+0x2f0>)
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	3301      	adds	r3, #1
 80012e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	fa22 f303 	lsr.w	r3, r2, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f47f aea3 	bne.w	8001040 <HAL_GPIO_Init+0x10>
  }
}
 80012fa:	bf00      	nop
 80012fc:	bf00      	nop
 80012fe:	371c      	adds	r7, #28
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	40021000 	.word	0x40021000
 800130c:	40010000 	.word	0x40010000
 8001310:	48000400 	.word	0x48000400
 8001314:	48000800 	.word	0x48000800
 8001318:	48000c00 	.word	0x48000c00
 800131c:	48001000 	.word	0x48001000
 8001320:	40010400 	.word	0x40010400

08001324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	807b      	strh	r3, [r7, #2]
 8001330:	4613      	mov	r3, r2
 8001332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001334:	787b      	ldrb	r3, [r7, #1]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001340:	e002      	b.n	8001348 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001342:	887a      	ldrh	r2, [r7, #2]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001358:	4b04      	ldr	r3, [pc, #16]	@ (800136c <HAL_PWREx_GetVoltageRange+0x18>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40007000 	.word	0x40007000

08001370 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800137e:	d130      	bne.n	80013e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001380:	4b23      	ldr	r3, [pc, #140]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800138c:	d038      	beq.n	8001400 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800138e:	4b20      	ldr	r3, [pc, #128]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001396:	4a1e      	ldr	r2, [pc, #120]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001398:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800139c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800139e:	4b1d      	ldr	r3, [pc, #116]	@ (8001414 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2232      	movs	r2, #50	@ 0x32
 80013a4:	fb02 f303 	mul.w	r3, r2, r3
 80013a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001418 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013aa:	fba2 2303 	umull	r2, r3, r2, r3
 80013ae:	0c9b      	lsrs	r3, r3, #18
 80013b0:	3301      	adds	r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013b4:	e002      	b.n	80013bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	3b01      	subs	r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013bc:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013c8:	d102      	bne.n	80013d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1f2      	bne.n	80013b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013dc:	d110      	bne.n	8001400 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e00f      	b.n	8001402 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013ee:	d007      	beq.n	8001400 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013f0:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013f8:	4a05      	ldr	r2, [pc, #20]	@ (8001410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40007000 	.word	0x40007000
 8001414:	20000038 	.word	0x20000038
 8001418:	431bde83 	.word	0x431bde83

0800141c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d102      	bne.n	8001430 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	f000 bc02 	b.w	8001c34 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001430:	4b96      	ldr	r3, [pc, #600]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 030c 	and.w	r3, r3, #12
 8001438:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800143a:	4b94      	ldr	r3, [pc, #592]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0310 	and.w	r3, r3, #16
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 80e4 	beq.w	800161a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d007      	beq.n	8001468 <HAL_RCC_OscConfig+0x4c>
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	2b0c      	cmp	r3, #12
 800145c:	f040 808b 	bne.w	8001576 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	2b01      	cmp	r3, #1
 8001464:	f040 8087 	bne.w	8001576 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001468:	4b88      	ldr	r3, [pc, #544]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <HAL_RCC_OscConfig+0x64>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e3d9      	b.n	8001c34 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a1a      	ldr	r2, [r3, #32]
 8001484:	4b81      	ldr	r3, [pc, #516]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	2b00      	cmp	r3, #0
 800148e:	d004      	beq.n	800149a <HAL_RCC_OscConfig+0x7e>
 8001490:	4b7e      	ldr	r3, [pc, #504]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001498:	e005      	b.n	80014a6 <HAL_RCC_OscConfig+0x8a>
 800149a:	4b7c      	ldr	r3, [pc, #496]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 800149c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014a0:	091b      	lsrs	r3, r3, #4
 80014a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d223      	bcs.n	80014f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a1b      	ldr	r3, [r3, #32]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 fd8c 	bl	8001fcc <RCC_SetFlashLatencyFromMSIRange>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e3ba      	b.n	8001c34 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014be:	4b73      	ldr	r3, [pc, #460]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a72      	ldr	r2, [pc, #456]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	4b70      	ldr	r3, [pc, #448]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	496d      	ldr	r1, [pc, #436]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014dc:	4b6b      	ldr	r3, [pc, #428]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	4968      	ldr	r1, [pc, #416]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
 80014f0:	e025      	b.n	800153e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014f2:	4b66      	ldr	r3, [pc, #408]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a65      	ldr	r2, [pc, #404]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 80014f8:	f043 0308 	orr.w	r3, r3, #8
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	4b63      	ldr	r3, [pc, #396]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	4960      	ldr	r1, [pc, #384]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 800150c:	4313      	orrs	r3, r2
 800150e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001510:	4b5e      	ldr	r3, [pc, #376]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	495b      	ldr	r1, [pc, #364]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 8001520:	4313      	orrs	r3, r2
 8001522:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d109      	bne.n	800153e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	4618      	mov	r0, r3
 8001530:	f000 fd4c 	bl	8001fcc <RCC_SetFlashLatencyFromMSIRange>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e37a      	b.n	8001c34 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800153e:	f000 fc81 	bl	8001e44 <HAL_RCC_GetSysClockFreq>
 8001542:	4602      	mov	r2, r0
 8001544:	4b51      	ldr	r3, [pc, #324]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	091b      	lsrs	r3, r3, #4
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	4950      	ldr	r1, [pc, #320]	@ (8001690 <HAL_RCC_OscConfig+0x274>)
 8001550:	5ccb      	ldrb	r3, [r1, r3]
 8001552:	f003 031f 	and.w	r3, r3, #31
 8001556:	fa22 f303 	lsr.w	r3, r2, r3
 800155a:	4a4e      	ldr	r2, [pc, #312]	@ (8001694 <HAL_RCC_OscConfig+0x278>)
 800155c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800155e:	4b4e      	ldr	r3, [pc, #312]	@ (8001698 <HAL_RCC_OscConfig+0x27c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fb54 	bl	8000c10 <HAL_InitTick>
 8001568:	4603      	mov	r3, r0
 800156a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d052      	beq.n	8001618 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	e35e      	b.n	8001c34 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d032      	beq.n	80015e4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800157e:	4b43      	ldr	r3, [pc, #268]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a42      	ldr	r2, [pc, #264]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800158a:	f7ff fb91 	bl	8000cb0 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001592:	f7ff fb8d 	bl	8000cb0 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e347      	b.n	8001c34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015a4:	4b39      	ldr	r3, [pc, #228]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f0      	beq.n	8001592 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015b0:	4b36      	ldr	r3, [pc, #216]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a35      	ldr	r2, [pc, #212]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 80015b6:	f043 0308 	orr.w	r3, r3, #8
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	4b33      	ldr	r3, [pc, #204]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	4930      	ldr	r1, [pc, #192]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ce:	4b2f      	ldr	r3, [pc, #188]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	021b      	lsls	r3, r3, #8
 80015dc:	492b      	ldr	r1, [pc, #172]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	604b      	str	r3, [r1, #4]
 80015e2:	e01a      	b.n	800161a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015e4:	4b29      	ldr	r3, [pc, #164]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a28      	ldr	r2, [pc, #160]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 80015ea:	f023 0301 	bic.w	r3, r3, #1
 80015ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fb5e 	bl	8000cb0 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015f8:	f7ff fb5a 	bl	8000cb0 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e314      	b.n	8001c34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800160a:	4b20      	ldr	r3, [pc, #128]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x1dc>
 8001616:	e000      	b.n	800161a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001618:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d073      	beq.n	800170e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	2b08      	cmp	r3, #8
 800162a:	d005      	beq.n	8001638 <HAL_RCC_OscConfig+0x21c>
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	2b0c      	cmp	r3, #12
 8001630:	d10e      	bne.n	8001650 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	2b03      	cmp	r3, #3
 8001636:	d10b      	bne.n	8001650 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001638:	4b14      	ldr	r3, [pc, #80]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d063      	beq.n	800170c <HAL_RCC_OscConfig+0x2f0>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d15f      	bne.n	800170c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e2f1      	b.n	8001c34 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001658:	d106      	bne.n	8001668 <HAL_RCC_OscConfig+0x24c>
 800165a:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a0b      	ldr	r2, [pc, #44]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 8001660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	e025      	b.n	80016b4 <HAL_RCC_OscConfig+0x298>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001670:	d114      	bne.n	800169c <HAL_RCC_OscConfig+0x280>
 8001672:	4b06      	ldr	r3, [pc, #24]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a05      	ldr	r2, [pc, #20]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 8001678:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	4b03      	ldr	r3, [pc, #12]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a02      	ldr	r2, [pc, #8]	@ (800168c <HAL_RCC_OscConfig+0x270>)
 8001684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	e013      	b.n	80016b4 <HAL_RCC_OscConfig+0x298>
 800168c:	40021000 	.word	0x40021000
 8001690:	0800428c 	.word	0x0800428c
 8001694:	20000038 	.word	0x20000038
 8001698:	2000003c 	.word	0x2000003c
 800169c:	4ba0      	ldr	r3, [pc, #640]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a9f      	ldr	r2, [pc, #636]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 80016a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	4b9d      	ldr	r3, [pc, #628]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a9c      	ldr	r2, [pc, #624]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 80016ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d013      	beq.n	80016e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7ff faf8 	bl	8000cb0 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c4:	f7ff faf4 	bl	8000cb0 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b64      	cmp	r3, #100	@ 0x64
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e2ae      	b.n	8001c34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016d6:	4b92      	ldr	r3, [pc, #584]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0x2a8>
 80016e2:	e014      	b.n	800170e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e4:	f7ff fae4 	bl	8000cb0 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ec:	f7ff fae0 	bl	8000cb0 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b64      	cmp	r3, #100	@ 0x64
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e29a      	b.n	8001c34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016fe:	4b88      	ldr	r3, [pc, #544]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x2d0>
 800170a:	e000      	b.n	800170e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d060      	beq.n	80017dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	2b04      	cmp	r3, #4
 800171e:	d005      	beq.n	800172c <HAL_RCC_OscConfig+0x310>
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	2b0c      	cmp	r3, #12
 8001724:	d119      	bne.n	800175a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	2b02      	cmp	r3, #2
 800172a:	d116      	bne.n	800175a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800172c:	4b7c      	ldr	r3, [pc, #496]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <HAL_RCC_OscConfig+0x328>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e277      	b.n	8001c34 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001744:	4b76      	ldr	r3, [pc, #472]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	061b      	lsls	r3, r3, #24
 8001752:	4973      	ldr	r1, [pc, #460]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 8001754:	4313      	orrs	r3, r2
 8001756:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001758:	e040      	b.n	80017dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d023      	beq.n	80017aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001762:	4b6f      	ldr	r3, [pc, #444]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a6e      	ldr	r2, [pc, #440]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 8001768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800176c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176e:	f7ff fa9f 	bl	8000cb0 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001776:	f7ff fa9b 	bl	8000cb0 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e255      	b.n	8001c34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001788:	4b65      	ldr	r3, [pc, #404]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0f0      	beq.n	8001776 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001794:	4b62      	ldr	r3, [pc, #392]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	061b      	lsls	r3, r3, #24
 80017a2:	495f      	ldr	r1, [pc, #380]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]
 80017a8:	e018      	b.n	80017dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a5c      	ldr	r2, [pc, #368]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 80017b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b6:	f7ff fa7b 	bl	8000cb0 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017be:	f7ff fa77 	bl	8000cb0 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e231      	b.n	8001c34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017d0:	4b53      	ldr	r3, [pc, #332]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f0      	bne.n	80017be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0308 	and.w	r3, r3, #8
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d03c      	beq.n	8001862 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d01c      	beq.n	800182a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 80017f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017f6:	4a4a      	ldr	r2, [pc, #296]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001800:	f7ff fa56 	bl	8000cb0 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001808:	f7ff fa52 	bl	8000cb0 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e20c      	b.n	8001c34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800181a:	4b41      	ldr	r3, [pc, #260]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 800181c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0ef      	beq.n	8001808 <HAL_RCC_OscConfig+0x3ec>
 8001828:	e01b      	b.n	8001862 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800182a:	4b3d      	ldr	r3, [pc, #244]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 800182c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001830:	4a3b      	ldr	r2, [pc, #236]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 8001832:	f023 0301 	bic.w	r3, r3, #1
 8001836:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183a:	f7ff fa39 	bl	8000cb0 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001842:	f7ff fa35 	bl	8000cb0 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e1ef      	b.n	8001c34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001854:	4b32      	ldr	r3, [pc, #200]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 8001856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1ef      	bne.n	8001842 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 80a6 	beq.w	80019bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001870:	2300      	movs	r3, #0
 8001872:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001874:	4b2a      	ldr	r3, [pc, #168]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 8001876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10d      	bne.n	800189c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001880:	4b27      	ldr	r3, [pc, #156]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 8001882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001884:	4a26      	ldr	r2, [pc, #152]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 8001886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800188a:	6593      	str	r3, [r2, #88]	@ 0x58
 800188c:	4b24      	ldr	r3, [pc, #144]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 800188e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001898:	2301      	movs	r3, #1
 800189a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800189c:	4b21      	ldr	r3, [pc, #132]	@ (8001924 <HAL_RCC_OscConfig+0x508>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d118      	bne.n	80018da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001924 <HAL_RCC_OscConfig+0x508>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001924 <HAL_RCC_OscConfig+0x508>)
 80018ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018b4:	f7ff f9fc 	bl	8000cb0 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018bc:	f7ff f9f8 	bl	8000cb0 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e1b2      	b.n	8001c34 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ce:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <HAL_RCC_OscConfig+0x508>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d108      	bne.n	80018f4 <HAL_RCC_OscConfig+0x4d8>
 80018e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 80018e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018f2:	e029      	b.n	8001948 <HAL_RCC_OscConfig+0x52c>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b05      	cmp	r3, #5
 80018fa:	d115      	bne.n	8001928 <HAL_RCC_OscConfig+0x50c>
 80018fc:	4b08      	ldr	r3, [pc, #32]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 80018fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001902:	4a07      	ldr	r2, [pc, #28]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 8001904:	f043 0304 	orr.w	r3, r3, #4
 8001908:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800190c:	4b04      	ldr	r3, [pc, #16]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 800190e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001912:	4a03      	ldr	r2, [pc, #12]	@ (8001920 <HAL_RCC_OscConfig+0x504>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800191c:	e014      	b.n	8001948 <HAL_RCC_OscConfig+0x52c>
 800191e:	bf00      	nop
 8001920:	40021000 	.word	0x40021000
 8001924:	40007000 	.word	0x40007000
 8001928:	4b9a      	ldr	r3, [pc, #616]	@ (8001b94 <HAL_RCC_OscConfig+0x778>)
 800192a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800192e:	4a99      	ldr	r2, [pc, #612]	@ (8001b94 <HAL_RCC_OscConfig+0x778>)
 8001930:	f023 0301 	bic.w	r3, r3, #1
 8001934:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001938:	4b96      	ldr	r3, [pc, #600]	@ (8001b94 <HAL_RCC_OscConfig+0x778>)
 800193a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800193e:	4a95      	ldr	r2, [pc, #596]	@ (8001b94 <HAL_RCC_OscConfig+0x778>)
 8001940:	f023 0304 	bic.w	r3, r3, #4
 8001944:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d016      	beq.n	800197e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001950:	f7ff f9ae 	bl	8000cb0 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001956:	e00a      	b.n	800196e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001958:	f7ff f9aa 	bl	8000cb0 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e162      	b.n	8001c34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800196e:	4b89      	ldr	r3, [pc, #548]	@ (8001b94 <HAL_RCC_OscConfig+0x778>)
 8001970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0ed      	beq.n	8001958 <HAL_RCC_OscConfig+0x53c>
 800197c:	e015      	b.n	80019aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197e:	f7ff f997 	bl	8000cb0 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001984:	e00a      	b.n	800199c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001986:	f7ff f993 	bl	8000cb0 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001994:	4293      	cmp	r3, r2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e14b      	b.n	8001c34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800199c:	4b7d      	ldr	r3, [pc, #500]	@ (8001b94 <HAL_RCC_OscConfig+0x778>)
 800199e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1ed      	bne.n	8001986 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019aa:	7ffb      	ldrb	r3, [r7, #31]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d105      	bne.n	80019bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b0:	4b78      	ldr	r3, [pc, #480]	@ (8001b94 <HAL_RCC_OscConfig+0x778>)
 80019b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b4:	4a77      	ldr	r2, [pc, #476]	@ (8001b94 <HAL_RCC_OscConfig+0x778>)
 80019b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019ba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0320 	and.w	r3, r3, #32
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d03c      	beq.n	8001a42 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d01c      	beq.n	8001a0a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019d0:	4b70      	ldr	r3, [pc, #448]	@ (8001b94 <HAL_RCC_OscConfig+0x778>)
 80019d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019d6:	4a6f      	ldr	r2, [pc, #444]	@ (8001b94 <HAL_RCC_OscConfig+0x778>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e0:	f7ff f966 	bl	8000cb0 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019e8:	f7ff f962 	bl	8000cb0 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e11c      	b.n	8001c34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019fa:	4b66      	ldr	r3, [pc, #408]	@ (8001b94 <HAL_RCC_OscConfig+0x778>)
 80019fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0ef      	beq.n	80019e8 <HAL_RCC_OscConfig+0x5cc>
 8001a08:	e01b      	b.n	8001a42 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a0a:	4b62      	ldr	r3, [pc, #392]	@ (8001b94 <HAL_RCC_OscConfig+0x778>)
 8001a0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a10:	4a60      	ldr	r2, [pc, #384]	@ (8001b94 <HAL_RCC_OscConfig+0x778>)
 8001a12:	f023 0301 	bic.w	r3, r3, #1
 8001a16:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1a:	f7ff f949 	bl	8000cb0 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a22:	f7ff f945 	bl	8000cb0 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e0ff      	b.n	8001c34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a34:	4b57      	ldr	r3, [pc, #348]	@ (8001b94 <HAL_RCC_OscConfig+0x778>)
 8001a36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1ef      	bne.n	8001a22 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 80f3 	beq.w	8001c32 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	f040 80c9 	bne.w	8001be8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a56:	4b4f      	ldr	r3, [pc, #316]	@ (8001b94 <HAL_RCC_OscConfig+0x778>)
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f003 0203 	and.w	r2, r3, #3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d12c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a74:	3b01      	subs	r3, #1
 8001a76:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d123      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a86:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d11b      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a96:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d113      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aa6:	085b      	lsrs	r3, r3, #1
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d109      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aba:	085b      	lsrs	r3, r3, #1
 8001abc:	3b01      	subs	r3, #1
 8001abe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d06b      	beq.n	8001b9c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	2b0c      	cmp	r3, #12
 8001ac8:	d062      	beq.n	8001b90 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001aca:	4b32      	ldr	r3, [pc, #200]	@ (8001b94 <HAL_RCC_OscConfig+0x778>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e0ac      	b.n	8001c34 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ada:	4b2e      	ldr	r3, [pc, #184]	@ (8001b94 <HAL_RCC_OscConfig+0x778>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a2d      	ldr	r2, [pc, #180]	@ (8001b94 <HAL_RCC_OscConfig+0x778>)
 8001ae0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ae4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ae6:	f7ff f8e3 	bl	8000cb0 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aee:	f7ff f8df 	bl	8000cb0 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e099      	b.n	8001c34 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b00:	4b24      	ldr	r3, [pc, #144]	@ (8001b94 <HAL_RCC_OscConfig+0x778>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f0      	bne.n	8001aee <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b0c:	4b21      	ldr	r3, [pc, #132]	@ (8001b94 <HAL_RCC_OscConfig+0x778>)
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	4b21      	ldr	r3, [pc, #132]	@ (8001b98 <HAL_RCC_OscConfig+0x77c>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b1c:	3a01      	subs	r2, #1
 8001b1e:	0112      	lsls	r2, r2, #4
 8001b20:	4311      	orrs	r1, r2
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b26:	0212      	lsls	r2, r2, #8
 8001b28:	4311      	orrs	r1, r2
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b2e:	0852      	lsrs	r2, r2, #1
 8001b30:	3a01      	subs	r2, #1
 8001b32:	0552      	lsls	r2, r2, #21
 8001b34:	4311      	orrs	r1, r2
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b3a:	0852      	lsrs	r2, r2, #1
 8001b3c:	3a01      	subs	r2, #1
 8001b3e:	0652      	lsls	r2, r2, #25
 8001b40:	4311      	orrs	r1, r2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b46:	06d2      	lsls	r2, r2, #27
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	4912      	ldr	r1, [pc, #72]	@ (8001b94 <HAL_RCC_OscConfig+0x778>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b50:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <HAL_RCC_OscConfig+0x778>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0f      	ldr	r2, [pc, #60]	@ (8001b94 <HAL_RCC_OscConfig+0x778>)
 8001b56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b5a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b94 <HAL_RCC_OscConfig+0x778>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	4a0c      	ldr	r2, [pc, #48]	@ (8001b94 <HAL_RCC_OscConfig+0x778>)
 8001b62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b68:	f7ff f8a2 	bl	8000cb0 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b70:	f7ff f89e 	bl	8000cb0 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e058      	b.n	8001c34 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b82:	4b04      	ldr	r3, [pc, #16]	@ (8001b94 <HAL_RCC_OscConfig+0x778>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f0      	beq.n	8001b70 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b8e:	e050      	b.n	8001c32 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e04f      	b.n	8001c34 <HAL_RCC_OscConfig+0x818>
 8001b94:	40021000 	.word	0x40021000
 8001b98:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9c:	4b27      	ldr	r3, [pc, #156]	@ (8001c3c <HAL_RCC_OscConfig+0x820>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d144      	bne.n	8001c32 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ba8:	4b24      	ldr	r3, [pc, #144]	@ (8001c3c <HAL_RCC_OscConfig+0x820>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a23      	ldr	r2, [pc, #140]	@ (8001c3c <HAL_RCC_OscConfig+0x820>)
 8001bae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bb2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bb4:	4b21      	ldr	r3, [pc, #132]	@ (8001c3c <HAL_RCC_OscConfig+0x820>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	4a20      	ldr	r2, [pc, #128]	@ (8001c3c <HAL_RCC_OscConfig+0x820>)
 8001bba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bc0:	f7ff f876 	bl	8000cb0 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc8:	f7ff f872 	bl	8000cb0 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e02c      	b.n	8001c34 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bda:	4b18      	ldr	r3, [pc, #96]	@ (8001c3c <HAL_RCC_OscConfig+0x820>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x7ac>
 8001be6:	e024      	b.n	8001c32 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	2b0c      	cmp	r3, #12
 8001bec:	d01f      	beq.n	8001c2e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bee:	4b13      	ldr	r3, [pc, #76]	@ (8001c3c <HAL_RCC_OscConfig+0x820>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a12      	ldr	r2, [pc, #72]	@ (8001c3c <HAL_RCC_OscConfig+0x820>)
 8001bf4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfa:	f7ff f859 	bl	8000cb0 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c02:	f7ff f855 	bl	8000cb0 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e00f      	b.n	8001c34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c14:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <HAL_RCC_OscConfig+0x820>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1f0      	bne.n	8001c02 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001c20:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <HAL_RCC_OscConfig+0x820>)
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	4905      	ldr	r1, [pc, #20]	@ (8001c3c <HAL_RCC_OscConfig+0x820>)
 8001c26:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <HAL_RCC_OscConfig+0x824>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60cb      	str	r3, [r1, #12]
 8001c2c:	e001      	b.n	8001c32 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3720      	adds	r7, #32
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	feeefffc 	.word	0xfeeefffc

08001c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e0e7      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c58:	4b75      	ldr	r3, [pc, #468]	@ (8001e30 <HAL_RCC_ClockConfig+0x1ec>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d910      	bls.n	8001c88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c66:	4b72      	ldr	r3, [pc, #456]	@ (8001e30 <HAL_RCC_ClockConfig+0x1ec>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f023 0207 	bic.w	r2, r3, #7
 8001c6e:	4970      	ldr	r1, [pc, #448]	@ (8001e30 <HAL_RCC_ClockConfig+0x1ec>)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c76:	4b6e      	ldr	r3, [pc, #440]	@ (8001e30 <HAL_RCC_ClockConfig+0x1ec>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d001      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e0cf      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d010      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	4b66      	ldr	r3, [pc, #408]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d908      	bls.n	8001cb6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca4:	4b63      	ldr	r3, [pc, #396]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	4960      	ldr	r1, [pc, #384]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d04c      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	d107      	bne.n	8001cda <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cca:	4b5a      	ldr	r3, [pc, #360]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d121      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e0a6      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d107      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ce2:	4b54      	ldr	r3, [pc, #336]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d115      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e09a      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d107      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cfa:	4b4e      	ldr	r3, [pc, #312]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e08e      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d0a:	4b4a      	ldr	r3, [pc, #296]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e086      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d1a:	4b46      	ldr	r3, [pc, #280]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f023 0203 	bic.w	r2, r3, #3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	4943      	ldr	r1, [pc, #268]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d2c:	f7fe ffc0 	bl	8000cb0 <HAL_GetTick>
 8001d30:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	e00a      	b.n	8001d4a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d34:	f7fe ffbc 	bl	8000cb0 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e06e      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4a:	4b3a      	ldr	r3, [pc, #232]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 020c 	and.w	r2, r3, #12
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d1eb      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d010      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	4b31      	ldr	r3, [pc, #196]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d208      	bcs.n	8001d8a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d78:	4b2e      	ldr	r3, [pc, #184]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	492b      	ldr	r1, [pc, #172]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d8a:	4b29      	ldr	r3, [pc, #164]	@ (8001e30 <HAL_RCC_ClockConfig+0x1ec>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d210      	bcs.n	8001dba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d98:	4b25      	ldr	r3, [pc, #148]	@ (8001e30 <HAL_RCC_ClockConfig+0x1ec>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f023 0207 	bic.w	r2, r3, #7
 8001da0:	4923      	ldr	r1, [pc, #140]	@ (8001e30 <HAL_RCC_ClockConfig+0x1ec>)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da8:	4b21      	ldr	r3, [pc, #132]	@ (8001e30 <HAL_RCC_ClockConfig+0x1ec>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d001      	beq.n	8001dba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e036      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d008      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	4918      	ldr	r1, [pc, #96]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0308 	and.w	r3, r3, #8
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d009      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001de4:	4b13      	ldr	r3, [pc, #76]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4910      	ldr	r1, [pc, #64]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001df8:	f000 f824 	bl	8001e44 <HAL_RCC_GetSysClockFreq>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001e34 <HAL_RCC_ClockConfig+0x1f0>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	091b      	lsrs	r3, r3, #4
 8001e04:	f003 030f 	and.w	r3, r3, #15
 8001e08:	490b      	ldr	r1, [pc, #44]	@ (8001e38 <HAL_RCC_ClockConfig+0x1f4>)
 8001e0a:	5ccb      	ldrb	r3, [r1, r3]
 8001e0c:	f003 031f 	and.w	r3, r3, #31
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
 8001e14:	4a09      	ldr	r2, [pc, #36]	@ (8001e3c <HAL_RCC_ClockConfig+0x1f8>)
 8001e16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e18:	4b09      	ldr	r3, [pc, #36]	@ (8001e40 <HAL_RCC_ClockConfig+0x1fc>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe fef7 	bl	8000c10 <HAL_InitTick>
 8001e22:	4603      	mov	r3, r0
 8001e24:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e26:	7afb      	ldrb	r3, [r7, #11]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40022000 	.word	0x40022000
 8001e34:	40021000 	.word	0x40021000
 8001e38:	0800428c 	.word	0x0800428c
 8001e3c:	20000038 	.word	0x20000038
 8001e40:	2000003c 	.word	0x2000003c

08001e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	@ 0x24
 8001e48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e52:	4b3e      	ldr	r3, [pc, #248]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 030c 	and.w	r3, r3, #12
 8001e5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d005      	beq.n	8001e78 <HAL_RCC_GetSysClockFreq+0x34>
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	2b0c      	cmp	r3, #12
 8001e70:	d121      	bne.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d11e      	bne.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e78:	4b34      	ldr	r3, [pc, #208]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d107      	bne.n	8001e94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e84:	4b31      	ldr	r3, [pc, #196]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e8a:	0a1b      	lsrs	r3, r3, #8
 8001e8c:	f003 030f 	and.w	r3, r3, #15
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	e005      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e94:	4b2d      	ldr	r3, [pc, #180]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ea0:	4a2b      	ldr	r2, [pc, #172]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10d      	bne.n	8001ecc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eb4:	e00a      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d102      	bne.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ebc:	4b25      	ldr	r3, [pc, #148]	@ (8001f54 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ebe:	61bb      	str	r3, [r7, #24]
 8001ec0:	e004      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ec8:	4b23      	ldr	r3, [pc, #140]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x114>)
 8001eca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	2b0c      	cmp	r3, #12
 8001ed0:	d134      	bne.n	8001f3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d003      	beq.n	8001eea <HAL_RCC_GetSysClockFreq+0xa6>
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d003      	beq.n	8001ef0 <HAL_RCC_GetSysClockFreq+0xac>
 8001ee8:	e005      	b.n	8001ef6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001eea:	4b1a      	ldr	r3, [pc, #104]	@ (8001f54 <HAL_RCC_GetSysClockFreq+0x110>)
 8001eec:	617b      	str	r3, [r7, #20]
      break;
 8001eee:	e005      	b.n	8001efc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ef0:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ef2:	617b      	str	r3, [r7, #20]
      break;
 8001ef4:	e002      	b.n	8001efc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	617b      	str	r3, [r7, #20]
      break;
 8001efa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001efc:	4b13      	ldr	r3, [pc, #76]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	3301      	adds	r3, #1
 8001f08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f0a:	4b10      	ldr	r3, [pc, #64]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	0a1b      	lsrs	r3, r3, #8
 8001f10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	fb03 f202 	mul.w	r2, r3, r2
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f22:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	0e5b      	lsrs	r3, r3, #25
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f3c:	69bb      	ldr	r3, [r7, #24]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3724      	adds	r7, #36	@ 0x24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	080042a4 	.word	0x080042a4
 8001f54:	00f42400 	.word	0x00f42400
 8001f58:	007a1200 	.word	0x007a1200

08001f5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f60:	4b03      	ldr	r3, [pc, #12]	@ (8001f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f62:	681b      	ldr	r3, [r3, #0]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000038 	.word	0x20000038

08001f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f78:	f7ff fff0 	bl	8001f5c <HAL_RCC_GetHCLKFreq>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	0a1b      	lsrs	r3, r3, #8
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	4904      	ldr	r1, [pc, #16]	@ (8001f9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f8a:	5ccb      	ldrb	r3, [r1, r3]
 8001f8c:	f003 031f 	and.w	r3, r3, #31
 8001f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	0800429c 	.word	0x0800429c

08001fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fa4:	f7ff ffda 	bl	8001f5c <HAL_RCC_GetHCLKFreq>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	0adb      	lsrs	r3, r3, #11
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	4904      	ldr	r1, [pc, #16]	@ (8001fc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fb6:	5ccb      	ldrb	r3, [r1, r3]
 8001fb8:	f003 031f 	and.w	r3, r3, #31
 8001fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	0800429c 	.word	0x0800429c

08001fcc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fd8:	4b2a      	ldr	r3, [pc, #168]	@ (8002084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fe4:	f7ff f9b6 	bl	8001354 <HAL_PWREx_GetVoltageRange>
 8001fe8:	6178      	str	r0, [r7, #20]
 8001fea:	e014      	b.n	8002016 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fec:	4b25      	ldr	r3, [pc, #148]	@ (8002084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff0:	4a24      	ldr	r2, [pc, #144]	@ (8002084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ff2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ff6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ff8:	4b22      	ldr	r3, [pc, #136]	@ (8002084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002004:	f7ff f9a6 	bl	8001354 <HAL_PWREx_GetVoltageRange>
 8002008:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800200a:	4b1e      	ldr	r3, [pc, #120]	@ (8002084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800200c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200e:	4a1d      	ldr	r2, [pc, #116]	@ (8002084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002010:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002014:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800201c:	d10b      	bne.n	8002036 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b80      	cmp	r3, #128	@ 0x80
 8002022:	d919      	bls.n	8002058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2ba0      	cmp	r3, #160	@ 0xa0
 8002028:	d902      	bls.n	8002030 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800202a:	2302      	movs	r3, #2
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	e013      	b.n	8002058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002030:	2301      	movs	r3, #1
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	e010      	b.n	8002058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b80      	cmp	r3, #128	@ 0x80
 800203a:	d902      	bls.n	8002042 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800203c:	2303      	movs	r3, #3
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	e00a      	b.n	8002058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b80      	cmp	r3, #128	@ 0x80
 8002046:	d102      	bne.n	800204e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002048:	2302      	movs	r3, #2
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	e004      	b.n	8002058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b70      	cmp	r3, #112	@ 0x70
 8002052:	d101      	bne.n	8002058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002054:	2301      	movs	r3, #1
 8002056:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002058:	4b0b      	ldr	r3, [pc, #44]	@ (8002088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f023 0207 	bic.w	r2, r3, #7
 8002060:	4909      	ldr	r1, [pc, #36]	@ (8002088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4313      	orrs	r3, r2
 8002066:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002068:	4b07      	ldr	r3, [pc, #28]	@ (8002088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	429a      	cmp	r2, r3
 8002074:	d001      	beq.n	800207a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40021000 	.word	0x40021000
 8002088:	40022000 	.word	0x40022000

0800208c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002094:	2300      	movs	r3, #0
 8002096:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002098:	2300      	movs	r3, #0
 800209a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d031      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80020b0:	d01a      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80020b2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80020b6:	d814      	bhi.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d009      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80020bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80020c0:	d10f      	bne.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80020c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	4a5c      	ldr	r2, [pc, #368]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020cc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020ce:	e00c      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3304      	adds	r3, #4
 80020d4:	2100      	movs	r1, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 fa22 	bl	8002520 <RCCEx_PLLSAI1_Config>
 80020dc:	4603      	mov	r3, r0
 80020de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020e0:	e003      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	74fb      	strb	r3, [r7, #19]
      break;
 80020e6:	e000      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80020e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020ea:	7cfb      	ldrb	r3, [r7, #19]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10b      	bne.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020f0:	4b51      	ldr	r3, [pc, #324]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fe:	494e      	ldr	r1, [pc, #312]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002106:	e001      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002108:	7cfb      	ldrb	r3, [r7, #19]
 800210a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 809e 	beq.w	8002256 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800211a:	2300      	movs	r3, #0
 800211c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800211e:	4b46      	ldr	r3, [pc, #280]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800212e:	2300      	movs	r3, #0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00d      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002134:	4b40      	ldr	r3, [pc, #256]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002138:	4a3f      	ldr	r2, [pc, #252]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800213a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800213e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002140:	4b3d      	ldr	r3, [pc, #244]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002144:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800214c:	2301      	movs	r3, #1
 800214e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002150:	4b3a      	ldr	r3, [pc, #232]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a39      	ldr	r2, [pc, #228]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002156:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800215a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800215c:	f7fe fda8 	bl	8000cb0 <HAL_GetTick>
 8002160:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002162:	e009      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002164:	f7fe fda4 	bl	8000cb0 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d902      	bls.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	74fb      	strb	r3, [r7, #19]
        break;
 8002176:	e005      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002178:	4b30      	ldr	r3, [pc, #192]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0ef      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002184:	7cfb      	ldrb	r3, [r7, #19]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d15a      	bne.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800218a:	4b2b      	ldr	r3, [pc, #172]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800218c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002190:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002194:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d01e      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d019      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021a6:	4b24      	ldr	r3, [pc, #144]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021b2:	4b21      	ldr	r3, [pc, #132]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021d2:	4a19      	ldr	r2, [pc, #100]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d016      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e4:	f7fe fd64 	bl	8000cb0 <HAL_GetTick>
 80021e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ea:	e00b      	b.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ec:	f7fe fd60 	bl	8000cb0 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d902      	bls.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	74fb      	strb	r3, [r7, #19]
            break;
 8002202:	e006      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002204:	4b0c      	ldr	r3, [pc, #48]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0ec      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002212:	7cfb      	ldrb	r3, [r7, #19]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10b      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002218:	4b07      	ldr	r3, [pc, #28]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800221a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800221e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002226:	4904      	ldr	r1, [pc, #16]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002228:	4313      	orrs	r3, r2
 800222a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800222e:	e009      	b.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002230:	7cfb      	ldrb	r3, [r7, #19]
 8002232:	74bb      	strb	r3, [r7, #18]
 8002234:	e006      	b.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002236:	bf00      	nop
 8002238:	40021000 	.word	0x40021000
 800223c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002240:	7cfb      	ldrb	r3, [r7, #19]
 8002242:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002244:	7c7b      	ldrb	r3, [r7, #17]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d105      	bne.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800224a:	4b8d      	ldr	r3, [pc, #564]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800224c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224e:	4a8c      	ldr	r2, [pc, #560]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002250:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002254:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00a      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002262:	4b87      	ldr	r3, [pc, #540]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002268:	f023 0203 	bic.w	r2, r3, #3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4983      	ldr	r1, [pc, #524]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002272:	4313      	orrs	r3, r2
 8002274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00a      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002284:	4b7e      	ldr	r3, [pc, #504]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228a:	f023 020c 	bic.w	r2, r3, #12
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002292:	497b      	ldr	r1, [pc, #492]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002294:	4313      	orrs	r3, r2
 8002296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00a      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022a6:	4b76      	ldr	r3, [pc, #472]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b4:	4972      	ldr	r1, [pc, #456]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0320 	and.w	r3, r3, #32
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00a      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022c8:	4b6d      	ldr	r3, [pc, #436]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d6:	496a      	ldr	r1, [pc, #424]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00a      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022ea:	4b65      	ldr	r3, [pc, #404]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f8:	4961      	ldr	r1, [pc, #388]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00a      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800230c:	4b5c      	ldr	r3, [pc, #368]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800230e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002312:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231a:	4959      	ldr	r1, [pc, #356]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00a      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800232e:	4b54      	ldr	r3, [pc, #336]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002334:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233c:	4950      	ldr	r1, [pc, #320]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00a      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002350:	4b4b      	ldr	r3, [pc, #300]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002356:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800235e:	4948      	ldr	r1, [pc, #288]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00a      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002372:	4b43      	ldr	r3, [pc, #268]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002378:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002380:	493f      	ldr	r1, [pc, #252]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002382:	4313      	orrs	r3, r2
 8002384:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d028      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002394:	4b3a      	ldr	r3, [pc, #232]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800239a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023a2:	4937      	ldr	r1, [pc, #220]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023b2:	d106      	bne.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023b4:	4b32      	ldr	r3, [pc, #200]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4a31      	ldr	r2, [pc, #196]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023be:	60d3      	str	r3, [r2, #12]
 80023c0:	e011      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023ca:	d10c      	bne.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3304      	adds	r3, #4
 80023d0:	2101      	movs	r1, #1
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 f8a4 	bl	8002520 <RCCEx_PLLSAI1_Config>
 80023d8:	4603      	mov	r3, r0
 80023da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023dc:	7cfb      	ldrb	r3, [r7, #19]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80023e2:	7cfb      	ldrb	r3, [r7, #19]
 80023e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d028      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023f2:	4b23      	ldr	r3, [pc, #140]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002400:	491f      	ldr	r1, [pc, #124]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002402:	4313      	orrs	r3, r2
 8002404:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800240c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002410:	d106      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002412:	4b1b      	ldr	r3, [pc, #108]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	4a1a      	ldr	r2, [pc, #104]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002418:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800241c:	60d3      	str	r3, [r2, #12]
 800241e:	e011      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002424:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002428:	d10c      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3304      	adds	r3, #4
 800242e:	2101      	movs	r1, #1
 8002430:	4618      	mov	r0, r3
 8002432:	f000 f875 	bl	8002520 <RCCEx_PLLSAI1_Config>
 8002436:	4603      	mov	r3, r0
 8002438:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800243a:	7cfb      	ldrb	r3, [r7, #19]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002440:	7cfb      	ldrb	r3, [r7, #19]
 8002442:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d02b      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002450:	4b0b      	ldr	r3, [pc, #44]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002456:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800245e:	4908      	ldr	r1, [pc, #32]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800246a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800246e:	d109      	bne.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002470:	4b03      	ldr	r3, [pc, #12]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4a02      	ldr	r2, [pc, #8]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002476:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800247a:	60d3      	str	r3, [r2, #12]
 800247c:	e014      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002488:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800248c:	d10c      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3304      	adds	r3, #4
 8002492:	2101      	movs	r1, #1
 8002494:	4618      	mov	r0, r3
 8002496:	f000 f843 	bl	8002520 <RCCEx_PLLSAI1_Config>
 800249a:	4603      	mov	r3, r0
 800249c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800249e:	7cfb      	ldrb	r3, [r7, #19]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80024a4:	7cfb      	ldrb	r3, [r7, #19]
 80024a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d01c      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024b4:	4b19      	ldr	r3, [pc, #100]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c2:	4916      	ldr	r1, [pc, #88]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024d2:	d10c      	bne.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3304      	adds	r3, #4
 80024d8:	2102      	movs	r1, #2
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 f820 	bl	8002520 <RCCEx_PLLSAI1_Config>
 80024e0:	4603      	mov	r3, r0
 80024e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024e4:	7cfb      	ldrb	r3, [r7, #19]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80024ea:	7cfb      	ldrb	r3, [r7, #19]
 80024ec:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00a      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024fa:	4b08      	ldr	r3, [pc, #32]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002500:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002508:	4904      	ldr	r1, [pc, #16]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800250a:	4313      	orrs	r3, r2
 800250c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002510:	7cbb      	ldrb	r3, [r7, #18]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000

08002520 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800252e:	4b74      	ldr	r3, [pc, #464]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d018      	beq.n	800256c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800253a:	4b71      	ldr	r3, [pc, #452]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e0>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	f003 0203 	and.w	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d10d      	bne.n	8002566 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
       ||
 800254e:	2b00      	cmp	r3, #0
 8002550:	d009      	beq.n	8002566 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002552:	4b6b      	ldr	r3, [pc, #428]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	091b      	lsrs	r3, r3, #4
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
       ||
 8002562:	429a      	cmp	r2, r3
 8002564:	d047      	beq.n	80025f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	73fb      	strb	r3, [r7, #15]
 800256a:	e044      	b.n	80025f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b03      	cmp	r3, #3
 8002572:	d018      	beq.n	80025a6 <RCCEx_PLLSAI1_Config+0x86>
 8002574:	2b03      	cmp	r3, #3
 8002576:	d825      	bhi.n	80025c4 <RCCEx_PLLSAI1_Config+0xa4>
 8002578:	2b01      	cmp	r3, #1
 800257a:	d002      	beq.n	8002582 <RCCEx_PLLSAI1_Config+0x62>
 800257c:	2b02      	cmp	r3, #2
 800257e:	d009      	beq.n	8002594 <RCCEx_PLLSAI1_Config+0x74>
 8002580:	e020      	b.n	80025c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002582:	4b5f      	ldr	r3, [pc, #380]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d11d      	bne.n	80025ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002592:	e01a      	b.n	80025ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002594:	4b5a      	ldr	r3, [pc, #360]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800259c:	2b00      	cmp	r3, #0
 800259e:	d116      	bne.n	80025ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a4:	e013      	b.n	80025ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025a6:	4b56      	ldr	r3, [pc, #344]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10f      	bne.n	80025d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025b2:	4b53      	ldr	r3, [pc, #332]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d109      	bne.n	80025d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025c2:	e006      	b.n	80025d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
      break;
 80025c8:	e004      	b.n	80025d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025ca:	bf00      	nop
 80025cc:	e002      	b.n	80025d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025ce:	bf00      	nop
 80025d0:	e000      	b.n	80025d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10d      	bne.n	80025f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025da:	4b49      	ldr	r3, [pc, #292]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6819      	ldr	r1, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	430b      	orrs	r3, r1
 80025f0:	4943      	ldr	r1, [pc, #268]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d17c      	bne.n	80026f6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025fc:	4b40      	ldr	r3, [pc, #256]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a3f      	ldr	r2, [pc, #252]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002602:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002606:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002608:	f7fe fb52 	bl	8000cb0 <HAL_GetTick>
 800260c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800260e:	e009      	b.n	8002624 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002610:	f7fe fb4e 	bl	8000cb0 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d902      	bls.n	8002624 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	73fb      	strb	r3, [r7, #15]
        break;
 8002622:	e005      	b.n	8002630 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002624:	4b36      	ldr	r3, [pc, #216]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1ef      	bne.n	8002610 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002630:	7bfb      	ldrb	r3, [r7, #15]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d15f      	bne.n	80026f6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d110      	bne.n	800265e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800263c:	4b30      	ldr	r3, [pc, #192]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e0>)
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002644:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6892      	ldr	r2, [r2, #8]
 800264c:	0211      	lsls	r1, r2, #8
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68d2      	ldr	r2, [r2, #12]
 8002652:	06d2      	lsls	r2, r2, #27
 8002654:	430a      	orrs	r2, r1
 8002656:	492a      	ldr	r1, [pc, #168]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002658:	4313      	orrs	r3, r2
 800265a:	610b      	str	r3, [r1, #16]
 800265c:	e027      	b.n	80026ae <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d112      	bne.n	800268a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002664:	4b26      	ldr	r3, [pc, #152]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800266c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6892      	ldr	r2, [r2, #8]
 8002674:	0211      	lsls	r1, r2, #8
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6912      	ldr	r2, [r2, #16]
 800267a:	0852      	lsrs	r2, r2, #1
 800267c:	3a01      	subs	r2, #1
 800267e:	0552      	lsls	r2, r2, #21
 8002680:	430a      	orrs	r2, r1
 8002682:	491f      	ldr	r1, [pc, #124]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002684:	4313      	orrs	r3, r2
 8002686:	610b      	str	r3, [r1, #16]
 8002688:	e011      	b.n	80026ae <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800268a:	4b1d      	ldr	r3, [pc, #116]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e0>)
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002692:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6892      	ldr	r2, [r2, #8]
 800269a:	0211      	lsls	r1, r2, #8
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6952      	ldr	r2, [r2, #20]
 80026a0:	0852      	lsrs	r2, r2, #1
 80026a2:	3a01      	subs	r2, #1
 80026a4:	0652      	lsls	r2, r2, #25
 80026a6:	430a      	orrs	r2, r1
 80026a8:	4915      	ldr	r1, [pc, #84]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026ae:	4b14      	ldr	r3, [pc, #80]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a13      	ldr	r2, [pc, #76]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ba:	f7fe faf9 	bl	8000cb0 <HAL_GetTick>
 80026be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026c0:	e009      	b.n	80026d6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026c2:	f7fe faf5 	bl	8000cb0 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d902      	bls.n	80026d6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	73fb      	strb	r3, [r7, #15]
          break;
 80026d4:	e005      	b.n	80026e2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0ef      	beq.n	80026c2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d106      	bne.n	80026f6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026e8:	4b05      	ldr	r3, [pc, #20]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	4903      	ldr	r1, [pc, #12]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40021000 	.word	0x40021000

08002704 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e040      	b.n	8002798 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800271a:	2b00      	cmp	r3, #0
 800271c:	d106      	bne.n	800272c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7fe f906 	bl	8000938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2224      	movs	r2, #36	@ 0x24
 8002730:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0201 	bic.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 fe32 	bl	80033b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 fbd5 	bl	8002f00 <UART_SetConfig>
 8002756:	4603      	mov	r3, r0
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e01b      	b.n	8002798 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800276e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800277e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 feb1 	bl	80034f8 <UART_CheckIdleState>
 8002796:	4603      	mov	r3, r0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	@ 0x28
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	4613      	mov	r3, r2
 80027ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d177      	bne.n	80028a8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <HAL_UART_Transmit+0x24>
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e070      	b.n	80028aa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2221      	movs	r2, #33	@ 0x21
 80027d4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027d6:	f7fe fa6b 	bl	8000cb0 <HAL_GetTick>
 80027da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	88fa      	ldrh	r2, [r7, #6]
 80027e0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	88fa      	ldrh	r2, [r7, #6]
 80027e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027f4:	d108      	bne.n	8002808 <HAL_UART_Transmit+0x68>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d104      	bne.n	8002808 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	61bb      	str	r3, [r7, #24]
 8002806:	e003      	b.n	8002810 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800280c:	2300      	movs	r3, #0
 800280e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002810:	e02f      	b.n	8002872 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2200      	movs	r2, #0
 800281a:	2180      	movs	r1, #128	@ 0x80
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 ff13 	bl	8003648 <UART_WaitOnFlagUntilTimeout>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d004      	beq.n	8002832 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2220      	movs	r2, #32
 800282c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e03b      	b.n	80028aa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10b      	bne.n	8002850 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	881a      	ldrh	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002844:	b292      	uxth	r2, r2
 8002846:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	3302      	adds	r3, #2
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	e007      	b.n	8002860 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	781a      	ldrb	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3301      	adds	r3, #1
 800285e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002878:	b29b      	uxth	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1c9      	bne.n	8002812 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2200      	movs	r2, #0
 8002886:	2140      	movs	r1, #64	@ 0x40
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 fedd 	bl	8003648 <UART_WaitOnFlagUntilTimeout>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d004      	beq.n	800289e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2220      	movs	r2, #32
 8002898:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e005      	b.n	80028aa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2220      	movs	r2, #32
 80028a2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	e000      	b.n	80028aa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80028a8:	2302      	movs	r3, #2
  }
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3720      	adds	r7, #32
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b0ba      	sub	sp, #232	@ 0xe8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80028da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80028de:	f640 030f 	movw	r3, #2063	@ 0x80f
 80028e2:	4013      	ands	r3, r2
 80028e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80028e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d115      	bne.n	800291c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80028f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00f      	beq.n	800291c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80028fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002900:	f003 0320 	and.w	r3, r3, #32
 8002904:	2b00      	cmp	r3, #0
 8002906:	d009      	beq.n	800291c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 82ca 	beq.w	8002ea6 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	4798      	blx	r3
      }
      return;
 800291a:	e2c4      	b.n	8002ea6 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800291c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 8117 	beq.w	8002b54 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002932:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002936:	4b85      	ldr	r3, [pc, #532]	@ (8002b4c <HAL_UART_IRQHandler+0x298>)
 8002938:	4013      	ands	r3, r2
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 810a 	beq.w	8002b54 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	d011      	beq.n	8002970 <HAL_UART_IRQHandler+0xbc>
 800294c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00b      	beq.n	8002970 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2201      	movs	r2, #1
 800295e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002966:	f043 0201 	orr.w	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d011      	beq.n	80029a0 <HAL_UART_IRQHandler+0xec>
 800297c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00b      	beq.n	80029a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2202      	movs	r2, #2
 800298e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002996:	f043 0204 	orr.w	r2, r3, #4
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d011      	beq.n	80029d0 <HAL_UART_IRQHandler+0x11c>
 80029ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00b      	beq.n	80029d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2204      	movs	r2, #4
 80029be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029c6:	f043 0202 	orr.w	r2, r3, #2
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d017      	beq.n	8002a0c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80029dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029e0:	f003 0320 	and.w	r3, r3, #32
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d105      	bne.n	80029f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80029e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00b      	beq.n	8002a0c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2208      	movs	r2, #8
 80029fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a02:	f043 0208 	orr.w	r2, r3, #8
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d012      	beq.n	8002a3e <HAL_UART_IRQHandler+0x18a>
 8002a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00c      	beq.n	8002a3e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a34:	f043 0220 	orr.w	r2, r3, #32
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 8230 	beq.w	8002eaa <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a4e:	f003 0320 	and.w	r3, r3, #32
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00d      	beq.n	8002a72 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a5a:	f003 0320 	and.w	r3, r3, #32
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d007      	beq.n	8002a72 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a86:	2b40      	cmp	r3, #64	@ 0x40
 8002a88:	d005      	beq.n	8002a96 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a8e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d04f      	beq.n	8002b36 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 fe43 	bl	8003722 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa6:	2b40      	cmp	r3, #64	@ 0x40
 8002aa8:	d141      	bne.n	8002b2e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	3308      	adds	r3, #8
 8002ab0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ab8:	e853 3f00 	ldrex	r3, [r3]
 8002abc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002ac0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ac4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	3308      	adds	r3, #8
 8002ad2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002ad6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002ada:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ade:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002ae2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002ae6:	e841 2300 	strex	r3, r2, [r1]
 8002aea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002aee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1d9      	bne.n	8002aaa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d013      	beq.n	8002b26 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b02:	4a13      	ldr	r2, [pc, #76]	@ (8002b50 <HAL_UART_IRQHandler+0x29c>)
 8002b04:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe fa4f 	bl	8000fae <HAL_DMA_Abort_IT>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d017      	beq.n	8002b46 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002b20:	4610      	mov	r0, r2
 8002b22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b24:	e00f      	b.n	8002b46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f9d4 	bl	8002ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b2c:	e00b      	b.n	8002b46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f9d0 	bl	8002ed4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b34:	e007      	b.n	8002b46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f9cc 	bl	8002ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002b44:	e1b1      	b.n	8002eaa <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b46:	bf00      	nop
    return;
 8002b48:	e1af      	b.n	8002eaa <HAL_UART_IRQHandler+0x5f6>
 8002b4a:	bf00      	nop
 8002b4c:	04000120 	.word	0x04000120
 8002b50:	080037eb 	.word	0x080037eb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	f040 816a 	bne.w	8002e32 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 8163 	beq.w	8002e32 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 815c 	beq.w	8002e32 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2210      	movs	r2, #16
 8002b80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b8c:	2b40      	cmp	r3, #64	@ 0x40
 8002b8e:	f040 80d4 	bne.w	8002d3a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b9e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 80ad 	beq.w	8002d02 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002bae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	f080 80a5 	bcs.w	8002d02 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002bbe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f040 8086 	bne.w	8002ce0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002be0:	e853 3f00 	ldrex	r3, [r3]
 8002be4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002be8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002bec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c02:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c06:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002c0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c0e:	e841 2300 	strex	r3, r2, [r1]
 8002c12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002c16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1da      	bne.n	8002bd4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	3308      	adds	r3, #8
 8002c24:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c28:	e853 3f00 	ldrex	r3, [r3]
 8002c2c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002c2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c30:	f023 0301 	bic.w	r3, r3, #1
 8002c34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	3308      	adds	r3, #8
 8002c3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c42:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002c46:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c48:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002c4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002c4e:	e841 2300 	strex	r3, r2, [r1]
 8002c52:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002c54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1e1      	bne.n	8002c1e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	3308      	adds	r3, #8
 8002c60:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c64:	e853 3f00 	ldrex	r3, [r3]
 8002c68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002c6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	3308      	adds	r3, #8
 8002c7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002c7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c82:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002c84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002c86:	e841 2300 	strex	r3, r2, [r1]
 8002c8a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002c8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1e3      	bne.n	8002c5a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ca8:	e853 3f00 	ldrex	r3, [r3]
 8002cac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002cae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cb0:	f023 0310 	bic.w	r3, r3, #16
 8002cb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002cc4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002cc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002cca:	e841 2300 	strex	r3, r2, [r1]
 8002cce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002cd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1e4      	bne.n	8002ca0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fe f929 	bl	8000f32 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f8f4 	bl	8002ee8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002d00:	e0d5      	b.n	8002eae <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002d08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	f040 80ce 	bne.w	8002eae <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b20      	cmp	r3, #32
 8002d20:	f040 80c5 	bne.w	8002eae <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002d30:	4619      	mov	r1, r3
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f8d8 	bl	8002ee8 <HAL_UARTEx_RxEventCallback>
      return;
 8002d38:	e0b9      	b.n	8002eae <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 80ab 	beq.w	8002eb2 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8002d5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80a6 	beq.w	8002eb2 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d6e:	e853 3f00 	ldrex	r3, [r3]
 8002d72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002d88:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d90:	e841 2300 	strex	r3, r2, [r1]
 8002d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e4      	bne.n	8002d66 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3308      	adds	r3, #8
 8002da2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da6:	e853 3f00 	ldrex	r3, [r3]
 8002daa:	623b      	str	r3, [r7, #32]
   return(result);
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	f023 0301 	bic.w	r3, r3, #1
 8002db2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3308      	adds	r3, #8
 8002dbc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002dc0:	633a      	str	r2, [r7, #48]	@ 0x30
 8002dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002dc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dc8:	e841 2300 	strex	r3, r2, [r1]
 8002dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1e3      	bne.n	8002d9c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	e853 3f00 	ldrex	r3, [r3]
 8002df4:	60fb      	str	r3, [r7, #12]
   return(result);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f023 0310 	bic.w	r3, r3, #16
 8002dfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e0a:	61fb      	str	r3, [r7, #28]
 8002e0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0e:	69b9      	ldr	r1, [r7, #24]
 8002e10:	69fa      	ldr	r2, [r7, #28]
 8002e12:	e841 2300 	strex	r3, r2, [r1]
 8002e16:	617b      	str	r3, [r7, #20]
   return(result);
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1e4      	bne.n	8002de8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2202      	movs	r2, #2
 8002e22:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e28:	4619      	mov	r1, r3
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f85c 	bl	8002ee8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e30:	e03f      	b.n	8002eb2 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00e      	beq.n	8002e5c <HAL_UART_IRQHandler+0x5a8>
 8002e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d008      	beq.n	8002e5c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002e52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 fd08 	bl	800386a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e5a:	e02d      	b.n	8002eb8 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00e      	beq.n	8002e86 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d01c      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	4798      	blx	r3
    }
    return;
 8002e84:	e017      	b.n	8002eb6 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d012      	beq.n	8002eb8 <HAL_UART_IRQHandler+0x604>
 8002e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00c      	beq.n	8002eb8 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fcb9 	bl	8003816 <UART_EndTransmit_IT>
    return;
 8002ea4:	e008      	b.n	8002eb8 <HAL_UART_IRQHandler+0x604>
      return;
 8002ea6:	bf00      	nop
 8002ea8:	e006      	b.n	8002eb8 <HAL_UART_IRQHandler+0x604>
    return;
 8002eaa:	bf00      	nop
 8002eac:	e004      	b.n	8002eb8 <HAL_UART_IRQHandler+0x604>
      return;
 8002eae:	bf00      	nop
 8002eb0:	e002      	b.n	8002eb8 <HAL_UART_IRQHandler+0x604>
      return;
 8002eb2:	bf00      	nop
 8002eb4:	e000      	b.n	8002eb8 <HAL_UART_IRQHandler+0x604>
    return;
 8002eb6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002eb8:	37e8      	adds	r7, #232	@ 0xe8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop

08002ec0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f04:	b08a      	sub	sp, #40	@ 0x28
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	4b9e      	ldr	r3, [pc, #632]	@ (80031a8 <UART_SetConfig+0x2a8>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a93      	ldr	r2, [pc, #588]	@ (80031ac <UART_SetConfig+0x2ac>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d004      	beq.n	8002f6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a8a      	ldr	r2, [pc, #552]	@ (80031b0 <UART_SetConfig+0x2b0>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d126      	bne.n	8002fd8 <UART_SetConfig+0xd8>
 8002f8a:	4b8a      	ldr	r3, [pc, #552]	@ (80031b4 <UART_SetConfig+0x2b4>)
 8002f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d81b      	bhi.n	8002fd0 <UART_SetConfig+0xd0>
 8002f98:	a201      	add	r2, pc, #4	@ (adr r2, 8002fa0 <UART_SetConfig+0xa0>)
 8002f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9e:	bf00      	nop
 8002fa0:	08002fb1 	.word	0x08002fb1
 8002fa4:	08002fc1 	.word	0x08002fc1
 8002fa8:	08002fb9 	.word	0x08002fb9
 8002fac:	08002fc9 	.word	0x08002fc9
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fb6:	e0ab      	b.n	8003110 <UART_SetConfig+0x210>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fbe:	e0a7      	b.n	8003110 <UART_SetConfig+0x210>
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fc6:	e0a3      	b.n	8003110 <UART_SetConfig+0x210>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fce:	e09f      	b.n	8003110 <UART_SetConfig+0x210>
 8002fd0:	2310      	movs	r3, #16
 8002fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fd6:	e09b      	b.n	8003110 <UART_SetConfig+0x210>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a76      	ldr	r2, [pc, #472]	@ (80031b8 <UART_SetConfig+0x2b8>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d138      	bne.n	8003054 <UART_SetConfig+0x154>
 8002fe2:	4b74      	ldr	r3, [pc, #464]	@ (80031b4 <UART_SetConfig+0x2b4>)
 8002fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe8:	f003 030c 	and.w	r3, r3, #12
 8002fec:	2b0c      	cmp	r3, #12
 8002fee:	d82d      	bhi.n	800304c <UART_SetConfig+0x14c>
 8002ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ff8 <UART_SetConfig+0xf8>)
 8002ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff6:	bf00      	nop
 8002ff8:	0800302d 	.word	0x0800302d
 8002ffc:	0800304d 	.word	0x0800304d
 8003000:	0800304d 	.word	0x0800304d
 8003004:	0800304d 	.word	0x0800304d
 8003008:	0800303d 	.word	0x0800303d
 800300c:	0800304d 	.word	0x0800304d
 8003010:	0800304d 	.word	0x0800304d
 8003014:	0800304d 	.word	0x0800304d
 8003018:	08003035 	.word	0x08003035
 800301c:	0800304d 	.word	0x0800304d
 8003020:	0800304d 	.word	0x0800304d
 8003024:	0800304d 	.word	0x0800304d
 8003028:	08003045 	.word	0x08003045
 800302c:	2300      	movs	r3, #0
 800302e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003032:	e06d      	b.n	8003110 <UART_SetConfig+0x210>
 8003034:	2302      	movs	r3, #2
 8003036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800303a:	e069      	b.n	8003110 <UART_SetConfig+0x210>
 800303c:	2304      	movs	r3, #4
 800303e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003042:	e065      	b.n	8003110 <UART_SetConfig+0x210>
 8003044:	2308      	movs	r3, #8
 8003046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800304a:	e061      	b.n	8003110 <UART_SetConfig+0x210>
 800304c:	2310      	movs	r3, #16
 800304e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003052:	e05d      	b.n	8003110 <UART_SetConfig+0x210>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a58      	ldr	r2, [pc, #352]	@ (80031bc <UART_SetConfig+0x2bc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d125      	bne.n	80030aa <UART_SetConfig+0x1aa>
 800305e:	4b55      	ldr	r3, [pc, #340]	@ (80031b4 <UART_SetConfig+0x2b4>)
 8003060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003064:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003068:	2b30      	cmp	r3, #48	@ 0x30
 800306a:	d016      	beq.n	800309a <UART_SetConfig+0x19a>
 800306c:	2b30      	cmp	r3, #48	@ 0x30
 800306e:	d818      	bhi.n	80030a2 <UART_SetConfig+0x1a2>
 8003070:	2b20      	cmp	r3, #32
 8003072:	d00a      	beq.n	800308a <UART_SetConfig+0x18a>
 8003074:	2b20      	cmp	r3, #32
 8003076:	d814      	bhi.n	80030a2 <UART_SetConfig+0x1a2>
 8003078:	2b00      	cmp	r3, #0
 800307a:	d002      	beq.n	8003082 <UART_SetConfig+0x182>
 800307c:	2b10      	cmp	r3, #16
 800307e:	d008      	beq.n	8003092 <UART_SetConfig+0x192>
 8003080:	e00f      	b.n	80030a2 <UART_SetConfig+0x1a2>
 8003082:	2300      	movs	r3, #0
 8003084:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003088:	e042      	b.n	8003110 <UART_SetConfig+0x210>
 800308a:	2302      	movs	r3, #2
 800308c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003090:	e03e      	b.n	8003110 <UART_SetConfig+0x210>
 8003092:	2304      	movs	r3, #4
 8003094:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003098:	e03a      	b.n	8003110 <UART_SetConfig+0x210>
 800309a:	2308      	movs	r3, #8
 800309c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030a0:	e036      	b.n	8003110 <UART_SetConfig+0x210>
 80030a2:	2310      	movs	r3, #16
 80030a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030a8:	e032      	b.n	8003110 <UART_SetConfig+0x210>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a3f      	ldr	r2, [pc, #252]	@ (80031ac <UART_SetConfig+0x2ac>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d12a      	bne.n	800310a <UART_SetConfig+0x20a>
 80030b4:	4b3f      	ldr	r3, [pc, #252]	@ (80031b4 <UART_SetConfig+0x2b4>)
 80030b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ba:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80030be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030c2:	d01a      	beq.n	80030fa <UART_SetConfig+0x1fa>
 80030c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030c8:	d81b      	bhi.n	8003102 <UART_SetConfig+0x202>
 80030ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030ce:	d00c      	beq.n	80030ea <UART_SetConfig+0x1ea>
 80030d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030d4:	d815      	bhi.n	8003102 <UART_SetConfig+0x202>
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <UART_SetConfig+0x1e2>
 80030da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030de:	d008      	beq.n	80030f2 <UART_SetConfig+0x1f2>
 80030e0:	e00f      	b.n	8003102 <UART_SetConfig+0x202>
 80030e2:	2300      	movs	r3, #0
 80030e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030e8:	e012      	b.n	8003110 <UART_SetConfig+0x210>
 80030ea:	2302      	movs	r3, #2
 80030ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030f0:	e00e      	b.n	8003110 <UART_SetConfig+0x210>
 80030f2:	2304      	movs	r3, #4
 80030f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030f8:	e00a      	b.n	8003110 <UART_SetConfig+0x210>
 80030fa:	2308      	movs	r3, #8
 80030fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003100:	e006      	b.n	8003110 <UART_SetConfig+0x210>
 8003102:	2310      	movs	r3, #16
 8003104:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003108:	e002      	b.n	8003110 <UART_SetConfig+0x210>
 800310a:	2310      	movs	r3, #16
 800310c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a25      	ldr	r2, [pc, #148]	@ (80031ac <UART_SetConfig+0x2ac>)
 8003116:	4293      	cmp	r3, r2
 8003118:	f040 808a 	bne.w	8003230 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800311c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003120:	2b08      	cmp	r3, #8
 8003122:	d824      	bhi.n	800316e <UART_SetConfig+0x26e>
 8003124:	a201      	add	r2, pc, #4	@ (adr r2, 800312c <UART_SetConfig+0x22c>)
 8003126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312a:	bf00      	nop
 800312c:	08003151 	.word	0x08003151
 8003130:	0800316f 	.word	0x0800316f
 8003134:	08003159 	.word	0x08003159
 8003138:	0800316f 	.word	0x0800316f
 800313c:	0800315f 	.word	0x0800315f
 8003140:	0800316f 	.word	0x0800316f
 8003144:	0800316f 	.word	0x0800316f
 8003148:	0800316f 	.word	0x0800316f
 800314c:	08003167 	.word	0x08003167
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003150:	f7fe ff10 	bl	8001f74 <HAL_RCC_GetPCLK1Freq>
 8003154:	61f8      	str	r0, [r7, #28]
        break;
 8003156:	e010      	b.n	800317a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003158:	4b19      	ldr	r3, [pc, #100]	@ (80031c0 <UART_SetConfig+0x2c0>)
 800315a:	61fb      	str	r3, [r7, #28]
        break;
 800315c:	e00d      	b.n	800317a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800315e:	f7fe fe71 	bl	8001e44 <HAL_RCC_GetSysClockFreq>
 8003162:	61f8      	str	r0, [r7, #28]
        break;
 8003164:	e009      	b.n	800317a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003166:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800316a:	61fb      	str	r3, [r7, #28]
        break;
 800316c:	e005      	b.n	800317a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003178:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 8109 	beq.w	8003394 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	4413      	add	r3, r2
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	429a      	cmp	r2, r3
 8003190:	d305      	bcc.n	800319e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	429a      	cmp	r2, r3
 800319c:	d912      	bls.n	80031c4 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80031a4:	e0f6      	b.n	8003394 <UART_SetConfig+0x494>
 80031a6:	bf00      	nop
 80031a8:	efff69f3 	.word	0xefff69f3
 80031ac:	40008000 	.word	0x40008000
 80031b0:	40013800 	.word	0x40013800
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40004400 	.word	0x40004400
 80031bc:	40004800 	.word	0x40004800
 80031c0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	2200      	movs	r2, #0
 80031c8:	461c      	mov	r4, r3
 80031ca:	4615      	mov	r5, r2
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	022b      	lsls	r3, r5, #8
 80031d6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80031da:	0222      	lsls	r2, r4, #8
 80031dc:	68f9      	ldr	r1, [r7, #12]
 80031de:	6849      	ldr	r1, [r1, #4]
 80031e0:	0849      	lsrs	r1, r1, #1
 80031e2:	2000      	movs	r0, #0
 80031e4:	4688      	mov	r8, r1
 80031e6:	4681      	mov	r9, r0
 80031e8:	eb12 0a08 	adds.w	sl, r2, r8
 80031ec:	eb43 0b09 	adc.w	fp, r3, r9
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	603b      	str	r3, [r7, #0]
 80031f8:	607a      	str	r2, [r7, #4]
 80031fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031fe:	4650      	mov	r0, sl
 8003200:	4659      	mov	r1, fp
 8003202:	f7fd f83d 	bl	8000280 <__aeabi_uldivmod>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	4613      	mov	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003214:	d308      	bcc.n	8003228 <UART_SetConfig+0x328>
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800321c:	d204      	bcs.n	8003228 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	60da      	str	r2, [r3, #12]
 8003226:	e0b5      	b.n	8003394 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800322e:	e0b1      	b.n	8003394 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003238:	d15d      	bne.n	80032f6 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800323a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800323e:	2b08      	cmp	r3, #8
 8003240:	d827      	bhi.n	8003292 <UART_SetConfig+0x392>
 8003242:	a201      	add	r2, pc, #4	@ (adr r2, 8003248 <UART_SetConfig+0x348>)
 8003244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003248:	0800326d 	.word	0x0800326d
 800324c:	08003275 	.word	0x08003275
 8003250:	0800327d 	.word	0x0800327d
 8003254:	08003293 	.word	0x08003293
 8003258:	08003283 	.word	0x08003283
 800325c:	08003293 	.word	0x08003293
 8003260:	08003293 	.word	0x08003293
 8003264:	08003293 	.word	0x08003293
 8003268:	0800328b 	.word	0x0800328b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800326c:	f7fe fe82 	bl	8001f74 <HAL_RCC_GetPCLK1Freq>
 8003270:	61f8      	str	r0, [r7, #28]
        break;
 8003272:	e014      	b.n	800329e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003274:	f7fe fe94 	bl	8001fa0 <HAL_RCC_GetPCLK2Freq>
 8003278:	61f8      	str	r0, [r7, #28]
        break;
 800327a:	e010      	b.n	800329e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800327c:	4b4c      	ldr	r3, [pc, #304]	@ (80033b0 <UART_SetConfig+0x4b0>)
 800327e:	61fb      	str	r3, [r7, #28]
        break;
 8003280:	e00d      	b.n	800329e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003282:	f7fe fddf 	bl	8001e44 <HAL_RCC_GetSysClockFreq>
 8003286:	61f8      	str	r0, [r7, #28]
        break;
 8003288:	e009      	b.n	800329e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800328a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800328e:	61fb      	str	r3, [r7, #28]
        break;
 8003290:	e005      	b.n	800329e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800329c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d077      	beq.n	8003394 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	005a      	lsls	r2, r3, #1
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	085b      	lsrs	r3, r3, #1
 80032ae:	441a      	add	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	2b0f      	cmp	r3, #15
 80032be:	d916      	bls.n	80032ee <UART_SetConfig+0x3ee>
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032c6:	d212      	bcs.n	80032ee <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	f023 030f 	bic.w	r3, r3, #15
 80032d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	085b      	lsrs	r3, r3, #1
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	b29a      	uxth	r2, r3
 80032de:	8afb      	ldrh	r3, [r7, #22]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	8afa      	ldrh	r2, [r7, #22]
 80032ea:	60da      	str	r2, [r3, #12]
 80032ec:	e052      	b.n	8003394 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80032f4:	e04e      	b.n	8003394 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d827      	bhi.n	800334e <UART_SetConfig+0x44e>
 80032fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003304 <UART_SetConfig+0x404>)
 8003300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003304:	08003329 	.word	0x08003329
 8003308:	08003331 	.word	0x08003331
 800330c:	08003339 	.word	0x08003339
 8003310:	0800334f 	.word	0x0800334f
 8003314:	0800333f 	.word	0x0800333f
 8003318:	0800334f 	.word	0x0800334f
 800331c:	0800334f 	.word	0x0800334f
 8003320:	0800334f 	.word	0x0800334f
 8003324:	08003347 	.word	0x08003347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003328:	f7fe fe24 	bl	8001f74 <HAL_RCC_GetPCLK1Freq>
 800332c:	61f8      	str	r0, [r7, #28]
        break;
 800332e:	e014      	b.n	800335a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003330:	f7fe fe36 	bl	8001fa0 <HAL_RCC_GetPCLK2Freq>
 8003334:	61f8      	str	r0, [r7, #28]
        break;
 8003336:	e010      	b.n	800335a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003338:	4b1d      	ldr	r3, [pc, #116]	@ (80033b0 <UART_SetConfig+0x4b0>)
 800333a:	61fb      	str	r3, [r7, #28]
        break;
 800333c:	e00d      	b.n	800335a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800333e:	f7fe fd81 	bl	8001e44 <HAL_RCC_GetSysClockFreq>
 8003342:	61f8      	str	r0, [r7, #28]
        break;
 8003344:	e009      	b.n	800335a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800334a:	61fb      	str	r3, [r7, #28]
        break;
 800334c:	e005      	b.n	800335a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003358:	bf00      	nop
    }

    if (pclk != 0U)
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d019      	beq.n	8003394 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	085a      	lsrs	r2, r3, #1
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	441a      	add	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003372:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	2b0f      	cmp	r3, #15
 8003378:	d909      	bls.n	800338e <UART_SetConfig+0x48e>
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003380:	d205      	bcs.n	800338e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	b29a      	uxth	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60da      	str	r2, [r3, #12]
 800338c:	e002      	b.n	8003394 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80033a0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3728      	adds	r7, #40	@ 0x28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ae:	bf00      	nop
 80033b0:	00f42400 	.word	0x00f42400

080033b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00a      	beq.n	80033de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00a      	beq.n	8003422 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00a      	beq.n	8003466 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003490:	2b00      	cmp	r3, #0
 8003492:	d01a      	beq.n	80034ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034b2:	d10a      	bne.n	80034ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	605a      	str	r2, [r3, #4]
  }
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b098      	sub	sp, #96	@ 0x60
 80034fc:	af02      	add	r7, sp, #8
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003508:	f7fd fbd2 	bl	8000cb0 <HAL_GetTick>
 800350c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	2b08      	cmp	r3, #8
 800351a:	d12e      	bne.n	800357a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800351c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003524:	2200      	movs	r2, #0
 8003526:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f88c 	bl	8003648 <UART_WaitOnFlagUntilTimeout>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d021      	beq.n	800357a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800353e:	e853 3f00 	ldrex	r3, [r3]
 8003542:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003546:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800354a:	653b      	str	r3, [r7, #80]	@ 0x50
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003554:	647b      	str	r3, [r7, #68]	@ 0x44
 8003556:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003558:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800355a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800355c:	e841 2300 	strex	r3, r2, [r1]
 8003560:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1e6      	bne.n	8003536 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2220      	movs	r2, #32
 800356c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e062      	b.n	8003640 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b04      	cmp	r3, #4
 8003586:	d149      	bne.n	800361c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003588:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003590:	2200      	movs	r2, #0
 8003592:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f856 	bl	8003648 <UART_WaitOnFlagUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d03c      	beq.n	800361c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035aa:	e853 3f00 	ldrex	r3, [r3]
 80035ae:	623b      	str	r3, [r7, #32]
   return(result);
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	461a      	mov	r2, r3
 80035be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80035c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035c8:	e841 2300 	strex	r3, r2, [r1]
 80035cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80035ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1e6      	bne.n	80035a2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	3308      	adds	r3, #8
 80035da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	e853 3f00 	ldrex	r3, [r3]
 80035e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f023 0301 	bic.w	r3, r3, #1
 80035ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3308      	adds	r3, #8
 80035f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035f4:	61fa      	str	r2, [r7, #28]
 80035f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f8:	69b9      	ldr	r1, [r7, #24]
 80035fa:	69fa      	ldr	r2, [r7, #28]
 80035fc:	e841 2300 	strex	r3, r2, [r1]
 8003600:	617b      	str	r3, [r7, #20]
   return(result);
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1e5      	bne.n	80035d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e011      	b.n	8003640 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2220      	movs	r2, #32
 8003626:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3758      	adds	r7, #88	@ 0x58
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	603b      	str	r3, [r7, #0]
 8003654:	4613      	mov	r3, r2
 8003656:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003658:	e04f      	b.n	80036fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003660:	d04b      	beq.n	80036fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003662:	f7fd fb25 	bl	8000cb0 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	429a      	cmp	r2, r3
 8003670:	d302      	bcc.n	8003678 <UART_WaitOnFlagUntilTimeout+0x30>
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e04e      	b.n	800371a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b00      	cmp	r3, #0
 8003688:	d037      	beq.n	80036fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b80      	cmp	r3, #128	@ 0x80
 800368e:	d034      	beq.n	80036fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b40      	cmp	r3, #64	@ 0x40
 8003694:	d031      	beq.n	80036fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	2b08      	cmp	r3, #8
 80036a2:	d110      	bne.n	80036c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2208      	movs	r2, #8
 80036aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 f838 	bl	8003722 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2208      	movs	r2, #8
 80036b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e029      	b.n	800371a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036d4:	d111      	bne.n	80036fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 f81e 	bl	8003722 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e00f      	b.n	800371a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69da      	ldr	r2, [r3, #28]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4013      	ands	r3, r2
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	429a      	cmp	r2, r3
 8003708:	bf0c      	ite	eq
 800370a:	2301      	moveq	r3, #1
 800370c:	2300      	movne	r3, #0
 800370e:	b2db      	uxtb	r3, r3
 8003710:	461a      	mov	r2, r3
 8003712:	79fb      	ldrb	r3, [r7, #7]
 8003714:	429a      	cmp	r2, r3
 8003716:	d0a0      	beq.n	800365a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003722:	b480      	push	{r7}
 8003724:	b095      	sub	sp, #84	@ 0x54
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003732:	e853 3f00 	ldrex	r3, [r3]
 8003736:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800373e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003748:	643b      	str	r3, [r7, #64]	@ 0x40
 800374a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800374e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003750:	e841 2300 	strex	r3, r2, [r1]
 8003754:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1e6      	bne.n	800372a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3308      	adds	r3, #8
 8003762:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	e853 3f00 	ldrex	r3, [r3]
 800376a:	61fb      	str	r3, [r7, #28]
   return(result);
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f023 0301 	bic.w	r3, r3, #1
 8003772:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3308      	adds	r3, #8
 800377a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800377c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800377e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003780:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003782:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003784:	e841 2300 	strex	r3, r2, [r1]
 8003788:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1e5      	bne.n	800375c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003794:	2b01      	cmp	r3, #1
 8003796:	d118      	bne.n	80037ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	e853 3f00 	ldrex	r3, [r3]
 80037a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f023 0310 	bic.w	r3, r3, #16
 80037ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037b6:	61bb      	str	r3, [r7, #24]
 80037b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ba:	6979      	ldr	r1, [r7, #20]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	e841 2300 	strex	r3, r2, [r1]
 80037c2:	613b      	str	r3, [r7, #16]
   return(result);
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1e6      	bne.n	8003798 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80037de:	bf00      	nop
 80037e0:	3754      	adds	r7, #84	@ 0x54
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b084      	sub	sp, #16
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f7ff fb63 	bl	8002ed4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800380e:	bf00      	nop
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b088      	sub	sp, #32
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	e853 3f00 	ldrex	r3, [r3]
 800382a:	60bb      	str	r3, [r7, #8]
   return(result);
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003832:	61fb      	str	r3, [r7, #28]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	61bb      	str	r3, [r7, #24]
 800383e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003840:	6979      	ldr	r1, [r7, #20]
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	e841 2300 	strex	r3, r2, [r1]
 8003848:	613b      	str	r3, [r7, #16]
   return(result);
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1e6      	bne.n	800381e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2220      	movs	r2, #32
 8003854:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff fb2f 	bl	8002ec0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003862:	bf00      	nop
 8003864:	3720      	adds	r7, #32
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
	...

08003880 <siprintf>:
 8003880:	b40e      	push	{r1, r2, r3}
 8003882:	b510      	push	{r4, lr}
 8003884:	b09d      	sub	sp, #116	@ 0x74
 8003886:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003888:	9002      	str	r0, [sp, #8]
 800388a:	9006      	str	r0, [sp, #24]
 800388c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003890:	480a      	ldr	r0, [pc, #40]	@ (80038bc <siprintf+0x3c>)
 8003892:	9107      	str	r1, [sp, #28]
 8003894:	9104      	str	r1, [sp, #16]
 8003896:	490a      	ldr	r1, [pc, #40]	@ (80038c0 <siprintf+0x40>)
 8003898:	f853 2b04 	ldr.w	r2, [r3], #4
 800389c:	9105      	str	r1, [sp, #20]
 800389e:	2400      	movs	r4, #0
 80038a0:	a902      	add	r1, sp, #8
 80038a2:	6800      	ldr	r0, [r0, #0]
 80038a4:	9301      	str	r3, [sp, #4]
 80038a6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80038a8:	f000 f994 	bl	8003bd4 <_svfiprintf_r>
 80038ac:	9b02      	ldr	r3, [sp, #8]
 80038ae:	701c      	strb	r4, [r3, #0]
 80038b0:	b01d      	add	sp, #116	@ 0x74
 80038b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038b6:	b003      	add	sp, #12
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	20000044 	.word	0x20000044
 80038c0:	ffff0208 	.word	0xffff0208

080038c4 <memset>:
 80038c4:	4402      	add	r2, r0
 80038c6:	4603      	mov	r3, r0
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d100      	bne.n	80038ce <memset+0xa>
 80038cc:	4770      	bx	lr
 80038ce:	f803 1b01 	strb.w	r1, [r3], #1
 80038d2:	e7f9      	b.n	80038c8 <memset+0x4>

080038d4 <__errno>:
 80038d4:	4b01      	ldr	r3, [pc, #4]	@ (80038dc <__errno+0x8>)
 80038d6:	6818      	ldr	r0, [r3, #0]
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	20000044 	.word	0x20000044

080038e0 <__libc_init_array>:
 80038e0:	b570      	push	{r4, r5, r6, lr}
 80038e2:	4d0d      	ldr	r5, [pc, #52]	@ (8003918 <__libc_init_array+0x38>)
 80038e4:	4c0d      	ldr	r4, [pc, #52]	@ (800391c <__libc_init_array+0x3c>)
 80038e6:	1b64      	subs	r4, r4, r5
 80038e8:	10a4      	asrs	r4, r4, #2
 80038ea:	2600      	movs	r6, #0
 80038ec:	42a6      	cmp	r6, r4
 80038ee:	d109      	bne.n	8003904 <__libc_init_array+0x24>
 80038f0:	4d0b      	ldr	r5, [pc, #44]	@ (8003920 <__libc_init_array+0x40>)
 80038f2:	4c0c      	ldr	r4, [pc, #48]	@ (8003924 <__libc_init_array+0x44>)
 80038f4:	f000 fc64 	bl	80041c0 <_init>
 80038f8:	1b64      	subs	r4, r4, r5
 80038fa:	10a4      	asrs	r4, r4, #2
 80038fc:	2600      	movs	r6, #0
 80038fe:	42a6      	cmp	r6, r4
 8003900:	d105      	bne.n	800390e <__libc_init_array+0x2e>
 8003902:	bd70      	pop	{r4, r5, r6, pc}
 8003904:	f855 3b04 	ldr.w	r3, [r5], #4
 8003908:	4798      	blx	r3
 800390a:	3601      	adds	r6, #1
 800390c:	e7ee      	b.n	80038ec <__libc_init_array+0xc>
 800390e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003912:	4798      	blx	r3
 8003914:	3601      	adds	r6, #1
 8003916:	e7f2      	b.n	80038fe <__libc_init_array+0x1e>
 8003918:	08004310 	.word	0x08004310
 800391c:	08004310 	.word	0x08004310
 8003920:	08004310 	.word	0x08004310
 8003924:	08004314 	.word	0x08004314

08003928 <__retarget_lock_acquire_recursive>:
 8003928:	4770      	bx	lr

0800392a <__retarget_lock_release_recursive>:
 800392a:	4770      	bx	lr

0800392c <_free_r>:
 800392c:	b538      	push	{r3, r4, r5, lr}
 800392e:	4605      	mov	r5, r0
 8003930:	2900      	cmp	r1, #0
 8003932:	d041      	beq.n	80039b8 <_free_r+0x8c>
 8003934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003938:	1f0c      	subs	r4, r1, #4
 800393a:	2b00      	cmp	r3, #0
 800393c:	bfb8      	it	lt
 800393e:	18e4      	addlt	r4, r4, r3
 8003940:	f000 f8e0 	bl	8003b04 <__malloc_lock>
 8003944:	4a1d      	ldr	r2, [pc, #116]	@ (80039bc <_free_r+0x90>)
 8003946:	6813      	ldr	r3, [r2, #0]
 8003948:	b933      	cbnz	r3, 8003958 <_free_r+0x2c>
 800394a:	6063      	str	r3, [r4, #4]
 800394c:	6014      	str	r4, [r2, #0]
 800394e:	4628      	mov	r0, r5
 8003950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003954:	f000 b8dc 	b.w	8003b10 <__malloc_unlock>
 8003958:	42a3      	cmp	r3, r4
 800395a:	d908      	bls.n	800396e <_free_r+0x42>
 800395c:	6820      	ldr	r0, [r4, #0]
 800395e:	1821      	adds	r1, r4, r0
 8003960:	428b      	cmp	r3, r1
 8003962:	bf01      	itttt	eq
 8003964:	6819      	ldreq	r1, [r3, #0]
 8003966:	685b      	ldreq	r3, [r3, #4]
 8003968:	1809      	addeq	r1, r1, r0
 800396a:	6021      	streq	r1, [r4, #0]
 800396c:	e7ed      	b.n	800394a <_free_r+0x1e>
 800396e:	461a      	mov	r2, r3
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	b10b      	cbz	r3, 8003978 <_free_r+0x4c>
 8003974:	42a3      	cmp	r3, r4
 8003976:	d9fa      	bls.n	800396e <_free_r+0x42>
 8003978:	6811      	ldr	r1, [r2, #0]
 800397a:	1850      	adds	r0, r2, r1
 800397c:	42a0      	cmp	r0, r4
 800397e:	d10b      	bne.n	8003998 <_free_r+0x6c>
 8003980:	6820      	ldr	r0, [r4, #0]
 8003982:	4401      	add	r1, r0
 8003984:	1850      	adds	r0, r2, r1
 8003986:	4283      	cmp	r3, r0
 8003988:	6011      	str	r1, [r2, #0]
 800398a:	d1e0      	bne.n	800394e <_free_r+0x22>
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	6053      	str	r3, [r2, #4]
 8003992:	4408      	add	r0, r1
 8003994:	6010      	str	r0, [r2, #0]
 8003996:	e7da      	b.n	800394e <_free_r+0x22>
 8003998:	d902      	bls.n	80039a0 <_free_r+0x74>
 800399a:	230c      	movs	r3, #12
 800399c:	602b      	str	r3, [r5, #0]
 800399e:	e7d6      	b.n	800394e <_free_r+0x22>
 80039a0:	6820      	ldr	r0, [r4, #0]
 80039a2:	1821      	adds	r1, r4, r0
 80039a4:	428b      	cmp	r3, r1
 80039a6:	bf04      	itt	eq
 80039a8:	6819      	ldreq	r1, [r3, #0]
 80039aa:	685b      	ldreq	r3, [r3, #4]
 80039ac:	6063      	str	r3, [r4, #4]
 80039ae:	bf04      	itt	eq
 80039b0:	1809      	addeq	r1, r1, r0
 80039b2:	6021      	streq	r1, [r4, #0]
 80039b4:	6054      	str	r4, [r2, #4]
 80039b6:	e7ca      	b.n	800394e <_free_r+0x22>
 80039b8:	bd38      	pop	{r3, r4, r5, pc}
 80039ba:	bf00      	nop
 80039bc:	20000390 	.word	0x20000390

080039c0 <sbrk_aligned>:
 80039c0:	b570      	push	{r4, r5, r6, lr}
 80039c2:	4e0f      	ldr	r6, [pc, #60]	@ (8003a00 <sbrk_aligned+0x40>)
 80039c4:	460c      	mov	r4, r1
 80039c6:	6831      	ldr	r1, [r6, #0]
 80039c8:	4605      	mov	r5, r0
 80039ca:	b911      	cbnz	r1, 80039d2 <sbrk_aligned+0x12>
 80039cc:	f000 fba4 	bl	8004118 <_sbrk_r>
 80039d0:	6030      	str	r0, [r6, #0]
 80039d2:	4621      	mov	r1, r4
 80039d4:	4628      	mov	r0, r5
 80039d6:	f000 fb9f 	bl	8004118 <_sbrk_r>
 80039da:	1c43      	adds	r3, r0, #1
 80039dc:	d103      	bne.n	80039e6 <sbrk_aligned+0x26>
 80039de:	f04f 34ff 	mov.w	r4, #4294967295
 80039e2:	4620      	mov	r0, r4
 80039e4:	bd70      	pop	{r4, r5, r6, pc}
 80039e6:	1cc4      	adds	r4, r0, #3
 80039e8:	f024 0403 	bic.w	r4, r4, #3
 80039ec:	42a0      	cmp	r0, r4
 80039ee:	d0f8      	beq.n	80039e2 <sbrk_aligned+0x22>
 80039f0:	1a21      	subs	r1, r4, r0
 80039f2:	4628      	mov	r0, r5
 80039f4:	f000 fb90 	bl	8004118 <_sbrk_r>
 80039f8:	3001      	adds	r0, #1
 80039fa:	d1f2      	bne.n	80039e2 <sbrk_aligned+0x22>
 80039fc:	e7ef      	b.n	80039de <sbrk_aligned+0x1e>
 80039fe:	bf00      	nop
 8003a00:	2000038c 	.word	0x2000038c

08003a04 <_malloc_r>:
 8003a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a08:	1ccd      	adds	r5, r1, #3
 8003a0a:	f025 0503 	bic.w	r5, r5, #3
 8003a0e:	3508      	adds	r5, #8
 8003a10:	2d0c      	cmp	r5, #12
 8003a12:	bf38      	it	cc
 8003a14:	250c      	movcc	r5, #12
 8003a16:	2d00      	cmp	r5, #0
 8003a18:	4606      	mov	r6, r0
 8003a1a:	db01      	blt.n	8003a20 <_malloc_r+0x1c>
 8003a1c:	42a9      	cmp	r1, r5
 8003a1e:	d904      	bls.n	8003a2a <_malloc_r+0x26>
 8003a20:	230c      	movs	r3, #12
 8003a22:	6033      	str	r3, [r6, #0]
 8003a24:	2000      	movs	r0, #0
 8003a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b00 <_malloc_r+0xfc>
 8003a2e:	f000 f869 	bl	8003b04 <__malloc_lock>
 8003a32:	f8d8 3000 	ldr.w	r3, [r8]
 8003a36:	461c      	mov	r4, r3
 8003a38:	bb44      	cbnz	r4, 8003a8c <_malloc_r+0x88>
 8003a3a:	4629      	mov	r1, r5
 8003a3c:	4630      	mov	r0, r6
 8003a3e:	f7ff ffbf 	bl	80039c0 <sbrk_aligned>
 8003a42:	1c43      	adds	r3, r0, #1
 8003a44:	4604      	mov	r4, r0
 8003a46:	d158      	bne.n	8003afa <_malloc_r+0xf6>
 8003a48:	f8d8 4000 	ldr.w	r4, [r8]
 8003a4c:	4627      	mov	r7, r4
 8003a4e:	2f00      	cmp	r7, #0
 8003a50:	d143      	bne.n	8003ada <_malloc_r+0xd6>
 8003a52:	2c00      	cmp	r4, #0
 8003a54:	d04b      	beq.n	8003aee <_malloc_r+0xea>
 8003a56:	6823      	ldr	r3, [r4, #0]
 8003a58:	4639      	mov	r1, r7
 8003a5a:	4630      	mov	r0, r6
 8003a5c:	eb04 0903 	add.w	r9, r4, r3
 8003a60:	f000 fb5a 	bl	8004118 <_sbrk_r>
 8003a64:	4581      	cmp	r9, r0
 8003a66:	d142      	bne.n	8003aee <_malloc_r+0xea>
 8003a68:	6821      	ldr	r1, [r4, #0]
 8003a6a:	1a6d      	subs	r5, r5, r1
 8003a6c:	4629      	mov	r1, r5
 8003a6e:	4630      	mov	r0, r6
 8003a70:	f7ff ffa6 	bl	80039c0 <sbrk_aligned>
 8003a74:	3001      	adds	r0, #1
 8003a76:	d03a      	beq.n	8003aee <_malloc_r+0xea>
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	442b      	add	r3, r5
 8003a7c:	6023      	str	r3, [r4, #0]
 8003a7e:	f8d8 3000 	ldr.w	r3, [r8]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	bb62      	cbnz	r2, 8003ae0 <_malloc_r+0xdc>
 8003a86:	f8c8 7000 	str.w	r7, [r8]
 8003a8a:	e00f      	b.n	8003aac <_malloc_r+0xa8>
 8003a8c:	6822      	ldr	r2, [r4, #0]
 8003a8e:	1b52      	subs	r2, r2, r5
 8003a90:	d420      	bmi.n	8003ad4 <_malloc_r+0xd0>
 8003a92:	2a0b      	cmp	r2, #11
 8003a94:	d917      	bls.n	8003ac6 <_malloc_r+0xc2>
 8003a96:	1961      	adds	r1, r4, r5
 8003a98:	42a3      	cmp	r3, r4
 8003a9a:	6025      	str	r5, [r4, #0]
 8003a9c:	bf18      	it	ne
 8003a9e:	6059      	strne	r1, [r3, #4]
 8003aa0:	6863      	ldr	r3, [r4, #4]
 8003aa2:	bf08      	it	eq
 8003aa4:	f8c8 1000 	streq.w	r1, [r8]
 8003aa8:	5162      	str	r2, [r4, r5]
 8003aaa:	604b      	str	r3, [r1, #4]
 8003aac:	4630      	mov	r0, r6
 8003aae:	f000 f82f 	bl	8003b10 <__malloc_unlock>
 8003ab2:	f104 000b 	add.w	r0, r4, #11
 8003ab6:	1d23      	adds	r3, r4, #4
 8003ab8:	f020 0007 	bic.w	r0, r0, #7
 8003abc:	1ac2      	subs	r2, r0, r3
 8003abe:	bf1c      	itt	ne
 8003ac0:	1a1b      	subne	r3, r3, r0
 8003ac2:	50a3      	strne	r3, [r4, r2]
 8003ac4:	e7af      	b.n	8003a26 <_malloc_r+0x22>
 8003ac6:	6862      	ldr	r2, [r4, #4]
 8003ac8:	42a3      	cmp	r3, r4
 8003aca:	bf0c      	ite	eq
 8003acc:	f8c8 2000 	streq.w	r2, [r8]
 8003ad0:	605a      	strne	r2, [r3, #4]
 8003ad2:	e7eb      	b.n	8003aac <_malloc_r+0xa8>
 8003ad4:	4623      	mov	r3, r4
 8003ad6:	6864      	ldr	r4, [r4, #4]
 8003ad8:	e7ae      	b.n	8003a38 <_malloc_r+0x34>
 8003ada:	463c      	mov	r4, r7
 8003adc:	687f      	ldr	r7, [r7, #4]
 8003ade:	e7b6      	b.n	8003a4e <_malloc_r+0x4a>
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	42a3      	cmp	r3, r4
 8003ae6:	d1fb      	bne.n	8003ae0 <_malloc_r+0xdc>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	6053      	str	r3, [r2, #4]
 8003aec:	e7de      	b.n	8003aac <_malloc_r+0xa8>
 8003aee:	230c      	movs	r3, #12
 8003af0:	6033      	str	r3, [r6, #0]
 8003af2:	4630      	mov	r0, r6
 8003af4:	f000 f80c 	bl	8003b10 <__malloc_unlock>
 8003af8:	e794      	b.n	8003a24 <_malloc_r+0x20>
 8003afa:	6005      	str	r5, [r0, #0]
 8003afc:	e7d6      	b.n	8003aac <_malloc_r+0xa8>
 8003afe:	bf00      	nop
 8003b00:	20000390 	.word	0x20000390

08003b04 <__malloc_lock>:
 8003b04:	4801      	ldr	r0, [pc, #4]	@ (8003b0c <__malloc_lock+0x8>)
 8003b06:	f7ff bf0f 	b.w	8003928 <__retarget_lock_acquire_recursive>
 8003b0a:	bf00      	nop
 8003b0c:	20000388 	.word	0x20000388

08003b10 <__malloc_unlock>:
 8003b10:	4801      	ldr	r0, [pc, #4]	@ (8003b18 <__malloc_unlock+0x8>)
 8003b12:	f7ff bf0a 	b.w	800392a <__retarget_lock_release_recursive>
 8003b16:	bf00      	nop
 8003b18:	20000388 	.word	0x20000388

08003b1c <__ssputs_r>:
 8003b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b20:	688e      	ldr	r6, [r1, #8]
 8003b22:	461f      	mov	r7, r3
 8003b24:	42be      	cmp	r6, r7
 8003b26:	680b      	ldr	r3, [r1, #0]
 8003b28:	4682      	mov	sl, r0
 8003b2a:	460c      	mov	r4, r1
 8003b2c:	4690      	mov	r8, r2
 8003b2e:	d82d      	bhi.n	8003b8c <__ssputs_r+0x70>
 8003b30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003b38:	d026      	beq.n	8003b88 <__ssputs_r+0x6c>
 8003b3a:	6965      	ldr	r5, [r4, #20]
 8003b3c:	6909      	ldr	r1, [r1, #16]
 8003b3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b42:	eba3 0901 	sub.w	r9, r3, r1
 8003b46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b4a:	1c7b      	adds	r3, r7, #1
 8003b4c:	444b      	add	r3, r9
 8003b4e:	106d      	asrs	r5, r5, #1
 8003b50:	429d      	cmp	r5, r3
 8003b52:	bf38      	it	cc
 8003b54:	461d      	movcc	r5, r3
 8003b56:	0553      	lsls	r3, r2, #21
 8003b58:	d527      	bpl.n	8003baa <__ssputs_r+0x8e>
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	f7ff ff52 	bl	8003a04 <_malloc_r>
 8003b60:	4606      	mov	r6, r0
 8003b62:	b360      	cbz	r0, 8003bbe <__ssputs_r+0xa2>
 8003b64:	6921      	ldr	r1, [r4, #16]
 8003b66:	464a      	mov	r2, r9
 8003b68:	f000 fae6 	bl	8004138 <memcpy>
 8003b6c:	89a3      	ldrh	r3, [r4, #12]
 8003b6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b76:	81a3      	strh	r3, [r4, #12]
 8003b78:	6126      	str	r6, [r4, #16]
 8003b7a:	6165      	str	r5, [r4, #20]
 8003b7c:	444e      	add	r6, r9
 8003b7e:	eba5 0509 	sub.w	r5, r5, r9
 8003b82:	6026      	str	r6, [r4, #0]
 8003b84:	60a5      	str	r5, [r4, #8]
 8003b86:	463e      	mov	r6, r7
 8003b88:	42be      	cmp	r6, r7
 8003b8a:	d900      	bls.n	8003b8e <__ssputs_r+0x72>
 8003b8c:	463e      	mov	r6, r7
 8003b8e:	6820      	ldr	r0, [r4, #0]
 8003b90:	4632      	mov	r2, r6
 8003b92:	4641      	mov	r1, r8
 8003b94:	f000 faa6 	bl	80040e4 <memmove>
 8003b98:	68a3      	ldr	r3, [r4, #8]
 8003b9a:	1b9b      	subs	r3, r3, r6
 8003b9c:	60a3      	str	r3, [r4, #8]
 8003b9e:	6823      	ldr	r3, [r4, #0]
 8003ba0:	4433      	add	r3, r6
 8003ba2:	6023      	str	r3, [r4, #0]
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003baa:	462a      	mov	r2, r5
 8003bac:	f000 fad2 	bl	8004154 <_realloc_r>
 8003bb0:	4606      	mov	r6, r0
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d1e0      	bne.n	8003b78 <__ssputs_r+0x5c>
 8003bb6:	6921      	ldr	r1, [r4, #16]
 8003bb8:	4650      	mov	r0, sl
 8003bba:	f7ff feb7 	bl	800392c <_free_r>
 8003bbe:	230c      	movs	r3, #12
 8003bc0:	f8ca 3000 	str.w	r3, [sl]
 8003bc4:	89a3      	ldrh	r3, [r4, #12]
 8003bc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bca:	81a3      	strh	r3, [r4, #12]
 8003bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd0:	e7e9      	b.n	8003ba6 <__ssputs_r+0x8a>
	...

08003bd4 <_svfiprintf_r>:
 8003bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd8:	4698      	mov	r8, r3
 8003bda:	898b      	ldrh	r3, [r1, #12]
 8003bdc:	061b      	lsls	r3, r3, #24
 8003bde:	b09d      	sub	sp, #116	@ 0x74
 8003be0:	4607      	mov	r7, r0
 8003be2:	460d      	mov	r5, r1
 8003be4:	4614      	mov	r4, r2
 8003be6:	d510      	bpl.n	8003c0a <_svfiprintf_r+0x36>
 8003be8:	690b      	ldr	r3, [r1, #16]
 8003bea:	b973      	cbnz	r3, 8003c0a <_svfiprintf_r+0x36>
 8003bec:	2140      	movs	r1, #64	@ 0x40
 8003bee:	f7ff ff09 	bl	8003a04 <_malloc_r>
 8003bf2:	6028      	str	r0, [r5, #0]
 8003bf4:	6128      	str	r0, [r5, #16]
 8003bf6:	b930      	cbnz	r0, 8003c06 <_svfiprintf_r+0x32>
 8003bf8:	230c      	movs	r3, #12
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003c00:	b01d      	add	sp, #116	@ 0x74
 8003c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c06:	2340      	movs	r3, #64	@ 0x40
 8003c08:	616b      	str	r3, [r5, #20]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c0e:	2320      	movs	r3, #32
 8003c10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c14:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c18:	2330      	movs	r3, #48	@ 0x30
 8003c1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003db8 <_svfiprintf_r+0x1e4>
 8003c1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c22:	f04f 0901 	mov.w	r9, #1
 8003c26:	4623      	mov	r3, r4
 8003c28:	469a      	mov	sl, r3
 8003c2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c2e:	b10a      	cbz	r2, 8003c34 <_svfiprintf_r+0x60>
 8003c30:	2a25      	cmp	r2, #37	@ 0x25
 8003c32:	d1f9      	bne.n	8003c28 <_svfiprintf_r+0x54>
 8003c34:	ebba 0b04 	subs.w	fp, sl, r4
 8003c38:	d00b      	beq.n	8003c52 <_svfiprintf_r+0x7e>
 8003c3a:	465b      	mov	r3, fp
 8003c3c:	4622      	mov	r2, r4
 8003c3e:	4629      	mov	r1, r5
 8003c40:	4638      	mov	r0, r7
 8003c42:	f7ff ff6b 	bl	8003b1c <__ssputs_r>
 8003c46:	3001      	adds	r0, #1
 8003c48:	f000 80a7 	beq.w	8003d9a <_svfiprintf_r+0x1c6>
 8003c4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c4e:	445a      	add	r2, fp
 8003c50:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c52:	f89a 3000 	ldrb.w	r3, [sl]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 809f 	beq.w	8003d9a <_svfiprintf_r+0x1c6>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c66:	f10a 0a01 	add.w	sl, sl, #1
 8003c6a:	9304      	str	r3, [sp, #16]
 8003c6c:	9307      	str	r3, [sp, #28]
 8003c6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c72:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c74:	4654      	mov	r4, sl
 8003c76:	2205      	movs	r2, #5
 8003c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c7c:	484e      	ldr	r0, [pc, #312]	@ (8003db8 <_svfiprintf_r+0x1e4>)
 8003c7e:	f7fc faaf 	bl	80001e0 <memchr>
 8003c82:	9a04      	ldr	r2, [sp, #16]
 8003c84:	b9d8      	cbnz	r0, 8003cbe <_svfiprintf_r+0xea>
 8003c86:	06d0      	lsls	r0, r2, #27
 8003c88:	bf44      	itt	mi
 8003c8a:	2320      	movmi	r3, #32
 8003c8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c90:	0711      	lsls	r1, r2, #28
 8003c92:	bf44      	itt	mi
 8003c94:	232b      	movmi	r3, #43	@ 0x2b
 8003c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c9a:	f89a 3000 	ldrb.w	r3, [sl]
 8003c9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ca0:	d015      	beq.n	8003cce <_svfiprintf_r+0xfa>
 8003ca2:	9a07      	ldr	r2, [sp, #28]
 8003ca4:	4654      	mov	r4, sl
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	f04f 0c0a 	mov.w	ip, #10
 8003cac:	4621      	mov	r1, r4
 8003cae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cb2:	3b30      	subs	r3, #48	@ 0x30
 8003cb4:	2b09      	cmp	r3, #9
 8003cb6:	d94b      	bls.n	8003d50 <_svfiprintf_r+0x17c>
 8003cb8:	b1b0      	cbz	r0, 8003ce8 <_svfiprintf_r+0x114>
 8003cba:	9207      	str	r2, [sp, #28]
 8003cbc:	e014      	b.n	8003ce8 <_svfiprintf_r+0x114>
 8003cbe:	eba0 0308 	sub.w	r3, r0, r8
 8003cc2:	fa09 f303 	lsl.w	r3, r9, r3
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	9304      	str	r3, [sp, #16]
 8003cca:	46a2      	mov	sl, r4
 8003ccc:	e7d2      	b.n	8003c74 <_svfiprintf_r+0xa0>
 8003cce:	9b03      	ldr	r3, [sp, #12]
 8003cd0:	1d19      	adds	r1, r3, #4
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	9103      	str	r1, [sp, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	bfbb      	ittet	lt
 8003cda:	425b      	neglt	r3, r3
 8003cdc:	f042 0202 	orrlt.w	r2, r2, #2
 8003ce0:	9307      	strge	r3, [sp, #28]
 8003ce2:	9307      	strlt	r3, [sp, #28]
 8003ce4:	bfb8      	it	lt
 8003ce6:	9204      	strlt	r2, [sp, #16]
 8003ce8:	7823      	ldrb	r3, [r4, #0]
 8003cea:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cec:	d10a      	bne.n	8003d04 <_svfiprintf_r+0x130>
 8003cee:	7863      	ldrb	r3, [r4, #1]
 8003cf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cf2:	d132      	bne.n	8003d5a <_svfiprintf_r+0x186>
 8003cf4:	9b03      	ldr	r3, [sp, #12]
 8003cf6:	1d1a      	adds	r2, r3, #4
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	9203      	str	r2, [sp, #12]
 8003cfc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003d00:	3402      	adds	r4, #2
 8003d02:	9305      	str	r3, [sp, #20]
 8003d04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003dc8 <_svfiprintf_r+0x1f4>
 8003d08:	7821      	ldrb	r1, [r4, #0]
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	4650      	mov	r0, sl
 8003d0e:	f7fc fa67 	bl	80001e0 <memchr>
 8003d12:	b138      	cbz	r0, 8003d24 <_svfiprintf_r+0x150>
 8003d14:	9b04      	ldr	r3, [sp, #16]
 8003d16:	eba0 000a 	sub.w	r0, r0, sl
 8003d1a:	2240      	movs	r2, #64	@ 0x40
 8003d1c:	4082      	lsls	r2, r0
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	3401      	adds	r4, #1
 8003d22:	9304      	str	r3, [sp, #16]
 8003d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d28:	4824      	ldr	r0, [pc, #144]	@ (8003dbc <_svfiprintf_r+0x1e8>)
 8003d2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d2e:	2206      	movs	r2, #6
 8003d30:	f7fc fa56 	bl	80001e0 <memchr>
 8003d34:	2800      	cmp	r0, #0
 8003d36:	d036      	beq.n	8003da6 <_svfiprintf_r+0x1d2>
 8003d38:	4b21      	ldr	r3, [pc, #132]	@ (8003dc0 <_svfiprintf_r+0x1ec>)
 8003d3a:	bb1b      	cbnz	r3, 8003d84 <_svfiprintf_r+0x1b0>
 8003d3c:	9b03      	ldr	r3, [sp, #12]
 8003d3e:	3307      	adds	r3, #7
 8003d40:	f023 0307 	bic.w	r3, r3, #7
 8003d44:	3308      	adds	r3, #8
 8003d46:	9303      	str	r3, [sp, #12]
 8003d48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d4a:	4433      	add	r3, r6
 8003d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d4e:	e76a      	b.n	8003c26 <_svfiprintf_r+0x52>
 8003d50:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d54:	460c      	mov	r4, r1
 8003d56:	2001      	movs	r0, #1
 8003d58:	e7a8      	b.n	8003cac <_svfiprintf_r+0xd8>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	3401      	adds	r4, #1
 8003d5e:	9305      	str	r3, [sp, #20]
 8003d60:	4619      	mov	r1, r3
 8003d62:	f04f 0c0a 	mov.w	ip, #10
 8003d66:	4620      	mov	r0, r4
 8003d68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d6c:	3a30      	subs	r2, #48	@ 0x30
 8003d6e:	2a09      	cmp	r2, #9
 8003d70:	d903      	bls.n	8003d7a <_svfiprintf_r+0x1a6>
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0c6      	beq.n	8003d04 <_svfiprintf_r+0x130>
 8003d76:	9105      	str	r1, [sp, #20]
 8003d78:	e7c4      	b.n	8003d04 <_svfiprintf_r+0x130>
 8003d7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d7e:	4604      	mov	r4, r0
 8003d80:	2301      	movs	r3, #1
 8003d82:	e7f0      	b.n	8003d66 <_svfiprintf_r+0x192>
 8003d84:	ab03      	add	r3, sp, #12
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	462a      	mov	r2, r5
 8003d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8003dc4 <_svfiprintf_r+0x1f0>)
 8003d8c:	a904      	add	r1, sp, #16
 8003d8e:	4638      	mov	r0, r7
 8003d90:	f3af 8000 	nop.w
 8003d94:	1c42      	adds	r2, r0, #1
 8003d96:	4606      	mov	r6, r0
 8003d98:	d1d6      	bne.n	8003d48 <_svfiprintf_r+0x174>
 8003d9a:	89ab      	ldrh	r3, [r5, #12]
 8003d9c:	065b      	lsls	r3, r3, #25
 8003d9e:	f53f af2d 	bmi.w	8003bfc <_svfiprintf_r+0x28>
 8003da2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003da4:	e72c      	b.n	8003c00 <_svfiprintf_r+0x2c>
 8003da6:	ab03      	add	r3, sp, #12
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	462a      	mov	r2, r5
 8003dac:	4b05      	ldr	r3, [pc, #20]	@ (8003dc4 <_svfiprintf_r+0x1f0>)
 8003dae:	a904      	add	r1, sp, #16
 8003db0:	4638      	mov	r0, r7
 8003db2:	f000 f879 	bl	8003ea8 <_printf_i>
 8003db6:	e7ed      	b.n	8003d94 <_svfiprintf_r+0x1c0>
 8003db8:	080042d4 	.word	0x080042d4
 8003dbc:	080042de 	.word	0x080042de
 8003dc0:	00000000 	.word	0x00000000
 8003dc4:	08003b1d 	.word	0x08003b1d
 8003dc8:	080042da 	.word	0x080042da

08003dcc <_printf_common>:
 8003dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dd0:	4616      	mov	r6, r2
 8003dd2:	4698      	mov	r8, r3
 8003dd4:	688a      	ldr	r2, [r1, #8]
 8003dd6:	690b      	ldr	r3, [r1, #16]
 8003dd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	bfb8      	it	lt
 8003de0:	4613      	movlt	r3, r2
 8003de2:	6033      	str	r3, [r6, #0]
 8003de4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003de8:	4607      	mov	r7, r0
 8003dea:	460c      	mov	r4, r1
 8003dec:	b10a      	cbz	r2, 8003df2 <_printf_common+0x26>
 8003dee:	3301      	adds	r3, #1
 8003df0:	6033      	str	r3, [r6, #0]
 8003df2:	6823      	ldr	r3, [r4, #0]
 8003df4:	0699      	lsls	r1, r3, #26
 8003df6:	bf42      	ittt	mi
 8003df8:	6833      	ldrmi	r3, [r6, #0]
 8003dfa:	3302      	addmi	r3, #2
 8003dfc:	6033      	strmi	r3, [r6, #0]
 8003dfe:	6825      	ldr	r5, [r4, #0]
 8003e00:	f015 0506 	ands.w	r5, r5, #6
 8003e04:	d106      	bne.n	8003e14 <_printf_common+0x48>
 8003e06:	f104 0a19 	add.w	sl, r4, #25
 8003e0a:	68e3      	ldr	r3, [r4, #12]
 8003e0c:	6832      	ldr	r2, [r6, #0]
 8003e0e:	1a9b      	subs	r3, r3, r2
 8003e10:	42ab      	cmp	r3, r5
 8003e12:	dc26      	bgt.n	8003e62 <_printf_common+0x96>
 8003e14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e18:	6822      	ldr	r2, [r4, #0]
 8003e1a:	3b00      	subs	r3, #0
 8003e1c:	bf18      	it	ne
 8003e1e:	2301      	movne	r3, #1
 8003e20:	0692      	lsls	r2, r2, #26
 8003e22:	d42b      	bmi.n	8003e7c <_printf_common+0xb0>
 8003e24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e28:	4641      	mov	r1, r8
 8003e2a:	4638      	mov	r0, r7
 8003e2c:	47c8      	blx	r9
 8003e2e:	3001      	adds	r0, #1
 8003e30:	d01e      	beq.n	8003e70 <_printf_common+0xa4>
 8003e32:	6823      	ldr	r3, [r4, #0]
 8003e34:	6922      	ldr	r2, [r4, #16]
 8003e36:	f003 0306 	and.w	r3, r3, #6
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	bf02      	ittt	eq
 8003e3e:	68e5      	ldreq	r5, [r4, #12]
 8003e40:	6833      	ldreq	r3, [r6, #0]
 8003e42:	1aed      	subeq	r5, r5, r3
 8003e44:	68a3      	ldr	r3, [r4, #8]
 8003e46:	bf0c      	ite	eq
 8003e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e4c:	2500      	movne	r5, #0
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	bfc4      	itt	gt
 8003e52:	1a9b      	subgt	r3, r3, r2
 8003e54:	18ed      	addgt	r5, r5, r3
 8003e56:	2600      	movs	r6, #0
 8003e58:	341a      	adds	r4, #26
 8003e5a:	42b5      	cmp	r5, r6
 8003e5c:	d11a      	bne.n	8003e94 <_printf_common+0xc8>
 8003e5e:	2000      	movs	r0, #0
 8003e60:	e008      	b.n	8003e74 <_printf_common+0xa8>
 8003e62:	2301      	movs	r3, #1
 8003e64:	4652      	mov	r2, sl
 8003e66:	4641      	mov	r1, r8
 8003e68:	4638      	mov	r0, r7
 8003e6a:	47c8      	blx	r9
 8003e6c:	3001      	adds	r0, #1
 8003e6e:	d103      	bne.n	8003e78 <_printf_common+0xac>
 8003e70:	f04f 30ff 	mov.w	r0, #4294967295
 8003e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e78:	3501      	adds	r5, #1
 8003e7a:	e7c6      	b.n	8003e0a <_printf_common+0x3e>
 8003e7c:	18e1      	adds	r1, r4, r3
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	2030      	movs	r0, #48	@ 0x30
 8003e82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e86:	4422      	add	r2, r4
 8003e88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e90:	3302      	adds	r3, #2
 8003e92:	e7c7      	b.n	8003e24 <_printf_common+0x58>
 8003e94:	2301      	movs	r3, #1
 8003e96:	4622      	mov	r2, r4
 8003e98:	4641      	mov	r1, r8
 8003e9a:	4638      	mov	r0, r7
 8003e9c:	47c8      	blx	r9
 8003e9e:	3001      	adds	r0, #1
 8003ea0:	d0e6      	beq.n	8003e70 <_printf_common+0xa4>
 8003ea2:	3601      	adds	r6, #1
 8003ea4:	e7d9      	b.n	8003e5a <_printf_common+0x8e>
	...

08003ea8 <_printf_i>:
 8003ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003eac:	7e0f      	ldrb	r7, [r1, #24]
 8003eae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003eb0:	2f78      	cmp	r7, #120	@ 0x78
 8003eb2:	4691      	mov	r9, r2
 8003eb4:	4680      	mov	r8, r0
 8003eb6:	460c      	mov	r4, r1
 8003eb8:	469a      	mov	sl, r3
 8003eba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ebe:	d807      	bhi.n	8003ed0 <_printf_i+0x28>
 8003ec0:	2f62      	cmp	r7, #98	@ 0x62
 8003ec2:	d80a      	bhi.n	8003eda <_printf_i+0x32>
 8003ec4:	2f00      	cmp	r7, #0
 8003ec6:	f000 80d1 	beq.w	800406c <_printf_i+0x1c4>
 8003eca:	2f58      	cmp	r7, #88	@ 0x58
 8003ecc:	f000 80b8 	beq.w	8004040 <_printf_i+0x198>
 8003ed0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ed4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ed8:	e03a      	b.n	8003f50 <_printf_i+0xa8>
 8003eda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ede:	2b15      	cmp	r3, #21
 8003ee0:	d8f6      	bhi.n	8003ed0 <_printf_i+0x28>
 8003ee2:	a101      	add	r1, pc, #4	@ (adr r1, 8003ee8 <_printf_i+0x40>)
 8003ee4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ee8:	08003f41 	.word	0x08003f41
 8003eec:	08003f55 	.word	0x08003f55
 8003ef0:	08003ed1 	.word	0x08003ed1
 8003ef4:	08003ed1 	.word	0x08003ed1
 8003ef8:	08003ed1 	.word	0x08003ed1
 8003efc:	08003ed1 	.word	0x08003ed1
 8003f00:	08003f55 	.word	0x08003f55
 8003f04:	08003ed1 	.word	0x08003ed1
 8003f08:	08003ed1 	.word	0x08003ed1
 8003f0c:	08003ed1 	.word	0x08003ed1
 8003f10:	08003ed1 	.word	0x08003ed1
 8003f14:	08004053 	.word	0x08004053
 8003f18:	08003f7f 	.word	0x08003f7f
 8003f1c:	0800400d 	.word	0x0800400d
 8003f20:	08003ed1 	.word	0x08003ed1
 8003f24:	08003ed1 	.word	0x08003ed1
 8003f28:	08004075 	.word	0x08004075
 8003f2c:	08003ed1 	.word	0x08003ed1
 8003f30:	08003f7f 	.word	0x08003f7f
 8003f34:	08003ed1 	.word	0x08003ed1
 8003f38:	08003ed1 	.word	0x08003ed1
 8003f3c:	08004015 	.word	0x08004015
 8003f40:	6833      	ldr	r3, [r6, #0]
 8003f42:	1d1a      	adds	r2, r3, #4
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6032      	str	r2, [r6, #0]
 8003f48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f50:	2301      	movs	r3, #1
 8003f52:	e09c      	b.n	800408e <_printf_i+0x1e6>
 8003f54:	6833      	ldr	r3, [r6, #0]
 8003f56:	6820      	ldr	r0, [r4, #0]
 8003f58:	1d19      	adds	r1, r3, #4
 8003f5a:	6031      	str	r1, [r6, #0]
 8003f5c:	0606      	lsls	r6, r0, #24
 8003f5e:	d501      	bpl.n	8003f64 <_printf_i+0xbc>
 8003f60:	681d      	ldr	r5, [r3, #0]
 8003f62:	e003      	b.n	8003f6c <_printf_i+0xc4>
 8003f64:	0645      	lsls	r5, r0, #25
 8003f66:	d5fb      	bpl.n	8003f60 <_printf_i+0xb8>
 8003f68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f6c:	2d00      	cmp	r5, #0
 8003f6e:	da03      	bge.n	8003f78 <_printf_i+0xd0>
 8003f70:	232d      	movs	r3, #45	@ 0x2d
 8003f72:	426d      	negs	r5, r5
 8003f74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f78:	4858      	ldr	r0, [pc, #352]	@ (80040dc <_printf_i+0x234>)
 8003f7a:	230a      	movs	r3, #10
 8003f7c:	e011      	b.n	8003fa2 <_printf_i+0xfa>
 8003f7e:	6821      	ldr	r1, [r4, #0]
 8003f80:	6833      	ldr	r3, [r6, #0]
 8003f82:	0608      	lsls	r0, r1, #24
 8003f84:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f88:	d402      	bmi.n	8003f90 <_printf_i+0xe8>
 8003f8a:	0649      	lsls	r1, r1, #25
 8003f8c:	bf48      	it	mi
 8003f8e:	b2ad      	uxthmi	r5, r5
 8003f90:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f92:	4852      	ldr	r0, [pc, #328]	@ (80040dc <_printf_i+0x234>)
 8003f94:	6033      	str	r3, [r6, #0]
 8003f96:	bf14      	ite	ne
 8003f98:	230a      	movne	r3, #10
 8003f9a:	2308      	moveq	r3, #8
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003fa2:	6866      	ldr	r6, [r4, #4]
 8003fa4:	60a6      	str	r6, [r4, #8]
 8003fa6:	2e00      	cmp	r6, #0
 8003fa8:	db05      	blt.n	8003fb6 <_printf_i+0x10e>
 8003faa:	6821      	ldr	r1, [r4, #0]
 8003fac:	432e      	orrs	r6, r5
 8003fae:	f021 0104 	bic.w	r1, r1, #4
 8003fb2:	6021      	str	r1, [r4, #0]
 8003fb4:	d04b      	beq.n	800404e <_printf_i+0x1a6>
 8003fb6:	4616      	mov	r6, r2
 8003fb8:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fbc:	fb03 5711 	mls	r7, r3, r1, r5
 8003fc0:	5dc7      	ldrb	r7, [r0, r7]
 8003fc2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fc6:	462f      	mov	r7, r5
 8003fc8:	42bb      	cmp	r3, r7
 8003fca:	460d      	mov	r5, r1
 8003fcc:	d9f4      	bls.n	8003fb8 <_printf_i+0x110>
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d10b      	bne.n	8003fea <_printf_i+0x142>
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	07df      	lsls	r7, r3, #31
 8003fd6:	d508      	bpl.n	8003fea <_printf_i+0x142>
 8003fd8:	6923      	ldr	r3, [r4, #16]
 8003fda:	6861      	ldr	r1, [r4, #4]
 8003fdc:	4299      	cmp	r1, r3
 8003fde:	bfde      	ittt	le
 8003fe0:	2330      	movle	r3, #48	@ 0x30
 8003fe2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fe6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fea:	1b92      	subs	r2, r2, r6
 8003fec:	6122      	str	r2, [r4, #16]
 8003fee:	f8cd a000 	str.w	sl, [sp]
 8003ff2:	464b      	mov	r3, r9
 8003ff4:	aa03      	add	r2, sp, #12
 8003ff6:	4621      	mov	r1, r4
 8003ff8:	4640      	mov	r0, r8
 8003ffa:	f7ff fee7 	bl	8003dcc <_printf_common>
 8003ffe:	3001      	adds	r0, #1
 8004000:	d14a      	bne.n	8004098 <_printf_i+0x1f0>
 8004002:	f04f 30ff 	mov.w	r0, #4294967295
 8004006:	b004      	add	sp, #16
 8004008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	f043 0320 	orr.w	r3, r3, #32
 8004012:	6023      	str	r3, [r4, #0]
 8004014:	4832      	ldr	r0, [pc, #200]	@ (80040e0 <_printf_i+0x238>)
 8004016:	2778      	movs	r7, #120	@ 0x78
 8004018:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800401c:	6823      	ldr	r3, [r4, #0]
 800401e:	6831      	ldr	r1, [r6, #0]
 8004020:	061f      	lsls	r7, r3, #24
 8004022:	f851 5b04 	ldr.w	r5, [r1], #4
 8004026:	d402      	bmi.n	800402e <_printf_i+0x186>
 8004028:	065f      	lsls	r7, r3, #25
 800402a:	bf48      	it	mi
 800402c:	b2ad      	uxthmi	r5, r5
 800402e:	6031      	str	r1, [r6, #0]
 8004030:	07d9      	lsls	r1, r3, #31
 8004032:	bf44      	itt	mi
 8004034:	f043 0320 	orrmi.w	r3, r3, #32
 8004038:	6023      	strmi	r3, [r4, #0]
 800403a:	b11d      	cbz	r5, 8004044 <_printf_i+0x19c>
 800403c:	2310      	movs	r3, #16
 800403e:	e7ad      	b.n	8003f9c <_printf_i+0xf4>
 8004040:	4826      	ldr	r0, [pc, #152]	@ (80040dc <_printf_i+0x234>)
 8004042:	e7e9      	b.n	8004018 <_printf_i+0x170>
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	f023 0320 	bic.w	r3, r3, #32
 800404a:	6023      	str	r3, [r4, #0]
 800404c:	e7f6      	b.n	800403c <_printf_i+0x194>
 800404e:	4616      	mov	r6, r2
 8004050:	e7bd      	b.n	8003fce <_printf_i+0x126>
 8004052:	6833      	ldr	r3, [r6, #0]
 8004054:	6825      	ldr	r5, [r4, #0]
 8004056:	6961      	ldr	r1, [r4, #20]
 8004058:	1d18      	adds	r0, r3, #4
 800405a:	6030      	str	r0, [r6, #0]
 800405c:	062e      	lsls	r6, r5, #24
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	d501      	bpl.n	8004066 <_printf_i+0x1be>
 8004062:	6019      	str	r1, [r3, #0]
 8004064:	e002      	b.n	800406c <_printf_i+0x1c4>
 8004066:	0668      	lsls	r0, r5, #25
 8004068:	d5fb      	bpl.n	8004062 <_printf_i+0x1ba>
 800406a:	8019      	strh	r1, [r3, #0]
 800406c:	2300      	movs	r3, #0
 800406e:	6123      	str	r3, [r4, #16]
 8004070:	4616      	mov	r6, r2
 8004072:	e7bc      	b.n	8003fee <_printf_i+0x146>
 8004074:	6833      	ldr	r3, [r6, #0]
 8004076:	1d1a      	adds	r2, r3, #4
 8004078:	6032      	str	r2, [r6, #0]
 800407a:	681e      	ldr	r6, [r3, #0]
 800407c:	6862      	ldr	r2, [r4, #4]
 800407e:	2100      	movs	r1, #0
 8004080:	4630      	mov	r0, r6
 8004082:	f7fc f8ad 	bl	80001e0 <memchr>
 8004086:	b108      	cbz	r0, 800408c <_printf_i+0x1e4>
 8004088:	1b80      	subs	r0, r0, r6
 800408a:	6060      	str	r0, [r4, #4]
 800408c:	6863      	ldr	r3, [r4, #4]
 800408e:	6123      	str	r3, [r4, #16]
 8004090:	2300      	movs	r3, #0
 8004092:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004096:	e7aa      	b.n	8003fee <_printf_i+0x146>
 8004098:	6923      	ldr	r3, [r4, #16]
 800409a:	4632      	mov	r2, r6
 800409c:	4649      	mov	r1, r9
 800409e:	4640      	mov	r0, r8
 80040a0:	47d0      	blx	sl
 80040a2:	3001      	adds	r0, #1
 80040a4:	d0ad      	beq.n	8004002 <_printf_i+0x15a>
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	079b      	lsls	r3, r3, #30
 80040aa:	d413      	bmi.n	80040d4 <_printf_i+0x22c>
 80040ac:	68e0      	ldr	r0, [r4, #12]
 80040ae:	9b03      	ldr	r3, [sp, #12]
 80040b0:	4298      	cmp	r0, r3
 80040b2:	bfb8      	it	lt
 80040b4:	4618      	movlt	r0, r3
 80040b6:	e7a6      	b.n	8004006 <_printf_i+0x15e>
 80040b8:	2301      	movs	r3, #1
 80040ba:	4632      	mov	r2, r6
 80040bc:	4649      	mov	r1, r9
 80040be:	4640      	mov	r0, r8
 80040c0:	47d0      	blx	sl
 80040c2:	3001      	adds	r0, #1
 80040c4:	d09d      	beq.n	8004002 <_printf_i+0x15a>
 80040c6:	3501      	adds	r5, #1
 80040c8:	68e3      	ldr	r3, [r4, #12]
 80040ca:	9903      	ldr	r1, [sp, #12]
 80040cc:	1a5b      	subs	r3, r3, r1
 80040ce:	42ab      	cmp	r3, r5
 80040d0:	dcf2      	bgt.n	80040b8 <_printf_i+0x210>
 80040d2:	e7eb      	b.n	80040ac <_printf_i+0x204>
 80040d4:	2500      	movs	r5, #0
 80040d6:	f104 0619 	add.w	r6, r4, #25
 80040da:	e7f5      	b.n	80040c8 <_printf_i+0x220>
 80040dc:	080042e5 	.word	0x080042e5
 80040e0:	080042f6 	.word	0x080042f6

080040e4 <memmove>:
 80040e4:	4288      	cmp	r0, r1
 80040e6:	b510      	push	{r4, lr}
 80040e8:	eb01 0402 	add.w	r4, r1, r2
 80040ec:	d902      	bls.n	80040f4 <memmove+0x10>
 80040ee:	4284      	cmp	r4, r0
 80040f0:	4623      	mov	r3, r4
 80040f2:	d807      	bhi.n	8004104 <memmove+0x20>
 80040f4:	1e43      	subs	r3, r0, #1
 80040f6:	42a1      	cmp	r1, r4
 80040f8:	d008      	beq.n	800410c <memmove+0x28>
 80040fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004102:	e7f8      	b.n	80040f6 <memmove+0x12>
 8004104:	4402      	add	r2, r0
 8004106:	4601      	mov	r1, r0
 8004108:	428a      	cmp	r2, r1
 800410a:	d100      	bne.n	800410e <memmove+0x2a>
 800410c:	bd10      	pop	{r4, pc}
 800410e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004112:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004116:	e7f7      	b.n	8004108 <memmove+0x24>

08004118 <_sbrk_r>:
 8004118:	b538      	push	{r3, r4, r5, lr}
 800411a:	4d06      	ldr	r5, [pc, #24]	@ (8004134 <_sbrk_r+0x1c>)
 800411c:	2300      	movs	r3, #0
 800411e:	4604      	mov	r4, r0
 8004120:	4608      	mov	r0, r1
 8004122:	602b      	str	r3, [r5, #0]
 8004124:	f7fc fcea 	bl	8000afc <_sbrk>
 8004128:	1c43      	adds	r3, r0, #1
 800412a:	d102      	bne.n	8004132 <_sbrk_r+0x1a>
 800412c:	682b      	ldr	r3, [r5, #0]
 800412e:	b103      	cbz	r3, 8004132 <_sbrk_r+0x1a>
 8004130:	6023      	str	r3, [r4, #0]
 8004132:	bd38      	pop	{r3, r4, r5, pc}
 8004134:	20000384 	.word	0x20000384

08004138 <memcpy>:
 8004138:	440a      	add	r2, r1
 800413a:	4291      	cmp	r1, r2
 800413c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004140:	d100      	bne.n	8004144 <memcpy+0xc>
 8004142:	4770      	bx	lr
 8004144:	b510      	push	{r4, lr}
 8004146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800414a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800414e:	4291      	cmp	r1, r2
 8004150:	d1f9      	bne.n	8004146 <memcpy+0xe>
 8004152:	bd10      	pop	{r4, pc}

08004154 <_realloc_r>:
 8004154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004158:	4607      	mov	r7, r0
 800415a:	4614      	mov	r4, r2
 800415c:	460d      	mov	r5, r1
 800415e:	b921      	cbnz	r1, 800416a <_realloc_r+0x16>
 8004160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004164:	4611      	mov	r1, r2
 8004166:	f7ff bc4d 	b.w	8003a04 <_malloc_r>
 800416a:	b92a      	cbnz	r2, 8004178 <_realloc_r+0x24>
 800416c:	f7ff fbde 	bl	800392c <_free_r>
 8004170:	4625      	mov	r5, r4
 8004172:	4628      	mov	r0, r5
 8004174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004178:	f000 f81a 	bl	80041b0 <_malloc_usable_size_r>
 800417c:	4284      	cmp	r4, r0
 800417e:	4606      	mov	r6, r0
 8004180:	d802      	bhi.n	8004188 <_realloc_r+0x34>
 8004182:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004186:	d8f4      	bhi.n	8004172 <_realloc_r+0x1e>
 8004188:	4621      	mov	r1, r4
 800418a:	4638      	mov	r0, r7
 800418c:	f7ff fc3a 	bl	8003a04 <_malloc_r>
 8004190:	4680      	mov	r8, r0
 8004192:	b908      	cbnz	r0, 8004198 <_realloc_r+0x44>
 8004194:	4645      	mov	r5, r8
 8004196:	e7ec      	b.n	8004172 <_realloc_r+0x1e>
 8004198:	42b4      	cmp	r4, r6
 800419a:	4622      	mov	r2, r4
 800419c:	4629      	mov	r1, r5
 800419e:	bf28      	it	cs
 80041a0:	4632      	movcs	r2, r6
 80041a2:	f7ff ffc9 	bl	8004138 <memcpy>
 80041a6:	4629      	mov	r1, r5
 80041a8:	4638      	mov	r0, r7
 80041aa:	f7ff fbbf 	bl	800392c <_free_r>
 80041ae:	e7f1      	b.n	8004194 <_realloc_r+0x40>

080041b0 <_malloc_usable_size_r>:
 80041b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041b4:	1f18      	subs	r0, r3, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bfbc      	itt	lt
 80041ba:	580b      	ldrlt	r3, [r1, r0]
 80041bc:	18c0      	addlt	r0, r0, r3
 80041be:	4770      	bx	lr

080041c0 <_init>:
 80041c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c2:	bf00      	nop
 80041c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041c6:	bc08      	pop	{r3}
 80041c8:	469e      	mov	lr, r3
 80041ca:	4770      	bx	lr

080041cc <_fini>:
 80041cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ce:	bf00      	nop
 80041d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d2:	bc08      	pop	{r3}
 80041d4:	469e      	mov	lr, r3
 80041d6:	4770      	bx	lr
