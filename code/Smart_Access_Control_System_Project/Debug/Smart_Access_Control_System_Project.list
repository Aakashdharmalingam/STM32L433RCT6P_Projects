
Smart_Access_Control_System_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a57c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c3c  0800a710  0800a710  0000b710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b34c  0800b34c  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b34c  0800b34c  0000c34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b354  0800b354  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b354  0800b354  0000c354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b358  0800b358  0000c358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b35c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  200001d4  0800b530  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  0800b530  0000d5d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d14  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029af  00000000  00000000  00023f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001658  00000000  00000000  000268c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000118f  00000000  00000000  00027f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f08  00000000  00000000  000290af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019777  00000000  00000000  0004efb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ecfc0  00000000  00000000  0006872e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001556ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000730c  00000000  00000000  00155734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0015ca40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a6f4 	.word	0x0800a6f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800a6f4 	.word	0x0800a6f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <max_write>:
char count2[50];
#define NUM_DEV 4
uint8_t bufferCol[NUM_DEV*8];

void max_write (int row, uint8_t data)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	70fb      	strb	r3, [r7, #3]
	int devTarget = (row - 1) / 8;  // find out which is the actual max, where we need to write the data
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	da00      	bge.n	8000f8a <max_write+0x16>
 8000f88:	3307      	adds	r3, #7
 8000f8a:	10db      	asrs	r3, r3, #3
 8000f8c:	613b      	str	r3, [r7, #16]
	int offset = devTarget * 8;  // The offset of the start byte for the devTarget in the buffer
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	60fb      	str	r3, [r7, #12]
	uint16_t writeData = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	817b      	strh	r3, [r7, #10]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);  // Select the slave
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2140      	movs	r1, #64	@ 0x40
 8000f9c:	481b      	ldr	r0, [pc, #108]	@ (800100c <max_write+0x98>)
 8000f9e:	f002 fc2d 	bl	80037fc <HAL_GPIO_WritePin>
	for (int dev = 0; dev < NUM_DEV; dev++)   // for loop for all the max connected
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	e025      	b.n	8000ff4 <max_write+0x80>
	{
		if (dev == devTarget)  // if this the target
 8000fa8:	697a      	ldr	r2, [r7, #20]
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d114      	bne.n	8000fda <max_write+0x66>
		{
			writeData = ((row - offset)<<8)|data;  // send the column number and the data byte
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	b21a      	sxth	r2, r3
 8000fbc:	78fb      	ldrb	r3, [r7, #3]
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	817b      	strh	r3, [r7, #10]
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&writeData, 1, 1000);
 8000fc8:	f107 010a 	add.w	r1, r7, #10
 8000fcc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	480f      	ldr	r0, [pc, #60]	@ (8001010 <max_write+0x9c>)
 8000fd4:	f004 fce1 	bl	800599a <HAL_SPI_Transmit>
 8000fd8:	e009      	b.n	8000fee <max_write+0x7a>
		}
		else
		{
			writeData = 0;  // else send NOOP
 8000fda:	2300      	movs	r3, #0
 8000fdc:	817b      	strh	r3, [r7, #10]
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&writeData, 1, 1000);
 8000fde:	f107 010a 	add.w	r1, r7, #10
 8000fe2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4809      	ldr	r0, [pc, #36]	@ (8001010 <max_write+0x9c>)
 8000fea:	f004 fcd6 	bl	800599a <HAL_SPI_Transmit>
	for (int dev = 0; dev < NUM_DEV; dev++)   // for loop for all the max connected
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	ddd6      	ble.n	8000fa8 <max_write+0x34>
		}
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);  // disable the slave
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	2140      	movs	r1, #64	@ 0x40
 8000ffe:	4803      	ldr	r0, [pc, #12]	@ (800100c <max_write+0x98>)
 8001000:	f002 fbfc 	bl	80037fc <HAL_GPIO_WritePin>
}
 8001004:	bf00      	nop
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	48000800 	.word	0x48000800
 8001010:	200002a8 	.word	0x200002a8

08001014 <flushBuffer>:

void flushBuffer (void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08c      	sub	sp, #48	@ 0x30
 8001018:	af00      	add	r7, sp, #0
	uint8_t bufferRow[NUM_DEV*8] = {0};  // buffer to store data column wise
 800101a:	463b      	mov	r3, r7
 800101c:	2220      	movs	r2, #32
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f007 f89a 	bl	800815a <memset>

	/* Convert Cols to Rows */
	for (int i=0; i<NUM_DEV*8; i++)  // for loop for all the bytes
 8001026:	2300      	movs	r3, #0
 8001028:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800102a:	e03b      	b.n	80010a4 <flushBuffer+0x90>
	{
		int dev = i/8;  // 0,1,2,3..  // keep track of which max is being written
 800102c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800102e:	2b00      	cmp	r3, #0
 8001030:	da00      	bge.n	8001034 <flushBuffer+0x20>
 8001032:	3307      	adds	r3, #7
 8001034:	10db      	asrs	r3, r3, #3
 8001036:	623b      	str	r3, [r7, #32]
		for (int j=0; j<8; j++)  // for loop to extract bits
 8001038:	2300      	movs	r3, #0
 800103a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800103c:	e02c      	b.n	8001098 <flushBuffer+0x84>
		{
			if ((bufferCol[i])&(1<<(j)))  // if the bit is 1 // start extracting from the 0th bit of C0
 800103e:	4a27      	ldr	r2, [pc, #156]	@ (80010dc <flushBuffer+0xc8>)
 8001040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001042:	4413      	add	r3, r2
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800104a:	fa42 f303 	asr.w	r3, r2, r3
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d01d      	beq.n	8001092 <flushBuffer+0x7e>
			{
				bufferRow[j+(8*dev)] |= (1<<(7-(i-(8*dev))));  // start writing it from the 7th bit of R0
 8001056:	6a3b      	ldr	r3, [r7, #32]
 8001058:	00da      	lsls	r2, r3, #3
 800105a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800105c:	4413      	add	r3, r2
 800105e:	3330      	adds	r3, #48	@ 0x30
 8001060:	443b      	add	r3, r7
 8001062:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001066:	b25a      	sxtb	r2, r3
 8001068:	6a3b      	ldr	r3, [r7, #32]
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800106e:	1acb      	subs	r3, r1, r3
 8001070:	f1c3 0307 	rsb	r3, r3, #7
 8001074:	2101      	movs	r1, #1
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	b25b      	sxtb	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b259      	sxtb	r1, r3
 8001080:	6a3b      	ldr	r3, [r7, #32]
 8001082:	00da      	lsls	r2, r3, #3
 8001084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001086:	4413      	add	r3, r2
 8001088:	b2ca      	uxtb	r2, r1
 800108a:	3330      	adds	r3, #48	@ 0x30
 800108c:	443b      	add	r3, r7
 800108e:	f803 2c30 	strb.w	r2, [r3, #-48]
		for (int j=0; j<8; j++)  // for loop to extract bits
 8001092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001094:	3301      	adds	r3, #1
 8001096:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800109a:	2b07      	cmp	r3, #7
 800109c:	ddcf      	ble.n	800103e <flushBuffer+0x2a>
	for (int i=0; i<NUM_DEV*8; i++)  // for loop for all the bytes
 800109e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010a0:	3301      	adds	r3, #1
 80010a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010a6:	2b1f      	cmp	r3, #31
 80010a8:	ddc0      	ble.n	800102c <flushBuffer+0x18>
			}
		}
	}


	for (int row=1; row<=(NUM_DEV*8); row++)  // write the column data into the columns
 80010aa:	2301      	movs	r3, #1
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80010ae:	e00c      	b.n	80010ca <flushBuffer+0xb6>
	{
		max_write(row, bufferRow[row-1]);
 80010b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b2:	3b01      	subs	r3, #1
 80010b4:	3330      	adds	r3, #48	@ 0x30
 80010b6:	443b      	add	r3, r7
 80010b8:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80010bc:	4619      	mov	r1, r3
 80010be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80010c0:	f7ff ff58 	bl	8000f74 <max_write>
	for (int row=1; row<=(NUM_DEV*8); row++)  // write the column data into the columns
 80010c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c6:	3301      	adds	r3, #1
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80010ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010cc:	2b20      	cmp	r3, #32
 80010ce:	ddef      	ble.n	80010b0 <flushBuffer+0x9c>
	}
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3730      	adds	r7, #48	@ 0x30
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2000045c 	.word	0x2000045c

080010e0 <max7219_cmd>:

void max7219_cmd (uint8_t Addr, uint8_t data)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	460a      	mov	r2, r1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	4613      	mov	r3, r2
 80010ee:	71bb      	strb	r3, [r7, #6]

	uint16_t writeData = (Addr<<8)|data;
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	79bb      	ldrb	r3, [r7, #6]
 80010fa:	b21b      	sxth	r3, r3
 80010fc:	4313      	orrs	r3, r2
 80010fe:	b21b      	sxth	r3, r3
 8001100:	b29b      	uxth	r3, r3
 8001102:	817b      	strh	r3, [r7, #10]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 8001104:	2200      	movs	r2, #0
 8001106:	2140      	movs	r1, #64	@ 0x40
 8001108:	480d      	ldr	r0, [pc, #52]	@ (8001140 <max7219_cmd+0x60>)
 800110a:	f002 fb77 	bl	80037fc <HAL_GPIO_WritePin>
	for(int i=0 ;i<NUM_DEV ;i++)
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	e009      	b.n	8001128 <max7219_cmd+0x48>
	{
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&writeData, 1, 100);
 8001114:	f107 010a 	add.w	r1, r7, #10
 8001118:	2364      	movs	r3, #100	@ 0x64
 800111a:	2201      	movs	r2, #1
 800111c:	4809      	ldr	r0, [pc, #36]	@ (8001144 <max7219_cmd+0x64>)
 800111e:	f004 fc3c 	bl	800599a <HAL_SPI_Transmit>
	for(int i=0 ;i<NUM_DEV ;i++)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	3301      	adds	r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2b03      	cmp	r3, #3
 800112c:	ddf2      	ble.n	8001114 <max7219_cmd+0x34>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 800112e:	2201      	movs	r2, #1
 8001130:	2140      	movs	r1, #64	@ 0x40
 8001132:	4803      	ldr	r0, [pc, #12]	@ (8001140 <max7219_cmd+0x60>)
 8001134:	f002 fb62 	bl	80037fc <HAL_GPIO_WritePin>
}
 8001138:	bf00      	nop
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	48000800 	.word	0x48000800
 8001144:	200002a8 	.word	0x200002a8

08001148 <matrixInit>:

void matrixInit (void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	max7219_cmd(0x09, 0);  // no decoding
 800114c:	2100      	movs	r1, #0
 800114e:	2009      	movs	r0, #9
 8001150:	f7ff ffc6 	bl	80010e0 <max7219_cmd>
	max7219_cmd(0x0a, 0x01);  // 3/32 intensity
 8001154:	2101      	movs	r1, #1
 8001156:	200a      	movs	r0, #10
 8001158:	f7ff ffc2 	bl	80010e0 <max7219_cmd>
	max7219_cmd(0x0B, 0x07);  // scan all 7 columns
 800115c:	2107      	movs	r1, #7
 800115e:	200b      	movs	r0, #11
 8001160:	f7ff ffbe 	bl	80010e0 <max7219_cmd>
	max7219_cmd(0x0C, 0x01);  // normal operation
 8001164:	2101      	movs	r1, #1
 8001166:	200c      	movs	r0, #12
 8001168:	f7ff ffba 	bl	80010e0 <max7219_cmd>
	max7219_cmd(0x0F, 0);     // No display test
 800116c:	2100      	movs	r1, #0
 800116e:	200f      	movs	r0, #15
 8001170:	f7ff ffb6 	bl	80010e0 <max7219_cmd>
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}

08001178 <clearDisplay>:

void clearDisplay (void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_DEV*8-1; i++)
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	e007      	b.n	8001194 <clearDisplay+0x1c>
	{
		bufferCol[i] = 0;
 8001184:	4a08      	ldr	r2, [pc, #32]	@ (80011a8 <clearDisplay+0x30>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<NUM_DEV*8-1; i++)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3301      	adds	r3, #1
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b1e      	cmp	r3, #30
 8001198:	ddf4      	ble.n	8001184 <clearDisplay+0xc>
	}
	flushBuffer();
 800119a:	f7ff ff3b 	bl	8001014 <flushBuffer>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000045c 	.word	0x2000045c

080011ac <shiftLeft>:
void shiftLeft (void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
	for (int cnt=NUM_DEV*8-2; cnt>=0; cnt--)
 80011b2:	231e      	movs	r3, #30
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	e00a      	b.n	80011ce <shiftLeft+0x22>
	{
		bufferCol[cnt+1] = bufferCol[cnt];
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3301      	adds	r3, #1
 80011bc:	490a      	ldr	r1, [pc, #40]	@ (80011e8 <shiftLeft+0x3c>)
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	440a      	add	r2, r1
 80011c2:	7811      	ldrb	r1, [r2, #0]
 80011c4:	4a08      	ldr	r2, [pc, #32]	@ (80011e8 <shiftLeft+0x3c>)
 80011c6:	54d1      	strb	r1, [r2, r3]
	for (int cnt=NUM_DEV*8-2; cnt>=0; cnt--)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	daf1      	bge.n	80011b8 <shiftLeft+0xc>
	}
	bufferCol[0] = 0;
 80011d4:	4b04      	ldr	r3, [pc, #16]	@ (80011e8 <shiftLeft+0x3c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]
	flushBuffer();
 80011da:	f7ff ff1b 	bl	8001014 <flushBuffer>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	2000045c 	.word	0x2000045c

080011ec <shiftchar>:
void shiftchar (uint8_t ch, int delay)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	71fb      	strb	r3, [r7, #7]
	int indx=0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
	for (int i=0; i<FONT_WIDTH-1; i++)  // loop for all the bytes of the font
 80011fc:	2300      	movs	r3, #0
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	e036      	b.n	8001270 <shiftchar+0x84>
	{
		uint8_t data = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	73fb      	strb	r3, [r7, #15]
/* Chnage the order of the bits */
		for (int j=7; j>=0; j--)  // extract bits from a single byte
 8001206:	2307      	movs	r3, #7
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	e01d      	b.n	8001248 <shiftchar+0x5c>
		{
			if ((MAX7219_Dot_Matrix_font[ch][indx])&(1<<j))  // if the bit is 1 // start extracting from the 7th bit of byte
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	4a1c      	ldr	r2, [pc, #112]	@ (8001280 <shiftchar+0x94>)
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	441a      	add	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	4413      	add	r3, r2
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	fa42 f303 	asr.w	r3, r2, r3
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00b      	beq.n	8001242 <shiftchar+0x56>
			{
				data |= (1<<(7-j));  // start writing it from the 0th bit of data
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	f1c3 0307 	rsb	r3, r3, #7
 8001230:	2201      	movs	r2, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	b25a      	sxtb	r2, r3
 8001238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123c:	4313      	orrs	r3, r2
 800123e:	b25b      	sxtb	r3, r3
 8001240:	73fb      	strb	r3, [r7, #15]
		for (int j=7; j>=0; j--)  // extract bits from a single byte
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	3b01      	subs	r3, #1
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	2b00      	cmp	r3, #0
 800124c:	dade      	bge.n	800120c <shiftchar+0x20>
			}
		}
		bufferCol[0] = data;  // store the modified byte to the first element only. It will shift later
 800124e:	4a0d      	ldr	r2, [pc, #52]	@ (8001284 <shiftchar+0x98>)
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	7013      	strb	r3, [r2, #0]
		flushBuffer();
 8001254:	f7ff fede 	bl	8001014 <flushBuffer>
		shiftLeft();
 8001258:	f7ff ffa8 	bl	80011ac <shiftLeft>
		indx++;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	3301      	adds	r3, #1
 8001260:	617b      	str	r3, [r7, #20]
		HAL_Delay(delay);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f000 ffa7 	bl	80021b8 <HAL_Delay>
	for (int i=0; i<FONT_WIDTH-1; i++)  // loop for all the bytes of the font
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	3301      	adds	r3, #1
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	2b06      	cmp	r3, #6
 8001274:	ddc5      	ble.n	8001202 <shiftchar+0x16>
	}
}
 8001276:	bf00      	nop
 8001278:	bf00      	nop
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	0800a78c 	.word	0x0800a78c
 8001284:	2000045c 	.word	0x2000045c

08001288 <scrollString>:
void scrollString (char *str, int delay)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
	while (*str)
 8001292:	e008      	b.n	80012a6 <scrollString+0x1e>
	{
		shiftchar(*str, delay);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	6839      	ldr	r1, [r7, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff ffa6 	bl	80011ec <shiftchar>
		*str++;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3301      	adds	r3, #1
 80012a4:	607b      	str	r3, [r7, #4]
	while (*str)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1f2      	bne.n	8001294 <scrollString+0xc>
	}
}
 80012ae:	bf00      	nop
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012be:	f000 ff06 	bl	80020ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c2:	f000 f97b 	bl	80015bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c6:	f000 fb61 	bl	800198c <MX_GPIO_Init>
  MX_SPI1_Init();
 80012ca:	f000 fa61 	bl	8001790 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80012ce:	f000 fb2d 	bl	800192c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80012d2:	f000 f9b9 	bl	8001648 <MX_ADC1_Init>
  MX_I2C1_Init();
 80012d6:	f000 fa1b 	bl	8001710 <MX_I2C1_Init>
  MX_TIM1_Init();
 80012da:	f000 fa97 	bl	800180c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  matrixInit();
 80012de:	f7ff ff33 	bl	8001148 <matrixInit>
  clearDisplay();
 80012e2:	f7ff ff49 	bl	8001178 <clearDisplay>
  HAL_I2C_Init(&hi2c1);
 80012e6:	48a0      	ldr	r0, [pc, #640]	@ (8001568 <main+0x2b0>)
 80012e8:	f002 fab8 	bl	800385c <HAL_I2C_Init>
  HAL_TIM_PWM_Init(&htim1);
 80012ec:	489f      	ldr	r0, [pc, #636]	@ (800156c <main+0x2b4>)
 80012ee:	f004 fe2f 	bl	8005f50 <HAL_TIM_PWM_Init>
  TIM1->CCR1 =400;
 80012f2:	4b9f      	ldr	r3, [pc, #636]	@ (8001570 <main+0x2b8>)
 80012f4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80012f8:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80012fa:	2100      	movs	r1, #0
 80012fc:	489b      	ldr	r0, [pc, #620]	@ (800156c <main+0x2b4>)
 80012fe:	f004 fe7f 	bl	8006000 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if( flag) // IR Value =1
 8001302:	4b9c      	ldr	r3, [pc, #624]	@ (8001574 <main+0x2bc>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 80ec 	beq.w	80014e4 <main+0x22c>
	  {
		  flag =0;// clear flag
 800130c:	4b99      	ldr	r3, [pc, #612]	@ (8001574 <main+0x2bc>)
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
		  clearDisplay(); // clear display
 8001312:	f7ff ff31 	bl	8001178 <clearDisplay>
		  HAL_ADC_Start(&hadc1);
 8001316:	4898      	ldr	r0, [pc, #608]	@ (8001578 <main+0x2c0>)
 8001318:	f001 fa7c 	bl	8002814 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 20);
 800131c:	2114      	movs	r1, #20
 800131e:	4896      	ldr	r0, [pc, #600]	@ (8001578 <main+0x2c0>)
 8001320:	f001 fadb 	bl	80028da <HAL_ADC_PollForConversion>
		  data = HAL_ADC_GetValue(&hadc1);
 8001324:	4894      	ldr	r0, [pc, #592]	@ (8001578 <main+0x2c0>)
 8001326:	f001 fb67 	bl	80029f8 <HAL_ADC_GetValue>
 800132a:	ee07 0a90 	vmov	s15, r0
 800132e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001332:	4b92      	ldr	r3, [pc, #584]	@ (800157c <main+0x2c4>)
 8001334:	edc3 7a00 	vstr	s15, [r3]
		  R = (4095.0 / data - 1.0) * 10000.0;
 8001338:	4b90      	ldr	r3, [pc, #576]	@ (800157c <main+0x2c4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f903 	bl	8000548 <__aeabi_f2d>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	a17e      	add	r1, pc, #504	@ (adr r1, 8001540 <main+0x288>)
 8001348:	e9d1 0100 	ldrd	r0, r1, [r1]
 800134c:	f7ff fa7e 	bl	800084c <__aeabi_ddiv>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	4b88      	ldr	r3, [pc, #544]	@ (8001580 <main+0x2c8>)
 800135e:	f7fe ff93 	bl	8000288 <__aeabi_dsub>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	a377      	add	r3, pc, #476	@ (adr r3, 8001548 <main+0x290>)
 800136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001370:	f7ff f942 	bl	80005f8 <__aeabi_dmul>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	f7ff fc14 	bl	8000ba8 <__aeabi_d2f>
 8001380:	4603      	mov	r3, r0
 8001382:	4a80      	ldr	r2, [pc, #512]	@ (8001584 <main+0x2cc>)
 8001384:	6013      	str	r3, [r2, #0]
		  temperature = 1.0 / (log(R / 10000.0) / 3950.0 + 1.0 / (273.15 + 25.0)) - 273.15;
 8001386:	4b7f      	ldr	r3, [pc, #508]	@ (8001584 <main+0x2cc>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff f8dc 	bl	8000548 <__aeabi_f2d>
 8001390:	a36d      	add	r3, pc, #436	@ (adr r3, 8001548 <main+0x290>)
 8001392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001396:	f7ff fa59 	bl	800084c <__aeabi_ddiv>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	ec43 2b17 	vmov	d7, r2, r3
 80013a2:	eeb0 0a47 	vmov.f32	s0, s14
 80013a6:	eef0 0a67 	vmov.f32	s1, s15
 80013aa:	f008 ffa5 	bl	800a2f8 <log>
 80013ae:	ec51 0b10 	vmov	r0, r1, d0
 80013b2:	a367      	add	r3, pc, #412	@ (adr r3, 8001550 <main+0x298>)
 80013b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b8:	f7ff fa48 	bl	800084c <__aeabi_ddiv>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	a364      	add	r3, pc, #400	@ (adr r3, 8001558 <main+0x2a0>)
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	f7fe ff5f 	bl	800028c <__adddf3>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	f04f 0000 	mov.w	r0, #0
 80013d6:	496a      	ldr	r1, [pc, #424]	@ (8001580 <main+0x2c8>)
 80013d8:	f7ff fa38 	bl	800084c <__aeabi_ddiv>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	a35e      	add	r3, pc, #376	@ (adr r3, 8001560 <main+0x2a8>)
 80013e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ea:	f7fe ff4d 	bl	8000288 <__aeabi_dsub>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4610      	mov	r0, r2
 80013f4:	4619      	mov	r1, r3
 80013f6:	f7ff fbd7 	bl	8000ba8 <__aeabi_d2f>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4a62      	ldr	r2, [pc, #392]	@ (8001588 <main+0x2d0>)
 80013fe:	6013      	str	r3, [r2, #0]
		  if(temperature >= 34.5 && temperature <= 37.5 ) // Normal Temperature
 8001400:	4b61      	ldr	r3, [pc, #388]	@ (8001588 <main+0x2d0>)
 8001402:	edd3 7a00 	vldr	s15, [r3]
 8001406:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 800158c <main+0x2d4>
 800140a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800140e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001412:	db30      	blt.n	8001476 <main+0x1be>
 8001414:	4b5c      	ldr	r3, [pc, #368]	@ (8001588 <main+0x2d0>)
 8001416:	edd3 7a00 	vldr	s15, [r3]
 800141a:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8001590 <main+0x2d8>
 800141e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001426:	d826      	bhi.n	8001476 <main+0x1be>
		  {

			  __HAL_TIM_SET_COMPARE(&htim1 ,TIM_CHANNEL_1 , 2600);
 8001428:	4b50      	ldr	r3, [pc, #320]	@ (800156c <main+0x2b4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f640 2228 	movw	r2, #2600	@ 0xa28
 8001430:	635a      	str	r2, [r3, #52]	@ 0x34
			  sprintf(value," Welcome !!! Temperature:%.2f    ",temperature);
 8001432:	4b55      	ldr	r3, [pc, #340]	@ (8001588 <main+0x2d0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f886 	bl	8000548 <__aeabi_f2d>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4954      	ldr	r1, [pc, #336]	@ (8001594 <main+0x2dc>)
 8001442:	4855      	ldr	r0, [pc, #340]	@ (8001598 <main+0x2e0>)
 8001444:	f006 fe24 	bl	8008090 <siprintf>
			  scrollString((uint8_t*)value, 15);// display
 8001448:	210f      	movs	r1, #15
 800144a:	4853      	ldr	r0, [pc, #332]	@ (8001598 <main+0x2e0>)
 800144c:	f7ff ff1c 	bl	8001288 <scrollString>

			  count = count+1;// No of Person 4
 8001450:	4b52      	ldr	r3, [pc, #328]	@ (800159c <main+0x2e4>)
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	3301      	adds	r3, #1
 8001456:	b29a      	uxth	r2, r3
 8001458:	4b50      	ldr	r3, [pc, #320]	@ (800159c <main+0x2e4>)
 800145a:	801a      	strh	r2, [r3, #0]
			  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 2, &count, 2, 50);// Stored in data
 800145c:	2332      	movs	r3, #50	@ 0x32
 800145e:	9302      	str	r3, [sp, #8]
 8001460:	2302      	movs	r3, #2
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	4b4d      	ldr	r3, [pc, #308]	@ (800159c <main+0x2e4>)
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	2302      	movs	r3, #2
 800146a:	2200      	movs	r2, #0
 800146c:	21a0      	movs	r1, #160	@ 0xa0
 800146e:	483e      	ldr	r0, [pc, #248]	@ (8001568 <main+0x2b0>)
 8001470:	f002 fa90 	bl	8003994 <HAL_I2C_Mem_Write>
 8001474:	e036      	b.n	80014e4 <main+0x22c>


		  }
		  else
		  {
			  sprintf(value," Check The Body Temperature: %.2f     ",temperature);
 8001476:	4b44      	ldr	r3, [pc, #272]	@ (8001588 <main+0x2d0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f864 	bl	8000548 <__aeabi_f2d>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4946      	ldr	r1, [pc, #280]	@ (80015a0 <main+0x2e8>)
 8001486:	4844      	ldr	r0, [pc, #272]	@ (8001598 <main+0x2e0>)
 8001488:	f006 fe02 	bl	8008090 <siprintf>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 800148c:	2201      	movs	r2, #1
 800148e:	2104      	movs	r1, #4
 8001490:	4844      	ldr	r0, [pc, #272]	@ (80015a4 <main+0x2ec>)
 8001492:	f002 f9b3 	bl	80037fc <HAL_GPIO_WritePin>
			  scrollString((uint8_t*)value, 15);
 8001496:	210f      	movs	r1, #15
 8001498:	483f      	ldr	r0, [pc, #252]	@ (8001598 <main+0x2e0>)
 800149a:	f7ff fef5 	bl	8001288 <scrollString>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2104      	movs	r1, #4
 80014a2:	4840      	ldr	r0, [pc, #256]	@ (80015a4 <main+0x2ec>)
 80014a4:	f002 f9aa 	bl	80037fc <HAL_GPIO_WritePin>
			  HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 2, &count1, 2, 50);
 80014a8:	2332      	movs	r3, #50	@ 0x32
 80014aa:	9302      	str	r3, [sp, #8]
 80014ac:	2302      	movs	r3, #2
 80014ae:	9301      	str	r3, [sp, #4]
 80014b0:	4b3d      	ldr	r3, [pc, #244]	@ (80015a8 <main+0x2f0>)
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2302      	movs	r3, #2
 80014b6:	2200      	movs	r2, #0
 80014b8:	21a0      	movs	r1, #160	@ 0xa0
 80014ba:	482b      	ldr	r0, [pc, #172]	@ (8001568 <main+0x2b0>)
 80014bc:	f002 fb7e 	bl	8003bbc <HAL_I2C_Mem_Read>
			  sprintf(count2,"No of Person Entered %d\n",count1);
 80014c0:	4b39      	ldr	r3, [pc, #228]	@ (80015a8 <main+0x2f0>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4939      	ldr	r1, [pc, #228]	@ (80015ac <main+0x2f4>)
 80014c8:	4839      	ldr	r0, [pc, #228]	@ (80015b0 <main+0x2f8>)
 80014ca:	f006 fde1 	bl	8008090 <siprintf>
			  HAL_UART_Transmit(&huart2, count2, strlen(count2), HAL_MAX_DELAY);
 80014ce:	4838      	ldr	r0, [pc, #224]	@ (80015b0 <main+0x2f8>)
 80014d0:	f7fe fece 	bl	8000270 <strlen>
 80014d4:	4603      	mov	r3, r0
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	f04f 33ff 	mov.w	r3, #4294967295
 80014dc:	4934      	ldr	r1, [pc, #208]	@ (80015b0 <main+0x2f8>)
 80014de:	4835      	ldr	r0, [pc, #212]	@ (80015b4 <main+0x2fc>)
 80014e0:	f005 fbc0 	bl	8006c64 <HAL_UART_Transmit>
		  }
	  }

	  	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 	500);
 80014e4:	4b21      	ldr	r3, [pc, #132]	@ (800156c <main+0x2b4>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80014ec:	635a      	str	r2, [r3, #52]	@ 0x34
		  scrollString((uint8_t*)" Access Denied     ", 15);
 80014ee:	210f      	movs	r1, #15
 80014f0:	4831      	ldr	r0, [pc, #196]	@ (80015b8 <main+0x300>)
 80014f2:	f7ff fec9 	bl	8001288 <scrollString>
		  HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 2, &count1, 2, 50);//4
 80014f6:	2332      	movs	r3, #50	@ 0x32
 80014f8:	9302      	str	r3, [sp, #8]
 80014fa:	2302      	movs	r3, #2
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	4b2a      	ldr	r3, [pc, #168]	@ (80015a8 <main+0x2f0>)
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2302      	movs	r3, #2
 8001504:	2200      	movs	r2, #0
 8001506:	21a0      	movs	r1, #160	@ 0xa0
 8001508:	4817      	ldr	r0, [pc, #92]	@ (8001568 <main+0x2b0>)
 800150a:	f002 fb57 	bl	8003bbc <HAL_I2C_Mem_Read>
		  count =count1;//4
 800150e:	4b26      	ldr	r3, [pc, #152]	@ (80015a8 <main+0x2f0>)
 8001510:	881a      	ldrh	r2, [r3, #0]
 8001512:	4b22      	ldr	r3, [pc, #136]	@ (800159c <main+0x2e4>)
 8001514:	801a      	strh	r2, [r3, #0]
		  sprintf(count2,"No of Person Entered %d\n",count1);
 8001516:	4b24      	ldr	r3, [pc, #144]	@ (80015a8 <main+0x2f0>)
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	4923      	ldr	r1, [pc, #140]	@ (80015ac <main+0x2f4>)
 800151e:	4824      	ldr	r0, [pc, #144]	@ (80015b0 <main+0x2f8>)
 8001520:	f006 fdb6 	bl	8008090 <siprintf>
		  HAL_UART_Transmit(&huart2, count2, strlen(count2), HAL_MAX_DELAY);
 8001524:	4822      	ldr	r0, [pc, #136]	@ (80015b0 <main+0x2f8>)
 8001526:	f7fe fea3 	bl	8000270 <strlen>
 800152a:	4603      	mov	r3, r0
 800152c:	b29a      	uxth	r2, r3
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
 8001532:	491f      	ldr	r1, [pc, #124]	@ (80015b0 <main+0x2f8>)
 8001534:	481f      	ldr	r0, [pc, #124]	@ (80015b4 <main+0x2fc>)
 8001536:	f005 fb95 	bl	8006c64 <HAL_UART_Transmit>
	  if( flag) // IR Value =1
 800153a:	e6e2      	b.n	8001302 <main+0x4a>
 800153c:	f3af 8000 	nop.w
 8001540:	00000000 	.word	0x00000000
 8001544:	40affe00 	.word	0x40affe00
 8001548:	00000000 	.word	0x00000000
 800154c:	40c38800 	.word	0x40c38800
 8001550:	00000000 	.word	0x00000000
 8001554:	40aedc00 	.word	0x40aedc00
 8001558:	dcb5db83 	.word	0xdcb5db83
 800155c:	3f6b79e1 	.word	0x3f6b79e1
 8001560:	66666666 	.word	0x66666666
 8001564:	40711266 	.word	0x40711266
 8001568:	20000254 	.word	0x20000254
 800156c:	2000030c 	.word	0x2000030c
 8001570:	40012c00 	.word	0x40012c00
 8001574:	200003e0 	.word	0x200003e0
 8001578:	200001f0 	.word	0x200001f0
 800157c:	200003e4 	.word	0x200003e4
 8001580:	3ff00000 	.word	0x3ff00000
 8001584:	200003e8 	.word	0x200003e8
 8001588:	200003ec 	.word	0x200003ec
 800158c:	420a0000 	.word	0x420a0000
 8001590:	42160000 	.word	0x42160000
 8001594:	0800a710 	.word	0x0800a710
 8001598:	200003f4 	.word	0x200003f4
 800159c:	200003f0 	.word	0x200003f0
 80015a0:	0800a734 	.word	0x0800a734
 80015a4:	48000400 	.word	0x48000400
 80015a8:	200003f2 	.word	0x200003f2
 80015ac:	0800a75c 	.word	0x0800a75c
 80015b0:	20000428 	.word	0x20000428
 80015b4:	20000358 	.word	0x20000358
 80015b8:	0800a778 	.word	0x0800a778

080015bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b096      	sub	sp, #88	@ 0x58
 80015c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	2244      	movs	r2, #68	@ 0x44
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f006 fdc5 	bl	800815a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d0:	463b      	mov	r3, r7
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80015e2:	f002 ff6d 	bl	80044c0 <HAL_PWREx_ControlVoltageScaling>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015ec:	f000 fa58 	bl	8001aa0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80015f0:	2310      	movs	r3, #16
 80015f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015f4:	2301      	movs	r3, #1
 80015f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 80015fc:	2380      	movs	r3, #128	@ 0x80
 80015fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001600:	2300      	movs	r3, #0
 8001602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4618      	mov	r0, r3
 800160a:	f002 ffaf 	bl	800456c <HAL_RCC_OscConfig>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001614:	f000 fa44 	bl	8001aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001618:	230f      	movs	r3, #15
 800161a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800161c:	2300      	movs	r3, #0
 800161e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001628:	2300      	movs	r3, #0
 800162a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800162c:	463b      	mov	r3, r7
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f003 fbaf 	bl	8004d94 <HAL_RCC_ClockConfig>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800163c:	f000 fa30 	bl	8001aa0 <Error_Handler>
  }
}
 8001640:	bf00      	nop
 8001642:	3758      	adds	r7, #88	@ 0x58
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800164e:	463b      	mov	r3, r7
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
 800165c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800165e:	4b29      	ldr	r3, [pc, #164]	@ (8001704 <MX_ADC1_Init+0xbc>)
 8001660:	4a29      	ldr	r2, [pc, #164]	@ (8001708 <MX_ADC1_Init+0xc0>)
 8001662:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001664:	4b27      	ldr	r3, [pc, #156]	@ (8001704 <MX_ADC1_Init+0xbc>)
 8001666:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800166a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800166c:	4b25      	ldr	r3, [pc, #148]	@ (8001704 <MX_ADC1_Init+0xbc>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001672:	4b24      	ldr	r3, [pc, #144]	@ (8001704 <MX_ADC1_Init+0xbc>)
 8001674:	2200      	movs	r2, #0
 8001676:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001678:	4b22      	ldr	r3, [pc, #136]	@ (8001704 <MX_ADC1_Init+0xbc>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800167e:	4b21      	ldr	r3, [pc, #132]	@ (8001704 <MX_ADC1_Init+0xbc>)
 8001680:	2204      	movs	r2, #4
 8001682:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001684:	4b1f      	ldr	r3, [pc, #124]	@ (8001704 <MX_ADC1_Init+0xbc>)
 8001686:	2200      	movs	r2, #0
 8001688:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800168a:	4b1e      	ldr	r3, [pc, #120]	@ (8001704 <MX_ADC1_Init+0xbc>)
 800168c:	2200      	movs	r2, #0
 800168e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001690:	4b1c      	ldr	r3, [pc, #112]	@ (8001704 <MX_ADC1_Init+0xbc>)
 8001692:	2201      	movs	r2, #1
 8001694:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001696:	4b1b      	ldr	r3, [pc, #108]	@ (8001704 <MX_ADC1_Init+0xbc>)
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800169e:	4b19      	ldr	r3, [pc, #100]	@ (8001704 <MX_ADC1_Init+0xbc>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016a4:	4b17      	ldr	r3, [pc, #92]	@ (8001704 <MX_ADC1_Init+0xbc>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016aa:	4b16      	ldr	r3, [pc, #88]	@ (8001704 <MX_ADC1_Init+0xbc>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016b2:	4b14      	ldr	r3, [pc, #80]	@ (8001704 <MX_ADC1_Init+0xbc>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80016b8:	4b12      	ldr	r3, [pc, #72]	@ (8001704 <MX_ADC1_Init+0xbc>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016c0:	4810      	ldr	r0, [pc, #64]	@ (8001704 <MX_ADC1_Init+0xbc>)
 80016c2:	f000 ff65 	bl	8002590 <HAL_ADC_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80016cc:	f000 f9e8 	bl	8001aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80016d0:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <MX_ADC1_Init+0xc4>)
 80016d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016d4:	2306      	movs	r3, #6
 80016d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80016d8:	2302      	movs	r3, #2
 80016da:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016dc:	237f      	movs	r3, #127	@ 0x7f
 80016de:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016e0:	2304      	movs	r3, #4
 80016e2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016e8:	463b      	mov	r3, r7
 80016ea:	4619      	mov	r1, r3
 80016ec:	4805      	ldr	r0, [pc, #20]	@ (8001704 <MX_ADC1_Init+0xbc>)
 80016ee:	f001 f991 	bl	8002a14 <HAL_ADC_ConfigChannel>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80016f8:	f000 f9d2 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	200001f0 	.word	0x200001f0
 8001708:	50040000 	.word	0x50040000
 800170c:	04300002 	.word	0x04300002

08001710 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001714:	4b1b      	ldr	r3, [pc, #108]	@ (8001784 <MX_I2C1_Init+0x74>)
 8001716:	4a1c      	ldr	r2, [pc, #112]	@ (8001788 <MX_I2C1_Init+0x78>)
 8001718:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10911E24;
 800171a:	4b1a      	ldr	r3, [pc, #104]	@ (8001784 <MX_I2C1_Init+0x74>)
 800171c:	4a1b      	ldr	r2, [pc, #108]	@ (800178c <MX_I2C1_Init+0x7c>)
 800171e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001720:	4b18      	ldr	r3, [pc, #96]	@ (8001784 <MX_I2C1_Init+0x74>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001726:	4b17      	ldr	r3, [pc, #92]	@ (8001784 <MX_I2C1_Init+0x74>)
 8001728:	2201      	movs	r2, #1
 800172a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800172c:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <MX_I2C1_Init+0x74>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001732:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <MX_I2C1_Init+0x74>)
 8001734:	2200      	movs	r2, #0
 8001736:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001738:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <MX_I2C1_Init+0x74>)
 800173a:	2200      	movs	r2, #0
 800173c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800173e:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <MX_I2C1_Init+0x74>)
 8001740:	2200      	movs	r2, #0
 8001742:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001744:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <MX_I2C1_Init+0x74>)
 8001746:	2200      	movs	r2, #0
 8001748:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800174a:	480e      	ldr	r0, [pc, #56]	@ (8001784 <MX_I2C1_Init+0x74>)
 800174c:	f002 f886 	bl	800385c <HAL_I2C_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001756:	f000 f9a3 	bl	8001aa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800175a:	2100      	movs	r1, #0
 800175c:	4809      	ldr	r0, [pc, #36]	@ (8001784 <MX_I2C1_Init+0x74>)
 800175e:	f002 fe09 	bl	8004374 <HAL_I2CEx_ConfigAnalogFilter>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001768:	f000 f99a 	bl	8001aa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800176c:	2100      	movs	r1, #0
 800176e:	4805      	ldr	r0, [pc, #20]	@ (8001784 <MX_I2C1_Init+0x74>)
 8001770:	f002 fe4b 	bl	800440a <HAL_I2CEx_ConfigDigitalFilter>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800177a:	f000 f991 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000254 	.word	0x20000254
 8001788:	40005400 	.word	0x40005400
 800178c:	10911e24 	.word	0x10911e24

08001790 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001794:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <MX_SPI1_Init+0x74>)
 8001796:	4a1c      	ldr	r2, [pc, #112]	@ (8001808 <MX_SPI1_Init+0x78>)
 8001798:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800179a:	4b1a      	ldr	r3, [pc, #104]	@ (8001804 <MX_SPI1_Init+0x74>)
 800179c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80017a2:	4b18      	ldr	r3, [pc, #96]	@ (8001804 <MX_SPI1_Init+0x74>)
 80017a4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80017a8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80017aa:	4b16      	ldr	r3, [pc, #88]	@ (8001804 <MX_SPI1_Init+0x74>)
 80017ac:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80017b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80017b2:	4b14      	ldr	r3, [pc, #80]	@ (8001804 <MX_SPI1_Init+0x74>)
 80017b4:	2202      	movs	r2, #2
 80017b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017b8:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <MX_SPI1_Init+0x74>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017be:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <MX_SPI1_Init+0x74>)
 80017c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80017c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <MX_SPI1_Init+0x74>)
 80017c8:	2220      	movs	r2, #32
 80017ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001804 <MX_SPI1_Init+0x74>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <MX_SPI1_Init+0x74>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <MX_SPI1_Init+0x74>)
 80017da:	2200      	movs	r2, #0
 80017dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80017de:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <MX_SPI1_Init+0x74>)
 80017e0:	2207      	movs	r2, #7
 80017e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017e4:	4b07      	ldr	r3, [pc, #28]	@ (8001804 <MX_SPI1_Init+0x74>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80017ea:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <MX_SPI1_Init+0x74>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017f0:	4804      	ldr	r0, [pc, #16]	@ (8001804 <MX_SPI1_Init+0x74>)
 80017f2:	f004 f82f 	bl	8005854 <HAL_SPI_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80017fc:	f000 f950 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200002a8 	.word	0x200002a8
 8001808:	40013000 	.word	0x40013000

0800180c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b096      	sub	sp, #88	@ 0x58
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001812:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800181e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	60da      	str	r2, [r3, #12]
 800182c:	611a      	str	r2, [r3, #16]
 800182e:	615a      	str	r2, [r3, #20]
 8001830:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	222c      	movs	r2, #44	@ 0x2c
 8001836:	2100      	movs	r1, #0
 8001838:	4618      	mov	r0, r3
 800183a:	f006 fc8e 	bl	800815a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800183e:	4b39      	ldr	r3, [pc, #228]	@ (8001924 <MX_TIM1_Init+0x118>)
 8001840:	4a39      	ldr	r2, [pc, #228]	@ (8001928 <MX_TIM1_Init+0x11c>)
 8001842:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8001844:	4b37      	ldr	r3, [pc, #220]	@ (8001924 <MX_TIM1_Init+0x118>)
 8001846:	220f      	movs	r2, #15
 8001848:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184a:	4b36      	ldr	r3, [pc, #216]	@ (8001924 <MX_TIM1_Init+0x118>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8001850:	4b34      	ldr	r3, [pc, #208]	@ (8001924 <MX_TIM1_Init+0x118>)
 8001852:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001856:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001858:	4b32      	ldr	r3, [pc, #200]	@ (8001924 <MX_TIM1_Init+0x118>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800185e:	4b31      	ldr	r3, [pc, #196]	@ (8001924 <MX_TIM1_Init+0x118>)
 8001860:	2200      	movs	r2, #0
 8001862:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001864:	4b2f      	ldr	r3, [pc, #188]	@ (8001924 <MX_TIM1_Init+0x118>)
 8001866:	2280      	movs	r2, #128	@ 0x80
 8001868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800186a:	482e      	ldr	r0, [pc, #184]	@ (8001924 <MX_TIM1_Init+0x118>)
 800186c:	f004 fb70 	bl	8005f50 <HAL_TIM_PWM_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001876:	f000 f913 	bl	8001aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800187e:	2300      	movs	r3, #0
 8001880:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001886:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800188a:	4619      	mov	r1, r3
 800188c:	4825      	ldr	r0, [pc, #148]	@ (8001924 <MX_TIM1_Init+0x118>)
 800188e:	f005 f8bd 	bl	8006a0c <HAL_TIMEx_MasterConfigSynchronization>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001898:	f000 f902 	bl	8001aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800189c:	2360      	movs	r3, #96	@ 0x60
 800189e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018a4:	2300      	movs	r3, #0
 80018a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018a8:	2300      	movs	r3, #0
 80018aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018b0:	2300      	movs	r3, #0
 80018b2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018b4:	2300      	movs	r3, #0
 80018b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018bc:	2200      	movs	r2, #0
 80018be:	4619      	mov	r1, r3
 80018c0:	4818      	ldr	r0, [pc, #96]	@ (8001924 <MX_TIM1_Init+0x118>)
 80018c2:	f004 fc7b 	bl	80061bc <HAL_TIM_PWM_ConfigChannel>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80018cc:	f000 f8e8 	bl	8001aa0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	4619      	mov	r1, r3
 8001904:	4807      	ldr	r0, [pc, #28]	@ (8001924 <MX_TIM1_Init+0x118>)
 8001906:	f005 f8e7 	bl	8006ad8 <HAL_TIMEx_ConfigBreakDeadTime>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001910:	f000 f8c6 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001914:	4803      	ldr	r0, [pc, #12]	@ (8001924 <MX_TIM1_Init+0x118>)
 8001916:	f000 fa0f 	bl	8001d38 <HAL_TIM_MspPostInit>

}
 800191a:	bf00      	nop
 800191c:	3758      	adds	r7, #88	@ 0x58
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	2000030c 	.word	0x2000030c
 8001928:	40012c00 	.word	0x40012c00

0800192c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001930:	4b14      	ldr	r3, [pc, #80]	@ (8001984 <MX_USART2_UART_Init+0x58>)
 8001932:	4a15      	ldr	r2, [pc, #84]	@ (8001988 <MX_USART2_UART_Init+0x5c>)
 8001934:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001936:	4b13      	ldr	r3, [pc, #76]	@ (8001984 <MX_USART2_UART_Init+0x58>)
 8001938:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800193c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800193e:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <MX_USART2_UART_Init+0x58>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001944:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <MX_USART2_UART_Init+0x58>)
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800194a:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <MX_USART2_UART_Init+0x58>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001950:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <MX_USART2_UART_Init+0x58>)
 8001952:	220c      	movs	r2, #12
 8001954:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001956:	4b0b      	ldr	r3, [pc, #44]	@ (8001984 <MX_USART2_UART_Init+0x58>)
 8001958:	2200      	movs	r2, #0
 800195a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800195c:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <MX_USART2_UART_Init+0x58>)
 800195e:	2200      	movs	r2, #0
 8001960:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001962:	4b08      	ldr	r3, [pc, #32]	@ (8001984 <MX_USART2_UART_Init+0x58>)
 8001964:	2200      	movs	r2, #0
 8001966:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001968:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <MX_USART2_UART_Init+0x58>)
 800196a:	2200      	movs	r2, #0
 800196c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800196e:	4805      	ldr	r0, [pc, #20]	@ (8001984 <MX_USART2_UART_Init+0x58>)
 8001970:	f005 f92a 	bl	8006bc8 <HAL_UART_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800197a:	f000 f891 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000358 	.word	0x20000358
 8001988:	40004400 	.word	0x40004400

0800198c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001992:	f107 030c 	add.w	r3, r7, #12
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
 80019a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a2:	4b32      	ldr	r3, [pc, #200]	@ (8001a6c <MX_GPIO_Init+0xe0>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a6:	4a31      	ldr	r2, [pc, #196]	@ (8001a6c <MX_GPIO_Init+0xe0>)
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ae:	4b2f      	ldr	r3, [pc, #188]	@ (8001a6c <MX_GPIO_Init+0xe0>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	4b2c      	ldr	r3, [pc, #176]	@ (8001a6c <MX_GPIO_Init+0xe0>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019be:	4a2b      	ldr	r2, [pc, #172]	@ (8001a6c <MX_GPIO_Init+0xe0>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019c6:	4b29      	ldr	r3, [pc, #164]	@ (8001a6c <MX_GPIO_Init+0xe0>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	4b26      	ldr	r3, [pc, #152]	@ (8001a6c <MX_GPIO_Init+0xe0>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d6:	4a25      	ldr	r2, [pc, #148]	@ (8001a6c <MX_GPIO_Init+0xe0>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019de:	4b23      	ldr	r3, [pc, #140]	@ (8001a6c <MX_GPIO_Init+0xe0>)
 80019e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2104      	movs	r1, #4
 80019ee:	4820      	ldr	r0, [pc, #128]	@ (8001a70 <MX_GPIO_Init+0xe4>)
 80019f0:	f001 ff04 	bl	80037fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80019f4:	2201      	movs	r2, #1
 80019f6:	2140      	movs	r1, #64	@ 0x40
 80019f8:	481e      	ldr	r0, [pc, #120]	@ (8001a74 <MX_GPIO_Init+0xe8>)
 80019fa:	f001 feff 	bl	80037fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019fe:	2304      	movs	r3, #4
 8001a00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a02:	2301      	movs	r3, #1
 8001a04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	4619      	mov	r1, r3
 8001a14:	4816      	ldr	r0, [pc, #88]	@ (8001a70 <MX_GPIO_Init+0xe4>)
 8001a16:	f001 fd77 	bl	8003508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a1a:	2340      	movs	r3, #64	@ 0x40
 8001a1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2a:	f107 030c 	add.w	r3, r7, #12
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4810      	ldr	r0, [pc, #64]	@ (8001a74 <MX_GPIO_Init+0xe8>)
 8001a32:	f001 fd69 	bl	8003508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a3c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4809      	ldr	r0, [pc, #36]	@ (8001a74 <MX_GPIO_Init+0xe8>)
 8001a4e:	f001 fd5b 	bl	8003508 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	2017      	movs	r0, #23
 8001a58:	f001 fd1f 	bl	800349a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a5c:	2017      	movs	r0, #23
 8001a5e:	f001 fd38 	bl	80034d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a62:	bf00      	nop
 8001a64:	3720      	adds	r7, #32
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	48000400 	.word	0x48000400
 8001a74:	48000800 	.word	0x48000800

08001a78 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_8)// verify the pin)
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a88:	d102      	bne.n	8001a90 <HAL_GPIO_EXTI_Callback+0x18>
	{
		flag =1;
 8001a8a:	4b04      	ldr	r3, [pc, #16]	@ (8001a9c <HAL_GPIO_EXTI_Callback+0x24>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]
	}
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	200003e0 	.word	0x200003e0

08001aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa4:	b672      	cpsid	i
}
 8001aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <Error_Handler+0x8>

08001aac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8001af0 <HAL_MspInit+0x44>)
 8001ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8001af0 <HAL_MspInit+0x44>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001abe:	4b0c      	ldr	r3, [pc, #48]	@ (8001af0 <HAL_MspInit+0x44>)
 8001ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <HAL_MspInit+0x44>)
 8001acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ace:	4a08      	ldr	r2, [pc, #32]	@ (8001af0 <HAL_MspInit+0x44>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ad4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ad6:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <HAL_MspInit+0x44>)
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000

08001af4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b0a2      	sub	sp, #136	@ 0x88
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2260      	movs	r2, #96	@ 0x60
 8001b12:	2100      	movs	r1, #0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f006 fb20 	bl	800815a <memset>
  if(hadc->Instance==ADC1)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a25      	ldr	r2, [pc, #148]	@ (8001bb4 <HAL_ADC_MspInit+0xc0>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d142      	bne.n	8001baa <HAL_ADC_MspInit+0xb6>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b24:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b28:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b2a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001b2e:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001b30:	2301      	movs	r3, #1
 8001b32:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b34:	2301      	movs	r3, #1
 8001b36:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001b38:	2308      	movs	r3, #8
 8001b3a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b3c:	2307      	movs	r3, #7
 8001b3e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b40:	2302      	movs	r3, #2
 8001b42:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b44:	2302      	movs	r3, #2
 8001b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001b48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b4c:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b4e:	f107 0314 	add.w	r3, r7, #20
 8001b52:	4618      	mov	r0, r3
 8001b54:	f003 fb42 	bl	80051dc <HAL_RCCEx_PeriphCLKConfig>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001b5e:	f7ff ff9f 	bl	8001aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b62:	4b15      	ldr	r3, [pc, #84]	@ (8001bb8 <HAL_ADC_MspInit+0xc4>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b66:	4a14      	ldr	r2, [pc, #80]	@ (8001bb8 <HAL_ADC_MspInit+0xc4>)
 8001b68:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b6e:	4b12      	ldr	r3, [pc, #72]	@ (8001bb8 <HAL_ADC_MspInit+0xc4>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb8 <HAL_ADC_MspInit+0xc4>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb8 <HAL_ADC_MspInit+0xc4>)
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b86:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb8 <HAL_ADC_MspInit+0xc4>)
 8001b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b92:	2301      	movs	r3, #1
 8001b94:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b96:	230b      	movs	r3, #11
 8001b98:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4805      	ldr	r0, [pc, #20]	@ (8001bbc <HAL_ADC_MspInit+0xc8>)
 8001ba6:	f001 fcaf 	bl	8003508 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001baa:	bf00      	nop
 8001bac:	3788      	adds	r7, #136	@ 0x88
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	50040000 	.word	0x50040000
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	48000800 	.word	0x48000800

08001bc0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b0a2      	sub	sp, #136	@ 0x88
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2260      	movs	r2, #96	@ 0x60
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f006 faba 	bl	800815a <memset>
  if(hi2c->Instance==I2C1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a20      	ldr	r2, [pc, #128]	@ (8001c6c <HAL_I2C_MspInit+0xac>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d139      	bne.n	8001c64 <HAL_I2C_MspInit+0xa4>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001bf0:	2340      	movs	r3, #64	@ 0x40
 8001bf2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f003 faed 	bl	80051dc <HAL_RCCEx_PeriphCLKConfig>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c08:	f7ff ff4a 	bl	8001aa0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0c:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <HAL_I2C_MspInit+0xb0>)
 8001c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c10:	4a17      	ldr	r2, [pc, #92]	@ (8001c70 <HAL_I2C_MspInit+0xb0>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c18:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <HAL_I2C_MspInit+0xb0>)
 8001c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c24:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001c28:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c2a:	2312      	movs	r3, #18
 8001c2c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c32:	2303      	movs	r3, #3
 8001c34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c38:	2304      	movs	r3, #4
 8001c3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001c42:	4619      	mov	r1, r3
 8001c44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c48:	f001 fc5e 	bl	8003508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c4c:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <HAL_I2C_MspInit+0xb0>)
 8001c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c50:	4a07      	ldr	r2, [pc, #28]	@ (8001c70 <HAL_I2C_MspInit+0xb0>)
 8001c52:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c56:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c58:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <HAL_I2C_MspInit+0xb0>)
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c64:	bf00      	nop
 8001c66:	3788      	adds	r7, #136	@ 0x88
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40005400 	.word	0x40005400
 8001c70:	40021000 	.word	0x40021000

08001c74 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	@ 0x28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a17      	ldr	r2, [pc, #92]	@ (8001cf0 <HAL_SPI_MspInit+0x7c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d128      	bne.n	8001ce8 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c96:	4b17      	ldr	r3, [pc, #92]	@ (8001cf4 <HAL_SPI_MspInit+0x80>)
 8001c98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c9a:	4a16      	ldr	r2, [pc, #88]	@ (8001cf4 <HAL_SPI_MspInit+0x80>)
 8001c9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ca0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ca2:	4b14      	ldr	r3, [pc, #80]	@ (8001cf4 <HAL_SPI_MspInit+0x80>)
 8001ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ca6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cae:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <HAL_SPI_MspInit+0x80>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb2:	4a10      	ldr	r2, [pc, #64]	@ (8001cf4 <HAL_SPI_MspInit+0x80>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cba:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf4 <HAL_SPI_MspInit+0x80>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001cc6:	23a0      	movs	r3, #160	@ 0xa0
 8001cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cd6:	2305      	movs	r3, #5
 8001cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cda:	f107 0314 	add.w	r3, r7, #20
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ce4:	f001 fc10 	bl	8003508 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001ce8:	bf00      	nop
 8001cea:	3728      	adds	r7, #40	@ 0x28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40013000 	.word	0x40013000
 8001cf4:	40021000 	.word	0x40021000

08001cf8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a0a      	ldr	r2, [pc, #40]	@ (8001d30 <HAL_TIM_PWM_MspInit+0x38>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d10b      	bne.n	8001d22 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d34 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d0e:	4a09      	ldr	r2, [pc, #36]	@ (8001d34 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d10:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d14:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d16:	4b07      	ldr	r3, [pc, #28]	@ (8001d34 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001d22:	bf00      	nop
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40012c00 	.word	0x40012c00
 8001d34:	40021000 	.word	0x40021000

08001d38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a12      	ldr	r2, [pc, #72]	@ (8001da0 <HAL_TIM_MspPostInit+0x68>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d11d      	bne.n	8001d96 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <HAL_TIM_MspPostInit+0x6c>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d5e:	4a11      	ldr	r2, [pc, #68]	@ (8001da4 <HAL_TIM_MspPostInit+0x6c>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d66:	4b0f      	ldr	r3, [pc, #60]	@ (8001da4 <HAL_TIM_MspPostInit+0x6c>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d84:	2301      	movs	r3, #1
 8001d86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d88:	f107 030c 	add.w	r3, r7, #12
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d92:	f001 fbb9 	bl	8003508 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d96:	bf00      	nop
 8001d98:	3720      	adds	r7, #32
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40012c00 	.word	0x40012c00
 8001da4:	40021000 	.word	0x40021000

08001da8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b0a2      	sub	sp, #136	@ 0x88
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	2260      	movs	r2, #96	@ 0x60
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f006 f9c6 	bl	800815a <memset>
  if(huart->Instance==USART2)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a20      	ldr	r2, [pc, #128]	@ (8001e54 <HAL_UART_MspInit+0xac>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d138      	bne.n	8001e4a <HAL_UART_MspInit+0xa2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	4618      	mov	r0, r3
 8001de6:	f003 f9f9 	bl	80051dc <HAL_RCCEx_PeriphCLKConfig>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001df0:	f7ff fe56 	bl	8001aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001df4:	4b18      	ldr	r3, [pc, #96]	@ (8001e58 <HAL_UART_MspInit+0xb0>)
 8001df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df8:	4a17      	ldr	r2, [pc, #92]	@ (8001e58 <HAL_UART_MspInit+0xb0>)
 8001dfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e00:	4b15      	ldr	r3, [pc, #84]	@ (8001e58 <HAL_UART_MspInit+0xb0>)
 8001e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0c:	4b12      	ldr	r3, [pc, #72]	@ (8001e58 <HAL_UART_MspInit+0xb0>)
 8001e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e10:	4a11      	ldr	r2, [pc, #68]	@ (8001e58 <HAL_UART_MspInit+0xb0>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e18:	4b0f      	ldr	r3, [pc, #60]	@ (8001e58 <HAL_UART_MspInit+0xb0>)
 8001e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e24:	230c      	movs	r3, #12
 8001e26:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e30:	2303      	movs	r3, #3
 8001e32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e36:	2307      	movs	r3, #7
 8001e38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001e40:	4619      	mov	r1, r3
 8001e42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e46:	f001 fb5f 	bl	8003508 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001e4a:	bf00      	nop
 8001e4c:	3788      	adds	r7, #136	@ 0x88
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40004400 	.word	0x40004400
 8001e58:	40021000 	.word	0x40021000

08001e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e60:	bf00      	nop
 8001e62:	e7fd      	b.n	8001e60 <NMI_Handler+0x4>

08001e64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e68:	bf00      	nop
 8001e6a:	e7fd      	b.n	8001e68 <HardFault_Handler+0x4>

08001e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e70:	bf00      	nop
 8001e72:	e7fd      	b.n	8001e70 <MemManage_Handler+0x4>

08001e74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e78:	bf00      	nop
 8001e7a:	e7fd      	b.n	8001e78 <BusFault_Handler+0x4>

08001e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <UsageFault_Handler+0x4>

08001e84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eb2:	f000 f961 	bl	8002178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001ebe:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001ec2:	f001 fcb3 	bl	800382c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0
  return 1;
 8001ece:	2301      	movs	r3, #1
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <_kill>:

int _kill(int pid, int sig)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ee4:	f006 f98c 	bl	8008200 <__errno>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2216      	movs	r2, #22
 8001eec:	601a      	str	r2, [r3, #0]
  return -1;
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <_exit>:

void _exit (int status)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f02:	f04f 31ff 	mov.w	r1, #4294967295
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ffe7 	bl	8001eda <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f0c:	bf00      	nop
 8001f0e:	e7fd      	b.n	8001f0c <_exit+0x12>

08001f10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	e00a      	b.n	8001f38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f22:	f3af 8000 	nop.w
 8001f26:	4601      	mov	r1, r0
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	60ba      	str	r2, [r7, #8]
 8001f2e:	b2ca      	uxtb	r2, r1
 8001f30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	3301      	adds	r3, #1
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	dbf0      	blt.n	8001f22 <_read+0x12>
  }

  return len;
 8001f40:	687b      	ldr	r3, [r7, #4]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	e009      	b.n	8001f70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	60ba      	str	r2, [r7, #8]
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	dbf1      	blt.n	8001f5c <_write+0x12>
  }
  return len;
 8001f78:	687b      	ldr	r3, [r7, #4]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <_close>:

int _close(int file)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001faa:	605a      	str	r2, [r3, #4]
  return 0;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <_isatty>:

int _isatty(int file)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fc2:	2301      	movs	r3, #1
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ff4:	4a14      	ldr	r2, [pc, #80]	@ (8002048 <_sbrk+0x5c>)
 8001ff6:	4b15      	ldr	r3, [pc, #84]	@ (800204c <_sbrk+0x60>)
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002000:	4b13      	ldr	r3, [pc, #76]	@ (8002050 <_sbrk+0x64>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d102      	bne.n	800200e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002008:	4b11      	ldr	r3, [pc, #68]	@ (8002050 <_sbrk+0x64>)
 800200a:	4a12      	ldr	r2, [pc, #72]	@ (8002054 <_sbrk+0x68>)
 800200c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800200e:	4b10      	ldr	r3, [pc, #64]	@ (8002050 <_sbrk+0x64>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	429a      	cmp	r2, r3
 800201a:	d207      	bcs.n	800202c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800201c:	f006 f8f0 	bl	8008200 <__errno>
 8002020:	4603      	mov	r3, r0
 8002022:	220c      	movs	r2, #12
 8002024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002026:	f04f 33ff 	mov.w	r3, #4294967295
 800202a:	e009      	b.n	8002040 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800202c:	4b08      	ldr	r3, [pc, #32]	@ (8002050 <_sbrk+0x64>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002032:	4b07      	ldr	r3, [pc, #28]	@ (8002050 <_sbrk+0x64>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	4a05      	ldr	r2, [pc, #20]	@ (8002050 <_sbrk+0x64>)
 800203c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800203e:	68fb      	ldr	r3, [r7, #12]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	2000c000 	.word	0x2000c000
 800204c:	00000400 	.word	0x00000400
 8002050:	2000047c 	.word	0x2000047c
 8002054:	200005d0 	.word	0x200005d0

08002058 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800205c:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <SystemInit+0x20>)
 800205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002062:	4a05      	ldr	r2, [pc, #20]	@ (8002078 <SystemInit+0x20>)
 8002064:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002068:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800207c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002080:	f7ff ffea 	bl	8002058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002084:	480c      	ldr	r0, [pc, #48]	@ (80020b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002086:	490d      	ldr	r1, [pc, #52]	@ (80020bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002088:	4a0d      	ldr	r2, [pc, #52]	@ (80020c0 <LoopForever+0xe>)
  movs r3, #0
 800208a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800208c:	e002      	b.n	8002094 <LoopCopyDataInit>

0800208e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800208e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002092:	3304      	adds	r3, #4

08002094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002098:	d3f9      	bcc.n	800208e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800209a:	4a0a      	ldr	r2, [pc, #40]	@ (80020c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800209c:	4c0a      	ldr	r4, [pc, #40]	@ (80020c8 <LoopForever+0x16>)
  movs r3, #0
 800209e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a0:	e001      	b.n	80020a6 <LoopFillZerobss>

080020a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a4:	3204      	adds	r2, #4

080020a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a8:	d3fb      	bcc.n	80020a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020aa:	f006 f8af 	bl	800820c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020ae:	f7ff f903 	bl	80012b8 <main>

080020b2 <LoopForever>:

LoopForever:
    b LoopForever
 80020b2:	e7fe      	b.n	80020b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020b4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80020b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020bc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80020c0:	0800b35c 	.word	0x0800b35c
  ldr r2, =_sbss
 80020c4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80020c8:	200005d0 	.word	0x200005d0

080020cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020cc:	e7fe      	b.n	80020cc <ADC1_IRQHandler>

080020ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020d4:	2300      	movs	r3, #0
 80020d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d8:	2003      	movs	r0, #3
 80020da:	f001 f9d3 	bl	8003484 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020de:	200f      	movs	r0, #15
 80020e0:	f000 f80e 	bl	8002100 <HAL_InitTick>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	71fb      	strb	r3, [r7, #7]
 80020ee:	e001      	b.n	80020f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020f0:	f7ff fcdc 	bl	8001aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020f4:	79fb      	ldrb	r3, [r7, #7]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800210c:	4b17      	ldr	r3, [pc, #92]	@ (800216c <HAL_InitTick+0x6c>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d023      	beq.n	800215c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002114:	4b16      	ldr	r3, [pc, #88]	@ (8002170 <HAL_InitTick+0x70>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b14      	ldr	r3, [pc, #80]	@ (800216c <HAL_InitTick+0x6c>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	4619      	mov	r1, r3
 800211e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002122:	fbb3 f3f1 	udiv	r3, r3, r1
 8002126:	fbb2 f3f3 	udiv	r3, r2, r3
 800212a:	4618      	mov	r0, r3
 800212c:	f001 f9df 	bl	80034ee <HAL_SYSTICK_Config>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10f      	bne.n	8002156 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b0f      	cmp	r3, #15
 800213a:	d809      	bhi.n	8002150 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800213c:	2200      	movs	r2, #0
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	f04f 30ff 	mov.w	r0, #4294967295
 8002144:	f001 f9a9 	bl	800349a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002148:	4a0a      	ldr	r2, [pc, #40]	@ (8002174 <HAL_InitTick+0x74>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e007      	b.n	8002160 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	73fb      	strb	r3, [r7, #15]
 8002154:	e004      	b.n	8002160 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	73fb      	strb	r3, [r7, #15]
 800215a:	e001      	b.n	8002160 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002160:	7bfb      	ldrb	r3, [r7, #15]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000008 	.word	0x20000008
 8002170:	20000000 	.word	0x20000000
 8002174:	20000004 	.word	0x20000004

08002178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800217c:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <HAL_IncTick+0x20>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b06      	ldr	r3, [pc, #24]	@ (800219c <HAL_IncTick+0x24>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4413      	add	r3, r2
 8002188:	4a04      	ldr	r2, [pc, #16]	@ (800219c <HAL_IncTick+0x24>)
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000008 	.word	0x20000008
 800219c:	20000480 	.word	0x20000480

080021a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return uwTick;
 80021a4:	4b03      	ldr	r3, [pc, #12]	@ (80021b4 <HAL_GetTick+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000480 	.word	0x20000480

080021b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021c0:	f7ff ffee 	bl	80021a0 <HAL_GetTick>
 80021c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d0:	d005      	beq.n	80021de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80021d2:	4b0a      	ldr	r3, [pc, #40]	@ (80021fc <HAL_Delay+0x44>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4413      	add	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021de:	bf00      	nop
 80021e0:	f7ff ffde 	bl	80021a0 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d8f7      	bhi.n	80021e0 <HAL_Delay+0x28>
  {
  }
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000008 	.word	0x20000008

08002200 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	431a      	orrs	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	609a      	str	r2, [r3, #8]
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	609a      	str	r2, [r3, #8]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002268:	b480      	push	{r7}
 800226a:	b087      	sub	sp, #28
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	3360      	adds	r3, #96	@ 0x60
 800227a:	461a      	mov	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <LL_ADC_SetOffset+0x44>)
 800228a:	4013      	ands	r3, r2
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	4313      	orrs	r3, r2
 8002298:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80022a0:	bf00      	nop
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	03fff000 	.word	0x03fff000

080022b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3360      	adds	r3, #96	@ 0x60
 80022be:	461a      	mov	r2, r3
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	3360      	adds	r3, #96	@ 0x60
 80022ec:	461a      	mov	r2, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	431a      	orrs	r2, r3
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002306:	bf00      	nop
 8002308:	371c      	adds	r7, #28
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002338:	b480      	push	{r7}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	3330      	adds	r3, #48	@ 0x30
 8002348:	461a      	mov	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	f003 030c 	and.w	r3, r3, #12
 8002354:	4413      	add	r3, r2
 8002356:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	211f      	movs	r1, #31
 8002364:	fa01 f303 	lsl.w	r3, r1, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	401a      	ands	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	0e9b      	lsrs	r3, r3, #26
 8002370:	f003 011f 	and.w	r1, r3, #31
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f003 031f 	and.w	r3, r3, #31
 800237a:	fa01 f303 	lsl.w	r3, r1, r3
 800237e:	431a      	orrs	r2, r3
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002384:	bf00      	nop
 8002386:	371c      	adds	r7, #28
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002390:	b480      	push	{r7}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	3314      	adds	r3, #20
 80023a0:	461a      	mov	r2, r3
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	0e5b      	lsrs	r3, r3, #25
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	4413      	add	r3, r2
 80023ae:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	0d1b      	lsrs	r3, r3, #20
 80023b8:	f003 031f 	and.w	r3, r3, #31
 80023bc:	2107      	movs	r1, #7
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	401a      	ands	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	0d1b      	lsrs	r3, r3, #20
 80023ca:	f003 031f 	and.w	r3, r3, #31
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	fa01 f303 	lsl.w	r3, r1, r3
 80023d4:	431a      	orrs	r2, r3
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023da:	bf00      	nop
 80023dc:	371c      	adds	r7, #28
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002400:	43db      	mvns	r3, r3
 8002402:	401a      	ands	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f003 0318 	and.w	r3, r3, #24
 800240a:	4908      	ldr	r1, [pc, #32]	@ (800242c <LL_ADC_SetChannelSingleDiff+0x44>)
 800240c:	40d9      	lsrs	r1, r3
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	400b      	ands	r3, r1
 8002412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002416:	431a      	orrs	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	0007ffff 	.word	0x0007ffff

08002430 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002440:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6093      	str	r3, [r2, #8]
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002464:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002468:	d101      	bne.n	800246e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800248c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002490:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024b8:	d101      	bne.n	80024be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024e0:	f043 0201 	orr.w	r2, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <LL_ADC_IsEnabled+0x18>
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <LL_ADC_IsEnabled+0x1a>
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800252a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800252e:	f043 0204 	orr.w	r2, r3, #4
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	2b04      	cmp	r3, #4
 8002554:	d101      	bne.n	800255a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b08      	cmp	r3, #8
 800257a:	d101      	bne.n	8002580 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
	...

08002590 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e126      	b.n	80027f8 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d109      	bne.n	80025cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7ff fa9b 	bl	8001af4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff3f 	bl	8002454 <LL_ADC_IsDeepPowerDownEnabled>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d004      	beq.n	80025e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff ff25 	bl	8002430 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff ff5a 	bl	80024a4 <LL_ADC_IsInternalRegulatorEnabled>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d115      	bne.n	8002622 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff ff3e 	bl	800247c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002600:	4b7f      	ldr	r3, [pc, #508]	@ (8002800 <HAL_ADC_Init+0x270>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	099b      	lsrs	r3, r3, #6
 8002606:	4a7f      	ldr	r2, [pc, #508]	@ (8002804 <HAL_ADC_Init+0x274>)
 8002608:	fba2 2303 	umull	r2, r3, r2, r3
 800260c:	099b      	lsrs	r3, r3, #6
 800260e:	3301      	adds	r3, #1
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002614:	e002      	b.n	800261c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	3b01      	subs	r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f9      	bne.n	8002616 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff ff3c 	bl	80024a4 <LL_ADC_IsInternalRegulatorEnabled>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10d      	bne.n	800264e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002636:	f043 0210 	orr.w	r2, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002642:	f043 0201 	orr.w	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff ff75 	bl	8002542 <LL_ADC_REG_IsConversionOngoing>
 8002658:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	2b00      	cmp	r3, #0
 8002664:	f040 80bf 	bne.w	80027e6 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	2b00      	cmp	r3, #0
 800266c:	f040 80bb 	bne.w	80027e6 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002674:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002678:	f043 0202 	orr.w	r2, r3, #2
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff35 	bl	80024f4 <LL_ADC_IsEnabled>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10b      	bne.n	80026a8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002690:	485d      	ldr	r0, [pc, #372]	@ (8002808 <HAL_ADC_Init+0x278>)
 8002692:	f7ff ff2f 	bl	80024f4 <LL_ADC_IsEnabled>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d105      	bne.n	80026a8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	4619      	mov	r1, r3
 80026a2:	485a      	ldr	r0, [pc, #360]	@ (800280c <HAL_ADC_Init+0x27c>)
 80026a4:	f7ff fdac 	bl	8002200 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	7e5b      	ldrb	r3, [r3, #25]
 80026ac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026b2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80026b8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80026be:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026c6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d106      	bne.n	80026e4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026da:	3b01      	subs	r3, #1
 80026dc:	045b      	lsls	r3, r3, #17
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d009      	beq.n	8002700 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	4b42      	ldr	r3, [pc, #264]	@ (8002810 <HAL_ADC_Init+0x280>)
 8002708:	4013      	ands	r3, r2
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6812      	ldr	r2, [r2, #0]
 800270e:	69b9      	ldr	r1, [r7, #24]
 8002710:	430b      	orrs	r3, r1
 8002712:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff ff25 	bl	8002568 <LL_ADC_INJ_IsConversionOngoing>
 800271e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d13d      	bne.n	80027a2 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d13a      	bne.n	80027a2 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002730:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002738:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002748:	f023 0302 	bic.w	r3, r3, #2
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	69b9      	ldr	r1, [r7, #24]
 8002752:	430b      	orrs	r3, r1
 8002754:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800275c:	2b01      	cmp	r3, #1
 800275e:	d118      	bne.n	8002792 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800276a:	f023 0304 	bic.w	r3, r3, #4
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002776:	4311      	orrs	r1, r2
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800277c:	4311      	orrs	r1, r2
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002782:	430a      	orrs	r2, r1
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	611a      	str	r2, [r3, #16]
 8002790:	e007      	b.n	80027a2 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0201 	bic.w	r2, r2, #1
 80027a0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d10c      	bne.n	80027c4 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b0:	f023 010f 	bic.w	r1, r3, #15
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	1e5a      	subs	r2, r3, #1
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80027c2:	e007      	b.n	80027d4 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 020f 	bic.w	r2, r2, #15
 80027d2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d8:	f023 0303 	bic.w	r3, r3, #3
 80027dc:	f043 0201 	orr.w	r2, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80027e4:	e007      	b.n	80027f6 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ea:	f043 0210 	orr.w	r2, r3, #16
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80027f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3720      	adds	r7, #32
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	20000000 	.word	0x20000000
 8002804:	053e2d63 	.word	0x053e2d63
 8002808:	50040000 	.word	0x50040000
 800280c:	50040300 	.word	0x50040300
 8002810:	fff0c007 	.word	0xfff0c007

08002814 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff fe8e 	bl	8002542 <LL_ADC_REG_IsConversionOngoing>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d14f      	bne.n	80028cc <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_ADC_Start+0x26>
 8002836:	2302      	movs	r3, #2
 8002838:	e04b      	b.n	80028d2 <HAL_ADC_Start+0xbe>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 fcc8 	bl	80031d8 <ADC_Enable>
 8002848:	4603      	mov	r3, r0
 800284a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d137      	bne.n	80028c2 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002856:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800285a:	f023 0301 	bic.w	r3, r3, #1
 800285e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800286e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002872:	d106      	bne.n	8002882 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002878:	f023 0206 	bic.w	r2, r3, #6
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002880:	e002      	b.n	8002888 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	221c      	movs	r2, #28
 800288e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d007      	beq.n	80028b6 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028aa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80028ae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff fe2d 	bl	800251a <LL_ADC_REG_StartConversion>
 80028c0:	e006      	b.n	80028d0 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80028ca:	e001      	b.n	80028d0 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028cc:	2302      	movs	r3, #2
 80028ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b086      	sub	sp, #24
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d102      	bne.n	80028f2 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80028ec:	2308      	movs	r3, #8
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	e010      	b.n	8002914 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d007      	beq.n	8002910 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002904:	f043 0220 	orr.w	r2, r3, #32
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e06f      	b.n	80029f0 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002910:	2304      	movs	r3, #4
 8002912:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002914:	f7ff fc44 	bl	80021a0 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800291a:	e021      	b.n	8002960 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002922:	d01d      	beq.n	8002960 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002924:	f7ff fc3c 	bl	80021a0 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d302      	bcc.n	800293a <HAL_ADC_PollForConversion+0x60>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d112      	bne.n	8002960 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10b      	bne.n	8002960 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800294c:	f043 0204 	orr.w	r2, r3, #4
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e047      	b.n	80029f0 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	4013      	ands	r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0d6      	beq.n	800291c <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002972:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fcc7 	bl	8002312 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d01c      	beq.n	80029c4 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	7e5b      	ldrb	r3, [r3, #25]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d118      	bne.n	80029c4 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b08      	cmp	r3, #8
 800299e:	d111      	bne.n	80029c4 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d105      	bne.n	80029c4 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029bc:	f043 0201 	orr.w	r2, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d104      	bne.n	80029dc <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2208      	movs	r2, #8
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	e008      	b.n	80029ee <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d103      	bne.n	80029ee <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	220c      	movs	r2, #12
 80029ec:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b0b6      	sub	sp, #216	@ 0xd8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x22>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e3bb      	b.n	80031ae <HAL_ADC_ConfigChannel+0x79a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff fd7d 	bl	8002542 <LL_ADC_REG_IsConversionOngoing>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f040 83a0 	bne.w	8003190 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b05      	cmp	r3, #5
 8002a5e:	d824      	bhi.n	8002aaa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	3b02      	subs	r3, #2
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d81b      	bhi.n	8002aa2 <HAL_ADC_ConfigChannel+0x8e>
 8002a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a70 <HAL_ADC_ConfigChannel+0x5c>)
 8002a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a70:	08002a81 	.word	0x08002a81
 8002a74:	08002a89 	.word	0x08002a89
 8002a78:	08002a91 	.word	0x08002a91
 8002a7c:	08002a99 	.word	0x08002a99
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002a80:	230c      	movs	r3, #12
 8002a82:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a86:	e010      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002a88:	2312      	movs	r3, #18
 8002a8a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a8e:	e00c      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002a90:	2318      	movs	r3, #24
 8002a92:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a96:	e008      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002a98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002aa0:	e003      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002aa2:	2306      	movs	r3, #6
 8002aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002aa8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002ab8:	f7ff fc3e 	bl	8002338 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fd3e 	bl	8002542 <LL_ADC_REG_IsConversionOngoing>
 8002ac6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fd4a 	bl	8002568 <LL_ADC_INJ_IsConversionOngoing>
 8002ad4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ad8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f040 81a4 	bne.w	8002e2a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ae2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 819f 	bne.w	8002e2a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6818      	ldr	r0, [r3, #0]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	6819      	ldr	r1, [r3, #0]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	461a      	mov	r2, r3
 8002afa:	f7ff fc49 	bl	8002390 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	695a      	ldr	r2, [r3, #20]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	08db      	lsrs	r3, r3, #3
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d00a      	beq.n	8002b36 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6818      	ldr	r0, [r3, #0]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	6919      	ldr	r1, [r3, #16]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b30:	f7ff fb9a 	bl	8002268 <LL_ADC_SetOffset>
 8002b34:	e179      	b.n	8002e2a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fbb7 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10a      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x14e>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2100      	movs	r1, #0
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff fbac 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	0e9b      	lsrs	r3, r3, #26
 8002b5c:	f003 021f 	and.w	r2, r3, #31
 8002b60:	e01e      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x18c>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2100      	movs	r1, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fba1 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b78:	fa93 f3a3 	rbit	r3, r3
 8002b7c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002b90:	2320      	movs	r3, #32
 8002b92:	e004      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002b94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b98:	fab3 f383 	clz	r3, r3
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d105      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x1a4>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	0e9b      	lsrs	r3, r3, #26
 8002bb2:	f003 031f 	and.w	r3, r3, #31
 8002bb6:	e018      	b.n	8002bea <HAL_ADC_ConfigChannel+0x1d6>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bc4:	fa93 f3a3 	rbit	r3, r3
 8002bc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002bcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002bd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002bdc:	2320      	movs	r3, #32
 8002bde:	e004      	b.n	8002bea <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002be0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002be4:	fab3 f383 	clz	r3, r3
 8002be8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d106      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fb70 	bl	80022dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2101      	movs	r1, #1
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fb54 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10a      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x214>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2101      	movs	r1, #1
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff fb49 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	0e9b      	lsrs	r3, r3, #26
 8002c22:	f003 021f 	and.w	r2, r3, #31
 8002c26:	e01e      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x252>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fb3e 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002c46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002c4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002c56:	2320      	movs	r3, #32
 8002c58:	e004      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002c5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c5e:	fab3 f383 	clz	r3, r3
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d105      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x26a>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	0e9b      	lsrs	r3, r3, #26
 8002c78:	f003 031f 	and.w	r3, r3, #31
 8002c7c:	e018      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x29c>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c86:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002c92:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c96:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002c9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002ca2:	2320      	movs	r3, #32
 8002ca4:	e004      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002ca6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002caa:	fab3 f383 	clz	r3, r3
 8002cae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d106      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2101      	movs	r1, #1
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fb0d 	bl	80022dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2102      	movs	r1, #2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff faf1 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10a      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x2da>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2102      	movs	r1, #2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff fae6 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	0e9b      	lsrs	r3, r3, #26
 8002ce8:	f003 021f 	and.w	r2, r3, #31
 8002cec:	e01e      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x318>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2102      	movs	r1, #2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fadb 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d04:	fa93 f3a3 	rbit	r3, r3
 8002d08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002d0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002d14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002d1c:	2320      	movs	r3, #32
 8002d1e:	e004      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d24:	fab3 f383 	clz	r3, r3
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d105      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x330>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	0e9b      	lsrs	r3, r3, #26
 8002d3e:	f003 031f 	and.w	r3, r3, #31
 8002d42:	e014      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x35a>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002d52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002d58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002d60:	2320      	movs	r3, #32
 8002d62:	e004      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002d64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d68:	fab3 f383 	clz	r3, r3
 8002d6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d106      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2200      	movs	r2, #0
 8002d78:	2102      	movs	r1, #2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff faae 	bl	80022dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2103      	movs	r1, #3
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fa92 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10a      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x398>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2103      	movs	r1, #3
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fa87 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002da2:	4603      	mov	r3, r0
 8002da4:	0e9b      	lsrs	r3, r3, #26
 8002da6:	f003 021f 	and.w	r2, r3, #31
 8002daa:	e017      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x3c8>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2103      	movs	r1, #3
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fa7c 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002db8:	4603      	mov	r3, r0
 8002dba:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002dbe:	fa93 f3a3 	rbit	r3, r3
 8002dc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002dc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dc6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002dc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002dce:	2320      	movs	r3, #32
 8002dd0:	e003      	b.n	8002dda <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002dd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dd4:	fab3 f383 	clz	r3, r3
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d105      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x3e0>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	0e9b      	lsrs	r3, r3, #26
 8002dee:	f003 031f 	and.w	r3, r3, #31
 8002df2:	e011      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x404>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dfc:	fa93 f3a3 	rbit	r3, r3
 8002e00:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002e02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e04:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002e06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002e0c:	2320      	movs	r3, #32
 8002e0e:	e003      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002e10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d106      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2200      	movs	r2, #0
 8002e22:	2103      	movs	r1, #3
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff fa59 	bl	80022dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fb60 	bl	80024f4 <LL_ADC_IsEnabled>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f040 8140 	bne.w	80030bc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	6819      	ldr	r1, [r3, #0]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	f7ff facd 	bl	80023e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	4a8f      	ldr	r2, [pc, #572]	@ (8003090 <HAL_ADC_ConfigChannel+0x67c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	f040 8131 	bne.w	80030bc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10b      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x46e>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	0e9b      	lsrs	r3, r3, #26
 8002e70:	3301      	adds	r3, #1
 8002e72:	f003 031f 	and.w	r3, r3, #31
 8002e76:	2b09      	cmp	r3, #9
 8002e78:	bf94      	ite	ls
 8002e7a:	2301      	movls	r3, #1
 8002e7c:	2300      	movhi	r3, #0
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	e019      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0x4a2>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e8a:	fa93 f3a3 	rbit	r3, r3
 8002e8e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e92:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002e94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002e9a:	2320      	movs	r3, #32
 8002e9c:	e003      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002e9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ea0:	fab3 f383 	clz	r3, r3
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	f003 031f 	and.w	r3, r3, #31
 8002eac:	2b09      	cmp	r3, #9
 8002eae:	bf94      	ite	ls
 8002eb0:	2301      	movls	r3, #1
 8002eb2:	2300      	movhi	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d079      	beq.n	8002fae <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d107      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x4c2>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	0e9b      	lsrs	r3, r3, #26
 8002ecc:	3301      	adds	r3, #1
 8002ece:	069b      	lsls	r3, r3, #26
 8002ed0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ed4:	e015      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x4ee>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002edc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ede:	fa93 f3a3 	rbit	r3, r3
 8002ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002ee4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ee6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002ee8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002eee:	2320      	movs	r3, #32
 8002ef0:	e003      	b.n	8002efa <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002ef2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ef4:	fab3 f383 	clz	r3, r3
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	3301      	adds	r3, #1
 8002efc:	069b      	lsls	r3, r3, #26
 8002efe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d109      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x50e>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	0e9b      	lsrs	r3, r3, #26
 8002f14:	3301      	adds	r3, #1
 8002f16:	f003 031f 	and.w	r3, r3, #31
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f20:	e017      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x53e>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f2a:	fa93 f3a3 	rbit	r3, r3
 8002f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002f30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f32:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002f34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002f3a:	2320      	movs	r3, #32
 8002f3c:	e003      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002f3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f40:	fab3 f383 	clz	r3, r3
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	3301      	adds	r3, #1
 8002f48:	f003 031f 	and.w	r3, r3, #31
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f52:	ea42 0103 	orr.w	r1, r2, r3
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10a      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x564>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	0e9b      	lsrs	r3, r3, #26
 8002f68:	3301      	adds	r3, #1
 8002f6a:	f003 021f 	and.w	r2, r3, #31
 8002f6e:	4613      	mov	r3, r2
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	4413      	add	r3, r2
 8002f74:	051b      	lsls	r3, r3, #20
 8002f76:	e018      	b.n	8002faa <HAL_ADC_ConfigChannel+0x596>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f80:	fa93 f3a3 	rbit	r3, r3
 8002f84:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f88:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002f90:	2320      	movs	r3, #32
 8002f92:	e003      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f96:	fab3 f383 	clz	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	f003 021f 	and.w	r2, r3, #31
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	4413      	add	r3, r2
 8002fa8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002faa:	430b      	orrs	r3, r1
 8002fac:	e081      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d107      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x5b6>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	0e9b      	lsrs	r3, r3, #26
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	069b      	lsls	r3, r3, #26
 8002fc4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fc8:	e015      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0x5e2>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd2:	fa93 f3a3 	rbit	r3, r3
 8002fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002fe2:	2320      	movs	r3, #32
 8002fe4:	e003      	b.n	8002fee <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fe8:	fab3 f383 	clz	r3, r3
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	3301      	adds	r3, #1
 8002ff0:	069b      	lsls	r3, r3, #26
 8002ff2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d109      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x602>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	0e9b      	lsrs	r3, r3, #26
 8003008:	3301      	adds	r3, #1
 800300a:	f003 031f 	and.w	r3, r3, #31
 800300e:	2101      	movs	r1, #1
 8003010:	fa01 f303 	lsl.w	r3, r1, r3
 8003014:	e017      	b.n	8003046 <HAL_ADC_ConfigChannel+0x632>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	fa93 f3a3 	rbit	r3, r3
 8003022:	61bb      	str	r3, [r7, #24]
  return result;
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800302e:	2320      	movs	r3, #32
 8003030:	e003      	b.n	800303a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	fab3 f383 	clz	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	3301      	adds	r3, #1
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	2101      	movs	r1, #1
 8003042:	fa01 f303 	lsl.w	r3, r1, r3
 8003046:	ea42 0103 	orr.w	r1, r2, r3
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10d      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x65e>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	0e9b      	lsrs	r3, r3, #26
 800305c:	3301      	adds	r3, #1
 800305e:	f003 021f 	and.w	r2, r3, #31
 8003062:	4613      	mov	r3, r2
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	4413      	add	r3, r2
 8003068:	3b1e      	subs	r3, #30
 800306a:	051b      	lsls	r3, r3, #20
 800306c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003070:	e01e      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x69c>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	60fb      	str	r3, [r7, #12]
  return result;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d104      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800308a:	2320      	movs	r3, #32
 800308c:	e006      	b.n	800309c <HAL_ADC_ConfigChannel+0x688>
 800308e:	bf00      	nop
 8003090:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	fab3 f383 	clz	r3, r3
 800309a:	b2db      	uxtb	r3, r3
 800309c:	3301      	adds	r3, #1
 800309e:	f003 021f 	and.w	r2, r3, #31
 80030a2:	4613      	mov	r3, r2
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	4413      	add	r3, r2
 80030a8:	3b1e      	subs	r3, #30
 80030aa:	051b      	lsls	r3, r3, #20
 80030ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030b0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030b6:	4619      	mov	r1, r3
 80030b8:	f7ff f96a 	bl	8002390 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	4b3d      	ldr	r3, [pc, #244]	@ (80031b8 <HAL_ADC_ConfigChannel+0x7a4>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d06c      	beq.n	80031a2 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030c8:	483c      	ldr	r0, [pc, #240]	@ (80031bc <HAL_ADC_ConfigChannel+0x7a8>)
 80030ca:	f7ff f8bf 	bl	800224c <LL_ADC_GetCommonPathInternalCh>
 80030ce:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a3a      	ldr	r2, [pc, #232]	@ (80031c0 <HAL_ADC_ConfigChannel+0x7ac>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d127      	bne.n	800312c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d121      	bne.n	800312c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a35      	ldr	r2, [pc, #212]	@ (80031c4 <HAL_ADC_ConfigChannel+0x7b0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d157      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030fa:	4619      	mov	r1, r3
 80030fc:	482f      	ldr	r0, [pc, #188]	@ (80031bc <HAL_ADC_ConfigChannel+0x7a8>)
 80030fe:	f7ff f892 	bl	8002226 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003102:	4b31      	ldr	r3, [pc, #196]	@ (80031c8 <HAL_ADC_ConfigChannel+0x7b4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	099b      	lsrs	r3, r3, #6
 8003108:	4a30      	ldr	r2, [pc, #192]	@ (80031cc <HAL_ADC_ConfigChannel+0x7b8>)
 800310a:	fba2 2303 	umull	r2, r3, r2, r3
 800310e:	099b      	lsrs	r3, r3, #6
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	4613      	mov	r3, r2
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800311c:	e002      	b.n	8003124 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	3b01      	subs	r3, #1
 8003122:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f9      	bne.n	800311e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800312a:	e03a      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a27      	ldr	r2, [pc, #156]	@ (80031d0 <HAL_ADC_ConfigChannel+0x7bc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d113      	bne.n	800315e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003136:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800313a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10d      	bne.n	800315e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a1f      	ldr	r2, [pc, #124]	@ (80031c4 <HAL_ADC_ConfigChannel+0x7b0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d12a      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800314c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003150:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003154:	4619      	mov	r1, r3
 8003156:	4819      	ldr	r0, [pc, #100]	@ (80031bc <HAL_ADC_ConfigChannel+0x7a8>)
 8003158:	f7ff f865 	bl	8002226 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800315c:	e021      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a1c      	ldr	r2, [pc, #112]	@ (80031d4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d11c      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003168:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800316c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d116      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a12      	ldr	r2, [pc, #72]	@ (80031c4 <HAL_ADC_ConfigChannel+0x7b0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d111      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800317e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003182:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003186:	4619      	mov	r1, r3
 8003188:	480c      	ldr	r0, [pc, #48]	@ (80031bc <HAL_ADC_ConfigChannel+0x7a8>)
 800318a:	f7ff f84c 	bl	8002226 <LL_ADC_SetCommonPathInternalCh>
 800318e:	e008      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003194:	f043 0220 	orr.w	r2, r3, #32
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80031aa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	37d8      	adds	r7, #216	@ 0xd8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	80080000 	.word	0x80080000
 80031bc:	50040300 	.word	0x50040300
 80031c0:	c7520000 	.word	0xc7520000
 80031c4:	50040000 	.word	0x50040000
 80031c8:	20000000 	.word	0x20000000
 80031cc:	053e2d63 	.word	0x053e2d63
 80031d0:	cb840000 	.word	0xcb840000
 80031d4:	80000001 	.word	0x80000001

080031d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff f983 	bl	80024f4 <LL_ADC_IsEnabled>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d169      	bne.n	80032c8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	4b36      	ldr	r3, [pc, #216]	@ (80032d4 <ADC_Enable+0xfc>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00d      	beq.n	800321e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003206:	f043 0210 	orr.w	r2, r3, #16
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003212:	f043 0201 	orr.w	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e055      	b.n	80032ca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff f952 	bl	80024cc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003228:	482b      	ldr	r0, [pc, #172]	@ (80032d8 <ADC_Enable+0x100>)
 800322a:	f7ff f80f 	bl	800224c <LL_ADC_GetCommonPathInternalCh>
 800322e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003230:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003234:	2b00      	cmp	r3, #0
 8003236:	d013      	beq.n	8003260 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003238:	4b28      	ldr	r3, [pc, #160]	@ (80032dc <ADC_Enable+0x104>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	099b      	lsrs	r3, r3, #6
 800323e:	4a28      	ldr	r2, [pc, #160]	@ (80032e0 <ADC_Enable+0x108>)
 8003240:	fba2 2303 	umull	r2, r3, r2, r3
 8003244:	099b      	lsrs	r3, r3, #6
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	4613      	mov	r3, r2
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003252:	e002      	b.n	800325a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	3b01      	subs	r3, #1
 8003258:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1f9      	bne.n	8003254 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003260:	f7fe ff9e 	bl	80021a0 <HAL_GetTick>
 8003264:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003266:	e028      	b.n	80032ba <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff f941 	bl	80024f4 <LL_ADC_IsEnabled>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d104      	bne.n	8003282 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff f925 	bl	80024cc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003282:	f7fe ff8d 	bl	80021a0 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d914      	bls.n	80032ba <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b01      	cmp	r3, #1
 800329c:	d00d      	beq.n	80032ba <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a2:	f043 0210 	orr.w	r2, r3, #16
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ae:	f043 0201 	orr.w	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e007      	b.n	80032ca <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d1cf      	bne.n	8003268 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	8000003f 	.word	0x8000003f
 80032d8:	50040300 	.word	0x50040300
 80032dc:	20000000 	.word	0x20000000
 80032e0:	053e2d63 	.word	0x053e2d63

080032e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003328 <__NVIC_SetPriorityGrouping+0x44>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003300:	4013      	ands	r3, r2
 8003302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800330c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003310:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003316:	4a04      	ldr	r2, [pc, #16]	@ (8003328 <__NVIC_SetPriorityGrouping+0x44>)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	60d3      	str	r3, [r2, #12]
}
 800331c:	bf00      	nop
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	e000ed00 	.word	0xe000ed00

0800332c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003330:	4b04      	ldr	r3, [pc, #16]	@ (8003344 <__NVIC_GetPriorityGrouping+0x18>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	0a1b      	lsrs	r3, r3, #8
 8003336:	f003 0307 	and.w	r3, r3, #7
}
 800333a:	4618      	mov	r0, r3
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	e000ed00 	.word	0xe000ed00

08003348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003356:	2b00      	cmp	r3, #0
 8003358:	db0b      	blt.n	8003372 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	f003 021f 	and.w	r2, r3, #31
 8003360:	4907      	ldr	r1, [pc, #28]	@ (8003380 <__NVIC_EnableIRQ+0x38>)
 8003362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	2001      	movs	r0, #1
 800336a:	fa00 f202 	lsl.w	r2, r0, r2
 800336e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	e000e100 	.word	0xe000e100

08003384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	6039      	str	r1, [r7, #0]
 800338e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003394:	2b00      	cmp	r3, #0
 8003396:	db0a      	blt.n	80033ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	b2da      	uxtb	r2, r3
 800339c:	490c      	ldr	r1, [pc, #48]	@ (80033d0 <__NVIC_SetPriority+0x4c>)
 800339e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a2:	0112      	lsls	r2, r2, #4
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	440b      	add	r3, r1
 80033a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033ac:	e00a      	b.n	80033c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	4908      	ldr	r1, [pc, #32]	@ (80033d4 <__NVIC_SetPriority+0x50>)
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	3b04      	subs	r3, #4
 80033bc:	0112      	lsls	r2, r2, #4
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	440b      	add	r3, r1
 80033c2:	761a      	strb	r2, [r3, #24]
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	e000e100 	.word	0xe000e100
 80033d4:	e000ed00 	.word	0xe000ed00

080033d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033d8:	b480      	push	{r7}
 80033da:	b089      	sub	sp, #36	@ 0x24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f1c3 0307 	rsb	r3, r3, #7
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	bf28      	it	cs
 80033f6:	2304      	movcs	r3, #4
 80033f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	3304      	adds	r3, #4
 80033fe:	2b06      	cmp	r3, #6
 8003400:	d902      	bls.n	8003408 <NVIC_EncodePriority+0x30>
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3b03      	subs	r3, #3
 8003406:	e000      	b.n	800340a <NVIC_EncodePriority+0x32>
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800340c:	f04f 32ff 	mov.w	r2, #4294967295
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43da      	mvns	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	401a      	ands	r2, r3
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003420:	f04f 31ff 	mov.w	r1, #4294967295
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	fa01 f303 	lsl.w	r3, r1, r3
 800342a:	43d9      	mvns	r1, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003430:	4313      	orrs	r3, r2
         );
}
 8003432:	4618      	mov	r0, r3
 8003434:	3724      	adds	r7, #36	@ 0x24
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
	...

08003440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3b01      	subs	r3, #1
 800344c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003450:	d301      	bcc.n	8003456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003452:	2301      	movs	r3, #1
 8003454:	e00f      	b.n	8003476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003456:	4a0a      	ldr	r2, [pc, #40]	@ (8003480 <SysTick_Config+0x40>)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3b01      	subs	r3, #1
 800345c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800345e:	210f      	movs	r1, #15
 8003460:	f04f 30ff 	mov.w	r0, #4294967295
 8003464:	f7ff ff8e 	bl	8003384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003468:	4b05      	ldr	r3, [pc, #20]	@ (8003480 <SysTick_Config+0x40>)
 800346a:	2200      	movs	r2, #0
 800346c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800346e:	4b04      	ldr	r3, [pc, #16]	@ (8003480 <SysTick_Config+0x40>)
 8003470:	2207      	movs	r2, #7
 8003472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	e000e010 	.word	0xe000e010

08003484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7ff ff29 	bl	80032e4 <__NVIC_SetPriorityGrouping>
}
 8003492:	bf00      	nop
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b086      	sub	sp, #24
 800349e:	af00      	add	r7, sp, #0
 80034a0:	4603      	mov	r3, r0
 80034a2:	60b9      	str	r1, [r7, #8]
 80034a4:	607a      	str	r2, [r7, #4]
 80034a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034ac:	f7ff ff3e 	bl	800332c <__NVIC_GetPriorityGrouping>
 80034b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	68b9      	ldr	r1, [r7, #8]
 80034b6:	6978      	ldr	r0, [r7, #20]
 80034b8:	f7ff ff8e 	bl	80033d8 <NVIC_EncodePriority>
 80034bc:	4602      	mov	r2, r0
 80034be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034c2:	4611      	mov	r1, r2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff ff5d 	bl	8003384 <__NVIC_SetPriority>
}
 80034ca:	bf00      	nop
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	4603      	mov	r3, r0
 80034da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff ff31 	bl	8003348 <__NVIC_EnableIRQ>
}
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff ffa2 	bl	8003440 <SysTick_Config>
 80034fc:	4603      	mov	r3, r0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003516:	e154      	b.n	80037c2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	2101      	movs	r1, #1
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	fa01 f303 	lsl.w	r3, r1, r3
 8003524:	4013      	ands	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 8146 	beq.w	80037bc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 0303 	and.w	r3, r3, #3
 8003538:	2b01      	cmp	r3, #1
 800353a:	d005      	beq.n	8003548 <HAL_GPIO_Init+0x40>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 0303 	and.w	r3, r3, #3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d130      	bne.n	80035aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	2203      	movs	r2, #3
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4013      	ands	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800357e:	2201      	movs	r2, #1
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	43db      	mvns	r3, r3
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4013      	ands	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	091b      	lsrs	r3, r3, #4
 8003594:	f003 0201 	and.w	r2, r3, #1
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d017      	beq.n	80035e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	2203      	movs	r2, #3
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43db      	mvns	r3, r3
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4013      	ands	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d123      	bne.n	800363a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	08da      	lsrs	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3208      	adds	r2, #8
 80035fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	220f      	movs	r2, #15
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	4013      	ands	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	08da      	lsrs	r2, r3, #3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3208      	adds	r2, #8
 8003634:	6939      	ldr	r1, [r7, #16]
 8003636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	2203      	movs	r2, #3
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	43db      	mvns	r3, r3
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4013      	ands	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 0203 	and.w	r2, r3, #3
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 80a0 	beq.w	80037bc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800367c:	4b58      	ldr	r3, [pc, #352]	@ (80037e0 <HAL_GPIO_Init+0x2d8>)
 800367e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003680:	4a57      	ldr	r2, [pc, #348]	@ (80037e0 <HAL_GPIO_Init+0x2d8>)
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	6613      	str	r3, [r2, #96]	@ 0x60
 8003688:	4b55      	ldr	r3, [pc, #340]	@ (80037e0 <HAL_GPIO_Init+0x2d8>)
 800368a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003694:	4a53      	ldr	r2, [pc, #332]	@ (80037e4 <HAL_GPIO_Init+0x2dc>)
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	089b      	lsrs	r3, r3, #2
 800369a:	3302      	adds	r3, #2
 800369c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f003 0303 	and.w	r3, r3, #3
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	220f      	movs	r2, #15
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4013      	ands	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80036be:	d019      	beq.n	80036f4 <HAL_GPIO_Init+0x1ec>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a49      	ldr	r2, [pc, #292]	@ (80037e8 <HAL_GPIO_Init+0x2e0>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d013      	beq.n	80036f0 <HAL_GPIO_Init+0x1e8>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a48      	ldr	r2, [pc, #288]	@ (80037ec <HAL_GPIO_Init+0x2e4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d00d      	beq.n	80036ec <HAL_GPIO_Init+0x1e4>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a47      	ldr	r2, [pc, #284]	@ (80037f0 <HAL_GPIO_Init+0x2e8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d007      	beq.n	80036e8 <HAL_GPIO_Init+0x1e0>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a46      	ldr	r2, [pc, #280]	@ (80037f4 <HAL_GPIO_Init+0x2ec>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d101      	bne.n	80036e4 <HAL_GPIO_Init+0x1dc>
 80036e0:	2304      	movs	r3, #4
 80036e2:	e008      	b.n	80036f6 <HAL_GPIO_Init+0x1ee>
 80036e4:	2307      	movs	r3, #7
 80036e6:	e006      	b.n	80036f6 <HAL_GPIO_Init+0x1ee>
 80036e8:	2303      	movs	r3, #3
 80036ea:	e004      	b.n	80036f6 <HAL_GPIO_Init+0x1ee>
 80036ec:	2302      	movs	r3, #2
 80036ee:	e002      	b.n	80036f6 <HAL_GPIO_Init+0x1ee>
 80036f0:	2301      	movs	r3, #1
 80036f2:	e000      	b.n	80036f6 <HAL_GPIO_Init+0x1ee>
 80036f4:	2300      	movs	r3, #0
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	f002 0203 	and.w	r2, r2, #3
 80036fc:	0092      	lsls	r2, r2, #2
 80036fe:	4093      	lsls	r3, r2
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	4313      	orrs	r3, r2
 8003704:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003706:	4937      	ldr	r1, [pc, #220]	@ (80037e4 <HAL_GPIO_Init+0x2dc>)
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	089b      	lsrs	r3, r3, #2
 800370c:	3302      	adds	r3, #2
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003714:	4b38      	ldr	r3, [pc, #224]	@ (80037f8 <HAL_GPIO_Init+0x2f0>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	43db      	mvns	r3, r3
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4013      	ands	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4313      	orrs	r3, r2
 8003736:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003738:	4a2f      	ldr	r2, [pc, #188]	@ (80037f8 <HAL_GPIO_Init+0x2f0>)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800373e:	4b2e      	ldr	r3, [pc, #184]	@ (80037f8 <HAL_GPIO_Init+0x2f0>)
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	43db      	mvns	r3, r3
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4013      	ands	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003762:	4a25      	ldr	r2, [pc, #148]	@ (80037f8 <HAL_GPIO_Init+0x2f0>)
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003768:	4b23      	ldr	r3, [pc, #140]	@ (80037f8 <HAL_GPIO_Init+0x2f0>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	43db      	mvns	r3, r3
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	4013      	ands	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	4313      	orrs	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800378c:	4a1a      	ldr	r2, [pc, #104]	@ (80037f8 <HAL_GPIO_Init+0x2f0>)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003792:	4b19      	ldr	r3, [pc, #100]	@ (80037f8 <HAL_GPIO_Init+0x2f0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	43db      	mvns	r3, r3
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	4013      	ands	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037b6:	4a10      	ldr	r2, [pc, #64]	@ (80037f8 <HAL_GPIO_Init+0x2f0>)
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	3301      	adds	r3, #1
 80037c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	fa22 f303 	lsr.w	r3, r2, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f47f aea3 	bne.w	8003518 <HAL_GPIO_Init+0x10>
  }
}
 80037d2:	bf00      	nop
 80037d4:	bf00      	nop
 80037d6:	371c      	adds	r7, #28
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	40021000 	.word	0x40021000
 80037e4:	40010000 	.word	0x40010000
 80037e8:	48000400 	.word	0x48000400
 80037ec:	48000800 	.word	0x48000800
 80037f0:	48000c00 	.word	0x48000c00
 80037f4:	48001000 	.word	0x48001000
 80037f8:	40010400 	.word	0x40010400

080037fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	807b      	strh	r3, [r7, #2]
 8003808:	4613      	mov	r3, r2
 800380a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800380c:	787b      	ldrb	r3, [r7, #1]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003812:	887a      	ldrh	r2, [r7, #2]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003818:	e002      	b.n	8003820 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800381a:	887a      	ldrh	r2, [r7, #2]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003836:	4b08      	ldr	r3, [pc, #32]	@ (8003858 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003838:	695a      	ldr	r2, [r3, #20]
 800383a:	88fb      	ldrh	r3, [r7, #6]
 800383c:	4013      	ands	r3, r2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d006      	beq.n	8003850 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003842:	4a05      	ldr	r2, [pc, #20]	@ (8003858 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003844:	88fb      	ldrh	r3, [r7, #6]
 8003846:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe f914 	bl	8001a78 <HAL_GPIO_EXTI_Callback>
  }
}
 8003850:	bf00      	nop
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40010400 	.word	0x40010400

0800385c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e08d      	b.n	800398a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fe f99c 	bl	8001bc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2224      	movs	r2, #36	@ 0x24
 800388c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0201 	bic.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80038ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d107      	bne.n	80038d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	e006      	b.n	80038e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80038e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d108      	bne.n	80038fe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038fa:	605a      	str	r2, [r3, #4]
 80038fc:	e007      	b.n	800390e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800390c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800391c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003920:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003930:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691a      	ldr	r2, [r3, #16]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69d9      	ldr	r1, [r3, #28]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1a      	ldr	r2, [r3, #32]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af02      	add	r7, sp, #8
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	4608      	mov	r0, r1
 800399e:	4611      	mov	r1, r2
 80039a0:	461a      	mov	r2, r3
 80039a2:	4603      	mov	r3, r0
 80039a4:	817b      	strh	r3, [r7, #10]
 80039a6:	460b      	mov	r3, r1
 80039a8:	813b      	strh	r3, [r7, #8]
 80039aa:	4613      	mov	r3, r2
 80039ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b20      	cmp	r3, #32
 80039b8:	f040 80f9 	bne.w	8003bae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <HAL_I2C_Mem_Write+0x34>
 80039c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d105      	bne.n	80039d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039ce:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e0ed      	b.n	8003bb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d101      	bne.n	80039e2 <HAL_I2C_Mem_Write+0x4e>
 80039de:	2302      	movs	r3, #2
 80039e0:	e0e6      	b.n	8003bb0 <HAL_I2C_Mem_Write+0x21c>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039ea:	f7fe fbd9 	bl	80021a0 <HAL_GetTick>
 80039ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	2319      	movs	r3, #25
 80039f6:	2201      	movs	r2, #1
 80039f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 fac3 	bl	8003f88 <I2C_WaitOnFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0d1      	b.n	8003bb0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2221      	movs	r2, #33	@ 0x21
 8003a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2240      	movs	r2, #64	@ 0x40
 8003a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6a3a      	ldr	r2, [r7, #32]
 8003a26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a34:	88f8      	ldrh	r0, [r7, #6]
 8003a36:	893a      	ldrh	r2, [r7, #8]
 8003a38:	8979      	ldrh	r1, [r7, #10]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	9301      	str	r3, [sp, #4]
 8003a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	4603      	mov	r3, r0
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 f9d3 	bl	8003df0 <I2C_RequestMemoryWrite>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0a9      	b.n	8003bb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2bff      	cmp	r3, #255	@ 0xff
 8003a64:	d90e      	bls.n	8003a84 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	22ff      	movs	r2, #255	@ 0xff
 8003a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	8979      	ldrh	r1, [r7, #10]
 8003a74:	2300      	movs	r3, #0
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 fc47 	bl	8004310 <I2C_TransferConfig>
 8003a82:	e00f      	b.n	8003aa4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	8979      	ldrh	r1, [r7, #10]
 8003a96:	2300      	movs	r3, #0
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 fc36 	bl	8004310 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 fac6 	bl	800403a <I2C_WaitOnTXISFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e07b      	b.n	8003bb0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abc:	781a      	ldrb	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d034      	beq.n	8003b5c <HAL_I2C_Mem_Write+0x1c8>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d130      	bne.n	8003b5c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b00:	2200      	movs	r2, #0
 8003b02:	2180      	movs	r1, #128	@ 0x80
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 fa3f 	bl	8003f88 <I2C_WaitOnFlagUntilTimeout>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e04d      	b.n	8003bb0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2bff      	cmp	r3, #255	@ 0xff
 8003b1c:	d90e      	bls.n	8003b3c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	22ff      	movs	r2, #255	@ 0xff
 8003b22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	8979      	ldrh	r1, [r7, #10]
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 fbeb 	bl	8004310 <I2C_TransferConfig>
 8003b3a:	e00f      	b.n	8003b5c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	8979      	ldrh	r1, [r7, #10]
 8003b4e:	2300      	movs	r3, #0
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 fbda 	bl	8004310 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d19e      	bne.n	8003aa4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 faac 	bl	80040c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e01a      	b.n	8003bb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6859      	ldr	r1, [r3, #4]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb8 <HAL_I2C_Mem_Write+0x224>)
 8003b8e:	400b      	ands	r3, r1
 8003b90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	e000      	b.n	8003bb0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003bae:	2302      	movs	r3, #2
  }
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	fe00e800 	.word	0xfe00e800

08003bbc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	4608      	mov	r0, r1
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	461a      	mov	r2, r3
 8003bca:	4603      	mov	r3, r0
 8003bcc:	817b      	strh	r3, [r7, #10]
 8003bce:	460b      	mov	r3, r1
 8003bd0:	813b      	strh	r3, [r7, #8]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b20      	cmp	r3, #32
 8003be0:	f040 80fd 	bne.w	8003dde <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <HAL_I2C_Mem_Read+0x34>
 8003bea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d105      	bne.n	8003bfc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bf6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e0f1      	b.n	8003de0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d101      	bne.n	8003c0a <HAL_I2C_Mem_Read+0x4e>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e0ea      	b.n	8003de0 <HAL_I2C_Mem_Read+0x224>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c12:	f7fe fac5 	bl	80021a0 <HAL_GetTick>
 8003c16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	2319      	movs	r3, #25
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 f9af 	bl	8003f88 <I2C_WaitOnFlagUntilTimeout>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e0d5      	b.n	8003de0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2222      	movs	r2, #34	@ 0x22
 8003c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2240      	movs	r2, #64	@ 0x40
 8003c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a3a      	ldr	r2, [r7, #32]
 8003c4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003c54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c5c:	88f8      	ldrh	r0, [r7, #6]
 8003c5e:	893a      	ldrh	r2, [r7, #8]
 8003c60:	8979      	ldrh	r1, [r7, #10]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	9301      	str	r3, [sp, #4]
 8003c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f913 	bl	8003e98 <I2C_RequestMemoryRead>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e0ad      	b.n	8003de0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2bff      	cmp	r3, #255	@ 0xff
 8003c8c:	d90e      	bls.n	8003cac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2201      	movs	r2, #1
 8003c92:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	8979      	ldrh	r1, [r7, #10]
 8003c9c:	4b52      	ldr	r3, [pc, #328]	@ (8003de8 <HAL_I2C_Mem_Read+0x22c>)
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 fb33 	bl	8004310 <I2C_TransferConfig>
 8003caa:	e00f      	b.n	8003ccc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	8979      	ldrh	r1, [r7, #10]
 8003cbe:	4b4a      	ldr	r3, [pc, #296]	@ (8003de8 <HAL_I2C_Mem_Read+0x22c>)
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 fb22 	bl	8004310 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2104      	movs	r1, #4
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 f956 	bl	8003f88 <I2C_WaitOnFlagUntilTimeout>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e07c      	b.n	8003de0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d034      	beq.n	8003d8c <HAL_I2C_Mem_Read+0x1d0>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d130      	bne.n	8003d8c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d30:	2200      	movs	r2, #0
 8003d32:	2180      	movs	r1, #128	@ 0x80
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 f927 	bl	8003f88 <I2C_WaitOnFlagUntilTimeout>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e04d      	b.n	8003de0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	2bff      	cmp	r3, #255	@ 0xff
 8003d4c:	d90e      	bls.n	8003d6c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2201      	movs	r2, #1
 8003d52:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	8979      	ldrh	r1, [r7, #10]
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 fad3 	bl	8004310 <I2C_TransferConfig>
 8003d6a:	e00f      	b.n	8003d8c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	8979      	ldrh	r1, [r7, #10]
 8003d7e:	2300      	movs	r3, #0
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 fac2 	bl	8004310 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d19a      	bne.n	8003ccc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 f994 	bl	80040c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e01a      	b.n	8003de0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2220      	movs	r2, #32
 8003db0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6859      	ldr	r1, [r3, #4]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003dec <HAL_I2C_Mem_Read+0x230>)
 8003dbe:	400b      	ands	r3, r1
 8003dc0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e000      	b.n	8003de0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003dde:	2302      	movs	r3, #2
  }
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	80002400 	.word	0x80002400
 8003dec:	fe00e800 	.word	0xfe00e800

08003df0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	4608      	mov	r0, r1
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4603      	mov	r3, r0
 8003e00:	817b      	strh	r3, [r7, #10]
 8003e02:	460b      	mov	r3, r1
 8003e04:	813b      	strh	r3, [r7, #8]
 8003e06:	4613      	mov	r3, r2
 8003e08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003e0a:	88fb      	ldrh	r3, [r7, #6]
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	8979      	ldrh	r1, [r7, #10]
 8003e10:	4b20      	ldr	r3, [pc, #128]	@ (8003e94 <I2C_RequestMemoryWrite+0xa4>)
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 fa79 	bl	8004310 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e1e:	69fa      	ldr	r2, [r7, #28]
 8003e20:	69b9      	ldr	r1, [r7, #24]
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 f909 	bl	800403a <I2C_WaitOnTXISFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e02c      	b.n	8003e8c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e32:	88fb      	ldrh	r3, [r7, #6]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d105      	bne.n	8003e44 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e38:	893b      	ldrh	r3, [r7, #8]
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e42:	e015      	b.n	8003e70 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e44:	893b      	ldrh	r3, [r7, #8]
 8003e46:	0a1b      	lsrs	r3, r3, #8
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e52:	69fa      	ldr	r2, [r7, #28]
 8003e54:	69b9      	ldr	r1, [r7, #24]
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 f8ef 	bl	800403a <I2C_WaitOnTXISFlagUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e012      	b.n	8003e8c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e66:	893b      	ldrh	r3, [r7, #8]
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	2200      	movs	r2, #0
 8003e78:	2180      	movs	r1, #128	@ 0x80
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f884 	bl	8003f88 <I2C_WaitOnFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e000      	b.n	8003e8c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	80002000 	.word	0x80002000

08003e98 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af02      	add	r7, sp, #8
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	4608      	mov	r0, r1
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	817b      	strh	r3, [r7, #10]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	813b      	strh	r3, [r7, #8]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003eb2:	88fb      	ldrh	r3, [r7, #6]
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	8979      	ldrh	r1, [r7, #10]
 8003eb8:	4b20      	ldr	r3, [pc, #128]	@ (8003f3c <I2C_RequestMemoryRead+0xa4>)
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 fa26 	bl	8004310 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	69b9      	ldr	r1, [r7, #24]
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 f8b6 	bl	800403a <I2C_WaitOnTXISFlagUntilTimeout>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e02c      	b.n	8003f32 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ed8:	88fb      	ldrh	r3, [r7, #6]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d105      	bne.n	8003eea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ede:	893b      	ldrh	r3, [r7, #8]
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ee8:	e015      	b.n	8003f16 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003eea:	893b      	ldrh	r3, [r7, #8]
 8003eec:	0a1b      	lsrs	r3, r3, #8
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef8:	69fa      	ldr	r2, [r7, #28]
 8003efa:	69b9      	ldr	r1, [r7, #24]
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f89c 	bl	800403a <I2C_WaitOnTXISFlagUntilTimeout>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e012      	b.n	8003f32 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f0c:	893b      	ldrh	r3, [r7, #8]
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	2140      	movs	r1, #64	@ 0x40
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 f831 	bl	8003f88 <I2C_WaitOnFlagUntilTimeout>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e000      	b.n	8003f32 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	80002000 	.word	0x80002000

08003f40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d103      	bne.n	8003f5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d007      	beq.n	8003f7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	699a      	ldr	r2, [r3, #24]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0201 	orr.w	r2, r2, #1
 8003f7a:	619a      	str	r2, [r3, #24]
  }
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	603b      	str	r3, [r7, #0]
 8003f94:	4613      	mov	r3, r2
 8003f96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f98:	e03b      	b.n	8004012 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	6839      	ldr	r1, [r7, #0]
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 f8d6 	bl	8004150 <I2C_IsErrorOccurred>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e041      	b.n	8004032 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb4:	d02d      	beq.n	8004012 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb6:	f7fe f8f3 	bl	80021a0 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d302      	bcc.n	8003fcc <I2C_WaitOnFlagUntilTimeout+0x44>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d122      	bne.n	8004012 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	bf0c      	ite	eq
 8003fdc:	2301      	moveq	r3, #1
 8003fde:	2300      	movne	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d113      	bne.n	8004012 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fee:	f043 0220 	orr.w	r2, r3, #32
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e00f      	b.n	8004032 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	699a      	ldr	r2, [r3, #24]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	4013      	ands	r3, r2
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	429a      	cmp	r2, r3
 8004020:	bf0c      	ite	eq
 8004022:	2301      	moveq	r3, #1
 8004024:	2300      	movne	r3, #0
 8004026:	b2db      	uxtb	r3, r3
 8004028:	461a      	mov	r2, r3
 800402a:	79fb      	ldrb	r3, [r7, #7]
 800402c:	429a      	cmp	r2, r3
 800402e:	d0b4      	beq.n	8003f9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b084      	sub	sp, #16
 800403e:	af00      	add	r7, sp, #0
 8004040:	60f8      	str	r0, [r7, #12]
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004046:	e033      	b.n	80040b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	68b9      	ldr	r1, [r7, #8]
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 f87f 	bl	8004150 <I2C_IsErrorOccurred>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e031      	b.n	80040c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004062:	d025      	beq.n	80040b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004064:	f7fe f89c 	bl	80021a0 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	429a      	cmp	r2, r3
 8004072:	d302      	bcc.n	800407a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d11a      	bne.n	80040b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b02      	cmp	r3, #2
 8004086:	d013      	beq.n	80040b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408c:	f043 0220 	orr.w	r2, r3, #32
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e007      	b.n	80040c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d1c4      	bne.n	8004048 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040d4:	e02f      	b.n	8004136 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f838 	bl	8004150 <I2C_IsErrorOccurred>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e02d      	b.n	8004146 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ea:	f7fe f859 	bl	80021a0 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d302      	bcc.n	8004100 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d11a      	bne.n	8004136 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	f003 0320 	and.w	r3, r3, #32
 800410a:	2b20      	cmp	r3, #32
 800410c:	d013      	beq.n	8004136 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004112:	f043 0220 	orr.w	r2, r3, #32
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2220      	movs	r2, #32
 800411e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e007      	b.n	8004146 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	f003 0320 	and.w	r3, r3, #32
 8004140:	2b20      	cmp	r3, #32
 8004142:	d1c8      	bne.n	80040d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b08a      	sub	sp, #40	@ 0x28
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800415c:	2300      	movs	r3, #0
 800415e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800416a:	2300      	movs	r3, #0
 800416c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	f003 0310 	and.w	r3, r3, #16
 8004178:	2b00      	cmp	r3, #0
 800417a:	d068      	beq.n	800424e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2210      	movs	r2, #16
 8004182:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004184:	e049      	b.n	800421a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418c:	d045      	beq.n	800421a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800418e:	f7fe f807 	bl	80021a0 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	429a      	cmp	r2, r3
 800419c:	d302      	bcc.n	80041a4 <I2C_IsErrorOccurred+0x54>
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d13a      	bne.n	800421a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041c6:	d121      	bne.n	800420c <I2C_IsErrorOccurred+0xbc>
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041ce:	d01d      	beq.n	800420c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80041d0:	7cfb      	ldrb	r3, [r7, #19]
 80041d2:	2b20      	cmp	r3, #32
 80041d4:	d01a      	beq.n	800420c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80041e6:	f7fd ffdb 	bl	80021a0 <HAL_GetTick>
 80041ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041ec:	e00e      	b.n	800420c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80041ee:	f7fd ffd7 	bl	80021a0 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b19      	cmp	r3, #25
 80041fa:	d907      	bls.n	800420c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	f043 0320 	orr.w	r3, r3, #32
 8004202:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800420a:	e006      	b.n	800421a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	f003 0320 	and.w	r3, r3, #32
 8004216:	2b20      	cmp	r3, #32
 8004218:	d1e9      	bne.n	80041ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	f003 0320 	and.w	r3, r3, #32
 8004224:	2b20      	cmp	r3, #32
 8004226:	d003      	beq.n	8004230 <I2C_IsErrorOccurred+0xe0>
 8004228:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0aa      	beq.n	8004186 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004230:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004234:	2b00      	cmp	r3, #0
 8004236:	d103      	bne.n	8004240 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2220      	movs	r2, #32
 800423e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	f043 0304 	orr.w	r3, r3, #4
 8004246:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00b      	beq.n	8004278 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004270:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00b      	beq.n	800429a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	f043 0308 	orr.w	r3, r3, #8
 8004288:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004292:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00b      	beq.n	80042bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	f043 0302 	orr.w	r3, r3, #2
 80042aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80042bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d01c      	beq.n	80042fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f7ff fe3b 	bl	8003f40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6859      	ldr	r1, [r3, #4]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	4b0d      	ldr	r3, [pc, #52]	@ (800430c <I2C_IsErrorOccurred+0x1bc>)
 80042d6:	400b      	ands	r3, r1
 80042d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	431a      	orrs	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80042fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004302:	4618      	mov	r0, r3
 8004304:	3728      	adds	r7, #40	@ 0x28
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	fe00e800 	.word	0xfe00e800

08004310 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	607b      	str	r3, [r7, #4]
 800431a:	460b      	mov	r3, r1
 800431c:	817b      	strh	r3, [r7, #10]
 800431e:	4613      	mov	r3, r2
 8004320:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004322:	897b      	ldrh	r3, [r7, #10]
 8004324:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004328:	7a7b      	ldrb	r3, [r7, #9]
 800432a:	041b      	lsls	r3, r3, #16
 800432c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004330:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	4313      	orrs	r3, r2
 800433a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800433e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	6a3b      	ldr	r3, [r7, #32]
 8004348:	0d5b      	lsrs	r3, r3, #21
 800434a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800434e:	4b08      	ldr	r3, [pc, #32]	@ (8004370 <I2C_TransferConfig+0x60>)
 8004350:	430b      	orrs	r3, r1
 8004352:	43db      	mvns	r3, r3
 8004354:	ea02 0103 	and.w	r1, r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	430a      	orrs	r2, r1
 8004360:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004362:	bf00      	nop
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	03ff63ff 	.word	0x03ff63ff

08004374 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b20      	cmp	r3, #32
 8004388:	d138      	bne.n	80043fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004394:	2302      	movs	r3, #2
 8004396:	e032      	b.n	80043fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2224      	movs	r2, #36	@ 0x24
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0201 	bic.w	r2, r2, #1
 80043b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80043c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6819      	ldr	r1, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	430a      	orrs	r2, r1
 80043d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0201 	orr.w	r2, r2, #1
 80043e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	e000      	b.n	80043fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043fc:	2302      	movs	r3, #2
  }
}
 80043fe:	4618      	mov	r0, r3
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800440a:	b480      	push	{r7}
 800440c:	b085      	sub	sp, #20
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b20      	cmp	r3, #32
 800441e:	d139      	bne.n	8004494 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004426:	2b01      	cmp	r3, #1
 8004428:	d101      	bne.n	800442e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800442a:	2302      	movs	r3, #2
 800442c:	e033      	b.n	8004496 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2224      	movs	r2, #36	@ 0x24
 800443a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0201 	bic.w	r2, r2, #1
 800444c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800445c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	021b      	lsls	r3, r3, #8
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4313      	orrs	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0201 	orr.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	e000      	b.n	8004496 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004494:	2302      	movs	r3, #2
  }
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
	...

080044a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80044a8:	4b04      	ldr	r3, [pc, #16]	@ (80044bc <HAL_PWREx_GetVoltageRange+0x18>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40007000 	.word	0x40007000

080044c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044ce:	d130      	bne.n	8004532 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80044d0:	4b23      	ldr	r3, [pc, #140]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80044d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044dc:	d038      	beq.n	8004550 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80044de:	4b20      	ldr	r3, [pc, #128]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004564 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2232      	movs	r2, #50	@ 0x32
 80044f4:	fb02 f303 	mul.w	r3, r2, r3
 80044f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004568 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80044fa:	fba2 2303 	umull	r2, r3, r2, r3
 80044fe:	0c9b      	lsrs	r3, r3, #18
 8004500:	3301      	adds	r3, #1
 8004502:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004504:	e002      	b.n	800450c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3b01      	subs	r3, #1
 800450a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800450c:	4b14      	ldr	r3, [pc, #80]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004514:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004518:	d102      	bne.n	8004520 <HAL_PWREx_ControlVoltageScaling+0x60>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1f2      	bne.n	8004506 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004520:	4b0f      	ldr	r3, [pc, #60]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004528:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800452c:	d110      	bne.n	8004550 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e00f      	b.n	8004552 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004532:	4b0b      	ldr	r3, [pc, #44]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800453a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800453e:	d007      	beq.n	8004550 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004540:	4b07      	ldr	r3, [pc, #28]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004548:	4a05      	ldr	r2, [pc, #20]	@ (8004560 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800454a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800454e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	40007000 	.word	0x40007000
 8004564:	20000000 	.word	0x20000000
 8004568:	431bde83 	.word	0x431bde83

0800456c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b088      	sub	sp, #32
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d102      	bne.n	8004580 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	f000 bc02 	b.w	8004d84 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004580:	4b96      	ldr	r3, [pc, #600]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 030c 	and.w	r3, r3, #12
 8004588:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800458a:	4b94      	ldr	r3, [pc, #592]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0310 	and.w	r3, r3, #16
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 80e4 	beq.w	800476a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d007      	beq.n	80045b8 <HAL_RCC_OscConfig+0x4c>
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	2b0c      	cmp	r3, #12
 80045ac:	f040 808b 	bne.w	80046c6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	f040 8087 	bne.w	80046c6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045b8:	4b88      	ldr	r3, [pc, #544]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <HAL_RCC_OscConfig+0x64>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e3d9      	b.n	8004d84 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a1a      	ldr	r2, [r3, #32]
 80045d4:	4b81      	ldr	r3, [pc, #516]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d004      	beq.n	80045ea <HAL_RCC_OscConfig+0x7e>
 80045e0:	4b7e      	ldr	r3, [pc, #504]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045e8:	e005      	b.n	80045f6 <HAL_RCC_OscConfig+0x8a>
 80045ea:	4b7c      	ldr	r3, [pc, #496]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 80045ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045f0:	091b      	lsrs	r3, r3, #4
 80045f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d223      	bcs.n	8004642 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fd8c 	bl	800511c <RCC_SetFlashLatencyFromMSIRange>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e3ba      	b.n	8004d84 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800460e:	4b73      	ldr	r3, [pc, #460]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a72      	ldr	r2, [pc, #456]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 8004614:	f043 0308 	orr.w	r3, r3, #8
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	4b70      	ldr	r3, [pc, #448]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	496d      	ldr	r1, [pc, #436]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 8004628:	4313      	orrs	r3, r2
 800462a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800462c:	4b6b      	ldr	r3, [pc, #428]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	021b      	lsls	r3, r3, #8
 800463a:	4968      	ldr	r1, [pc, #416]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 800463c:	4313      	orrs	r3, r2
 800463e:	604b      	str	r3, [r1, #4]
 8004640:	e025      	b.n	800468e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004642:	4b66      	ldr	r3, [pc, #408]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a65      	ldr	r2, [pc, #404]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 8004648:	f043 0308 	orr.w	r3, r3, #8
 800464c:	6013      	str	r3, [r2, #0]
 800464e:	4b63      	ldr	r3, [pc, #396]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	4960      	ldr	r1, [pc, #384]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 800465c:	4313      	orrs	r3, r2
 800465e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004660:	4b5e      	ldr	r3, [pc, #376]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	495b      	ldr	r1, [pc, #364]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 8004670:	4313      	orrs	r3, r2
 8004672:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d109      	bne.n	800468e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fd4c 	bl	800511c <RCC_SetFlashLatencyFromMSIRange>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e37a      	b.n	8004d84 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800468e:	f000 fc81 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 8004692:	4602      	mov	r2, r0
 8004694:	4b51      	ldr	r3, [pc, #324]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	091b      	lsrs	r3, r3, #4
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	4950      	ldr	r1, [pc, #320]	@ (80047e0 <HAL_RCC_OscConfig+0x274>)
 80046a0:	5ccb      	ldrb	r3, [r1, r3]
 80046a2:	f003 031f 	and.w	r3, r3, #31
 80046a6:	fa22 f303 	lsr.w	r3, r2, r3
 80046aa:	4a4e      	ldr	r2, [pc, #312]	@ (80047e4 <HAL_RCC_OscConfig+0x278>)
 80046ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80046ae:	4b4e      	ldr	r3, [pc, #312]	@ (80047e8 <HAL_RCC_OscConfig+0x27c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fd fd24 	bl	8002100 <HAL_InitTick>
 80046b8:	4603      	mov	r3, r0
 80046ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d052      	beq.n	8004768 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80046c2:	7bfb      	ldrb	r3, [r7, #15]
 80046c4:	e35e      	b.n	8004d84 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d032      	beq.n	8004734 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80046ce:	4b43      	ldr	r3, [pc, #268]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a42      	ldr	r2, [pc, #264]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 80046d4:	f043 0301 	orr.w	r3, r3, #1
 80046d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046da:	f7fd fd61 	bl	80021a0 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046e2:	f7fd fd5d 	bl	80021a0 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e347      	b.n	8004d84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046f4:	4b39      	ldr	r3, [pc, #228]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0f0      	beq.n	80046e2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004700:	4b36      	ldr	r3, [pc, #216]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a35      	ldr	r2, [pc, #212]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 8004706:	f043 0308 	orr.w	r3, r3, #8
 800470a:	6013      	str	r3, [r2, #0]
 800470c:	4b33      	ldr	r3, [pc, #204]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	4930      	ldr	r1, [pc, #192]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 800471a:	4313      	orrs	r3, r2
 800471c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800471e:	4b2f      	ldr	r3, [pc, #188]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	021b      	lsls	r3, r3, #8
 800472c:	492b      	ldr	r1, [pc, #172]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 800472e:	4313      	orrs	r3, r2
 8004730:	604b      	str	r3, [r1, #4]
 8004732:	e01a      	b.n	800476a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004734:	4b29      	ldr	r3, [pc, #164]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a28      	ldr	r2, [pc, #160]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 800473a:	f023 0301 	bic.w	r3, r3, #1
 800473e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004740:	f7fd fd2e 	bl	80021a0 <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004748:	f7fd fd2a 	bl	80021a0 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e314      	b.n	8004d84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800475a:	4b20      	ldr	r3, [pc, #128]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1f0      	bne.n	8004748 <HAL_RCC_OscConfig+0x1dc>
 8004766:	e000      	b.n	800476a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004768:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d073      	beq.n	800485e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	2b08      	cmp	r3, #8
 800477a:	d005      	beq.n	8004788 <HAL_RCC_OscConfig+0x21c>
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	2b0c      	cmp	r3, #12
 8004780:	d10e      	bne.n	80047a0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2b03      	cmp	r3, #3
 8004786:	d10b      	bne.n	80047a0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004788:	4b14      	ldr	r3, [pc, #80]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d063      	beq.n	800485c <HAL_RCC_OscConfig+0x2f0>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d15f      	bne.n	800485c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e2f1      	b.n	8004d84 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047a8:	d106      	bne.n	80047b8 <HAL_RCC_OscConfig+0x24c>
 80047aa:	4b0c      	ldr	r3, [pc, #48]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a0b      	ldr	r2, [pc, #44]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 80047b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047b4:	6013      	str	r3, [r2, #0]
 80047b6:	e025      	b.n	8004804 <HAL_RCC_OscConfig+0x298>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047c0:	d114      	bne.n	80047ec <HAL_RCC_OscConfig+0x280>
 80047c2:	4b06      	ldr	r3, [pc, #24]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a05      	ldr	r2, [pc, #20]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 80047c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047cc:	6013      	str	r3, [r2, #0]
 80047ce:	4b03      	ldr	r3, [pc, #12]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a02      	ldr	r2, [pc, #8]	@ (80047dc <HAL_RCC_OscConfig+0x270>)
 80047d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	e013      	b.n	8004804 <HAL_RCC_OscConfig+0x298>
 80047dc:	40021000 	.word	0x40021000
 80047e0:	0800af8c 	.word	0x0800af8c
 80047e4:	20000000 	.word	0x20000000
 80047e8:	20000004 	.word	0x20000004
 80047ec:	4ba0      	ldr	r3, [pc, #640]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a9f      	ldr	r2, [pc, #636]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 80047f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047f6:	6013      	str	r3, [r2, #0]
 80047f8:	4b9d      	ldr	r3, [pc, #628]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a9c      	ldr	r2, [pc, #624]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 80047fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004802:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d013      	beq.n	8004834 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480c:	f7fd fcc8 	bl	80021a0 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004814:	f7fd fcc4 	bl	80021a0 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b64      	cmp	r3, #100	@ 0x64
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e2ae      	b.n	8004d84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004826:	4b92      	ldr	r3, [pc, #584]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCC_OscConfig+0x2a8>
 8004832:	e014      	b.n	800485e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004834:	f7fd fcb4 	bl	80021a0 <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800483c:	f7fd fcb0 	bl	80021a0 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b64      	cmp	r3, #100	@ 0x64
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e29a      	b.n	8004d84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800484e:	4b88      	ldr	r3, [pc, #544]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1f0      	bne.n	800483c <HAL_RCC_OscConfig+0x2d0>
 800485a:	e000      	b.n	800485e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800485c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d060      	beq.n	800492c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	2b04      	cmp	r3, #4
 800486e:	d005      	beq.n	800487c <HAL_RCC_OscConfig+0x310>
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	2b0c      	cmp	r3, #12
 8004874:	d119      	bne.n	80048aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2b02      	cmp	r3, #2
 800487a:	d116      	bne.n	80048aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800487c:	4b7c      	ldr	r3, [pc, #496]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <HAL_RCC_OscConfig+0x328>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e277      	b.n	8004d84 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004894:	4b76      	ldr	r3, [pc, #472]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	061b      	lsls	r3, r3, #24
 80048a2:	4973      	ldr	r1, [pc, #460]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048a8:	e040      	b.n	800492c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d023      	beq.n	80048fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048b2:	4b6f      	ldr	r3, [pc, #444]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a6e      	ldr	r2, [pc, #440]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 80048b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048be:	f7fd fc6f 	bl	80021a0 <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048c6:	f7fd fc6b 	bl	80021a0 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e255      	b.n	8004d84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048d8:	4b65      	ldr	r3, [pc, #404]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0f0      	beq.n	80048c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e4:	4b62      	ldr	r3, [pc, #392]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	061b      	lsls	r3, r3, #24
 80048f2:	495f      	ldr	r1, [pc, #380]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	604b      	str	r3, [r1, #4]
 80048f8:	e018      	b.n	800492c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048fa:	4b5d      	ldr	r3, [pc, #372]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a5c      	ldr	r2, [pc, #368]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 8004900:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004906:	f7fd fc4b 	bl	80021a0 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800490e:	f7fd fc47 	bl	80021a0 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e231      	b.n	8004d84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004920:	4b53      	ldr	r3, [pc, #332]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f0      	bne.n	800490e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0308 	and.w	r3, r3, #8
 8004934:	2b00      	cmp	r3, #0
 8004936:	d03c      	beq.n	80049b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d01c      	beq.n	800497a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004940:	4b4b      	ldr	r3, [pc, #300]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 8004942:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004946:	4a4a      	ldr	r2, [pc, #296]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004950:	f7fd fc26 	bl	80021a0 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004958:	f7fd fc22 	bl	80021a0 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e20c      	b.n	8004d84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800496a:	4b41      	ldr	r3, [pc, #260]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 800496c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0ef      	beq.n	8004958 <HAL_RCC_OscConfig+0x3ec>
 8004978:	e01b      	b.n	80049b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800497a:	4b3d      	ldr	r3, [pc, #244]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 800497c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004980:	4a3b      	ldr	r2, [pc, #236]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 8004982:	f023 0301 	bic.w	r3, r3, #1
 8004986:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498a:	f7fd fc09 	bl	80021a0 <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004990:	e008      	b.n	80049a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004992:	f7fd fc05 	bl	80021a0 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e1ef      	b.n	8004d84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049a4:	4b32      	ldr	r3, [pc, #200]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 80049a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1ef      	bne.n	8004992 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0304 	and.w	r3, r3, #4
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f000 80a6 	beq.w	8004b0c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049c0:	2300      	movs	r3, #0
 80049c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80049c4:	4b2a      	ldr	r3, [pc, #168]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 80049c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10d      	bne.n	80049ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049d0:	4b27      	ldr	r3, [pc, #156]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 80049d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d4:	4a26      	ldr	r2, [pc, #152]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 80049d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049da:	6593      	str	r3, [r2, #88]	@ 0x58
 80049dc:	4b24      	ldr	r3, [pc, #144]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 80049de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049e4:	60bb      	str	r3, [r7, #8]
 80049e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049e8:	2301      	movs	r3, #1
 80049ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049ec:	4b21      	ldr	r3, [pc, #132]	@ (8004a74 <HAL_RCC_OscConfig+0x508>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d118      	bne.n	8004a2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049f8:	4b1e      	ldr	r3, [pc, #120]	@ (8004a74 <HAL_RCC_OscConfig+0x508>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004a74 <HAL_RCC_OscConfig+0x508>)
 80049fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a04:	f7fd fbcc 	bl	80021a0 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a0c:	f7fd fbc8 	bl	80021a0 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e1b2      	b.n	8004d84 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a1e:	4b15      	ldr	r3, [pc, #84]	@ (8004a74 <HAL_RCC_OscConfig+0x508>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0f0      	beq.n	8004a0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d108      	bne.n	8004a44 <HAL_RCC_OscConfig+0x4d8>
 8004a32:	4b0f      	ldr	r3, [pc, #60]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 8004a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a38:	4a0d      	ldr	r2, [pc, #52]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 8004a3a:	f043 0301 	orr.w	r3, r3, #1
 8004a3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a42:	e029      	b.n	8004a98 <HAL_RCC_OscConfig+0x52c>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	2b05      	cmp	r3, #5
 8004a4a:	d115      	bne.n	8004a78 <HAL_RCC_OscConfig+0x50c>
 8004a4c:	4b08      	ldr	r3, [pc, #32]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 8004a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a52:	4a07      	ldr	r2, [pc, #28]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 8004a54:	f043 0304 	orr.w	r3, r3, #4
 8004a58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a5c:	4b04      	ldr	r3, [pc, #16]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 8004a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a62:	4a03      	ldr	r2, [pc, #12]	@ (8004a70 <HAL_RCC_OscConfig+0x504>)
 8004a64:	f043 0301 	orr.w	r3, r3, #1
 8004a68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a6c:	e014      	b.n	8004a98 <HAL_RCC_OscConfig+0x52c>
 8004a6e:	bf00      	nop
 8004a70:	40021000 	.word	0x40021000
 8004a74:	40007000 	.word	0x40007000
 8004a78:	4b9a      	ldr	r3, [pc, #616]	@ (8004ce4 <HAL_RCC_OscConfig+0x778>)
 8004a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a7e:	4a99      	ldr	r2, [pc, #612]	@ (8004ce4 <HAL_RCC_OscConfig+0x778>)
 8004a80:	f023 0301 	bic.w	r3, r3, #1
 8004a84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a88:	4b96      	ldr	r3, [pc, #600]	@ (8004ce4 <HAL_RCC_OscConfig+0x778>)
 8004a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a8e:	4a95      	ldr	r2, [pc, #596]	@ (8004ce4 <HAL_RCC_OscConfig+0x778>)
 8004a90:	f023 0304 	bic.w	r3, r3, #4
 8004a94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d016      	beq.n	8004ace <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa0:	f7fd fb7e 	bl	80021a0 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004aa6:	e00a      	b.n	8004abe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aa8:	f7fd fb7a 	bl	80021a0 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e162      	b.n	8004d84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004abe:	4b89      	ldr	r3, [pc, #548]	@ (8004ce4 <HAL_RCC_OscConfig+0x778>)
 8004ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0ed      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x53c>
 8004acc:	e015      	b.n	8004afa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ace:	f7fd fb67 	bl	80021a0 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ad4:	e00a      	b.n	8004aec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ad6:	f7fd fb63 	bl	80021a0 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e14b      	b.n	8004d84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004aec:	4b7d      	ldr	r3, [pc, #500]	@ (8004ce4 <HAL_RCC_OscConfig+0x778>)
 8004aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1ed      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004afa:	7ffb      	ldrb	r3, [r7, #31]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d105      	bne.n	8004b0c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b00:	4b78      	ldr	r3, [pc, #480]	@ (8004ce4 <HAL_RCC_OscConfig+0x778>)
 8004b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b04:	4a77      	ldr	r2, [pc, #476]	@ (8004ce4 <HAL_RCC_OscConfig+0x778>)
 8004b06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b0a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d03c      	beq.n	8004b92 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d01c      	beq.n	8004b5a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b20:	4b70      	ldr	r3, [pc, #448]	@ (8004ce4 <HAL_RCC_OscConfig+0x778>)
 8004b22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b26:	4a6f      	ldr	r2, [pc, #444]	@ (8004ce4 <HAL_RCC_OscConfig+0x778>)
 8004b28:	f043 0301 	orr.w	r3, r3, #1
 8004b2c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b30:	f7fd fb36 	bl	80021a0 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b38:	f7fd fb32 	bl	80021a0 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e11c      	b.n	8004d84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b4a:	4b66      	ldr	r3, [pc, #408]	@ (8004ce4 <HAL_RCC_OscConfig+0x778>)
 8004b4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0ef      	beq.n	8004b38 <HAL_RCC_OscConfig+0x5cc>
 8004b58:	e01b      	b.n	8004b92 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b5a:	4b62      	ldr	r3, [pc, #392]	@ (8004ce4 <HAL_RCC_OscConfig+0x778>)
 8004b5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b60:	4a60      	ldr	r2, [pc, #384]	@ (8004ce4 <HAL_RCC_OscConfig+0x778>)
 8004b62:	f023 0301 	bic.w	r3, r3, #1
 8004b66:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6a:	f7fd fb19 	bl	80021a0 <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b70:	e008      	b.n	8004b84 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b72:	f7fd fb15 	bl	80021a0 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e0ff      	b.n	8004d84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b84:	4b57      	ldr	r3, [pc, #348]	@ (8004ce4 <HAL_RCC_OscConfig+0x778>)
 8004b86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1ef      	bne.n	8004b72 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 80f3 	beq.w	8004d82 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	f040 80c9 	bne.w	8004d38 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ba6:	4b4f      	ldr	r3, [pc, #316]	@ (8004ce4 <HAL_RCC_OscConfig+0x778>)
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f003 0203 	and.w	r2, r3, #3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d12c      	bne.n	8004c14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d123      	bne.n	8004c14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bd6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d11b      	bne.n	8004c14 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d113      	bne.n	8004c14 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf6:	085b      	lsrs	r3, r3, #1
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d109      	bne.n	8004c14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0a:	085b      	lsrs	r3, r3, #1
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d06b      	beq.n	8004cec <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	2b0c      	cmp	r3, #12
 8004c18:	d062      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c1a:	4b32      	ldr	r3, [pc, #200]	@ (8004ce4 <HAL_RCC_OscConfig+0x778>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e0ac      	b.n	8004d84 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004c2a:	4b2e      	ldr	r3, [pc, #184]	@ (8004ce4 <HAL_RCC_OscConfig+0x778>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a2d      	ldr	r2, [pc, #180]	@ (8004ce4 <HAL_RCC_OscConfig+0x778>)
 8004c30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c34:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c36:	f7fd fab3 	bl	80021a0 <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c3e:	f7fd faaf 	bl	80021a0 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e099      	b.n	8004d84 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c50:	4b24      	ldr	r3, [pc, #144]	@ (8004ce4 <HAL_RCC_OscConfig+0x778>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1f0      	bne.n	8004c3e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c5c:	4b21      	ldr	r3, [pc, #132]	@ (8004ce4 <HAL_RCC_OscConfig+0x778>)
 8004c5e:	68da      	ldr	r2, [r3, #12]
 8004c60:	4b21      	ldr	r3, [pc, #132]	@ (8004ce8 <HAL_RCC_OscConfig+0x77c>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004c6c:	3a01      	subs	r2, #1
 8004c6e:	0112      	lsls	r2, r2, #4
 8004c70:	4311      	orrs	r1, r2
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004c76:	0212      	lsls	r2, r2, #8
 8004c78:	4311      	orrs	r1, r2
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004c7e:	0852      	lsrs	r2, r2, #1
 8004c80:	3a01      	subs	r2, #1
 8004c82:	0552      	lsls	r2, r2, #21
 8004c84:	4311      	orrs	r1, r2
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004c8a:	0852      	lsrs	r2, r2, #1
 8004c8c:	3a01      	subs	r2, #1
 8004c8e:	0652      	lsls	r2, r2, #25
 8004c90:	4311      	orrs	r1, r2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004c96:	06d2      	lsls	r2, r2, #27
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	4912      	ldr	r1, [pc, #72]	@ (8004ce4 <HAL_RCC_OscConfig+0x778>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ca0:	4b10      	ldr	r3, [pc, #64]	@ (8004ce4 <HAL_RCC_OscConfig+0x778>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a0f      	ldr	r2, [pc, #60]	@ (8004ce4 <HAL_RCC_OscConfig+0x778>)
 8004ca6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004caa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cac:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce4 <HAL_RCC_OscConfig+0x778>)
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	4a0c      	ldr	r2, [pc, #48]	@ (8004ce4 <HAL_RCC_OscConfig+0x778>)
 8004cb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cb6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004cb8:	f7fd fa72 	bl	80021a0 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc0:	f7fd fa6e 	bl	80021a0 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e058      	b.n	8004d84 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cd2:	4b04      	ldr	r3, [pc, #16]	@ (8004ce4 <HAL_RCC_OscConfig+0x778>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0f0      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cde:	e050      	b.n	8004d82 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e04f      	b.n	8004d84 <HAL_RCC_OscConfig+0x818>
 8004ce4:	40021000 	.word	0x40021000
 8004ce8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cec:	4b27      	ldr	r3, [pc, #156]	@ (8004d8c <HAL_RCC_OscConfig+0x820>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d144      	bne.n	8004d82 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004cf8:	4b24      	ldr	r3, [pc, #144]	@ (8004d8c <HAL_RCC_OscConfig+0x820>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a23      	ldr	r2, [pc, #140]	@ (8004d8c <HAL_RCC_OscConfig+0x820>)
 8004cfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d04:	4b21      	ldr	r3, [pc, #132]	@ (8004d8c <HAL_RCC_OscConfig+0x820>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	4a20      	ldr	r2, [pc, #128]	@ (8004d8c <HAL_RCC_OscConfig+0x820>)
 8004d0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d10:	f7fd fa46 	bl	80021a0 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d18:	f7fd fa42 	bl	80021a0 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e02c      	b.n	8004d84 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d2a:	4b18      	ldr	r3, [pc, #96]	@ (8004d8c <HAL_RCC_OscConfig+0x820>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0f0      	beq.n	8004d18 <HAL_RCC_OscConfig+0x7ac>
 8004d36:	e024      	b.n	8004d82 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	2b0c      	cmp	r3, #12
 8004d3c:	d01f      	beq.n	8004d7e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d3e:	4b13      	ldr	r3, [pc, #76]	@ (8004d8c <HAL_RCC_OscConfig+0x820>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a12      	ldr	r2, [pc, #72]	@ (8004d8c <HAL_RCC_OscConfig+0x820>)
 8004d44:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4a:	f7fd fa29 	bl	80021a0 <HAL_GetTick>
 8004d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d50:	e008      	b.n	8004d64 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d52:	f7fd fa25 	bl	80021a0 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e00f      	b.n	8004d84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d64:	4b09      	ldr	r3, [pc, #36]	@ (8004d8c <HAL_RCC_OscConfig+0x820>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1f0      	bne.n	8004d52 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004d70:	4b06      	ldr	r3, [pc, #24]	@ (8004d8c <HAL_RCC_OscConfig+0x820>)
 8004d72:	68da      	ldr	r2, [r3, #12]
 8004d74:	4905      	ldr	r1, [pc, #20]	@ (8004d8c <HAL_RCC_OscConfig+0x820>)
 8004d76:	4b06      	ldr	r3, [pc, #24]	@ (8004d90 <HAL_RCC_OscConfig+0x824>)
 8004d78:	4013      	ands	r3, r2
 8004d7a:	60cb      	str	r3, [r1, #12]
 8004d7c:	e001      	b.n	8004d82 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3720      	adds	r7, #32
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	feeefffc 	.word	0xfeeefffc

08004d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e0e7      	b.n	8004f78 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004da8:	4b75      	ldr	r3, [pc, #468]	@ (8004f80 <HAL_RCC_ClockConfig+0x1ec>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d910      	bls.n	8004dd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004db6:	4b72      	ldr	r3, [pc, #456]	@ (8004f80 <HAL_RCC_ClockConfig+0x1ec>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f023 0207 	bic.w	r2, r3, #7
 8004dbe:	4970      	ldr	r1, [pc, #448]	@ (8004f80 <HAL_RCC_ClockConfig+0x1ec>)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc6:	4b6e      	ldr	r3, [pc, #440]	@ (8004f80 <HAL_RCC_ClockConfig+0x1ec>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d001      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e0cf      	b.n	8004f78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d010      	beq.n	8004e06 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	4b66      	ldr	r3, [pc, #408]	@ (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d908      	bls.n	8004e06 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004df4:	4b63      	ldr	r3, [pc, #396]	@ (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	4960      	ldr	r1, [pc, #384]	@ (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d04c      	beq.n	8004eac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b03      	cmp	r3, #3
 8004e18:	d107      	bne.n	8004e2a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e1a:	4b5a      	ldr	r3, [pc, #360]	@ (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d121      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e0a6      	b.n	8004f78 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d107      	bne.n	8004e42 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e32:	4b54      	ldr	r3, [pc, #336]	@ (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d115      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e09a      	b.n	8004f78 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d107      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e4a:	4b4e      	ldr	r3, [pc, #312]	@ (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d109      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e08e      	b.n	8004f78 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e086      	b.n	8004f78 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e6a:	4b46      	ldr	r3, [pc, #280]	@ (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f023 0203 	bic.w	r2, r3, #3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	4943      	ldr	r1, [pc, #268]	@ (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7c:	f7fd f990 	bl	80021a0 <HAL_GetTick>
 8004e80:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e82:	e00a      	b.n	8004e9a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e84:	f7fd f98c 	bl	80021a0 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e06e      	b.n	8004f78 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9a:	4b3a      	ldr	r3, [pc, #232]	@ (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 020c 	and.w	r2, r3, #12
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d1eb      	bne.n	8004e84 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d010      	beq.n	8004eda <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	4b31      	ldr	r3, [pc, #196]	@ (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d208      	bcs.n	8004eda <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ec8:	4b2e      	ldr	r3, [pc, #184]	@ (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	492b      	ldr	r1, [pc, #172]	@ (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004eda:	4b29      	ldr	r3, [pc, #164]	@ (8004f80 <HAL_RCC_ClockConfig+0x1ec>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0307 	and.w	r3, r3, #7
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d210      	bcs.n	8004f0a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ee8:	4b25      	ldr	r3, [pc, #148]	@ (8004f80 <HAL_RCC_ClockConfig+0x1ec>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f023 0207 	bic.w	r2, r3, #7
 8004ef0:	4923      	ldr	r1, [pc, #140]	@ (8004f80 <HAL_RCC_ClockConfig+0x1ec>)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ef8:	4b21      	ldr	r3, [pc, #132]	@ (8004f80 <HAL_RCC_ClockConfig+0x1ec>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0307 	and.w	r3, r3, #7
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d001      	beq.n	8004f0a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e036      	b.n	8004f78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0304 	and.w	r3, r3, #4
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d008      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f16:	4b1b      	ldr	r3, [pc, #108]	@ (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	4918      	ldr	r1, [pc, #96]	@ (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0308 	and.w	r3, r3, #8
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d009      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f34:	4b13      	ldr	r3, [pc, #76]	@ (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	4910      	ldr	r1, [pc, #64]	@ (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f48:	f000 f824 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f84 <HAL_RCC_ClockConfig+0x1f0>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	091b      	lsrs	r3, r3, #4
 8004f54:	f003 030f 	and.w	r3, r3, #15
 8004f58:	490b      	ldr	r1, [pc, #44]	@ (8004f88 <HAL_RCC_ClockConfig+0x1f4>)
 8004f5a:	5ccb      	ldrb	r3, [r1, r3]
 8004f5c:	f003 031f 	and.w	r3, r3, #31
 8004f60:	fa22 f303 	lsr.w	r3, r2, r3
 8004f64:	4a09      	ldr	r2, [pc, #36]	@ (8004f8c <HAL_RCC_ClockConfig+0x1f8>)
 8004f66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f68:	4b09      	ldr	r3, [pc, #36]	@ (8004f90 <HAL_RCC_ClockConfig+0x1fc>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7fd f8c7 	bl	8002100 <HAL_InitTick>
 8004f72:	4603      	mov	r3, r0
 8004f74:	72fb      	strb	r3, [r7, #11]

  return status;
 8004f76:	7afb      	ldrb	r3, [r7, #11]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	40022000 	.word	0x40022000
 8004f84:	40021000 	.word	0x40021000
 8004f88:	0800af8c 	.word	0x0800af8c
 8004f8c:	20000000 	.word	0x20000000
 8004f90:	20000004 	.word	0x20000004

08004f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b089      	sub	sp, #36	@ 0x24
 8004f98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61fb      	str	r3, [r7, #28]
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fa2:	4b3e      	ldr	r3, [pc, #248]	@ (800509c <HAL_RCC_GetSysClockFreq+0x108>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
 8004faa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fac:	4b3b      	ldr	r3, [pc, #236]	@ (800509c <HAL_RCC_GetSysClockFreq+0x108>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f003 0303 	and.w	r3, r3, #3
 8004fb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x34>
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	2b0c      	cmp	r3, #12
 8004fc0:	d121      	bne.n	8005006 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d11e      	bne.n	8005006 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004fc8:	4b34      	ldr	r3, [pc, #208]	@ (800509c <HAL_RCC_GetSysClockFreq+0x108>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0308 	and.w	r3, r3, #8
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d107      	bne.n	8004fe4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004fd4:	4b31      	ldr	r3, [pc, #196]	@ (800509c <HAL_RCC_GetSysClockFreq+0x108>)
 8004fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fda:	0a1b      	lsrs	r3, r3, #8
 8004fdc:	f003 030f 	and.w	r3, r3, #15
 8004fe0:	61fb      	str	r3, [r7, #28]
 8004fe2:	e005      	b.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800509c <HAL_RCC_GetSysClockFreq+0x108>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	091b      	lsrs	r3, r3, #4
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ff0:	4a2b      	ldr	r2, [pc, #172]	@ (80050a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ff8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10d      	bne.n	800501c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005004:	e00a      	b.n	800501c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	2b04      	cmp	r3, #4
 800500a:	d102      	bne.n	8005012 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800500c:	4b25      	ldr	r3, [pc, #148]	@ (80050a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800500e:	61bb      	str	r3, [r7, #24]
 8005010:	e004      	b.n	800501c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	2b08      	cmp	r3, #8
 8005016:	d101      	bne.n	800501c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005018:	4b23      	ldr	r3, [pc, #140]	@ (80050a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800501a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	2b0c      	cmp	r3, #12
 8005020:	d134      	bne.n	800508c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005022:	4b1e      	ldr	r3, [pc, #120]	@ (800509c <HAL_RCC_GetSysClockFreq+0x108>)
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2b02      	cmp	r3, #2
 8005030:	d003      	beq.n	800503a <HAL_RCC_GetSysClockFreq+0xa6>
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2b03      	cmp	r3, #3
 8005036:	d003      	beq.n	8005040 <HAL_RCC_GetSysClockFreq+0xac>
 8005038:	e005      	b.n	8005046 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800503a:	4b1a      	ldr	r3, [pc, #104]	@ (80050a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800503c:	617b      	str	r3, [r7, #20]
      break;
 800503e:	e005      	b.n	800504c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005040:	4b19      	ldr	r3, [pc, #100]	@ (80050a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005042:	617b      	str	r3, [r7, #20]
      break;
 8005044:	e002      	b.n	800504c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	617b      	str	r3, [r7, #20]
      break;
 800504a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800504c:	4b13      	ldr	r3, [pc, #76]	@ (800509c <HAL_RCC_GetSysClockFreq+0x108>)
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	091b      	lsrs	r3, r3, #4
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	3301      	adds	r3, #1
 8005058:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800505a:	4b10      	ldr	r3, [pc, #64]	@ (800509c <HAL_RCC_GetSysClockFreq+0x108>)
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	0a1b      	lsrs	r3, r3, #8
 8005060:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	fb03 f202 	mul.w	r2, r3, r2
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005070:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005072:	4b0a      	ldr	r3, [pc, #40]	@ (800509c <HAL_RCC_GetSysClockFreq+0x108>)
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	0e5b      	lsrs	r3, r3, #25
 8005078:	f003 0303 	and.w	r3, r3, #3
 800507c:	3301      	adds	r3, #1
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	fbb2 f3f3 	udiv	r3, r2, r3
 800508a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800508c:	69bb      	ldr	r3, [r7, #24]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3724      	adds	r7, #36	@ 0x24
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40021000 	.word	0x40021000
 80050a0:	0800afa4 	.word	0x0800afa4
 80050a4:	00f42400 	.word	0x00f42400
 80050a8:	007a1200 	.word	0x007a1200

080050ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050b0:	4b03      	ldr	r3, [pc, #12]	@ (80050c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80050b2:	681b      	ldr	r3, [r3, #0]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	20000000 	.word	0x20000000

080050c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80050c8:	f7ff fff0 	bl	80050ac <HAL_RCC_GetHCLKFreq>
 80050cc:	4602      	mov	r2, r0
 80050ce:	4b06      	ldr	r3, [pc, #24]	@ (80050e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	0a1b      	lsrs	r3, r3, #8
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	4904      	ldr	r1, [pc, #16]	@ (80050ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80050da:	5ccb      	ldrb	r3, [r1, r3]
 80050dc:	f003 031f 	and.w	r3, r3, #31
 80050e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40021000 	.word	0x40021000
 80050ec:	0800af9c 	.word	0x0800af9c

080050f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80050f4:	f7ff ffda 	bl	80050ac <HAL_RCC_GetHCLKFreq>
 80050f8:	4602      	mov	r2, r0
 80050fa:	4b06      	ldr	r3, [pc, #24]	@ (8005114 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	0adb      	lsrs	r3, r3, #11
 8005100:	f003 0307 	and.w	r3, r3, #7
 8005104:	4904      	ldr	r1, [pc, #16]	@ (8005118 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005106:	5ccb      	ldrb	r3, [r1, r3]
 8005108:	f003 031f 	and.w	r3, r3, #31
 800510c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005110:	4618      	mov	r0, r3
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40021000 	.word	0x40021000
 8005118:	0800af9c 	.word	0x0800af9c

0800511c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005124:	2300      	movs	r3, #0
 8005126:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005128:	4b2a      	ldr	r3, [pc, #168]	@ (80051d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800512a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800512c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005134:	f7ff f9b6 	bl	80044a4 <HAL_PWREx_GetVoltageRange>
 8005138:	6178      	str	r0, [r7, #20]
 800513a:	e014      	b.n	8005166 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800513c:	4b25      	ldr	r3, [pc, #148]	@ (80051d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800513e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005140:	4a24      	ldr	r2, [pc, #144]	@ (80051d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005146:	6593      	str	r3, [r2, #88]	@ 0x58
 8005148:	4b22      	ldr	r3, [pc, #136]	@ (80051d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800514a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800514c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005154:	f7ff f9a6 	bl	80044a4 <HAL_PWREx_GetVoltageRange>
 8005158:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800515a:	4b1e      	ldr	r3, [pc, #120]	@ (80051d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800515c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800515e:	4a1d      	ldr	r2, [pc, #116]	@ (80051d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005160:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005164:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800516c:	d10b      	bne.n	8005186 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b80      	cmp	r3, #128	@ 0x80
 8005172:	d919      	bls.n	80051a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2ba0      	cmp	r3, #160	@ 0xa0
 8005178:	d902      	bls.n	8005180 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800517a:	2302      	movs	r3, #2
 800517c:	613b      	str	r3, [r7, #16]
 800517e:	e013      	b.n	80051a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005180:	2301      	movs	r3, #1
 8005182:	613b      	str	r3, [r7, #16]
 8005184:	e010      	b.n	80051a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b80      	cmp	r3, #128	@ 0x80
 800518a:	d902      	bls.n	8005192 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800518c:	2303      	movs	r3, #3
 800518e:	613b      	str	r3, [r7, #16]
 8005190:	e00a      	b.n	80051a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b80      	cmp	r3, #128	@ 0x80
 8005196:	d102      	bne.n	800519e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005198:	2302      	movs	r3, #2
 800519a:	613b      	str	r3, [r7, #16]
 800519c:	e004      	b.n	80051a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b70      	cmp	r3, #112	@ 0x70
 80051a2:	d101      	bne.n	80051a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051a4:	2301      	movs	r3, #1
 80051a6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80051a8:	4b0b      	ldr	r3, [pc, #44]	@ (80051d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f023 0207 	bic.w	r2, r3, #7
 80051b0:	4909      	ldr	r1, [pc, #36]	@ (80051d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80051b8:	4b07      	ldr	r3, [pc, #28]	@ (80051d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d001      	beq.n	80051ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e000      	b.n	80051cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	40021000 	.word	0x40021000
 80051d8:	40022000 	.word	0x40022000

080051dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051e4:	2300      	movs	r3, #0
 80051e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051e8:	2300      	movs	r3, #0
 80051ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d031      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051fc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005200:	d01a      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005202:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005206:	d814      	bhi.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005208:	2b00      	cmp	r3, #0
 800520a:	d009      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800520c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005210:	d10f      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005212:	4b5d      	ldr	r3, [pc, #372]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	4a5c      	ldr	r2, [pc, #368]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800521c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800521e:	e00c      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3304      	adds	r3, #4
 8005224:	2100      	movs	r1, #0
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fa22 	bl	8005670 <RCCEx_PLLSAI1_Config>
 800522c:	4603      	mov	r3, r0
 800522e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005230:	e003      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	74fb      	strb	r3, [r7, #19]
      break;
 8005236:	e000      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800523a:	7cfb      	ldrb	r3, [r7, #19]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10b      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005240:	4b51      	ldr	r3, [pc, #324]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005246:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800524e:	494e      	ldr	r1, [pc, #312]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005250:	4313      	orrs	r3, r2
 8005252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005256:	e001      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005258:	7cfb      	ldrb	r3, [r7, #19]
 800525a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 809e 	beq.w	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800526a:	2300      	movs	r3, #0
 800526c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800526e:	4b46      	ldr	r3, [pc, #280]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800527a:	2301      	movs	r3, #1
 800527c:	e000      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800527e:	2300      	movs	r3, #0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00d      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005284:	4b40      	ldr	r3, [pc, #256]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005288:	4a3f      	ldr	r2, [pc, #252]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800528a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800528e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005290:	4b3d      	ldr	r3, [pc, #244]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005298:	60bb      	str	r3, [r7, #8]
 800529a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800529c:	2301      	movs	r3, #1
 800529e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052a0:	4b3a      	ldr	r3, [pc, #232]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a39      	ldr	r2, [pc, #228]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80052a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052ac:	f7fc ff78 	bl	80021a0 <HAL_GetTick>
 80052b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052b2:	e009      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052b4:	f7fc ff74 	bl	80021a0 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d902      	bls.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	74fb      	strb	r3, [r7, #19]
        break;
 80052c6:	e005      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052c8:	4b30      	ldr	r3, [pc, #192]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d0ef      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80052d4:	7cfb      	ldrb	r3, [r7, #19]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d15a      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052da:	4b2b      	ldr	r3, [pc, #172]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01e      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d019      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052f6:	4b24      	ldr	r3, [pc, #144]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005300:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005302:	4b21      	ldr	r3, [pc, #132]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005308:	4a1f      	ldr	r2, [pc, #124]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800530a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800530e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005312:	4b1d      	ldr	r3, [pc, #116]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005318:	4a1b      	ldr	r2, [pc, #108]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800531a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800531e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005322:	4a19      	ldr	r2, [pc, #100]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d016      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005334:	f7fc ff34 	bl	80021a0 <HAL_GetTick>
 8005338:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800533a:	e00b      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800533c:	f7fc ff30 	bl	80021a0 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	f241 3288 	movw	r2, #5000	@ 0x1388
 800534a:	4293      	cmp	r3, r2
 800534c:	d902      	bls.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	74fb      	strb	r3, [r7, #19]
            break;
 8005352:	e006      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005354:	4b0c      	ldr	r3, [pc, #48]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0ec      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005362:	7cfb      	ldrb	r3, [r7, #19]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10b      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005368:	4b07      	ldr	r3, [pc, #28]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800536a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800536e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005376:	4904      	ldr	r1, [pc, #16]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005378:	4313      	orrs	r3, r2
 800537a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800537e:	e009      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005380:	7cfb      	ldrb	r3, [r7, #19]
 8005382:	74bb      	strb	r3, [r7, #18]
 8005384:	e006      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005386:	bf00      	nop
 8005388:	40021000 	.word	0x40021000
 800538c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005390:	7cfb      	ldrb	r3, [r7, #19]
 8005392:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005394:	7c7b      	ldrb	r3, [r7, #17]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d105      	bne.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800539a:	4b8d      	ldr	r3, [pc, #564]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800539c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800539e:	4a8c      	ldr	r2, [pc, #560]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80053a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053b2:	4b87      	ldr	r3, [pc, #540]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80053b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b8:	f023 0203 	bic.w	r2, r3, #3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	4983      	ldr	r1, [pc, #524]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053d4:	4b7e      	ldr	r3, [pc, #504]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80053d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053da:	f023 020c 	bic.w	r2, r3, #12
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e2:	497b      	ldr	r1, [pc, #492]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0304 	and.w	r3, r3, #4
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053f6:	4b76      	ldr	r3, [pc, #472]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005404:	4972      	ldr	r1, [pc, #456]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0320 	and.w	r3, r3, #32
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005418:	4b6d      	ldr	r3, [pc, #436]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800541a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800541e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005426:	496a      	ldr	r1, [pc, #424]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800543a:	4b65      	ldr	r3, [pc, #404]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800543c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005440:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005448:	4961      	ldr	r1, [pc, #388]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800545c:	4b5c      	ldr	r3, [pc, #368]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800545e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005462:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546a:	4959      	ldr	r1, [pc, #356]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800546c:	4313      	orrs	r3, r2
 800546e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800547e:	4b54      	ldr	r3, [pc, #336]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005484:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548c:	4950      	ldr	r1, [pc, #320]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800548e:	4313      	orrs	r3, r2
 8005490:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054a0:	4b4b      	ldr	r3, [pc, #300]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80054a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ae:	4948      	ldr	r1, [pc, #288]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054c2:	4b43      	ldr	r3, [pc, #268]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80054c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d0:	493f      	ldr	r1, [pc, #252]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d028      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054e4:	4b3a      	ldr	r3, [pc, #232]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80054e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054f2:	4937      	ldr	r1, [pc, #220]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005502:	d106      	bne.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005504:	4b32      	ldr	r3, [pc, #200]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	4a31      	ldr	r2, [pc, #196]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800550a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800550e:	60d3      	str	r3, [r2, #12]
 8005510:	e011      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005516:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800551a:	d10c      	bne.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3304      	adds	r3, #4
 8005520:	2101      	movs	r1, #1
 8005522:	4618      	mov	r0, r3
 8005524:	f000 f8a4 	bl	8005670 <RCCEx_PLLSAI1_Config>
 8005528:	4603      	mov	r3, r0
 800552a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800552c:	7cfb      	ldrb	r3, [r7, #19]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8005532:	7cfb      	ldrb	r3, [r7, #19]
 8005534:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d028      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005542:	4b23      	ldr	r3, [pc, #140]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005548:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005550:	491f      	ldr	r1, [pc, #124]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005552:	4313      	orrs	r3, r2
 8005554:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800555c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005560:	d106      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005562:	4b1b      	ldr	r3, [pc, #108]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	4a1a      	ldr	r2, [pc, #104]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005568:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800556c:	60d3      	str	r3, [r2, #12]
 800556e:	e011      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005574:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005578:	d10c      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	3304      	adds	r3, #4
 800557e:	2101      	movs	r1, #1
 8005580:	4618      	mov	r0, r3
 8005582:	f000 f875 	bl	8005670 <RCCEx_PLLSAI1_Config>
 8005586:	4603      	mov	r3, r0
 8005588:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800558a:	7cfb      	ldrb	r3, [r7, #19]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005590:	7cfb      	ldrb	r3, [r7, #19]
 8005592:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d02b      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055a0:	4b0b      	ldr	r3, [pc, #44]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80055a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055ae:	4908      	ldr	r1, [pc, #32]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055be:	d109      	bne.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055c0:	4b03      	ldr	r3, [pc, #12]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	4a02      	ldr	r2, [pc, #8]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80055c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055ca:	60d3      	str	r3, [r2, #12]
 80055cc:	e014      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80055ce:	bf00      	nop
 80055d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055dc:	d10c      	bne.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	3304      	adds	r3, #4
 80055e2:	2101      	movs	r1, #1
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 f843 	bl	8005670 <RCCEx_PLLSAI1_Config>
 80055ea:	4603      	mov	r3, r0
 80055ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055ee:	7cfb      	ldrb	r3, [r7, #19]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d001      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80055f4:	7cfb      	ldrb	r3, [r7, #19]
 80055f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d01c      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005604:	4b19      	ldr	r3, [pc, #100]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800560a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005612:	4916      	ldr	r1, [pc, #88]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005614:	4313      	orrs	r3, r2
 8005616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800561e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005622:	d10c      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3304      	adds	r3, #4
 8005628:	2102      	movs	r1, #2
 800562a:	4618      	mov	r0, r3
 800562c:	f000 f820 	bl	8005670 <RCCEx_PLLSAI1_Config>
 8005630:	4603      	mov	r3, r0
 8005632:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005634:	7cfb      	ldrb	r3, [r7, #19]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800563a:	7cfb      	ldrb	r3, [r7, #19]
 800563c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800564a:	4b08      	ldr	r3, [pc, #32]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800564c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005650:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005658:	4904      	ldr	r1, [pc, #16]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005660:	7cbb      	ldrb	r3, [r7, #18]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	40021000 	.word	0x40021000

08005670 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800567a:	2300      	movs	r3, #0
 800567c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800567e:	4b74      	ldr	r3, [pc, #464]	@ (8005850 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f003 0303 	and.w	r3, r3, #3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d018      	beq.n	80056bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800568a:	4b71      	ldr	r3, [pc, #452]	@ (8005850 <RCCEx_PLLSAI1_Config+0x1e0>)
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f003 0203 	and.w	r2, r3, #3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	429a      	cmp	r2, r3
 8005698:	d10d      	bne.n	80056b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
       ||
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d009      	beq.n	80056b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80056a2:	4b6b      	ldr	r3, [pc, #428]	@ (8005850 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	091b      	lsrs	r3, r3, #4
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
       ||
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d047      	beq.n	8005746 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	73fb      	strb	r3, [r7, #15]
 80056ba:	e044      	b.n	8005746 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b03      	cmp	r3, #3
 80056c2:	d018      	beq.n	80056f6 <RCCEx_PLLSAI1_Config+0x86>
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	d825      	bhi.n	8005714 <RCCEx_PLLSAI1_Config+0xa4>
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d002      	beq.n	80056d2 <RCCEx_PLLSAI1_Config+0x62>
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d009      	beq.n	80056e4 <RCCEx_PLLSAI1_Config+0x74>
 80056d0:	e020      	b.n	8005714 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056d2:	4b5f      	ldr	r3, [pc, #380]	@ (8005850 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d11d      	bne.n	800571a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056e2:	e01a      	b.n	800571a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056e4:	4b5a      	ldr	r3, [pc, #360]	@ (8005850 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d116      	bne.n	800571e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056f4:	e013      	b.n	800571e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056f6:	4b56      	ldr	r3, [pc, #344]	@ (8005850 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10f      	bne.n	8005722 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005702:	4b53      	ldr	r3, [pc, #332]	@ (8005850 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d109      	bne.n	8005722 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005712:	e006      	b.n	8005722 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	73fb      	strb	r3, [r7, #15]
      break;
 8005718:	e004      	b.n	8005724 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800571a:	bf00      	nop
 800571c:	e002      	b.n	8005724 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800571e:	bf00      	nop
 8005720:	e000      	b.n	8005724 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005722:	bf00      	nop
    }

    if(status == HAL_OK)
 8005724:	7bfb      	ldrb	r3, [r7, #15]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10d      	bne.n	8005746 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800572a:	4b49      	ldr	r3, [pc, #292]	@ (8005850 <RCCEx_PLLSAI1_Config+0x1e0>)
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6819      	ldr	r1, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	3b01      	subs	r3, #1
 800573c:	011b      	lsls	r3, r3, #4
 800573e:	430b      	orrs	r3, r1
 8005740:	4943      	ldr	r1, [pc, #268]	@ (8005850 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005742:	4313      	orrs	r3, r2
 8005744:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005746:	7bfb      	ldrb	r3, [r7, #15]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d17c      	bne.n	8005846 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800574c:	4b40      	ldr	r3, [pc, #256]	@ (8005850 <RCCEx_PLLSAI1_Config+0x1e0>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a3f      	ldr	r2, [pc, #252]	@ (8005850 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005752:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005756:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005758:	f7fc fd22 	bl	80021a0 <HAL_GetTick>
 800575c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800575e:	e009      	b.n	8005774 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005760:	f7fc fd1e 	bl	80021a0 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d902      	bls.n	8005774 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	73fb      	strb	r3, [r7, #15]
        break;
 8005772:	e005      	b.n	8005780 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005774:	4b36      	ldr	r3, [pc, #216]	@ (8005850 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1ef      	bne.n	8005760 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005780:	7bfb      	ldrb	r3, [r7, #15]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d15f      	bne.n	8005846 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d110      	bne.n	80057ae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800578c:	4b30      	ldr	r3, [pc, #192]	@ (8005850 <RCCEx_PLLSAI1_Config+0x1e0>)
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005794:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	6892      	ldr	r2, [r2, #8]
 800579c:	0211      	lsls	r1, r2, #8
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	68d2      	ldr	r2, [r2, #12]
 80057a2:	06d2      	lsls	r2, r2, #27
 80057a4:	430a      	orrs	r2, r1
 80057a6:	492a      	ldr	r1, [pc, #168]	@ (8005850 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	610b      	str	r3, [r1, #16]
 80057ac:	e027      	b.n	80057fe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d112      	bne.n	80057da <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057b4:	4b26      	ldr	r3, [pc, #152]	@ (8005850 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80057bc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	6892      	ldr	r2, [r2, #8]
 80057c4:	0211      	lsls	r1, r2, #8
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	6912      	ldr	r2, [r2, #16]
 80057ca:	0852      	lsrs	r2, r2, #1
 80057cc:	3a01      	subs	r2, #1
 80057ce:	0552      	lsls	r2, r2, #21
 80057d0:	430a      	orrs	r2, r1
 80057d2:	491f      	ldr	r1, [pc, #124]	@ (8005850 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	610b      	str	r3, [r1, #16]
 80057d8:	e011      	b.n	80057fe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057da:	4b1d      	ldr	r3, [pc, #116]	@ (8005850 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80057e2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	6892      	ldr	r2, [r2, #8]
 80057ea:	0211      	lsls	r1, r2, #8
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6952      	ldr	r2, [r2, #20]
 80057f0:	0852      	lsrs	r2, r2, #1
 80057f2:	3a01      	subs	r2, #1
 80057f4:	0652      	lsls	r2, r2, #25
 80057f6:	430a      	orrs	r2, r1
 80057f8:	4915      	ldr	r1, [pc, #84]	@ (8005850 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80057fe:	4b14      	ldr	r3, [pc, #80]	@ (8005850 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a13      	ldr	r2, [pc, #76]	@ (8005850 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005804:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005808:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580a:	f7fc fcc9 	bl	80021a0 <HAL_GetTick>
 800580e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005810:	e009      	b.n	8005826 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005812:	f7fc fcc5 	bl	80021a0 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d902      	bls.n	8005826 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	73fb      	strb	r3, [r7, #15]
          break;
 8005824:	e005      	b.n	8005832 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005826:	4b0a      	ldr	r3, [pc, #40]	@ (8005850 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0ef      	beq.n	8005812 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005832:	7bfb      	ldrb	r3, [r7, #15]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d106      	bne.n	8005846 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005838:	4b05      	ldr	r3, [pc, #20]	@ (8005850 <RCCEx_PLLSAI1_Config+0x1e0>)
 800583a:	691a      	ldr	r2, [r3, #16]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	4903      	ldr	r1, [pc, #12]	@ (8005850 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005842:	4313      	orrs	r3, r2
 8005844:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005846:	7bfb      	ldrb	r3, [r7, #15]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	40021000 	.word	0x40021000

08005854 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e095      	b.n	8005992 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586a:	2b00      	cmp	r3, #0
 800586c:	d108      	bne.n	8005880 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005876:	d009      	beq.n	800588c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	61da      	str	r2, [r3, #28]
 800587e:	e005      	b.n	800588c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fc f9e4 	bl	8001c74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058cc:	d902      	bls.n	80058d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	e002      	b.n	80058da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80058d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80058e2:	d007      	beq.n	80058f4 <HAL_SPI_Init+0xa0>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058ec:	d002      	beq.n	80058f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	431a      	orrs	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005936:	ea42 0103 	orr.w	r1, r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	0c1b      	lsrs	r3, r3, #16
 8005950:	f003 0204 	and.w	r2, r3, #4
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005958:	f003 0310 	and.w	r3, r3, #16
 800595c:	431a      	orrs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005970:	ea42 0103 	orr.w	r1, r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b088      	sub	sp, #32
 800599e:	af00      	add	r7, sp, #0
 80059a0:	60f8      	str	r0, [r7, #12]
 80059a2:	60b9      	str	r1, [r7, #8]
 80059a4:	603b      	str	r3, [r7, #0]
 80059a6:	4613      	mov	r3, r2
 80059a8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059aa:	f7fc fbf9 	bl	80021a0 <HAL_GetTick>
 80059ae:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80059b0:	88fb      	ldrh	r3, [r7, #6]
 80059b2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d001      	beq.n	80059c4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80059c0:	2302      	movs	r3, #2
 80059c2:	e15c      	b.n	8005c7e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d002      	beq.n	80059d0 <HAL_SPI_Transmit+0x36>
 80059ca:	88fb      	ldrh	r3, [r7, #6]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e154      	b.n	8005c7e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d101      	bne.n	80059e2 <HAL_SPI_Transmit+0x48>
 80059de:	2302      	movs	r3, #2
 80059e0:	e14d      	b.n	8005c7e <HAL_SPI_Transmit+0x2e4>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2203      	movs	r2, #3
 80059ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	88fa      	ldrh	r2, [r7, #6]
 8005a02:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	88fa      	ldrh	r2, [r7, #6]
 8005a08:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a34:	d10f      	bne.n	8005a56 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a60:	2b40      	cmp	r3, #64	@ 0x40
 8005a62:	d007      	beq.n	8005a74 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a7c:	d952      	bls.n	8005b24 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <HAL_SPI_Transmit+0xf2>
 8005a86:	8b7b      	ldrh	r3, [r7, #26]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d145      	bne.n	8005b18 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a90:	881a      	ldrh	r2, [r3, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a9c:	1c9a      	adds	r2, r3, #2
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ab0:	e032      	b.n	8005b18 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d112      	bne.n	8005ae6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac4:	881a      	ldrh	r2, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad0:	1c9a      	adds	r2, r3, #2
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ae4:	e018      	b.n	8005b18 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ae6:	f7fc fb5b 	bl	80021a0 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d803      	bhi.n	8005afe <HAL_SPI_Transmit+0x164>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afc:	d102      	bne.n	8005b04 <HAL_SPI_Transmit+0x16a>
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d109      	bne.n	8005b18 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e0b2      	b.n	8005c7e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1c7      	bne.n	8005ab2 <HAL_SPI_Transmit+0x118>
 8005b22:	e083      	b.n	8005c2c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d002      	beq.n	8005b32 <HAL_SPI_Transmit+0x198>
 8005b2c:	8b7b      	ldrh	r3, [r7, #26]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d177      	bne.n	8005c22 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d912      	bls.n	8005b62 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b40:	881a      	ldrh	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b4c:	1c9a      	adds	r2, r3, #2
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	3b02      	subs	r3, #2
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b60:	e05f      	b.n	8005c22 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	330c      	adds	r3, #12
 8005b6c:	7812      	ldrb	r2, [r2, #0]
 8005b6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	3b01      	subs	r3, #1
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005b88:	e04b      	b.n	8005c22 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d12b      	bne.n	8005bf0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d912      	bls.n	8005bc8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba6:	881a      	ldrh	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb2:	1c9a      	adds	r2, r3, #2
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	3b02      	subs	r3, #2
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005bc6:	e02c      	b.n	8005c22 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	330c      	adds	r3, #12
 8005bd2:	7812      	ldrb	r2, [r2, #0]
 8005bd4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005bee:	e018      	b.n	8005c22 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bf0:	f7fc fad6 	bl	80021a0 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d803      	bhi.n	8005c08 <HAL_SPI_Transmit+0x26e>
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c06:	d102      	bne.n	8005c0e <HAL_SPI_Transmit+0x274>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d109      	bne.n	8005c22 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e02d      	b.n	8005c7e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1ae      	bne.n	8005b8a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c2c:	69fa      	ldr	r2, [r7, #28]
 8005c2e:	6839      	ldr	r1, [r7, #0]
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 f947 	bl	8005ec4 <SPI_EndRxTxTransaction>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10a      	bne.n	8005c60 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	617b      	str	r3, [r7, #20]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	617b      	str	r3, [r7, #20]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	617b      	str	r3, [r7, #20]
 8005c5e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e000      	b.n	8005c7e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
  }
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3720      	adds	r7, #32
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
	...

08005c88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b088      	sub	sp, #32
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	603b      	str	r3, [r7, #0]
 8005c94:	4613      	mov	r3, r2
 8005c96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c98:	f7fc fa82 	bl	80021a0 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca0:	1a9b      	subs	r3, r3, r2
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ca8:	f7fc fa7a 	bl	80021a0 <HAL_GetTick>
 8005cac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005cae:	4b39      	ldr	r3, [pc, #228]	@ (8005d94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	015b      	lsls	r3, r3, #5
 8005cb4:	0d1b      	lsrs	r3, r3, #20
 8005cb6:	69fa      	ldr	r2, [r7, #28]
 8005cb8:	fb02 f303 	mul.w	r3, r2, r3
 8005cbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cbe:	e054      	b.n	8005d6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc6:	d050      	beq.n	8005d6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cc8:	f7fc fa6a 	bl	80021a0 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	69fa      	ldr	r2, [r7, #28]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d902      	bls.n	8005cde <SPI_WaitFlagStateUntilTimeout+0x56>
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d13d      	bne.n	8005d5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005cec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cf6:	d111      	bne.n	8005d1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d00:	d004      	beq.n	8005d0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d0a:	d107      	bne.n	8005d1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d24:	d10f      	bne.n	8005d46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e017      	b.n	8005d8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689a      	ldr	r2, [r3, #8]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	4013      	ands	r3, r2
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	bf0c      	ite	eq
 8005d7a:	2301      	moveq	r3, #1
 8005d7c:	2300      	movne	r3, #0
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	461a      	mov	r2, r3
 8005d82:	79fb      	ldrb	r3, [r7, #7]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d19b      	bne.n	8005cc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3720      	adds	r7, #32
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	20000000 	.word	0x20000000

08005d98 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b08a      	sub	sp, #40	@ 0x28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
 8005da4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005da6:	2300      	movs	r3, #0
 8005da8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005daa:	f7fc f9f9 	bl	80021a0 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db2:	1a9b      	subs	r3, r3, r2
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	4413      	add	r3, r2
 8005db8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005dba:	f7fc f9f1 	bl	80021a0 <HAL_GetTick>
 8005dbe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	330c      	adds	r3, #12
 8005dc6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005dc8:	4b3d      	ldr	r3, [pc, #244]	@ (8005ec0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	00da      	lsls	r2, r3, #3
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	0d1b      	lsrs	r3, r3, #20
 8005dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dda:	fb02 f303 	mul.w	r3, r2, r3
 8005dde:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005de0:	e060      	b.n	8005ea4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005de8:	d107      	bne.n	8005dfa <SPI_WaitFifoStateUntilTimeout+0x62>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d104      	bne.n	8005dfa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005df8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e00:	d050      	beq.n	8005ea4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e02:	f7fc f9cd 	bl	80021a0 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d902      	bls.n	8005e18 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d13d      	bne.n	8005e94 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e26:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e30:	d111      	bne.n	8005e56 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e3a:	d004      	beq.n	8005e46 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e44:	d107      	bne.n	8005e56 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e54:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e5e:	d10f      	bne.n	8005e80 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e7e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e010      	b.n	8005eb6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689a      	ldr	r2, [r3, #8]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	4013      	ands	r3, r2
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d196      	bne.n	8005de2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3728      	adds	r7, #40	@ 0x28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20000000 	.word	0x20000000

08005ec4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af02      	add	r7, sp, #8
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f7ff ff5b 	bl	8005d98 <SPI_WaitFifoStateUntilTimeout>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d007      	beq.n	8005ef8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eec:	f043 0220 	orr.w	r2, r3, #32
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e027      	b.n	8005f48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2200      	movs	r2, #0
 8005f00:	2180      	movs	r1, #128	@ 0x80
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f7ff fec0 	bl	8005c88 <SPI_WaitFlagStateUntilTimeout>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d007      	beq.n	8005f1e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f12:	f043 0220 	orr.w	r2, r3, #32
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e014      	b.n	8005f48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f7ff ff34 	bl	8005d98 <SPI_WaitFifoStateUntilTimeout>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d007      	beq.n	8005f46 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f3a:	f043 0220 	orr.w	r2, r3, #32
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e000      	b.n	8005f48 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e049      	b.n	8005ff6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d106      	bne.n	8005f7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7fb febe 	bl	8001cf8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	4610      	mov	r0, r2
 8005f90:	f000 fa28 	bl	80063e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
	...

08006000 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d109      	bne.n	8006024 <HAL_TIM_PWM_Start+0x24>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b01      	cmp	r3, #1
 800601a:	bf14      	ite	ne
 800601c:	2301      	movne	r3, #1
 800601e:	2300      	moveq	r3, #0
 8006020:	b2db      	uxtb	r3, r3
 8006022:	e03c      	b.n	800609e <HAL_TIM_PWM_Start+0x9e>
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	2b04      	cmp	r3, #4
 8006028:	d109      	bne.n	800603e <HAL_TIM_PWM_Start+0x3e>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b01      	cmp	r3, #1
 8006034:	bf14      	ite	ne
 8006036:	2301      	movne	r3, #1
 8006038:	2300      	moveq	r3, #0
 800603a:	b2db      	uxtb	r3, r3
 800603c:	e02f      	b.n	800609e <HAL_TIM_PWM_Start+0x9e>
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b08      	cmp	r3, #8
 8006042:	d109      	bne.n	8006058 <HAL_TIM_PWM_Start+0x58>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b01      	cmp	r3, #1
 800604e:	bf14      	ite	ne
 8006050:	2301      	movne	r3, #1
 8006052:	2300      	moveq	r3, #0
 8006054:	b2db      	uxtb	r3, r3
 8006056:	e022      	b.n	800609e <HAL_TIM_PWM_Start+0x9e>
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	2b0c      	cmp	r3, #12
 800605c:	d109      	bne.n	8006072 <HAL_TIM_PWM_Start+0x72>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b01      	cmp	r3, #1
 8006068:	bf14      	ite	ne
 800606a:	2301      	movne	r3, #1
 800606c:	2300      	moveq	r3, #0
 800606e:	b2db      	uxtb	r3, r3
 8006070:	e015      	b.n	800609e <HAL_TIM_PWM_Start+0x9e>
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	2b10      	cmp	r3, #16
 8006076:	d109      	bne.n	800608c <HAL_TIM_PWM_Start+0x8c>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b01      	cmp	r3, #1
 8006082:	bf14      	ite	ne
 8006084:	2301      	movne	r3, #1
 8006086:	2300      	moveq	r3, #0
 8006088:	b2db      	uxtb	r3, r3
 800608a:	e008      	b.n	800609e <HAL_TIM_PWM_Start+0x9e>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b01      	cmp	r3, #1
 8006096:	bf14      	ite	ne
 8006098:	2301      	movne	r3, #1
 800609a:	2300      	moveq	r3, #0
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e07e      	b.n	80061a4 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d104      	bne.n	80060b6 <HAL_TIM_PWM_Start+0xb6>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060b4:	e023      	b.n	80060fe <HAL_TIM_PWM_Start+0xfe>
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b04      	cmp	r3, #4
 80060ba:	d104      	bne.n	80060c6 <HAL_TIM_PWM_Start+0xc6>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060c4:	e01b      	b.n	80060fe <HAL_TIM_PWM_Start+0xfe>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b08      	cmp	r3, #8
 80060ca:	d104      	bne.n	80060d6 <HAL_TIM_PWM_Start+0xd6>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060d4:	e013      	b.n	80060fe <HAL_TIM_PWM_Start+0xfe>
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2b0c      	cmp	r3, #12
 80060da:	d104      	bne.n	80060e6 <HAL_TIM_PWM_Start+0xe6>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2202      	movs	r2, #2
 80060e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060e4:	e00b      	b.n	80060fe <HAL_TIM_PWM_Start+0xfe>
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	2b10      	cmp	r3, #16
 80060ea:	d104      	bne.n	80060f6 <HAL_TIM_PWM_Start+0xf6>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060f4:	e003      	b.n	80060fe <HAL_TIM_PWM_Start+0xfe>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2202      	movs	r2, #2
 80060fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2201      	movs	r2, #1
 8006104:	6839      	ldr	r1, [r7, #0]
 8006106:	4618      	mov	r0, r3
 8006108:	f000 fc5a 	bl	80069c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a26      	ldr	r2, [pc, #152]	@ (80061ac <HAL_TIM_PWM_Start+0x1ac>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d009      	beq.n	800612a <HAL_TIM_PWM_Start+0x12a>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a25      	ldr	r2, [pc, #148]	@ (80061b0 <HAL_TIM_PWM_Start+0x1b0>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d004      	beq.n	800612a <HAL_TIM_PWM_Start+0x12a>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a23      	ldr	r2, [pc, #140]	@ (80061b4 <HAL_TIM_PWM_Start+0x1b4>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d101      	bne.n	800612e <HAL_TIM_PWM_Start+0x12e>
 800612a:	2301      	movs	r3, #1
 800612c:	e000      	b.n	8006130 <HAL_TIM_PWM_Start+0x130>
 800612e:	2300      	movs	r3, #0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d007      	beq.n	8006144 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006142:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a18      	ldr	r2, [pc, #96]	@ (80061ac <HAL_TIM_PWM_Start+0x1ac>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d009      	beq.n	8006162 <HAL_TIM_PWM_Start+0x162>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006156:	d004      	beq.n	8006162 <HAL_TIM_PWM_Start+0x162>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a14      	ldr	r2, [pc, #80]	@ (80061b0 <HAL_TIM_PWM_Start+0x1b0>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d115      	bne.n	800618e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	4b13      	ldr	r3, [pc, #76]	@ (80061b8 <HAL_TIM_PWM_Start+0x1b8>)
 800616a:	4013      	ands	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b06      	cmp	r3, #6
 8006172:	d015      	beq.n	80061a0 <HAL_TIM_PWM_Start+0x1a0>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800617a:	d011      	beq.n	80061a0 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f042 0201 	orr.w	r2, r2, #1
 800618a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800618c:	e008      	b.n	80061a0 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f042 0201 	orr.w	r2, r2, #1
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	e000      	b.n	80061a2 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	40012c00 	.word	0x40012c00
 80061b0:	40014000 	.word	0x40014000
 80061b4:	40014400 	.word	0x40014400
 80061b8:	00010007 	.word	0x00010007

080061bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061c8:	2300      	movs	r3, #0
 80061ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d101      	bne.n	80061da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061d6:	2302      	movs	r3, #2
 80061d8:	e0ff      	b.n	80063da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b14      	cmp	r3, #20
 80061e6:	f200 80f0 	bhi.w	80063ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80061ea:	a201      	add	r2, pc, #4	@ (adr r2, 80061f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f0:	08006245 	.word	0x08006245
 80061f4:	080063cb 	.word	0x080063cb
 80061f8:	080063cb 	.word	0x080063cb
 80061fc:	080063cb 	.word	0x080063cb
 8006200:	08006285 	.word	0x08006285
 8006204:	080063cb 	.word	0x080063cb
 8006208:	080063cb 	.word	0x080063cb
 800620c:	080063cb 	.word	0x080063cb
 8006210:	080062c7 	.word	0x080062c7
 8006214:	080063cb 	.word	0x080063cb
 8006218:	080063cb 	.word	0x080063cb
 800621c:	080063cb 	.word	0x080063cb
 8006220:	08006307 	.word	0x08006307
 8006224:	080063cb 	.word	0x080063cb
 8006228:	080063cb 	.word	0x080063cb
 800622c:	080063cb 	.word	0x080063cb
 8006230:	08006349 	.word	0x08006349
 8006234:	080063cb 	.word	0x080063cb
 8006238:	080063cb 	.word	0x080063cb
 800623c:	080063cb 	.word	0x080063cb
 8006240:	08006389 	.word	0x08006389
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68b9      	ldr	r1, [r7, #8]
 800624a:	4618      	mov	r0, r3
 800624c:	f000 f93a 	bl	80064c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	699a      	ldr	r2, [r3, #24]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f042 0208 	orr.w	r2, r2, #8
 800625e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699a      	ldr	r2, [r3, #24]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0204 	bic.w	r2, r2, #4
 800626e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6999      	ldr	r1, [r3, #24]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	691a      	ldr	r2, [r3, #16]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	619a      	str	r2, [r3, #24]
      break;
 8006282:	e0a5      	b.n	80063d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68b9      	ldr	r1, [r7, #8]
 800628a:	4618      	mov	r0, r3
 800628c:	f000 f996 	bl	80065bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	699a      	ldr	r2, [r3, #24]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800629e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	699a      	ldr	r2, [r3, #24]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6999      	ldr	r1, [r3, #24]
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	021a      	lsls	r2, r3, #8
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	430a      	orrs	r2, r1
 80062c2:	619a      	str	r2, [r3, #24]
      break;
 80062c4:	e084      	b.n	80063d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68b9      	ldr	r1, [r7, #8]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 f9ef 	bl	80066b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	69da      	ldr	r2, [r3, #28]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f042 0208 	orr.w	r2, r2, #8
 80062e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	69da      	ldr	r2, [r3, #28]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 0204 	bic.w	r2, r2, #4
 80062f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	69d9      	ldr	r1, [r3, #28]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	691a      	ldr	r2, [r3, #16]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	430a      	orrs	r2, r1
 8006302:	61da      	str	r2, [r3, #28]
      break;
 8006304:	e064      	b.n	80063d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68b9      	ldr	r1, [r7, #8]
 800630c:	4618      	mov	r0, r3
 800630e:	f000 fa47 	bl	80067a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69da      	ldr	r2, [r3, #28]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69da      	ldr	r2, [r3, #28]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	69d9      	ldr	r1, [r3, #28]
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	021a      	lsls	r2, r3, #8
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	61da      	str	r2, [r3, #28]
      break;
 8006346:	e043      	b.n	80063d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68b9      	ldr	r1, [r7, #8]
 800634e:	4618      	mov	r0, r3
 8006350:	f000 fa84 	bl	800685c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f042 0208 	orr.w	r2, r2, #8
 8006362:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 0204 	bic.w	r2, r2, #4
 8006372:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	691a      	ldr	r2, [r3, #16]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	430a      	orrs	r2, r1
 8006384:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006386:	e023      	b.n	80063d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68b9      	ldr	r1, [r7, #8]
 800638e:	4618      	mov	r0, r3
 8006390:	f000 fabc 	bl	800690c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	021a      	lsls	r2, r3, #8
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80063c8:	e002      	b.n	80063d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	75fb      	strb	r3, [r7, #23]
      break;
 80063ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3718      	adds	r7, #24
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop

080063e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a30      	ldr	r2, [pc, #192]	@ (80064b8 <TIM_Base_SetConfig+0xd4>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d003      	beq.n	8006404 <TIM_Base_SetConfig+0x20>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006402:	d108      	bne.n	8006416 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800640a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a27      	ldr	r2, [pc, #156]	@ (80064b8 <TIM_Base_SetConfig+0xd4>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d00b      	beq.n	8006436 <TIM_Base_SetConfig+0x52>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006424:	d007      	beq.n	8006436 <TIM_Base_SetConfig+0x52>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a24      	ldr	r2, [pc, #144]	@ (80064bc <TIM_Base_SetConfig+0xd8>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d003      	beq.n	8006436 <TIM_Base_SetConfig+0x52>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a23      	ldr	r2, [pc, #140]	@ (80064c0 <TIM_Base_SetConfig+0xdc>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d108      	bne.n	8006448 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800643c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	4313      	orrs	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a12      	ldr	r2, [pc, #72]	@ (80064b8 <TIM_Base_SetConfig+0xd4>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d007      	beq.n	8006484 <TIM_Base_SetConfig+0xa0>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a11      	ldr	r2, [pc, #68]	@ (80064bc <TIM_Base_SetConfig+0xd8>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d003      	beq.n	8006484 <TIM_Base_SetConfig+0xa0>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a10      	ldr	r2, [pc, #64]	@ (80064c0 <TIM_Base_SetConfig+0xdc>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d103      	bne.n	800648c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	691a      	ldr	r2, [r3, #16]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b01      	cmp	r3, #1
 800649c:	d105      	bne.n	80064aa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f023 0201 	bic.w	r2, r3, #1
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	611a      	str	r2, [r3, #16]
  }
}
 80064aa:	bf00      	nop
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	40012c00 	.word	0x40012c00
 80064bc:	40014000 	.word	0x40014000
 80064c0:	40014400 	.word	0x40014400

080064c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b087      	sub	sp, #28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	f023 0201 	bic.w	r2, r3, #1
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f023 0303 	bic.w	r3, r3, #3
 80064fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	4313      	orrs	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f023 0302 	bic.w	r3, r3, #2
 8006510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	4313      	orrs	r3, r2
 800651a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a24      	ldr	r2, [pc, #144]	@ (80065b0 <TIM_OC1_SetConfig+0xec>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d007      	beq.n	8006534 <TIM_OC1_SetConfig+0x70>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a23      	ldr	r2, [pc, #140]	@ (80065b4 <TIM_OC1_SetConfig+0xf0>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d003      	beq.n	8006534 <TIM_OC1_SetConfig+0x70>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a22      	ldr	r2, [pc, #136]	@ (80065b8 <TIM_OC1_SetConfig+0xf4>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d10c      	bne.n	800654e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	f023 0308 	bic.w	r3, r3, #8
 800653a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	4313      	orrs	r3, r2
 8006544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f023 0304 	bic.w	r3, r3, #4
 800654c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a17      	ldr	r2, [pc, #92]	@ (80065b0 <TIM_OC1_SetConfig+0xec>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d007      	beq.n	8006566 <TIM_OC1_SetConfig+0xa2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a16      	ldr	r2, [pc, #88]	@ (80065b4 <TIM_OC1_SetConfig+0xf0>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d003      	beq.n	8006566 <TIM_OC1_SetConfig+0xa2>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a15      	ldr	r2, [pc, #84]	@ (80065b8 <TIM_OC1_SetConfig+0xf4>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d111      	bne.n	800658a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800656c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	4313      	orrs	r3, r2
 800657e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	4313      	orrs	r3, r2
 8006588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	621a      	str	r2, [r3, #32]
}
 80065a4:	bf00      	nop
 80065a6:	371c      	adds	r7, #28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	40012c00 	.word	0x40012c00
 80065b4:	40014000 	.word	0x40014000
 80065b8:	40014400 	.word	0x40014400

080065bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065bc:	b480      	push	{r7}
 80065be:	b087      	sub	sp, #28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	f023 0210 	bic.w	r2, r3, #16
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	021b      	lsls	r3, r3, #8
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	4313      	orrs	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f023 0320 	bic.w	r3, r3, #32
 800660a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	011b      	lsls	r3, r3, #4
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	4313      	orrs	r3, r2
 8006616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a22      	ldr	r2, [pc, #136]	@ (80066a4 <TIM_OC2_SetConfig+0xe8>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d10d      	bne.n	800663c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	4313      	orrs	r3, r2
 8006632:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800663a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a19      	ldr	r2, [pc, #100]	@ (80066a4 <TIM_OC2_SetConfig+0xe8>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d007      	beq.n	8006654 <TIM_OC2_SetConfig+0x98>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a18      	ldr	r2, [pc, #96]	@ (80066a8 <TIM_OC2_SetConfig+0xec>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d003      	beq.n	8006654 <TIM_OC2_SetConfig+0x98>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a17      	ldr	r2, [pc, #92]	@ (80066ac <TIM_OC2_SetConfig+0xf0>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d113      	bne.n	800667c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800665a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006662:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	4313      	orrs	r3, r2
 800666e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	4313      	orrs	r3, r2
 800667a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	621a      	str	r2, [r3, #32]
}
 8006696:	bf00      	nop
 8006698:	371c      	adds	r7, #28
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	40012c00 	.word	0x40012c00
 80066a8:	40014000 	.word	0x40014000
 80066ac:	40014400 	.word	0x40014400

080066b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b087      	sub	sp, #28
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0303 	bic.w	r3, r3, #3
 80066ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	021b      	lsls	r3, r3, #8
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	4313      	orrs	r3, r2
 8006708:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a21      	ldr	r2, [pc, #132]	@ (8006794 <TIM_OC3_SetConfig+0xe4>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d10d      	bne.n	800672e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006718:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	021b      	lsls	r3, r3, #8
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	4313      	orrs	r3, r2
 8006724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800672c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a18      	ldr	r2, [pc, #96]	@ (8006794 <TIM_OC3_SetConfig+0xe4>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d007      	beq.n	8006746 <TIM_OC3_SetConfig+0x96>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a17      	ldr	r2, [pc, #92]	@ (8006798 <TIM_OC3_SetConfig+0xe8>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d003      	beq.n	8006746 <TIM_OC3_SetConfig+0x96>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a16      	ldr	r2, [pc, #88]	@ (800679c <TIM_OC3_SetConfig+0xec>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d113      	bne.n	800676e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800674c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006754:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	011b      	lsls	r3, r3, #4
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	4313      	orrs	r3, r2
 8006760:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	011b      	lsls	r3, r3, #4
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	4313      	orrs	r3, r2
 800676c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	685a      	ldr	r2, [r3, #4]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	621a      	str	r2, [r3, #32]
}
 8006788:	bf00      	nop
 800678a:	371c      	adds	r7, #28
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	40012c00 	.word	0x40012c00
 8006798:	40014000 	.word	0x40014000
 800679c:	40014400 	.word	0x40014400

080067a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	021b      	lsls	r3, r3, #8
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	031b      	lsls	r3, r3, #12
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a14      	ldr	r2, [pc, #80]	@ (8006850 <TIM_OC4_SetConfig+0xb0>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d007      	beq.n	8006814 <TIM_OC4_SetConfig+0x74>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a13      	ldr	r2, [pc, #76]	@ (8006854 <TIM_OC4_SetConfig+0xb4>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d003      	beq.n	8006814 <TIM_OC4_SetConfig+0x74>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a12      	ldr	r2, [pc, #72]	@ (8006858 <TIM_OC4_SetConfig+0xb8>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d109      	bne.n	8006828 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800681a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	019b      	lsls	r3, r3, #6
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	4313      	orrs	r3, r2
 8006826:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	621a      	str	r2, [r3, #32]
}
 8006842:	bf00      	nop
 8006844:	371c      	adds	r7, #28
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	40012c00 	.word	0x40012c00
 8006854:	40014000 	.word	0x40014000
 8006858:	40014400 	.word	0x40014400

0800685c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800685c:	b480      	push	{r7}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800688a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800688e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80068a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	041b      	lsls	r3, r3, #16
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a13      	ldr	r2, [pc, #76]	@ (8006900 <TIM_OC5_SetConfig+0xa4>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d007      	beq.n	80068c6 <TIM_OC5_SetConfig+0x6a>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a12      	ldr	r2, [pc, #72]	@ (8006904 <TIM_OC5_SetConfig+0xa8>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d003      	beq.n	80068c6 <TIM_OC5_SetConfig+0x6a>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a11      	ldr	r2, [pc, #68]	@ (8006908 <TIM_OC5_SetConfig+0xac>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d109      	bne.n	80068da <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	021b      	lsls	r3, r3, #8
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	621a      	str	r2, [r3, #32]
}
 80068f4:	bf00      	nop
 80068f6:	371c      	adds	r7, #28
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	40012c00 	.word	0x40012c00
 8006904:	40014000 	.word	0x40014000
 8006908:	40014400 	.word	0x40014400

0800690c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800690c:	b480      	push	{r7}
 800690e:	b087      	sub	sp, #28
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a1b      	ldr	r3, [r3, #32]
 8006920:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800693a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800693e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	021b      	lsls	r3, r3, #8
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	4313      	orrs	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006952:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	051b      	lsls	r3, r3, #20
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	4313      	orrs	r3, r2
 800695e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a14      	ldr	r2, [pc, #80]	@ (80069b4 <TIM_OC6_SetConfig+0xa8>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d007      	beq.n	8006978 <TIM_OC6_SetConfig+0x6c>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a13      	ldr	r2, [pc, #76]	@ (80069b8 <TIM_OC6_SetConfig+0xac>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d003      	beq.n	8006978 <TIM_OC6_SetConfig+0x6c>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a12      	ldr	r2, [pc, #72]	@ (80069bc <TIM_OC6_SetConfig+0xb0>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d109      	bne.n	800698c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800697e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	029b      	lsls	r3, r3, #10
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	4313      	orrs	r3, r2
 800698a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	621a      	str	r2, [r3, #32]
}
 80069a6:	bf00      	nop
 80069a8:	371c      	adds	r7, #28
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	40012c00 	.word	0x40012c00
 80069b8:	40014000 	.word	0x40014000
 80069bc:	40014400 	.word	0x40014400

080069c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b087      	sub	sp, #28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f003 031f 	and.w	r3, r3, #31
 80069d2:	2201      	movs	r2, #1
 80069d4:	fa02 f303 	lsl.w	r3, r2, r3
 80069d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6a1a      	ldr	r2, [r3, #32]
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	43db      	mvns	r3, r3
 80069e2:	401a      	ands	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6a1a      	ldr	r2, [r3, #32]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f003 031f 	and.w	r3, r3, #31
 80069f2:	6879      	ldr	r1, [r7, #4]
 80069f4:	fa01 f303 	lsl.w	r3, r1, r3
 80069f8:	431a      	orrs	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	621a      	str	r2, [r3, #32]
}
 80069fe:	bf00      	nop
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
	...

08006a0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d101      	bne.n	8006a24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a20:	2302      	movs	r3, #2
 8006a22:	e04f      	b.n	8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a21      	ldr	r2, [pc, #132]	@ (8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d108      	bne.n	8006a60 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006a54:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a14      	ldr	r2, [pc, #80]	@ (8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d009      	beq.n	8006a98 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a8c:	d004      	beq.n	8006a98 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a10      	ldr	r2, [pc, #64]	@ (8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d10c      	bne.n	8006ab2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	40012c00 	.word	0x40012c00
 8006ad4:	40014000 	.word	0x40014000

08006ad8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d101      	bne.n	8006af4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006af0:	2302      	movs	r3, #2
 8006af2:	e060      	b.n	8006bb6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	041b      	lsls	r3, r3, #16
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a14      	ldr	r2, [pc, #80]	@ (8006bc4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d115      	bne.n	8006ba4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b82:	051b      	lsls	r3, r3, #20
 8006b84:	4313      	orrs	r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	40012c00 	.word	0x40012c00

08006bc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e040      	b.n	8006c5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d106      	bne.n	8006bf0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f7fb f8dc 	bl	8001da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2224      	movs	r2, #36	@ 0x24
 8006bf4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f022 0201 	bic.w	r2, r2, #1
 8006c04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d002      	beq.n	8006c14 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fb0c 	bl	800722c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f8af 	bl	8006d78 <UART_SetConfig>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d101      	bne.n	8006c24 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e01b      	b.n	8006c5c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689a      	ldr	r2, [r3, #8]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f042 0201 	orr.w	r2, r2, #1
 8006c52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 fb8b 	bl	8007370 <UART_CheckIdleState>
 8006c5a:	4603      	mov	r3, r0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3708      	adds	r7, #8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b08a      	sub	sp, #40	@ 0x28
 8006c68:	af02      	add	r7, sp, #8
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	603b      	str	r3, [r7, #0]
 8006c70:	4613      	mov	r3, r2
 8006c72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c78:	2b20      	cmp	r3, #32
 8006c7a:	d177      	bne.n	8006d6c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d002      	beq.n	8006c88 <HAL_UART_Transmit+0x24>
 8006c82:	88fb      	ldrh	r3, [r7, #6]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e070      	b.n	8006d6e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2221      	movs	r2, #33	@ 0x21
 8006c98:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c9a:	f7fb fa81 	bl	80021a0 <HAL_GetTick>
 8006c9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	88fa      	ldrh	r2, [r7, #6]
 8006ca4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	88fa      	ldrh	r2, [r7, #6]
 8006cac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cb8:	d108      	bne.n	8006ccc <HAL_UART_Transmit+0x68>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d104      	bne.n	8006ccc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	61bb      	str	r3, [r7, #24]
 8006cca:	e003      	b.n	8006cd4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006cd4:	e02f      	b.n	8006d36 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	2180      	movs	r1, #128	@ 0x80
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 fbed 	bl	80074c0 <UART_WaitOnFlagUntilTimeout>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d004      	beq.n	8006cf6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e03b      	b.n	8006d6e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10b      	bne.n	8006d14 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	881a      	ldrh	r2, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d08:	b292      	uxth	r2, r2
 8006d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	3302      	adds	r3, #2
 8006d10:	61bb      	str	r3, [r7, #24]
 8006d12:	e007      	b.n	8006d24 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	781a      	ldrb	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	3301      	adds	r3, #1
 8006d22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1c9      	bne.n	8006cd6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	2140      	movs	r1, #64	@ 0x40
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f000 fbb7 	bl	80074c0 <UART_WaitOnFlagUntilTimeout>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d004      	beq.n	8006d62 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e005      	b.n	8006d6e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2220      	movs	r2, #32
 8006d66:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	e000      	b.n	8006d6e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006d6c:	2302      	movs	r3, #2
  }
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3720      	adds	r7, #32
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
	...

08006d78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d7c:	b08a      	sub	sp, #40	@ 0x28
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d82:	2300      	movs	r3, #0
 8006d84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	689a      	ldr	r2, [r3, #8]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	431a      	orrs	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	431a      	orrs	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	69db      	ldr	r3, [r3, #28]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	4b9e      	ldr	r3, [pc, #632]	@ (8007020 <UART_SetConfig+0x2a8>)
 8006da8:	4013      	ands	r3, r2
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	6812      	ldr	r2, [r2, #0]
 8006dae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006db0:	430b      	orrs	r3, r1
 8006db2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	68da      	ldr	r2, [r3, #12]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a93      	ldr	r2, [pc, #588]	@ (8007024 <UART_SetConfig+0x2ac>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d004      	beq.n	8006de4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006de0:	4313      	orrs	r3, r2
 8006de2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006df4:	430a      	orrs	r2, r1
 8006df6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a8a      	ldr	r2, [pc, #552]	@ (8007028 <UART_SetConfig+0x2b0>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d126      	bne.n	8006e50 <UART_SetConfig+0xd8>
 8006e02:	4b8a      	ldr	r3, [pc, #552]	@ (800702c <UART_SetConfig+0x2b4>)
 8006e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e08:	f003 0303 	and.w	r3, r3, #3
 8006e0c:	2b03      	cmp	r3, #3
 8006e0e:	d81b      	bhi.n	8006e48 <UART_SetConfig+0xd0>
 8006e10:	a201      	add	r2, pc, #4	@ (adr r2, 8006e18 <UART_SetConfig+0xa0>)
 8006e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e16:	bf00      	nop
 8006e18:	08006e29 	.word	0x08006e29
 8006e1c:	08006e39 	.word	0x08006e39
 8006e20:	08006e31 	.word	0x08006e31
 8006e24:	08006e41 	.word	0x08006e41
 8006e28:	2301      	movs	r3, #1
 8006e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e2e:	e0ab      	b.n	8006f88 <UART_SetConfig+0x210>
 8006e30:	2302      	movs	r3, #2
 8006e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e36:	e0a7      	b.n	8006f88 <UART_SetConfig+0x210>
 8006e38:	2304      	movs	r3, #4
 8006e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e3e:	e0a3      	b.n	8006f88 <UART_SetConfig+0x210>
 8006e40:	2308      	movs	r3, #8
 8006e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e46:	e09f      	b.n	8006f88 <UART_SetConfig+0x210>
 8006e48:	2310      	movs	r3, #16
 8006e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e4e:	e09b      	b.n	8006f88 <UART_SetConfig+0x210>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a76      	ldr	r2, [pc, #472]	@ (8007030 <UART_SetConfig+0x2b8>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d138      	bne.n	8006ecc <UART_SetConfig+0x154>
 8006e5a:	4b74      	ldr	r3, [pc, #464]	@ (800702c <UART_SetConfig+0x2b4>)
 8006e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e60:	f003 030c 	and.w	r3, r3, #12
 8006e64:	2b0c      	cmp	r3, #12
 8006e66:	d82d      	bhi.n	8006ec4 <UART_SetConfig+0x14c>
 8006e68:	a201      	add	r2, pc, #4	@ (adr r2, 8006e70 <UART_SetConfig+0xf8>)
 8006e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6e:	bf00      	nop
 8006e70:	08006ea5 	.word	0x08006ea5
 8006e74:	08006ec5 	.word	0x08006ec5
 8006e78:	08006ec5 	.word	0x08006ec5
 8006e7c:	08006ec5 	.word	0x08006ec5
 8006e80:	08006eb5 	.word	0x08006eb5
 8006e84:	08006ec5 	.word	0x08006ec5
 8006e88:	08006ec5 	.word	0x08006ec5
 8006e8c:	08006ec5 	.word	0x08006ec5
 8006e90:	08006ead 	.word	0x08006ead
 8006e94:	08006ec5 	.word	0x08006ec5
 8006e98:	08006ec5 	.word	0x08006ec5
 8006e9c:	08006ec5 	.word	0x08006ec5
 8006ea0:	08006ebd 	.word	0x08006ebd
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eaa:	e06d      	b.n	8006f88 <UART_SetConfig+0x210>
 8006eac:	2302      	movs	r3, #2
 8006eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eb2:	e069      	b.n	8006f88 <UART_SetConfig+0x210>
 8006eb4:	2304      	movs	r3, #4
 8006eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eba:	e065      	b.n	8006f88 <UART_SetConfig+0x210>
 8006ebc:	2308      	movs	r3, #8
 8006ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ec2:	e061      	b.n	8006f88 <UART_SetConfig+0x210>
 8006ec4:	2310      	movs	r3, #16
 8006ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eca:	e05d      	b.n	8006f88 <UART_SetConfig+0x210>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a58      	ldr	r2, [pc, #352]	@ (8007034 <UART_SetConfig+0x2bc>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d125      	bne.n	8006f22 <UART_SetConfig+0x1aa>
 8006ed6:	4b55      	ldr	r3, [pc, #340]	@ (800702c <UART_SetConfig+0x2b4>)
 8006ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006edc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006ee0:	2b30      	cmp	r3, #48	@ 0x30
 8006ee2:	d016      	beq.n	8006f12 <UART_SetConfig+0x19a>
 8006ee4:	2b30      	cmp	r3, #48	@ 0x30
 8006ee6:	d818      	bhi.n	8006f1a <UART_SetConfig+0x1a2>
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	d00a      	beq.n	8006f02 <UART_SetConfig+0x18a>
 8006eec:	2b20      	cmp	r3, #32
 8006eee:	d814      	bhi.n	8006f1a <UART_SetConfig+0x1a2>
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d002      	beq.n	8006efa <UART_SetConfig+0x182>
 8006ef4:	2b10      	cmp	r3, #16
 8006ef6:	d008      	beq.n	8006f0a <UART_SetConfig+0x192>
 8006ef8:	e00f      	b.n	8006f1a <UART_SetConfig+0x1a2>
 8006efa:	2300      	movs	r3, #0
 8006efc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f00:	e042      	b.n	8006f88 <UART_SetConfig+0x210>
 8006f02:	2302      	movs	r3, #2
 8006f04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f08:	e03e      	b.n	8006f88 <UART_SetConfig+0x210>
 8006f0a:	2304      	movs	r3, #4
 8006f0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f10:	e03a      	b.n	8006f88 <UART_SetConfig+0x210>
 8006f12:	2308      	movs	r3, #8
 8006f14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f18:	e036      	b.n	8006f88 <UART_SetConfig+0x210>
 8006f1a:	2310      	movs	r3, #16
 8006f1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f20:	e032      	b.n	8006f88 <UART_SetConfig+0x210>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a3f      	ldr	r2, [pc, #252]	@ (8007024 <UART_SetConfig+0x2ac>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d12a      	bne.n	8006f82 <UART_SetConfig+0x20a>
 8006f2c:	4b3f      	ldr	r3, [pc, #252]	@ (800702c <UART_SetConfig+0x2b4>)
 8006f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f32:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006f36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f3a:	d01a      	beq.n	8006f72 <UART_SetConfig+0x1fa>
 8006f3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f40:	d81b      	bhi.n	8006f7a <UART_SetConfig+0x202>
 8006f42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f46:	d00c      	beq.n	8006f62 <UART_SetConfig+0x1ea>
 8006f48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f4c:	d815      	bhi.n	8006f7a <UART_SetConfig+0x202>
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <UART_SetConfig+0x1e2>
 8006f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f56:	d008      	beq.n	8006f6a <UART_SetConfig+0x1f2>
 8006f58:	e00f      	b.n	8006f7a <UART_SetConfig+0x202>
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f60:	e012      	b.n	8006f88 <UART_SetConfig+0x210>
 8006f62:	2302      	movs	r3, #2
 8006f64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f68:	e00e      	b.n	8006f88 <UART_SetConfig+0x210>
 8006f6a:	2304      	movs	r3, #4
 8006f6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f70:	e00a      	b.n	8006f88 <UART_SetConfig+0x210>
 8006f72:	2308      	movs	r3, #8
 8006f74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f78:	e006      	b.n	8006f88 <UART_SetConfig+0x210>
 8006f7a:	2310      	movs	r3, #16
 8006f7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f80:	e002      	b.n	8006f88 <UART_SetConfig+0x210>
 8006f82:	2310      	movs	r3, #16
 8006f84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a25      	ldr	r2, [pc, #148]	@ (8007024 <UART_SetConfig+0x2ac>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	f040 808a 	bne.w	80070a8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	d824      	bhi.n	8006fe6 <UART_SetConfig+0x26e>
 8006f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8006fa4 <UART_SetConfig+0x22c>)
 8006f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa2:	bf00      	nop
 8006fa4:	08006fc9 	.word	0x08006fc9
 8006fa8:	08006fe7 	.word	0x08006fe7
 8006fac:	08006fd1 	.word	0x08006fd1
 8006fb0:	08006fe7 	.word	0x08006fe7
 8006fb4:	08006fd7 	.word	0x08006fd7
 8006fb8:	08006fe7 	.word	0x08006fe7
 8006fbc:	08006fe7 	.word	0x08006fe7
 8006fc0:	08006fe7 	.word	0x08006fe7
 8006fc4:	08006fdf 	.word	0x08006fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fc8:	f7fe f87c 	bl	80050c4 <HAL_RCC_GetPCLK1Freq>
 8006fcc:	61f8      	str	r0, [r7, #28]
        break;
 8006fce:	e010      	b.n	8006ff2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fd0:	4b19      	ldr	r3, [pc, #100]	@ (8007038 <UART_SetConfig+0x2c0>)
 8006fd2:	61fb      	str	r3, [r7, #28]
        break;
 8006fd4:	e00d      	b.n	8006ff2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fd6:	f7fd ffdd 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 8006fda:	61f8      	str	r0, [r7, #28]
        break;
 8006fdc:	e009      	b.n	8006ff2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fe2:	61fb      	str	r3, [r7, #28]
        break;
 8006fe4:	e005      	b.n	8006ff2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006ff0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f000 8109 	beq.w	800720c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	685a      	ldr	r2, [r3, #4]
 8006ffe:	4613      	mov	r3, r2
 8007000:	005b      	lsls	r3, r3, #1
 8007002:	4413      	add	r3, r2
 8007004:	69fa      	ldr	r2, [r7, #28]
 8007006:	429a      	cmp	r2, r3
 8007008:	d305      	bcc.n	8007016 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007010:	69fa      	ldr	r2, [r7, #28]
 8007012:	429a      	cmp	r2, r3
 8007014:	d912      	bls.n	800703c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800701c:	e0f6      	b.n	800720c <UART_SetConfig+0x494>
 800701e:	bf00      	nop
 8007020:	efff69f3 	.word	0xefff69f3
 8007024:	40008000 	.word	0x40008000
 8007028:	40013800 	.word	0x40013800
 800702c:	40021000 	.word	0x40021000
 8007030:	40004400 	.word	0x40004400
 8007034:	40004800 	.word	0x40004800
 8007038:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	2200      	movs	r2, #0
 8007040:	461c      	mov	r4, r3
 8007042:	4615      	mov	r5, r2
 8007044:	f04f 0200 	mov.w	r2, #0
 8007048:	f04f 0300 	mov.w	r3, #0
 800704c:	022b      	lsls	r3, r5, #8
 800704e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007052:	0222      	lsls	r2, r4, #8
 8007054:	68f9      	ldr	r1, [r7, #12]
 8007056:	6849      	ldr	r1, [r1, #4]
 8007058:	0849      	lsrs	r1, r1, #1
 800705a:	2000      	movs	r0, #0
 800705c:	4688      	mov	r8, r1
 800705e:	4681      	mov	r9, r0
 8007060:	eb12 0a08 	adds.w	sl, r2, r8
 8007064:	eb43 0b09 	adc.w	fp, r3, r9
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	603b      	str	r3, [r7, #0]
 8007070:	607a      	str	r2, [r7, #4]
 8007072:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007076:	4650      	mov	r0, sl
 8007078:	4659      	mov	r1, fp
 800707a:	f7f9 fde5 	bl	8000c48 <__aeabi_uldivmod>
 800707e:	4602      	mov	r2, r0
 8007080:	460b      	mov	r3, r1
 8007082:	4613      	mov	r3, r2
 8007084:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800708c:	d308      	bcc.n	80070a0 <UART_SetConfig+0x328>
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007094:	d204      	bcs.n	80070a0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	69ba      	ldr	r2, [r7, #24]
 800709c:	60da      	str	r2, [r3, #12]
 800709e:	e0b5      	b.n	800720c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80070a6:	e0b1      	b.n	800720c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070b0:	d15d      	bne.n	800716e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80070b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070b6:	2b08      	cmp	r3, #8
 80070b8:	d827      	bhi.n	800710a <UART_SetConfig+0x392>
 80070ba:	a201      	add	r2, pc, #4	@ (adr r2, 80070c0 <UART_SetConfig+0x348>)
 80070bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c0:	080070e5 	.word	0x080070e5
 80070c4:	080070ed 	.word	0x080070ed
 80070c8:	080070f5 	.word	0x080070f5
 80070cc:	0800710b 	.word	0x0800710b
 80070d0:	080070fb 	.word	0x080070fb
 80070d4:	0800710b 	.word	0x0800710b
 80070d8:	0800710b 	.word	0x0800710b
 80070dc:	0800710b 	.word	0x0800710b
 80070e0:	08007103 	.word	0x08007103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070e4:	f7fd ffee 	bl	80050c4 <HAL_RCC_GetPCLK1Freq>
 80070e8:	61f8      	str	r0, [r7, #28]
        break;
 80070ea:	e014      	b.n	8007116 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070ec:	f7fe f800 	bl	80050f0 <HAL_RCC_GetPCLK2Freq>
 80070f0:	61f8      	str	r0, [r7, #28]
        break;
 80070f2:	e010      	b.n	8007116 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070f4:	4b4c      	ldr	r3, [pc, #304]	@ (8007228 <UART_SetConfig+0x4b0>)
 80070f6:	61fb      	str	r3, [r7, #28]
        break;
 80070f8:	e00d      	b.n	8007116 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070fa:	f7fd ff4b 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 80070fe:	61f8      	str	r0, [r7, #28]
        break;
 8007100:	e009      	b.n	8007116 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007102:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007106:	61fb      	str	r3, [r7, #28]
        break;
 8007108:	e005      	b.n	8007116 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800710a:	2300      	movs	r3, #0
 800710c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007114:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d077      	beq.n	800720c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	005a      	lsls	r2, r3, #1
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	085b      	lsrs	r3, r3, #1
 8007126:	441a      	add	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007130:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	2b0f      	cmp	r3, #15
 8007136:	d916      	bls.n	8007166 <UART_SetConfig+0x3ee>
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800713e:	d212      	bcs.n	8007166 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	b29b      	uxth	r3, r3
 8007144:	f023 030f 	bic.w	r3, r3, #15
 8007148:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	085b      	lsrs	r3, r3, #1
 800714e:	b29b      	uxth	r3, r3
 8007150:	f003 0307 	and.w	r3, r3, #7
 8007154:	b29a      	uxth	r2, r3
 8007156:	8afb      	ldrh	r3, [r7, #22]
 8007158:	4313      	orrs	r3, r2
 800715a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	8afa      	ldrh	r2, [r7, #22]
 8007162:	60da      	str	r2, [r3, #12]
 8007164:	e052      	b.n	800720c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800716c:	e04e      	b.n	800720c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800716e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007172:	2b08      	cmp	r3, #8
 8007174:	d827      	bhi.n	80071c6 <UART_SetConfig+0x44e>
 8007176:	a201      	add	r2, pc, #4	@ (adr r2, 800717c <UART_SetConfig+0x404>)
 8007178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717c:	080071a1 	.word	0x080071a1
 8007180:	080071a9 	.word	0x080071a9
 8007184:	080071b1 	.word	0x080071b1
 8007188:	080071c7 	.word	0x080071c7
 800718c:	080071b7 	.word	0x080071b7
 8007190:	080071c7 	.word	0x080071c7
 8007194:	080071c7 	.word	0x080071c7
 8007198:	080071c7 	.word	0x080071c7
 800719c:	080071bf 	.word	0x080071bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071a0:	f7fd ff90 	bl	80050c4 <HAL_RCC_GetPCLK1Freq>
 80071a4:	61f8      	str	r0, [r7, #28]
        break;
 80071a6:	e014      	b.n	80071d2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071a8:	f7fd ffa2 	bl	80050f0 <HAL_RCC_GetPCLK2Freq>
 80071ac:	61f8      	str	r0, [r7, #28]
        break;
 80071ae:	e010      	b.n	80071d2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071b0:	4b1d      	ldr	r3, [pc, #116]	@ (8007228 <UART_SetConfig+0x4b0>)
 80071b2:	61fb      	str	r3, [r7, #28]
        break;
 80071b4:	e00d      	b.n	80071d2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071b6:	f7fd feed 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 80071ba:	61f8      	str	r0, [r7, #28]
        break;
 80071bc:	e009      	b.n	80071d2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071c2:	61fb      	str	r3, [r7, #28]
        break;
 80071c4:	e005      	b.n	80071d2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80071c6:	2300      	movs	r3, #0
 80071c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80071d0:	bf00      	nop
    }

    if (pclk != 0U)
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d019      	beq.n	800720c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	085a      	lsrs	r2, r3, #1
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	441a      	add	r2, r3
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	2b0f      	cmp	r3, #15
 80071f0:	d909      	bls.n	8007206 <UART_SetConfig+0x48e>
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071f8:	d205      	bcs.n	8007206 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	60da      	str	r2, [r3, #12]
 8007204:	e002      	b.n	800720c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007218:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800721c:	4618      	mov	r0, r3
 800721e:	3728      	adds	r7, #40	@ 0x28
 8007220:	46bd      	mov	sp, r7
 8007222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007226:	bf00      	nop
 8007228:	00f42400 	.word	0x00f42400

0800722c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007238:	f003 0308 	and.w	r3, r3, #8
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00a      	beq.n	8007256 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00a      	beq.n	8007278 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	430a      	orrs	r2, r1
 8007276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727c:	f003 0302 	and.w	r3, r3, #2
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00a      	beq.n	800729a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	430a      	orrs	r2, r1
 8007298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800729e:	f003 0304 	and.w	r3, r3, #4
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00a      	beq.n	80072bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	430a      	orrs	r2, r1
 80072ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c0:	f003 0310 	and.w	r3, r3, #16
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00a      	beq.n	80072de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	430a      	orrs	r2, r1
 80072dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e2:	f003 0320 	and.w	r3, r3, #32
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00a      	beq.n	8007300 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	430a      	orrs	r2, r1
 80072fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007308:	2b00      	cmp	r3, #0
 800730a:	d01a      	beq.n	8007342 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	430a      	orrs	r2, r1
 8007320:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007326:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800732a:	d10a      	bne.n	8007342 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00a      	beq.n	8007364 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	430a      	orrs	r2, r1
 8007362:	605a      	str	r2, [r3, #4]
  }
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b098      	sub	sp, #96	@ 0x60
 8007374:	af02      	add	r7, sp, #8
 8007376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007380:	f7fa ff0e 	bl	80021a0 <HAL_GetTick>
 8007384:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0308 	and.w	r3, r3, #8
 8007390:	2b08      	cmp	r3, #8
 8007392:	d12e      	bne.n	80073f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007394:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007398:	9300      	str	r3, [sp, #0]
 800739a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800739c:	2200      	movs	r2, #0
 800739e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f88c 	bl	80074c0 <UART_WaitOnFlagUntilTimeout>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d021      	beq.n	80073f2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b6:	e853 3f00 	ldrex	r3, [r3]
 80073ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80073bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	461a      	mov	r2, r3
 80073ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80073ce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073d4:	e841 2300 	strex	r3, r2, [r1]
 80073d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1e6      	bne.n	80073ae <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2220      	movs	r2, #32
 80073e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e062      	b.n	80074b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0304 	and.w	r3, r3, #4
 80073fc:	2b04      	cmp	r3, #4
 80073fe:	d149      	bne.n	8007494 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007400:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007408:	2200      	movs	r2, #0
 800740a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f856 	bl	80074c0 <UART_WaitOnFlagUntilTimeout>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d03c      	beq.n	8007494 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007422:	e853 3f00 	ldrex	r3, [r3]
 8007426:	623b      	str	r3, [r7, #32]
   return(result);
 8007428:	6a3b      	ldr	r3, [r7, #32]
 800742a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800742e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	461a      	mov	r2, r3
 8007436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007438:	633b      	str	r3, [r7, #48]	@ 0x30
 800743a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800743e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007440:	e841 2300 	strex	r3, r2, [r1]
 8007444:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1e6      	bne.n	800741a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3308      	adds	r3, #8
 8007452:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	e853 3f00 	ldrex	r3, [r3]
 800745a:	60fb      	str	r3, [r7, #12]
   return(result);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f023 0301 	bic.w	r3, r3, #1
 8007462:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3308      	adds	r3, #8
 800746a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800746c:	61fa      	str	r2, [r7, #28]
 800746e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007470:	69b9      	ldr	r1, [r7, #24]
 8007472:	69fa      	ldr	r2, [r7, #28]
 8007474:	e841 2300 	strex	r3, r2, [r1]
 8007478:	617b      	str	r3, [r7, #20]
   return(result);
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1e5      	bne.n	800744c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2220      	movs	r2, #32
 8007484:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007490:	2303      	movs	r3, #3
 8007492:	e011      	b.n	80074b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2220      	movs	r2, #32
 8007498:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2220      	movs	r2, #32
 800749e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3758      	adds	r7, #88	@ 0x58
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	603b      	str	r3, [r7, #0]
 80074cc:	4613      	mov	r3, r2
 80074ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074d0:	e04f      	b.n	8007572 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d8:	d04b      	beq.n	8007572 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074da:	f7fa fe61 	bl	80021a0 <HAL_GetTick>
 80074de:	4602      	mov	r2, r0
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	69ba      	ldr	r2, [r7, #24]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d302      	bcc.n	80074f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e04e      	b.n	8007592 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0304 	and.w	r3, r3, #4
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d037      	beq.n	8007572 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	2b80      	cmp	r3, #128	@ 0x80
 8007506:	d034      	beq.n	8007572 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	2b40      	cmp	r3, #64	@ 0x40
 800750c:	d031      	beq.n	8007572 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	69db      	ldr	r3, [r3, #28]
 8007514:	f003 0308 	and.w	r3, r3, #8
 8007518:	2b08      	cmp	r3, #8
 800751a:	d110      	bne.n	800753e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2208      	movs	r2, #8
 8007522:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f000 f838 	bl	800759a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2208      	movs	r2, #8
 800752e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e029      	b.n	8007592 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	69db      	ldr	r3, [r3, #28]
 8007544:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007548:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800754c:	d111      	bne.n	8007572 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007556:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f000 f81e 	bl	800759a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2220      	movs	r2, #32
 8007562:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e00f      	b.n	8007592 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	69da      	ldr	r2, [r3, #28]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	4013      	ands	r3, r2
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	429a      	cmp	r2, r3
 8007580:	bf0c      	ite	eq
 8007582:	2301      	moveq	r3, #1
 8007584:	2300      	movne	r3, #0
 8007586:	b2db      	uxtb	r3, r3
 8007588:	461a      	mov	r2, r3
 800758a:	79fb      	ldrb	r3, [r7, #7]
 800758c:	429a      	cmp	r2, r3
 800758e:	d0a0      	beq.n	80074d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800759a:	b480      	push	{r7}
 800759c:	b095      	sub	sp, #84	@ 0x54
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075aa:	e853 3f00 	ldrex	r3, [r3]
 80075ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	461a      	mov	r2, r3
 80075be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80075c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075c8:	e841 2300 	strex	r3, r2, [r1]
 80075cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1e6      	bne.n	80075a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	3308      	adds	r3, #8
 80075da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	e853 3f00 	ldrex	r3, [r3]
 80075e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	f023 0301 	bic.w	r3, r3, #1
 80075ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	3308      	adds	r3, #8
 80075f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80075f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075fc:	e841 2300 	strex	r3, r2, [r1]
 8007600:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1e5      	bne.n	80075d4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800760c:	2b01      	cmp	r3, #1
 800760e:	d118      	bne.n	8007642 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	e853 3f00 	ldrex	r3, [r3]
 800761c:	60bb      	str	r3, [r7, #8]
   return(result);
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	f023 0310 	bic.w	r3, r3, #16
 8007624:	647b      	str	r3, [r7, #68]	@ 0x44
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	461a      	mov	r2, r3
 800762c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800762e:	61bb      	str	r3, [r7, #24]
 8007630:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007632:	6979      	ldr	r1, [r7, #20]
 8007634:	69ba      	ldr	r2, [r7, #24]
 8007636:	e841 2300 	strex	r3, r2, [r1]
 800763a:	613b      	str	r3, [r7, #16]
   return(result);
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1e6      	bne.n	8007610 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2220      	movs	r2, #32
 8007646:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007656:	bf00      	nop
 8007658:	3754      	adds	r7, #84	@ 0x54
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <__cvt>:
 8007662:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007666:	ec57 6b10 	vmov	r6, r7, d0
 800766a:	2f00      	cmp	r7, #0
 800766c:	460c      	mov	r4, r1
 800766e:	4619      	mov	r1, r3
 8007670:	463b      	mov	r3, r7
 8007672:	bfbb      	ittet	lt
 8007674:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007678:	461f      	movlt	r7, r3
 800767a:	2300      	movge	r3, #0
 800767c:	232d      	movlt	r3, #45	@ 0x2d
 800767e:	700b      	strb	r3, [r1, #0]
 8007680:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007682:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007686:	4691      	mov	r9, r2
 8007688:	f023 0820 	bic.w	r8, r3, #32
 800768c:	bfbc      	itt	lt
 800768e:	4632      	movlt	r2, r6
 8007690:	4616      	movlt	r6, r2
 8007692:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007696:	d005      	beq.n	80076a4 <__cvt+0x42>
 8007698:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800769c:	d100      	bne.n	80076a0 <__cvt+0x3e>
 800769e:	3401      	adds	r4, #1
 80076a0:	2102      	movs	r1, #2
 80076a2:	e000      	b.n	80076a6 <__cvt+0x44>
 80076a4:	2103      	movs	r1, #3
 80076a6:	ab03      	add	r3, sp, #12
 80076a8:	9301      	str	r3, [sp, #4]
 80076aa:	ab02      	add	r3, sp, #8
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	ec47 6b10 	vmov	d0, r6, r7
 80076b2:	4653      	mov	r3, sl
 80076b4:	4622      	mov	r2, r4
 80076b6:	f000 fe5b 	bl	8008370 <_dtoa_r>
 80076ba:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80076be:	4605      	mov	r5, r0
 80076c0:	d119      	bne.n	80076f6 <__cvt+0x94>
 80076c2:	f019 0f01 	tst.w	r9, #1
 80076c6:	d00e      	beq.n	80076e6 <__cvt+0x84>
 80076c8:	eb00 0904 	add.w	r9, r0, r4
 80076cc:	2200      	movs	r2, #0
 80076ce:	2300      	movs	r3, #0
 80076d0:	4630      	mov	r0, r6
 80076d2:	4639      	mov	r1, r7
 80076d4:	f7f9 f9f8 	bl	8000ac8 <__aeabi_dcmpeq>
 80076d8:	b108      	cbz	r0, 80076de <__cvt+0x7c>
 80076da:	f8cd 900c 	str.w	r9, [sp, #12]
 80076de:	2230      	movs	r2, #48	@ 0x30
 80076e0:	9b03      	ldr	r3, [sp, #12]
 80076e2:	454b      	cmp	r3, r9
 80076e4:	d31e      	bcc.n	8007724 <__cvt+0xc2>
 80076e6:	9b03      	ldr	r3, [sp, #12]
 80076e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076ea:	1b5b      	subs	r3, r3, r5
 80076ec:	4628      	mov	r0, r5
 80076ee:	6013      	str	r3, [r2, #0]
 80076f0:	b004      	add	sp, #16
 80076f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076f6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80076fa:	eb00 0904 	add.w	r9, r0, r4
 80076fe:	d1e5      	bne.n	80076cc <__cvt+0x6a>
 8007700:	7803      	ldrb	r3, [r0, #0]
 8007702:	2b30      	cmp	r3, #48	@ 0x30
 8007704:	d10a      	bne.n	800771c <__cvt+0xba>
 8007706:	2200      	movs	r2, #0
 8007708:	2300      	movs	r3, #0
 800770a:	4630      	mov	r0, r6
 800770c:	4639      	mov	r1, r7
 800770e:	f7f9 f9db 	bl	8000ac8 <__aeabi_dcmpeq>
 8007712:	b918      	cbnz	r0, 800771c <__cvt+0xba>
 8007714:	f1c4 0401 	rsb	r4, r4, #1
 8007718:	f8ca 4000 	str.w	r4, [sl]
 800771c:	f8da 3000 	ldr.w	r3, [sl]
 8007720:	4499      	add	r9, r3
 8007722:	e7d3      	b.n	80076cc <__cvt+0x6a>
 8007724:	1c59      	adds	r1, r3, #1
 8007726:	9103      	str	r1, [sp, #12]
 8007728:	701a      	strb	r2, [r3, #0]
 800772a:	e7d9      	b.n	80076e0 <__cvt+0x7e>

0800772c <__exponent>:
 800772c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800772e:	2900      	cmp	r1, #0
 8007730:	bfba      	itte	lt
 8007732:	4249      	neglt	r1, r1
 8007734:	232d      	movlt	r3, #45	@ 0x2d
 8007736:	232b      	movge	r3, #43	@ 0x2b
 8007738:	2909      	cmp	r1, #9
 800773a:	7002      	strb	r2, [r0, #0]
 800773c:	7043      	strb	r3, [r0, #1]
 800773e:	dd29      	ble.n	8007794 <__exponent+0x68>
 8007740:	f10d 0307 	add.w	r3, sp, #7
 8007744:	461d      	mov	r5, r3
 8007746:	270a      	movs	r7, #10
 8007748:	461a      	mov	r2, r3
 800774a:	fbb1 f6f7 	udiv	r6, r1, r7
 800774e:	fb07 1416 	mls	r4, r7, r6, r1
 8007752:	3430      	adds	r4, #48	@ 0x30
 8007754:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007758:	460c      	mov	r4, r1
 800775a:	2c63      	cmp	r4, #99	@ 0x63
 800775c:	f103 33ff 	add.w	r3, r3, #4294967295
 8007760:	4631      	mov	r1, r6
 8007762:	dcf1      	bgt.n	8007748 <__exponent+0x1c>
 8007764:	3130      	adds	r1, #48	@ 0x30
 8007766:	1e94      	subs	r4, r2, #2
 8007768:	f803 1c01 	strb.w	r1, [r3, #-1]
 800776c:	1c41      	adds	r1, r0, #1
 800776e:	4623      	mov	r3, r4
 8007770:	42ab      	cmp	r3, r5
 8007772:	d30a      	bcc.n	800778a <__exponent+0x5e>
 8007774:	f10d 0309 	add.w	r3, sp, #9
 8007778:	1a9b      	subs	r3, r3, r2
 800777a:	42ac      	cmp	r4, r5
 800777c:	bf88      	it	hi
 800777e:	2300      	movhi	r3, #0
 8007780:	3302      	adds	r3, #2
 8007782:	4403      	add	r3, r0
 8007784:	1a18      	subs	r0, r3, r0
 8007786:	b003      	add	sp, #12
 8007788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800778a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800778e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007792:	e7ed      	b.n	8007770 <__exponent+0x44>
 8007794:	2330      	movs	r3, #48	@ 0x30
 8007796:	3130      	adds	r1, #48	@ 0x30
 8007798:	7083      	strb	r3, [r0, #2]
 800779a:	70c1      	strb	r1, [r0, #3]
 800779c:	1d03      	adds	r3, r0, #4
 800779e:	e7f1      	b.n	8007784 <__exponent+0x58>

080077a0 <_printf_float>:
 80077a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a4:	b08d      	sub	sp, #52	@ 0x34
 80077a6:	460c      	mov	r4, r1
 80077a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80077ac:	4616      	mov	r6, r2
 80077ae:	461f      	mov	r7, r3
 80077b0:	4605      	mov	r5, r0
 80077b2:	f000 fcdb 	bl	800816c <_localeconv_r>
 80077b6:	6803      	ldr	r3, [r0, #0]
 80077b8:	9304      	str	r3, [sp, #16]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7f8 fd58 	bl	8000270 <strlen>
 80077c0:	2300      	movs	r3, #0
 80077c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80077c4:	f8d8 3000 	ldr.w	r3, [r8]
 80077c8:	9005      	str	r0, [sp, #20]
 80077ca:	3307      	adds	r3, #7
 80077cc:	f023 0307 	bic.w	r3, r3, #7
 80077d0:	f103 0208 	add.w	r2, r3, #8
 80077d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80077d8:	f8d4 b000 	ldr.w	fp, [r4]
 80077dc:	f8c8 2000 	str.w	r2, [r8]
 80077e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077e4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80077e8:	9307      	str	r3, [sp, #28]
 80077ea:	f8cd 8018 	str.w	r8, [sp, #24]
 80077ee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80077f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077f6:	4b9c      	ldr	r3, [pc, #624]	@ (8007a68 <_printf_float+0x2c8>)
 80077f8:	f04f 32ff 	mov.w	r2, #4294967295
 80077fc:	f7f9 f996 	bl	8000b2c <__aeabi_dcmpun>
 8007800:	bb70      	cbnz	r0, 8007860 <_printf_float+0xc0>
 8007802:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007806:	4b98      	ldr	r3, [pc, #608]	@ (8007a68 <_printf_float+0x2c8>)
 8007808:	f04f 32ff 	mov.w	r2, #4294967295
 800780c:	f7f9 f970 	bl	8000af0 <__aeabi_dcmple>
 8007810:	bb30      	cbnz	r0, 8007860 <_printf_float+0xc0>
 8007812:	2200      	movs	r2, #0
 8007814:	2300      	movs	r3, #0
 8007816:	4640      	mov	r0, r8
 8007818:	4649      	mov	r1, r9
 800781a:	f7f9 f95f 	bl	8000adc <__aeabi_dcmplt>
 800781e:	b110      	cbz	r0, 8007826 <_printf_float+0x86>
 8007820:	232d      	movs	r3, #45	@ 0x2d
 8007822:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007826:	4a91      	ldr	r2, [pc, #580]	@ (8007a6c <_printf_float+0x2cc>)
 8007828:	4b91      	ldr	r3, [pc, #580]	@ (8007a70 <_printf_float+0x2d0>)
 800782a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800782e:	bf8c      	ite	hi
 8007830:	4690      	movhi	r8, r2
 8007832:	4698      	movls	r8, r3
 8007834:	2303      	movs	r3, #3
 8007836:	6123      	str	r3, [r4, #16]
 8007838:	f02b 0304 	bic.w	r3, fp, #4
 800783c:	6023      	str	r3, [r4, #0]
 800783e:	f04f 0900 	mov.w	r9, #0
 8007842:	9700      	str	r7, [sp, #0]
 8007844:	4633      	mov	r3, r6
 8007846:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007848:	4621      	mov	r1, r4
 800784a:	4628      	mov	r0, r5
 800784c:	f000 f9d2 	bl	8007bf4 <_printf_common>
 8007850:	3001      	adds	r0, #1
 8007852:	f040 808d 	bne.w	8007970 <_printf_float+0x1d0>
 8007856:	f04f 30ff 	mov.w	r0, #4294967295
 800785a:	b00d      	add	sp, #52	@ 0x34
 800785c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007860:	4642      	mov	r2, r8
 8007862:	464b      	mov	r3, r9
 8007864:	4640      	mov	r0, r8
 8007866:	4649      	mov	r1, r9
 8007868:	f7f9 f960 	bl	8000b2c <__aeabi_dcmpun>
 800786c:	b140      	cbz	r0, 8007880 <_printf_float+0xe0>
 800786e:	464b      	mov	r3, r9
 8007870:	2b00      	cmp	r3, #0
 8007872:	bfbc      	itt	lt
 8007874:	232d      	movlt	r3, #45	@ 0x2d
 8007876:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800787a:	4a7e      	ldr	r2, [pc, #504]	@ (8007a74 <_printf_float+0x2d4>)
 800787c:	4b7e      	ldr	r3, [pc, #504]	@ (8007a78 <_printf_float+0x2d8>)
 800787e:	e7d4      	b.n	800782a <_printf_float+0x8a>
 8007880:	6863      	ldr	r3, [r4, #4]
 8007882:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007886:	9206      	str	r2, [sp, #24]
 8007888:	1c5a      	adds	r2, r3, #1
 800788a:	d13b      	bne.n	8007904 <_printf_float+0x164>
 800788c:	2306      	movs	r3, #6
 800788e:	6063      	str	r3, [r4, #4]
 8007890:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007894:	2300      	movs	r3, #0
 8007896:	6022      	str	r2, [r4, #0]
 8007898:	9303      	str	r3, [sp, #12]
 800789a:	ab0a      	add	r3, sp, #40	@ 0x28
 800789c:	e9cd a301 	strd	sl, r3, [sp, #4]
 80078a0:	ab09      	add	r3, sp, #36	@ 0x24
 80078a2:	9300      	str	r3, [sp, #0]
 80078a4:	6861      	ldr	r1, [r4, #4]
 80078a6:	ec49 8b10 	vmov	d0, r8, r9
 80078aa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80078ae:	4628      	mov	r0, r5
 80078b0:	f7ff fed7 	bl	8007662 <__cvt>
 80078b4:	9b06      	ldr	r3, [sp, #24]
 80078b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80078b8:	2b47      	cmp	r3, #71	@ 0x47
 80078ba:	4680      	mov	r8, r0
 80078bc:	d129      	bne.n	8007912 <_printf_float+0x172>
 80078be:	1cc8      	adds	r0, r1, #3
 80078c0:	db02      	blt.n	80078c8 <_printf_float+0x128>
 80078c2:	6863      	ldr	r3, [r4, #4]
 80078c4:	4299      	cmp	r1, r3
 80078c6:	dd41      	ble.n	800794c <_printf_float+0x1ac>
 80078c8:	f1aa 0a02 	sub.w	sl, sl, #2
 80078cc:	fa5f fa8a 	uxtb.w	sl, sl
 80078d0:	3901      	subs	r1, #1
 80078d2:	4652      	mov	r2, sl
 80078d4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80078d8:	9109      	str	r1, [sp, #36]	@ 0x24
 80078da:	f7ff ff27 	bl	800772c <__exponent>
 80078de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80078e0:	1813      	adds	r3, r2, r0
 80078e2:	2a01      	cmp	r2, #1
 80078e4:	4681      	mov	r9, r0
 80078e6:	6123      	str	r3, [r4, #16]
 80078e8:	dc02      	bgt.n	80078f0 <_printf_float+0x150>
 80078ea:	6822      	ldr	r2, [r4, #0]
 80078ec:	07d2      	lsls	r2, r2, #31
 80078ee:	d501      	bpl.n	80078f4 <_printf_float+0x154>
 80078f0:	3301      	adds	r3, #1
 80078f2:	6123      	str	r3, [r4, #16]
 80078f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d0a2      	beq.n	8007842 <_printf_float+0xa2>
 80078fc:	232d      	movs	r3, #45	@ 0x2d
 80078fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007902:	e79e      	b.n	8007842 <_printf_float+0xa2>
 8007904:	9a06      	ldr	r2, [sp, #24]
 8007906:	2a47      	cmp	r2, #71	@ 0x47
 8007908:	d1c2      	bne.n	8007890 <_printf_float+0xf0>
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1c0      	bne.n	8007890 <_printf_float+0xf0>
 800790e:	2301      	movs	r3, #1
 8007910:	e7bd      	b.n	800788e <_printf_float+0xee>
 8007912:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007916:	d9db      	bls.n	80078d0 <_printf_float+0x130>
 8007918:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800791c:	d118      	bne.n	8007950 <_printf_float+0x1b0>
 800791e:	2900      	cmp	r1, #0
 8007920:	6863      	ldr	r3, [r4, #4]
 8007922:	dd0b      	ble.n	800793c <_printf_float+0x19c>
 8007924:	6121      	str	r1, [r4, #16]
 8007926:	b913      	cbnz	r3, 800792e <_printf_float+0x18e>
 8007928:	6822      	ldr	r2, [r4, #0]
 800792a:	07d0      	lsls	r0, r2, #31
 800792c:	d502      	bpl.n	8007934 <_printf_float+0x194>
 800792e:	3301      	adds	r3, #1
 8007930:	440b      	add	r3, r1
 8007932:	6123      	str	r3, [r4, #16]
 8007934:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007936:	f04f 0900 	mov.w	r9, #0
 800793a:	e7db      	b.n	80078f4 <_printf_float+0x154>
 800793c:	b913      	cbnz	r3, 8007944 <_printf_float+0x1a4>
 800793e:	6822      	ldr	r2, [r4, #0]
 8007940:	07d2      	lsls	r2, r2, #31
 8007942:	d501      	bpl.n	8007948 <_printf_float+0x1a8>
 8007944:	3302      	adds	r3, #2
 8007946:	e7f4      	b.n	8007932 <_printf_float+0x192>
 8007948:	2301      	movs	r3, #1
 800794a:	e7f2      	b.n	8007932 <_printf_float+0x192>
 800794c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007950:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007952:	4299      	cmp	r1, r3
 8007954:	db05      	blt.n	8007962 <_printf_float+0x1c2>
 8007956:	6823      	ldr	r3, [r4, #0]
 8007958:	6121      	str	r1, [r4, #16]
 800795a:	07d8      	lsls	r0, r3, #31
 800795c:	d5ea      	bpl.n	8007934 <_printf_float+0x194>
 800795e:	1c4b      	adds	r3, r1, #1
 8007960:	e7e7      	b.n	8007932 <_printf_float+0x192>
 8007962:	2900      	cmp	r1, #0
 8007964:	bfd4      	ite	le
 8007966:	f1c1 0202 	rsble	r2, r1, #2
 800796a:	2201      	movgt	r2, #1
 800796c:	4413      	add	r3, r2
 800796e:	e7e0      	b.n	8007932 <_printf_float+0x192>
 8007970:	6823      	ldr	r3, [r4, #0]
 8007972:	055a      	lsls	r2, r3, #21
 8007974:	d407      	bmi.n	8007986 <_printf_float+0x1e6>
 8007976:	6923      	ldr	r3, [r4, #16]
 8007978:	4642      	mov	r2, r8
 800797a:	4631      	mov	r1, r6
 800797c:	4628      	mov	r0, r5
 800797e:	47b8      	blx	r7
 8007980:	3001      	adds	r0, #1
 8007982:	d12b      	bne.n	80079dc <_printf_float+0x23c>
 8007984:	e767      	b.n	8007856 <_printf_float+0xb6>
 8007986:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800798a:	f240 80dd 	bls.w	8007b48 <_printf_float+0x3a8>
 800798e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007992:	2200      	movs	r2, #0
 8007994:	2300      	movs	r3, #0
 8007996:	f7f9 f897 	bl	8000ac8 <__aeabi_dcmpeq>
 800799a:	2800      	cmp	r0, #0
 800799c:	d033      	beq.n	8007a06 <_printf_float+0x266>
 800799e:	4a37      	ldr	r2, [pc, #220]	@ (8007a7c <_printf_float+0x2dc>)
 80079a0:	2301      	movs	r3, #1
 80079a2:	4631      	mov	r1, r6
 80079a4:	4628      	mov	r0, r5
 80079a6:	47b8      	blx	r7
 80079a8:	3001      	adds	r0, #1
 80079aa:	f43f af54 	beq.w	8007856 <_printf_float+0xb6>
 80079ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80079b2:	4543      	cmp	r3, r8
 80079b4:	db02      	blt.n	80079bc <_printf_float+0x21c>
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	07d8      	lsls	r0, r3, #31
 80079ba:	d50f      	bpl.n	80079dc <_printf_float+0x23c>
 80079bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079c0:	4631      	mov	r1, r6
 80079c2:	4628      	mov	r0, r5
 80079c4:	47b8      	blx	r7
 80079c6:	3001      	adds	r0, #1
 80079c8:	f43f af45 	beq.w	8007856 <_printf_float+0xb6>
 80079cc:	f04f 0900 	mov.w	r9, #0
 80079d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80079d4:	f104 0a1a 	add.w	sl, r4, #26
 80079d8:	45c8      	cmp	r8, r9
 80079da:	dc09      	bgt.n	80079f0 <_printf_float+0x250>
 80079dc:	6823      	ldr	r3, [r4, #0]
 80079de:	079b      	lsls	r3, r3, #30
 80079e0:	f100 8103 	bmi.w	8007bea <_printf_float+0x44a>
 80079e4:	68e0      	ldr	r0, [r4, #12]
 80079e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079e8:	4298      	cmp	r0, r3
 80079ea:	bfb8      	it	lt
 80079ec:	4618      	movlt	r0, r3
 80079ee:	e734      	b.n	800785a <_printf_float+0xba>
 80079f0:	2301      	movs	r3, #1
 80079f2:	4652      	mov	r2, sl
 80079f4:	4631      	mov	r1, r6
 80079f6:	4628      	mov	r0, r5
 80079f8:	47b8      	blx	r7
 80079fa:	3001      	adds	r0, #1
 80079fc:	f43f af2b 	beq.w	8007856 <_printf_float+0xb6>
 8007a00:	f109 0901 	add.w	r9, r9, #1
 8007a04:	e7e8      	b.n	80079d8 <_printf_float+0x238>
 8007a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	dc39      	bgt.n	8007a80 <_printf_float+0x2e0>
 8007a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8007a7c <_printf_float+0x2dc>)
 8007a0e:	2301      	movs	r3, #1
 8007a10:	4631      	mov	r1, r6
 8007a12:	4628      	mov	r0, r5
 8007a14:	47b8      	blx	r7
 8007a16:	3001      	adds	r0, #1
 8007a18:	f43f af1d 	beq.w	8007856 <_printf_float+0xb6>
 8007a1c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007a20:	ea59 0303 	orrs.w	r3, r9, r3
 8007a24:	d102      	bne.n	8007a2c <_printf_float+0x28c>
 8007a26:	6823      	ldr	r3, [r4, #0]
 8007a28:	07d9      	lsls	r1, r3, #31
 8007a2a:	d5d7      	bpl.n	80079dc <_printf_float+0x23c>
 8007a2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a30:	4631      	mov	r1, r6
 8007a32:	4628      	mov	r0, r5
 8007a34:	47b8      	blx	r7
 8007a36:	3001      	adds	r0, #1
 8007a38:	f43f af0d 	beq.w	8007856 <_printf_float+0xb6>
 8007a3c:	f04f 0a00 	mov.w	sl, #0
 8007a40:	f104 0b1a 	add.w	fp, r4, #26
 8007a44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a46:	425b      	negs	r3, r3
 8007a48:	4553      	cmp	r3, sl
 8007a4a:	dc01      	bgt.n	8007a50 <_printf_float+0x2b0>
 8007a4c:	464b      	mov	r3, r9
 8007a4e:	e793      	b.n	8007978 <_printf_float+0x1d8>
 8007a50:	2301      	movs	r3, #1
 8007a52:	465a      	mov	r2, fp
 8007a54:	4631      	mov	r1, r6
 8007a56:	4628      	mov	r0, r5
 8007a58:	47b8      	blx	r7
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	f43f aefb 	beq.w	8007856 <_printf_float+0xb6>
 8007a60:	f10a 0a01 	add.w	sl, sl, #1
 8007a64:	e7ee      	b.n	8007a44 <_printf_float+0x2a4>
 8007a66:	bf00      	nop
 8007a68:	7fefffff 	.word	0x7fefffff
 8007a6c:	0800afd8 	.word	0x0800afd8
 8007a70:	0800afd4 	.word	0x0800afd4
 8007a74:	0800afe0 	.word	0x0800afe0
 8007a78:	0800afdc 	.word	0x0800afdc
 8007a7c:	0800afe4 	.word	0x0800afe4
 8007a80:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007a82:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007a86:	4553      	cmp	r3, sl
 8007a88:	bfa8      	it	ge
 8007a8a:	4653      	movge	r3, sl
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	4699      	mov	r9, r3
 8007a90:	dc36      	bgt.n	8007b00 <_printf_float+0x360>
 8007a92:	f04f 0b00 	mov.w	fp, #0
 8007a96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a9a:	f104 021a 	add.w	r2, r4, #26
 8007a9e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007aa0:	9306      	str	r3, [sp, #24]
 8007aa2:	eba3 0309 	sub.w	r3, r3, r9
 8007aa6:	455b      	cmp	r3, fp
 8007aa8:	dc31      	bgt.n	8007b0e <_printf_float+0x36e>
 8007aaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aac:	459a      	cmp	sl, r3
 8007aae:	dc3a      	bgt.n	8007b26 <_printf_float+0x386>
 8007ab0:	6823      	ldr	r3, [r4, #0]
 8007ab2:	07da      	lsls	r2, r3, #31
 8007ab4:	d437      	bmi.n	8007b26 <_printf_float+0x386>
 8007ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ab8:	ebaa 0903 	sub.w	r9, sl, r3
 8007abc:	9b06      	ldr	r3, [sp, #24]
 8007abe:	ebaa 0303 	sub.w	r3, sl, r3
 8007ac2:	4599      	cmp	r9, r3
 8007ac4:	bfa8      	it	ge
 8007ac6:	4699      	movge	r9, r3
 8007ac8:	f1b9 0f00 	cmp.w	r9, #0
 8007acc:	dc33      	bgt.n	8007b36 <_printf_float+0x396>
 8007ace:	f04f 0800 	mov.w	r8, #0
 8007ad2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ad6:	f104 0b1a 	add.w	fp, r4, #26
 8007ada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007adc:	ebaa 0303 	sub.w	r3, sl, r3
 8007ae0:	eba3 0309 	sub.w	r3, r3, r9
 8007ae4:	4543      	cmp	r3, r8
 8007ae6:	f77f af79 	ble.w	80079dc <_printf_float+0x23c>
 8007aea:	2301      	movs	r3, #1
 8007aec:	465a      	mov	r2, fp
 8007aee:	4631      	mov	r1, r6
 8007af0:	4628      	mov	r0, r5
 8007af2:	47b8      	blx	r7
 8007af4:	3001      	adds	r0, #1
 8007af6:	f43f aeae 	beq.w	8007856 <_printf_float+0xb6>
 8007afa:	f108 0801 	add.w	r8, r8, #1
 8007afe:	e7ec      	b.n	8007ada <_printf_float+0x33a>
 8007b00:	4642      	mov	r2, r8
 8007b02:	4631      	mov	r1, r6
 8007b04:	4628      	mov	r0, r5
 8007b06:	47b8      	blx	r7
 8007b08:	3001      	adds	r0, #1
 8007b0a:	d1c2      	bne.n	8007a92 <_printf_float+0x2f2>
 8007b0c:	e6a3      	b.n	8007856 <_printf_float+0xb6>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	4631      	mov	r1, r6
 8007b12:	4628      	mov	r0, r5
 8007b14:	9206      	str	r2, [sp, #24]
 8007b16:	47b8      	blx	r7
 8007b18:	3001      	adds	r0, #1
 8007b1a:	f43f ae9c 	beq.w	8007856 <_printf_float+0xb6>
 8007b1e:	9a06      	ldr	r2, [sp, #24]
 8007b20:	f10b 0b01 	add.w	fp, fp, #1
 8007b24:	e7bb      	b.n	8007a9e <_printf_float+0x2fe>
 8007b26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b2a:	4631      	mov	r1, r6
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	47b8      	blx	r7
 8007b30:	3001      	adds	r0, #1
 8007b32:	d1c0      	bne.n	8007ab6 <_printf_float+0x316>
 8007b34:	e68f      	b.n	8007856 <_printf_float+0xb6>
 8007b36:	9a06      	ldr	r2, [sp, #24]
 8007b38:	464b      	mov	r3, r9
 8007b3a:	4442      	add	r2, r8
 8007b3c:	4631      	mov	r1, r6
 8007b3e:	4628      	mov	r0, r5
 8007b40:	47b8      	blx	r7
 8007b42:	3001      	adds	r0, #1
 8007b44:	d1c3      	bne.n	8007ace <_printf_float+0x32e>
 8007b46:	e686      	b.n	8007856 <_printf_float+0xb6>
 8007b48:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b4c:	f1ba 0f01 	cmp.w	sl, #1
 8007b50:	dc01      	bgt.n	8007b56 <_printf_float+0x3b6>
 8007b52:	07db      	lsls	r3, r3, #31
 8007b54:	d536      	bpl.n	8007bc4 <_printf_float+0x424>
 8007b56:	2301      	movs	r3, #1
 8007b58:	4642      	mov	r2, r8
 8007b5a:	4631      	mov	r1, r6
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	47b8      	blx	r7
 8007b60:	3001      	adds	r0, #1
 8007b62:	f43f ae78 	beq.w	8007856 <_printf_float+0xb6>
 8007b66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b6a:	4631      	mov	r1, r6
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	47b8      	blx	r7
 8007b70:	3001      	adds	r0, #1
 8007b72:	f43f ae70 	beq.w	8007856 <_printf_float+0xb6>
 8007b76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b82:	f7f8 ffa1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b86:	b9c0      	cbnz	r0, 8007bba <_printf_float+0x41a>
 8007b88:	4653      	mov	r3, sl
 8007b8a:	f108 0201 	add.w	r2, r8, #1
 8007b8e:	4631      	mov	r1, r6
 8007b90:	4628      	mov	r0, r5
 8007b92:	47b8      	blx	r7
 8007b94:	3001      	adds	r0, #1
 8007b96:	d10c      	bne.n	8007bb2 <_printf_float+0x412>
 8007b98:	e65d      	b.n	8007856 <_printf_float+0xb6>
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	465a      	mov	r2, fp
 8007b9e:	4631      	mov	r1, r6
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	47b8      	blx	r7
 8007ba4:	3001      	adds	r0, #1
 8007ba6:	f43f ae56 	beq.w	8007856 <_printf_float+0xb6>
 8007baa:	f108 0801 	add.w	r8, r8, #1
 8007bae:	45d0      	cmp	r8, sl
 8007bb0:	dbf3      	blt.n	8007b9a <_printf_float+0x3fa>
 8007bb2:	464b      	mov	r3, r9
 8007bb4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007bb8:	e6df      	b.n	800797a <_printf_float+0x1da>
 8007bba:	f04f 0800 	mov.w	r8, #0
 8007bbe:	f104 0b1a 	add.w	fp, r4, #26
 8007bc2:	e7f4      	b.n	8007bae <_printf_float+0x40e>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	4642      	mov	r2, r8
 8007bc8:	e7e1      	b.n	8007b8e <_printf_float+0x3ee>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	464a      	mov	r2, r9
 8007bce:	4631      	mov	r1, r6
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	47b8      	blx	r7
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	f43f ae3e 	beq.w	8007856 <_printf_float+0xb6>
 8007bda:	f108 0801 	add.w	r8, r8, #1
 8007bde:	68e3      	ldr	r3, [r4, #12]
 8007be0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007be2:	1a5b      	subs	r3, r3, r1
 8007be4:	4543      	cmp	r3, r8
 8007be6:	dcf0      	bgt.n	8007bca <_printf_float+0x42a>
 8007be8:	e6fc      	b.n	80079e4 <_printf_float+0x244>
 8007bea:	f04f 0800 	mov.w	r8, #0
 8007bee:	f104 0919 	add.w	r9, r4, #25
 8007bf2:	e7f4      	b.n	8007bde <_printf_float+0x43e>

08007bf4 <_printf_common>:
 8007bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf8:	4616      	mov	r6, r2
 8007bfa:	4698      	mov	r8, r3
 8007bfc:	688a      	ldr	r2, [r1, #8]
 8007bfe:	690b      	ldr	r3, [r1, #16]
 8007c00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c04:	4293      	cmp	r3, r2
 8007c06:	bfb8      	it	lt
 8007c08:	4613      	movlt	r3, r2
 8007c0a:	6033      	str	r3, [r6, #0]
 8007c0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c10:	4607      	mov	r7, r0
 8007c12:	460c      	mov	r4, r1
 8007c14:	b10a      	cbz	r2, 8007c1a <_printf_common+0x26>
 8007c16:	3301      	adds	r3, #1
 8007c18:	6033      	str	r3, [r6, #0]
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	0699      	lsls	r1, r3, #26
 8007c1e:	bf42      	ittt	mi
 8007c20:	6833      	ldrmi	r3, [r6, #0]
 8007c22:	3302      	addmi	r3, #2
 8007c24:	6033      	strmi	r3, [r6, #0]
 8007c26:	6825      	ldr	r5, [r4, #0]
 8007c28:	f015 0506 	ands.w	r5, r5, #6
 8007c2c:	d106      	bne.n	8007c3c <_printf_common+0x48>
 8007c2e:	f104 0a19 	add.w	sl, r4, #25
 8007c32:	68e3      	ldr	r3, [r4, #12]
 8007c34:	6832      	ldr	r2, [r6, #0]
 8007c36:	1a9b      	subs	r3, r3, r2
 8007c38:	42ab      	cmp	r3, r5
 8007c3a:	dc26      	bgt.n	8007c8a <_printf_common+0x96>
 8007c3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c40:	6822      	ldr	r2, [r4, #0]
 8007c42:	3b00      	subs	r3, #0
 8007c44:	bf18      	it	ne
 8007c46:	2301      	movne	r3, #1
 8007c48:	0692      	lsls	r2, r2, #26
 8007c4a:	d42b      	bmi.n	8007ca4 <_printf_common+0xb0>
 8007c4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c50:	4641      	mov	r1, r8
 8007c52:	4638      	mov	r0, r7
 8007c54:	47c8      	blx	r9
 8007c56:	3001      	adds	r0, #1
 8007c58:	d01e      	beq.n	8007c98 <_printf_common+0xa4>
 8007c5a:	6823      	ldr	r3, [r4, #0]
 8007c5c:	6922      	ldr	r2, [r4, #16]
 8007c5e:	f003 0306 	and.w	r3, r3, #6
 8007c62:	2b04      	cmp	r3, #4
 8007c64:	bf02      	ittt	eq
 8007c66:	68e5      	ldreq	r5, [r4, #12]
 8007c68:	6833      	ldreq	r3, [r6, #0]
 8007c6a:	1aed      	subeq	r5, r5, r3
 8007c6c:	68a3      	ldr	r3, [r4, #8]
 8007c6e:	bf0c      	ite	eq
 8007c70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c74:	2500      	movne	r5, #0
 8007c76:	4293      	cmp	r3, r2
 8007c78:	bfc4      	itt	gt
 8007c7a:	1a9b      	subgt	r3, r3, r2
 8007c7c:	18ed      	addgt	r5, r5, r3
 8007c7e:	2600      	movs	r6, #0
 8007c80:	341a      	adds	r4, #26
 8007c82:	42b5      	cmp	r5, r6
 8007c84:	d11a      	bne.n	8007cbc <_printf_common+0xc8>
 8007c86:	2000      	movs	r0, #0
 8007c88:	e008      	b.n	8007c9c <_printf_common+0xa8>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	4652      	mov	r2, sl
 8007c8e:	4641      	mov	r1, r8
 8007c90:	4638      	mov	r0, r7
 8007c92:	47c8      	blx	r9
 8007c94:	3001      	adds	r0, #1
 8007c96:	d103      	bne.n	8007ca0 <_printf_common+0xac>
 8007c98:	f04f 30ff 	mov.w	r0, #4294967295
 8007c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca0:	3501      	adds	r5, #1
 8007ca2:	e7c6      	b.n	8007c32 <_printf_common+0x3e>
 8007ca4:	18e1      	adds	r1, r4, r3
 8007ca6:	1c5a      	adds	r2, r3, #1
 8007ca8:	2030      	movs	r0, #48	@ 0x30
 8007caa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007cae:	4422      	add	r2, r4
 8007cb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007cb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007cb8:	3302      	adds	r3, #2
 8007cba:	e7c7      	b.n	8007c4c <_printf_common+0x58>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	4622      	mov	r2, r4
 8007cc0:	4641      	mov	r1, r8
 8007cc2:	4638      	mov	r0, r7
 8007cc4:	47c8      	blx	r9
 8007cc6:	3001      	adds	r0, #1
 8007cc8:	d0e6      	beq.n	8007c98 <_printf_common+0xa4>
 8007cca:	3601      	adds	r6, #1
 8007ccc:	e7d9      	b.n	8007c82 <_printf_common+0x8e>
	...

08007cd0 <_printf_i>:
 8007cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd4:	7e0f      	ldrb	r7, [r1, #24]
 8007cd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007cd8:	2f78      	cmp	r7, #120	@ 0x78
 8007cda:	4691      	mov	r9, r2
 8007cdc:	4680      	mov	r8, r0
 8007cde:	460c      	mov	r4, r1
 8007ce0:	469a      	mov	sl, r3
 8007ce2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ce6:	d807      	bhi.n	8007cf8 <_printf_i+0x28>
 8007ce8:	2f62      	cmp	r7, #98	@ 0x62
 8007cea:	d80a      	bhi.n	8007d02 <_printf_i+0x32>
 8007cec:	2f00      	cmp	r7, #0
 8007cee:	f000 80d1 	beq.w	8007e94 <_printf_i+0x1c4>
 8007cf2:	2f58      	cmp	r7, #88	@ 0x58
 8007cf4:	f000 80b8 	beq.w	8007e68 <_printf_i+0x198>
 8007cf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d00:	e03a      	b.n	8007d78 <_printf_i+0xa8>
 8007d02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d06:	2b15      	cmp	r3, #21
 8007d08:	d8f6      	bhi.n	8007cf8 <_printf_i+0x28>
 8007d0a:	a101      	add	r1, pc, #4	@ (adr r1, 8007d10 <_printf_i+0x40>)
 8007d0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d10:	08007d69 	.word	0x08007d69
 8007d14:	08007d7d 	.word	0x08007d7d
 8007d18:	08007cf9 	.word	0x08007cf9
 8007d1c:	08007cf9 	.word	0x08007cf9
 8007d20:	08007cf9 	.word	0x08007cf9
 8007d24:	08007cf9 	.word	0x08007cf9
 8007d28:	08007d7d 	.word	0x08007d7d
 8007d2c:	08007cf9 	.word	0x08007cf9
 8007d30:	08007cf9 	.word	0x08007cf9
 8007d34:	08007cf9 	.word	0x08007cf9
 8007d38:	08007cf9 	.word	0x08007cf9
 8007d3c:	08007e7b 	.word	0x08007e7b
 8007d40:	08007da7 	.word	0x08007da7
 8007d44:	08007e35 	.word	0x08007e35
 8007d48:	08007cf9 	.word	0x08007cf9
 8007d4c:	08007cf9 	.word	0x08007cf9
 8007d50:	08007e9d 	.word	0x08007e9d
 8007d54:	08007cf9 	.word	0x08007cf9
 8007d58:	08007da7 	.word	0x08007da7
 8007d5c:	08007cf9 	.word	0x08007cf9
 8007d60:	08007cf9 	.word	0x08007cf9
 8007d64:	08007e3d 	.word	0x08007e3d
 8007d68:	6833      	ldr	r3, [r6, #0]
 8007d6a:	1d1a      	adds	r2, r3, #4
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6032      	str	r2, [r6, #0]
 8007d70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e09c      	b.n	8007eb6 <_printf_i+0x1e6>
 8007d7c:	6833      	ldr	r3, [r6, #0]
 8007d7e:	6820      	ldr	r0, [r4, #0]
 8007d80:	1d19      	adds	r1, r3, #4
 8007d82:	6031      	str	r1, [r6, #0]
 8007d84:	0606      	lsls	r6, r0, #24
 8007d86:	d501      	bpl.n	8007d8c <_printf_i+0xbc>
 8007d88:	681d      	ldr	r5, [r3, #0]
 8007d8a:	e003      	b.n	8007d94 <_printf_i+0xc4>
 8007d8c:	0645      	lsls	r5, r0, #25
 8007d8e:	d5fb      	bpl.n	8007d88 <_printf_i+0xb8>
 8007d90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d94:	2d00      	cmp	r5, #0
 8007d96:	da03      	bge.n	8007da0 <_printf_i+0xd0>
 8007d98:	232d      	movs	r3, #45	@ 0x2d
 8007d9a:	426d      	negs	r5, r5
 8007d9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007da0:	4858      	ldr	r0, [pc, #352]	@ (8007f04 <_printf_i+0x234>)
 8007da2:	230a      	movs	r3, #10
 8007da4:	e011      	b.n	8007dca <_printf_i+0xfa>
 8007da6:	6821      	ldr	r1, [r4, #0]
 8007da8:	6833      	ldr	r3, [r6, #0]
 8007daa:	0608      	lsls	r0, r1, #24
 8007dac:	f853 5b04 	ldr.w	r5, [r3], #4
 8007db0:	d402      	bmi.n	8007db8 <_printf_i+0xe8>
 8007db2:	0649      	lsls	r1, r1, #25
 8007db4:	bf48      	it	mi
 8007db6:	b2ad      	uxthmi	r5, r5
 8007db8:	2f6f      	cmp	r7, #111	@ 0x6f
 8007dba:	4852      	ldr	r0, [pc, #328]	@ (8007f04 <_printf_i+0x234>)
 8007dbc:	6033      	str	r3, [r6, #0]
 8007dbe:	bf14      	ite	ne
 8007dc0:	230a      	movne	r3, #10
 8007dc2:	2308      	moveq	r3, #8
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007dca:	6866      	ldr	r6, [r4, #4]
 8007dcc:	60a6      	str	r6, [r4, #8]
 8007dce:	2e00      	cmp	r6, #0
 8007dd0:	db05      	blt.n	8007dde <_printf_i+0x10e>
 8007dd2:	6821      	ldr	r1, [r4, #0]
 8007dd4:	432e      	orrs	r6, r5
 8007dd6:	f021 0104 	bic.w	r1, r1, #4
 8007dda:	6021      	str	r1, [r4, #0]
 8007ddc:	d04b      	beq.n	8007e76 <_printf_i+0x1a6>
 8007dde:	4616      	mov	r6, r2
 8007de0:	fbb5 f1f3 	udiv	r1, r5, r3
 8007de4:	fb03 5711 	mls	r7, r3, r1, r5
 8007de8:	5dc7      	ldrb	r7, [r0, r7]
 8007dea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007dee:	462f      	mov	r7, r5
 8007df0:	42bb      	cmp	r3, r7
 8007df2:	460d      	mov	r5, r1
 8007df4:	d9f4      	bls.n	8007de0 <_printf_i+0x110>
 8007df6:	2b08      	cmp	r3, #8
 8007df8:	d10b      	bne.n	8007e12 <_printf_i+0x142>
 8007dfa:	6823      	ldr	r3, [r4, #0]
 8007dfc:	07df      	lsls	r7, r3, #31
 8007dfe:	d508      	bpl.n	8007e12 <_printf_i+0x142>
 8007e00:	6923      	ldr	r3, [r4, #16]
 8007e02:	6861      	ldr	r1, [r4, #4]
 8007e04:	4299      	cmp	r1, r3
 8007e06:	bfde      	ittt	le
 8007e08:	2330      	movle	r3, #48	@ 0x30
 8007e0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e0e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e12:	1b92      	subs	r2, r2, r6
 8007e14:	6122      	str	r2, [r4, #16]
 8007e16:	f8cd a000 	str.w	sl, [sp]
 8007e1a:	464b      	mov	r3, r9
 8007e1c:	aa03      	add	r2, sp, #12
 8007e1e:	4621      	mov	r1, r4
 8007e20:	4640      	mov	r0, r8
 8007e22:	f7ff fee7 	bl	8007bf4 <_printf_common>
 8007e26:	3001      	adds	r0, #1
 8007e28:	d14a      	bne.n	8007ec0 <_printf_i+0x1f0>
 8007e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e2e:	b004      	add	sp, #16
 8007e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e34:	6823      	ldr	r3, [r4, #0]
 8007e36:	f043 0320 	orr.w	r3, r3, #32
 8007e3a:	6023      	str	r3, [r4, #0]
 8007e3c:	4832      	ldr	r0, [pc, #200]	@ (8007f08 <_printf_i+0x238>)
 8007e3e:	2778      	movs	r7, #120	@ 0x78
 8007e40:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e44:	6823      	ldr	r3, [r4, #0]
 8007e46:	6831      	ldr	r1, [r6, #0]
 8007e48:	061f      	lsls	r7, r3, #24
 8007e4a:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e4e:	d402      	bmi.n	8007e56 <_printf_i+0x186>
 8007e50:	065f      	lsls	r7, r3, #25
 8007e52:	bf48      	it	mi
 8007e54:	b2ad      	uxthmi	r5, r5
 8007e56:	6031      	str	r1, [r6, #0]
 8007e58:	07d9      	lsls	r1, r3, #31
 8007e5a:	bf44      	itt	mi
 8007e5c:	f043 0320 	orrmi.w	r3, r3, #32
 8007e60:	6023      	strmi	r3, [r4, #0]
 8007e62:	b11d      	cbz	r5, 8007e6c <_printf_i+0x19c>
 8007e64:	2310      	movs	r3, #16
 8007e66:	e7ad      	b.n	8007dc4 <_printf_i+0xf4>
 8007e68:	4826      	ldr	r0, [pc, #152]	@ (8007f04 <_printf_i+0x234>)
 8007e6a:	e7e9      	b.n	8007e40 <_printf_i+0x170>
 8007e6c:	6823      	ldr	r3, [r4, #0]
 8007e6e:	f023 0320 	bic.w	r3, r3, #32
 8007e72:	6023      	str	r3, [r4, #0]
 8007e74:	e7f6      	b.n	8007e64 <_printf_i+0x194>
 8007e76:	4616      	mov	r6, r2
 8007e78:	e7bd      	b.n	8007df6 <_printf_i+0x126>
 8007e7a:	6833      	ldr	r3, [r6, #0]
 8007e7c:	6825      	ldr	r5, [r4, #0]
 8007e7e:	6961      	ldr	r1, [r4, #20]
 8007e80:	1d18      	adds	r0, r3, #4
 8007e82:	6030      	str	r0, [r6, #0]
 8007e84:	062e      	lsls	r6, r5, #24
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	d501      	bpl.n	8007e8e <_printf_i+0x1be>
 8007e8a:	6019      	str	r1, [r3, #0]
 8007e8c:	e002      	b.n	8007e94 <_printf_i+0x1c4>
 8007e8e:	0668      	lsls	r0, r5, #25
 8007e90:	d5fb      	bpl.n	8007e8a <_printf_i+0x1ba>
 8007e92:	8019      	strh	r1, [r3, #0]
 8007e94:	2300      	movs	r3, #0
 8007e96:	6123      	str	r3, [r4, #16]
 8007e98:	4616      	mov	r6, r2
 8007e9a:	e7bc      	b.n	8007e16 <_printf_i+0x146>
 8007e9c:	6833      	ldr	r3, [r6, #0]
 8007e9e:	1d1a      	adds	r2, r3, #4
 8007ea0:	6032      	str	r2, [r6, #0]
 8007ea2:	681e      	ldr	r6, [r3, #0]
 8007ea4:	6862      	ldr	r2, [r4, #4]
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	f7f8 f991 	bl	80001d0 <memchr>
 8007eae:	b108      	cbz	r0, 8007eb4 <_printf_i+0x1e4>
 8007eb0:	1b80      	subs	r0, r0, r6
 8007eb2:	6060      	str	r0, [r4, #4]
 8007eb4:	6863      	ldr	r3, [r4, #4]
 8007eb6:	6123      	str	r3, [r4, #16]
 8007eb8:	2300      	movs	r3, #0
 8007eba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ebe:	e7aa      	b.n	8007e16 <_printf_i+0x146>
 8007ec0:	6923      	ldr	r3, [r4, #16]
 8007ec2:	4632      	mov	r2, r6
 8007ec4:	4649      	mov	r1, r9
 8007ec6:	4640      	mov	r0, r8
 8007ec8:	47d0      	blx	sl
 8007eca:	3001      	adds	r0, #1
 8007ecc:	d0ad      	beq.n	8007e2a <_printf_i+0x15a>
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	079b      	lsls	r3, r3, #30
 8007ed2:	d413      	bmi.n	8007efc <_printf_i+0x22c>
 8007ed4:	68e0      	ldr	r0, [r4, #12]
 8007ed6:	9b03      	ldr	r3, [sp, #12]
 8007ed8:	4298      	cmp	r0, r3
 8007eda:	bfb8      	it	lt
 8007edc:	4618      	movlt	r0, r3
 8007ede:	e7a6      	b.n	8007e2e <_printf_i+0x15e>
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	4632      	mov	r2, r6
 8007ee4:	4649      	mov	r1, r9
 8007ee6:	4640      	mov	r0, r8
 8007ee8:	47d0      	blx	sl
 8007eea:	3001      	adds	r0, #1
 8007eec:	d09d      	beq.n	8007e2a <_printf_i+0x15a>
 8007eee:	3501      	adds	r5, #1
 8007ef0:	68e3      	ldr	r3, [r4, #12]
 8007ef2:	9903      	ldr	r1, [sp, #12]
 8007ef4:	1a5b      	subs	r3, r3, r1
 8007ef6:	42ab      	cmp	r3, r5
 8007ef8:	dcf2      	bgt.n	8007ee0 <_printf_i+0x210>
 8007efa:	e7eb      	b.n	8007ed4 <_printf_i+0x204>
 8007efc:	2500      	movs	r5, #0
 8007efe:	f104 0619 	add.w	r6, r4, #25
 8007f02:	e7f5      	b.n	8007ef0 <_printf_i+0x220>
 8007f04:	0800afe6 	.word	0x0800afe6
 8007f08:	0800aff7 	.word	0x0800aff7

08007f0c <std>:
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	b510      	push	{r4, lr}
 8007f10:	4604      	mov	r4, r0
 8007f12:	e9c0 3300 	strd	r3, r3, [r0]
 8007f16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f1a:	6083      	str	r3, [r0, #8]
 8007f1c:	8181      	strh	r1, [r0, #12]
 8007f1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f20:	81c2      	strh	r2, [r0, #14]
 8007f22:	6183      	str	r3, [r0, #24]
 8007f24:	4619      	mov	r1, r3
 8007f26:	2208      	movs	r2, #8
 8007f28:	305c      	adds	r0, #92	@ 0x5c
 8007f2a:	f000 f916 	bl	800815a <memset>
 8007f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007f64 <std+0x58>)
 8007f30:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f32:	4b0d      	ldr	r3, [pc, #52]	@ (8007f68 <std+0x5c>)
 8007f34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f36:	4b0d      	ldr	r3, [pc, #52]	@ (8007f6c <std+0x60>)
 8007f38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f70 <std+0x64>)
 8007f3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007f74 <std+0x68>)
 8007f40:	6224      	str	r4, [r4, #32]
 8007f42:	429c      	cmp	r4, r3
 8007f44:	d006      	beq.n	8007f54 <std+0x48>
 8007f46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007f4a:	4294      	cmp	r4, r2
 8007f4c:	d002      	beq.n	8007f54 <std+0x48>
 8007f4e:	33d0      	adds	r3, #208	@ 0xd0
 8007f50:	429c      	cmp	r4, r3
 8007f52:	d105      	bne.n	8007f60 <std+0x54>
 8007f54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f5c:	f000 b97a 	b.w	8008254 <__retarget_lock_init_recursive>
 8007f60:	bd10      	pop	{r4, pc}
 8007f62:	bf00      	nop
 8007f64:	080080d5 	.word	0x080080d5
 8007f68:	080080f7 	.word	0x080080f7
 8007f6c:	0800812f 	.word	0x0800812f
 8007f70:	08008153 	.word	0x08008153
 8007f74:	20000484 	.word	0x20000484

08007f78 <stdio_exit_handler>:
 8007f78:	4a02      	ldr	r2, [pc, #8]	@ (8007f84 <stdio_exit_handler+0xc>)
 8007f7a:	4903      	ldr	r1, [pc, #12]	@ (8007f88 <stdio_exit_handler+0x10>)
 8007f7c:	4803      	ldr	r0, [pc, #12]	@ (8007f8c <stdio_exit_handler+0x14>)
 8007f7e:	f000 b869 	b.w	8008054 <_fwalk_sglue>
 8007f82:	bf00      	nop
 8007f84:	2000000c 	.word	0x2000000c
 8007f88:	08009bbd 	.word	0x08009bbd
 8007f8c:	2000001c 	.word	0x2000001c

08007f90 <cleanup_stdio>:
 8007f90:	6841      	ldr	r1, [r0, #4]
 8007f92:	4b0c      	ldr	r3, [pc, #48]	@ (8007fc4 <cleanup_stdio+0x34>)
 8007f94:	4299      	cmp	r1, r3
 8007f96:	b510      	push	{r4, lr}
 8007f98:	4604      	mov	r4, r0
 8007f9a:	d001      	beq.n	8007fa0 <cleanup_stdio+0x10>
 8007f9c:	f001 fe0e 	bl	8009bbc <_fflush_r>
 8007fa0:	68a1      	ldr	r1, [r4, #8]
 8007fa2:	4b09      	ldr	r3, [pc, #36]	@ (8007fc8 <cleanup_stdio+0x38>)
 8007fa4:	4299      	cmp	r1, r3
 8007fa6:	d002      	beq.n	8007fae <cleanup_stdio+0x1e>
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f001 fe07 	bl	8009bbc <_fflush_r>
 8007fae:	68e1      	ldr	r1, [r4, #12]
 8007fb0:	4b06      	ldr	r3, [pc, #24]	@ (8007fcc <cleanup_stdio+0x3c>)
 8007fb2:	4299      	cmp	r1, r3
 8007fb4:	d004      	beq.n	8007fc0 <cleanup_stdio+0x30>
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fbc:	f001 bdfe 	b.w	8009bbc <_fflush_r>
 8007fc0:	bd10      	pop	{r4, pc}
 8007fc2:	bf00      	nop
 8007fc4:	20000484 	.word	0x20000484
 8007fc8:	200004ec 	.word	0x200004ec
 8007fcc:	20000554 	.word	0x20000554

08007fd0 <global_stdio_init.part.0>:
 8007fd0:	b510      	push	{r4, lr}
 8007fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8008000 <global_stdio_init.part.0+0x30>)
 8007fd4:	4c0b      	ldr	r4, [pc, #44]	@ (8008004 <global_stdio_init.part.0+0x34>)
 8007fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8008008 <global_stdio_init.part.0+0x38>)
 8007fd8:	601a      	str	r2, [r3, #0]
 8007fda:	4620      	mov	r0, r4
 8007fdc:	2200      	movs	r2, #0
 8007fde:	2104      	movs	r1, #4
 8007fe0:	f7ff ff94 	bl	8007f0c <std>
 8007fe4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007fe8:	2201      	movs	r2, #1
 8007fea:	2109      	movs	r1, #9
 8007fec:	f7ff ff8e 	bl	8007f0c <std>
 8007ff0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ffa:	2112      	movs	r1, #18
 8007ffc:	f7ff bf86 	b.w	8007f0c <std>
 8008000:	200005bc 	.word	0x200005bc
 8008004:	20000484 	.word	0x20000484
 8008008:	08007f79 	.word	0x08007f79

0800800c <__sfp_lock_acquire>:
 800800c:	4801      	ldr	r0, [pc, #4]	@ (8008014 <__sfp_lock_acquire+0x8>)
 800800e:	f000 b922 	b.w	8008256 <__retarget_lock_acquire_recursive>
 8008012:	bf00      	nop
 8008014:	200005c5 	.word	0x200005c5

08008018 <__sfp_lock_release>:
 8008018:	4801      	ldr	r0, [pc, #4]	@ (8008020 <__sfp_lock_release+0x8>)
 800801a:	f000 b91d 	b.w	8008258 <__retarget_lock_release_recursive>
 800801e:	bf00      	nop
 8008020:	200005c5 	.word	0x200005c5

08008024 <__sinit>:
 8008024:	b510      	push	{r4, lr}
 8008026:	4604      	mov	r4, r0
 8008028:	f7ff fff0 	bl	800800c <__sfp_lock_acquire>
 800802c:	6a23      	ldr	r3, [r4, #32]
 800802e:	b11b      	cbz	r3, 8008038 <__sinit+0x14>
 8008030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008034:	f7ff bff0 	b.w	8008018 <__sfp_lock_release>
 8008038:	4b04      	ldr	r3, [pc, #16]	@ (800804c <__sinit+0x28>)
 800803a:	6223      	str	r3, [r4, #32]
 800803c:	4b04      	ldr	r3, [pc, #16]	@ (8008050 <__sinit+0x2c>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1f5      	bne.n	8008030 <__sinit+0xc>
 8008044:	f7ff ffc4 	bl	8007fd0 <global_stdio_init.part.0>
 8008048:	e7f2      	b.n	8008030 <__sinit+0xc>
 800804a:	bf00      	nop
 800804c:	08007f91 	.word	0x08007f91
 8008050:	200005bc 	.word	0x200005bc

08008054 <_fwalk_sglue>:
 8008054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008058:	4607      	mov	r7, r0
 800805a:	4688      	mov	r8, r1
 800805c:	4614      	mov	r4, r2
 800805e:	2600      	movs	r6, #0
 8008060:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008064:	f1b9 0901 	subs.w	r9, r9, #1
 8008068:	d505      	bpl.n	8008076 <_fwalk_sglue+0x22>
 800806a:	6824      	ldr	r4, [r4, #0]
 800806c:	2c00      	cmp	r4, #0
 800806e:	d1f7      	bne.n	8008060 <_fwalk_sglue+0xc>
 8008070:	4630      	mov	r0, r6
 8008072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008076:	89ab      	ldrh	r3, [r5, #12]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d907      	bls.n	800808c <_fwalk_sglue+0x38>
 800807c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008080:	3301      	adds	r3, #1
 8008082:	d003      	beq.n	800808c <_fwalk_sglue+0x38>
 8008084:	4629      	mov	r1, r5
 8008086:	4638      	mov	r0, r7
 8008088:	47c0      	blx	r8
 800808a:	4306      	orrs	r6, r0
 800808c:	3568      	adds	r5, #104	@ 0x68
 800808e:	e7e9      	b.n	8008064 <_fwalk_sglue+0x10>

08008090 <siprintf>:
 8008090:	b40e      	push	{r1, r2, r3}
 8008092:	b510      	push	{r4, lr}
 8008094:	b09d      	sub	sp, #116	@ 0x74
 8008096:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008098:	9002      	str	r0, [sp, #8]
 800809a:	9006      	str	r0, [sp, #24]
 800809c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80080a0:	480a      	ldr	r0, [pc, #40]	@ (80080cc <siprintf+0x3c>)
 80080a2:	9107      	str	r1, [sp, #28]
 80080a4:	9104      	str	r1, [sp, #16]
 80080a6:	490a      	ldr	r1, [pc, #40]	@ (80080d0 <siprintf+0x40>)
 80080a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ac:	9105      	str	r1, [sp, #20]
 80080ae:	2400      	movs	r4, #0
 80080b0:	a902      	add	r1, sp, #8
 80080b2:	6800      	ldr	r0, [r0, #0]
 80080b4:	9301      	str	r3, [sp, #4]
 80080b6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80080b8:	f001 fc00 	bl	80098bc <_svfiprintf_r>
 80080bc:	9b02      	ldr	r3, [sp, #8]
 80080be:	701c      	strb	r4, [r3, #0]
 80080c0:	b01d      	add	sp, #116	@ 0x74
 80080c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080c6:	b003      	add	sp, #12
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	20000018 	.word	0x20000018
 80080d0:	ffff0208 	.word	0xffff0208

080080d4 <__sread>:
 80080d4:	b510      	push	{r4, lr}
 80080d6:	460c      	mov	r4, r1
 80080d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080dc:	f000 f86c 	bl	80081b8 <_read_r>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	bfab      	itete	ge
 80080e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80080e6:	89a3      	ldrhlt	r3, [r4, #12]
 80080e8:	181b      	addge	r3, r3, r0
 80080ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80080ee:	bfac      	ite	ge
 80080f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80080f2:	81a3      	strhlt	r3, [r4, #12]
 80080f4:	bd10      	pop	{r4, pc}

080080f6 <__swrite>:
 80080f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080fa:	461f      	mov	r7, r3
 80080fc:	898b      	ldrh	r3, [r1, #12]
 80080fe:	05db      	lsls	r3, r3, #23
 8008100:	4605      	mov	r5, r0
 8008102:	460c      	mov	r4, r1
 8008104:	4616      	mov	r6, r2
 8008106:	d505      	bpl.n	8008114 <__swrite+0x1e>
 8008108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800810c:	2302      	movs	r3, #2
 800810e:	2200      	movs	r2, #0
 8008110:	f000 f840 	bl	8008194 <_lseek_r>
 8008114:	89a3      	ldrh	r3, [r4, #12]
 8008116:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800811a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800811e:	81a3      	strh	r3, [r4, #12]
 8008120:	4632      	mov	r2, r6
 8008122:	463b      	mov	r3, r7
 8008124:	4628      	mov	r0, r5
 8008126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800812a:	f000 b857 	b.w	80081dc <_write_r>

0800812e <__sseek>:
 800812e:	b510      	push	{r4, lr}
 8008130:	460c      	mov	r4, r1
 8008132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008136:	f000 f82d 	bl	8008194 <_lseek_r>
 800813a:	1c43      	adds	r3, r0, #1
 800813c:	89a3      	ldrh	r3, [r4, #12]
 800813e:	bf15      	itete	ne
 8008140:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008142:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008146:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800814a:	81a3      	strheq	r3, [r4, #12]
 800814c:	bf18      	it	ne
 800814e:	81a3      	strhne	r3, [r4, #12]
 8008150:	bd10      	pop	{r4, pc}

08008152 <__sclose>:
 8008152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008156:	f000 b80d 	b.w	8008174 <_close_r>

0800815a <memset>:
 800815a:	4402      	add	r2, r0
 800815c:	4603      	mov	r3, r0
 800815e:	4293      	cmp	r3, r2
 8008160:	d100      	bne.n	8008164 <memset+0xa>
 8008162:	4770      	bx	lr
 8008164:	f803 1b01 	strb.w	r1, [r3], #1
 8008168:	e7f9      	b.n	800815e <memset+0x4>
	...

0800816c <_localeconv_r>:
 800816c:	4800      	ldr	r0, [pc, #0]	@ (8008170 <_localeconv_r+0x4>)
 800816e:	4770      	bx	lr
 8008170:	20000158 	.word	0x20000158

08008174 <_close_r>:
 8008174:	b538      	push	{r3, r4, r5, lr}
 8008176:	4d06      	ldr	r5, [pc, #24]	@ (8008190 <_close_r+0x1c>)
 8008178:	2300      	movs	r3, #0
 800817a:	4604      	mov	r4, r0
 800817c:	4608      	mov	r0, r1
 800817e:	602b      	str	r3, [r5, #0]
 8008180:	f7f9 feff 	bl	8001f82 <_close>
 8008184:	1c43      	adds	r3, r0, #1
 8008186:	d102      	bne.n	800818e <_close_r+0x1a>
 8008188:	682b      	ldr	r3, [r5, #0]
 800818a:	b103      	cbz	r3, 800818e <_close_r+0x1a>
 800818c:	6023      	str	r3, [r4, #0]
 800818e:	bd38      	pop	{r3, r4, r5, pc}
 8008190:	200005c0 	.word	0x200005c0

08008194 <_lseek_r>:
 8008194:	b538      	push	{r3, r4, r5, lr}
 8008196:	4d07      	ldr	r5, [pc, #28]	@ (80081b4 <_lseek_r+0x20>)
 8008198:	4604      	mov	r4, r0
 800819a:	4608      	mov	r0, r1
 800819c:	4611      	mov	r1, r2
 800819e:	2200      	movs	r2, #0
 80081a0:	602a      	str	r2, [r5, #0]
 80081a2:	461a      	mov	r2, r3
 80081a4:	f7f9 ff14 	bl	8001fd0 <_lseek>
 80081a8:	1c43      	adds	r3, r0, #1
 80081aa:	d102      	bne.n	80081b2 <_lseek_r+0x1e>
 80081ac:	682b      	ldr	r3, [r5, #0]
 80081ae:	b103      	cbz	r3, 80081b2 <_lseek_r+0x1e>
 80081b0:	6023      	str	r3, [r4, #0]
 80081b2:	bd38      	pop	{r3, r4, r5, pc}
 80081b4:	200005c0 	.word	0x200005c0

080081b8 <_read_r>:
 80081b8:	b538      	push	{r3, r4, r5, lr}
 80081ba:	4d07      	ldr	r5, [pc, #28]	@ (80081d8 <_read_r+0x20>)
 80081bc:	4604      	mov	r4, r0
 80081be:	4608      	mov	r0, r1
 80081c0:	4611      	mov	r1, r2
 80081c2:	2200      	movs	r2, #0
 80081c4:	602a      	str	r2, [r5, #0]
 80081c6:	461a      	mov	r2, r3
 80081c8:	f7f9 fea2 	bl	8001f10 <_read>
 80081cc:	1c43      	adds	r3, r0, #1
 80081ce:	d102      	bne.n	80081d6 <_read_r+0x1e>
 80081d0:	682b      	ldr	r3, [r5, #0]
 80081d2:	b103      	cbz	r3, 80081d6 <_read_r+0x1e>
 80081d4:	6023      	str	r3, [r4, #0]
 80081d6:	bd38      	pop	{r3, r4, r5, pc}
 80081d8:	200005c0 	.word	0x200005c0

080081dc <_write_r>:
 80081dc:	b538      	push	{r3, r4, r5, lr}
 80081de:	4d07      	ldr	r5, [pc, #28]	@ (80081fc <_write_r+0x20>)
 80081e0:	4604      	mov	r4, r0
 80081e2:	4608      	mov	r0, r1
 80081e4:	4611      	mov	r1, r2
 80081e6:	2200      	movs	r2, #0
 80081e8:	602a      	str	r2, [r5, #0]
 80081ea:	461a      	mov	r2, r3
 80081ec:	f7f9 fead 	bl	8001f4a <_write>
 80081f0:	1c43      	adds	r3, r0, #1
 80081f2:	d102      	bne.n	80081fa <_write_r+0x1e>
 80081f4:	682b      	ldr	r3, [r5, #0]
 80081f6:	b103      	cbz	r3, 80081fa <_write_r+0x1e>
 80081f8:	6023      	str	r3, [r4, #0]
 80081fa:	bd38      	pop	{r3, r4, r5, pc}
 80081fc:	200005c0 	.word	0x200005c0

08008200 <__errno>:
 8008200:	4b01      	ldr	r3, [pc, #4]	@ (8008208 <__errno+0x8>)
 8008202:	6818      	ldr	r0, [r3, #0]
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	20000018 	.word	0x20000018

0800820c <__libc_init_array>:
 800820c:	b570      	push	{r4, r5, r6, lr}
 800820e:	4d0d      	ldr	r5, [pc, #52]	@ (8008244 <__libc_init_array+0x38>)
 8008210:	4c0d      	ldr	r4, [pc, #52]	@ (8008248 <__libc_init_array+0x3c>)
 8008212:	1b64      	subs	r4, r4, r5
 8008214:	10a4      	asrs	r4, r4, #2
 8008216:	2600      	movs	r6, #0
 8008218:	42a6      	cmp	r6, r4
 800821a:	d109      	bne.n	8008230 <__libc_init_array+0x24>
 800821c:	4d0b      	ldr	r5, [pc, #44]	@ (800824c <__libc_init_array+0x40>)
 800821e:	4c0c      	ldr	r4, [pc, #48]	@ (8008250 <__libc_init_array+0x44>)
 8008220:	f002 fa68 	bl	800a6f4 <_init>
 8008224:	1b64      	subs	r4, r4, r5
 8008226:	10a4      	asrs	r4, r4, #2
 8008228:	2600      	movs	r6, #0
 800822a:	42a6      	cmp	r6, r4
 800822c:	d105      	bne.n	800823a <__libc_init_array+0x2e>
 800822e:	bd70      	pop	{r4, r5, r6, pc}
 8008230:	f855 3b04 	ldr.w	r3, [r5], #4
 8008234:	4798      	blx	r3
 8008236:	3601      	adds	r6, #1
 8008238:	e7ee      	b.n	8008218 <__libc_init_array+0xc>
 800823a:	f855 3b04 	ldr.w	r3, [r5], #4
 800823e:	4798      	blx	r3
 8008240:	3601      	adds	r6, #1
 8008242:	e7f2      	b.n	800822a <__libc_init_array+0x1e>
 8008244:	0800b354 	.word	0x0800b354
 8008248:	0800b354 	.word	0x0800b354
 800824c:	0800b354 	.word	0x0800b354
 8008250:	0800b358 	.word	0x0800b358

08008254 <__retarget_lock_init_recursive>:
 8008254:	4770      	bx	lr

08008256 <__retarget_lock_acquire_recursive>:
 8008256:	4770      	bx	lr

08008258 <__retarget_lock_release_recursive>:
 8008258:	4770      	bx	lr

0800825a <quorem>:
 800825a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800825e:	6903      	ldr	r3, [r0, #16]
 8008260:	690c      	ldr	r4, [r1, #16]
 8008262:	42a3      	cmp	r3, r4
 8008264:	4607      	mov	r7, r0
 8008266:	db7e      	blt.n	8008366 <quorem+0x10c>
 8008268:	3c01      	subs	r4, #1
 800826a:	f101 0814 	add.w	r8, r1, #20
 800826e:	00a3      	lsls	r3, r4, #2
 8008270:	f100 0514 	add.w	r5, r0, #20
 8008274:	9300      	str	r3, [sp, #0]
 8008276:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800827a:	9301      	str	r3, [sp, #4]
 800827c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008280:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008284:	3301      	adds	r3, #1
 8008286:	429a      	cmp	r2, r3
 8008288:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800828c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008290:	d32e      	bcc.n	80082f0 <quorem+0x96>
 8008292:	f04f 0a00 	mov.w	sl, #0
 8008296:	46c4      	mov	ip, r8
 8008298:	46ae      	mov	lr, r5
 800829a:	46d3      	mov	fp, sl
 800829c:	f85c 3b04 	ldr.w	r3, [ip], #4
 80082a0:	b298      	uxth	r0, r3
 80082a2:	fb06 a000 	mla	r0, r6, r0, sl
 80082a6:	0c02      	lsrs	r2, r0, #16
 80082a8:	0c1b      	lsrs	r3, r3, #16
 80082aa:	fb06 2303 	mla	r3, r6, r3, r2
 80082ae:	f8de 2000 	ldr.w	r2, [lr]
 80082b2:	b280      	uxth	r0, r0
 80082b4:	b292      	uxth	r2, r2
 80082b6:	1a12      	subs	r2, r2, r0
 80082b8:	445a      	add	r2, fp
 80082ba:	f8de 0000 	ldr.w	r0, [lr]
 80082be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80082c8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80082cc:	b292      	uxth	r2, r2
 80082ce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80082d2:	45e1      	cmp	r9, ip
 80082d4:	f84e 2b04 	str.w	r2, [lr], #4
 80082d8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80082dc:	d2de      	bcs.n	800829c <quorem+0x42>
 80082de:	9b00      	ldr	r3, [sp, #0]
 80082e0:	58eb      	ldr	r3, [r5, r3]
 80082e2:	b92b      	cbnz	r3, 80082f0 <quorem+0x96>
 80082e4:	9b01      	ldr	r3, [sp, #4]
 80082e6:	3b04      	subs	r3, #4
 80082e8:	429d      	cmp	r5, r3
 80082ea:	461a      	mov	r2, r3
 80082ec:	d32f      	bcc.n	800834e <quorem+0xf4>
 80082ee:	613c      	str	r4, [r7, #16]
 80082f0:	4638      	mov	r0, r7
 80082f2:	f001 f97f 	bl	80095f4 <__mcmp>
 80082f6:	2800      	cmp	r0, #0
 80082f8:	db25      	blt.n	8008346 <quorem+0xec>
 80082fa:	4629      	mov	r1, r5
 80082fc:	2000      	movs	r0, #0
 80082fe:	f858 2b04 	ldr.w	r2, [r8], #4
 8008302:	f8d1 c000 	ldr.w	ip, [r1]
 8008306:	fa1f fe82 	uxth.w	lr, r2
 800830a:	fa1f f38c 	uxth.w	r3, ip
 800830e:	eba3 030e 	sub.w	r3, r3, lr
 8008312:	4403      	add	r3, r0
 8008314:	0c12      	lsrs	r2, r2, #16
 8008316:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800831a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800831e:	b29b      	uxth	r3, r3
 8008320:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008324:	45c1      	cmp	r9, r8
 8008326:	f841 3b04 	str.w	r3, [r1], #4
 800832a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800832e:	d2e6      	bcs.n	80082fe <quorem+0xa4>
 8008330:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008334:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008338:	b922      	cbnz	r2, 8008344 <quorem+0xea>
 800833a:	3b04      	subs	r3, #4
 800833c:	429d      	cmp	r5, r3
 800833e:	461a      	mov	r2, r3
 8008340:	d30b      	bcc.n	800835a <quorem+0x100>
 8008342:	613c      	str	r4, [r7, #16]
 8008344:	3601      	adds	r6, #1
 8008346:	4630      	mov	r0, r6
 8008348:	b003      	add	sp, #12
 800834a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800834e:	6812      	ldr	r2, [r2, #0]
 8008350:	3b04      	subs	r3, #4
 8008352:	2a00      	cmp	r2, #0
 8008354:	d1cb      	bne.n	80082ee <quorem+0x94>
 8008356:	3c01      	subs	r4, #1
 8008358:	e7c6      	b.n	80082e8 <quorem+0x8e>
 800835a:	6812      	ldr	r2, [r2, #0]
 800835c:	3b04      	subs	r3, #4
 800835e:	2a00      	cmp	r2, #0
 8008360:	d1ef      	bne.n	8008342 <quorem+0xe8>
 8008362:	3c01      	subs	r4, #1
 8008364:	e7ea      	b.n	800833c <quorem+0xe2>
 8008366:	2000      	movs	r0, #0
 8008368:	e7ee      	b.n	8008348 <quorem+0xee>
 800836a:	0000      	movs	r0, r0
 800836c:	0000      	movs	r0, r0
	...

08008370 <_dtoa_r>:
 8008370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008374:	69c7      	ldr	r7, [r0, #28]
 8008376:	b097      	sub	sp, #92	@ 0x5c
 8008378:	ed8d 0b04 	vstr	d0, [sp, #16]
 800837c:	ec55 4b10 	vmov	r4, r5, d0
 8008380:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008382:	9107      	str	r1, [sp, #28]
 8008384:	4681      	mov	r9, r0
 8008386:	920c      	str	r2, [sp, #48]	@ 0x30
 8008388:	9311      	str	r3, [sp, #68]	@ 0x44
 800838a:	b97f      	cbnz	r7, 80083ac <_dtoa_r+0x3c>
 800838c:	2010      	movs	r0, #16
 800838e:	f000 fe09 	bl	8008fa4 <malloc>
 8008392:	4602      	mov	r2, r0
 8008394:	f8c9 001c 	str.w	r0, [r9, #28]
 8008398:	b920      	cbnz	r0, 80083a4 <_dtoa_r+0x34>
 800839a:	4ba9      	ldr	r3, [pc, #676]	@ (8008640 <_dtoa_r+0x2d0>)
 800839c:	21ef      	movs	r1, #239	@ 0xef
 800839e:	48a9      	ldr	r0, [pc, #676]	@ (8008644 <_dtoa_r+0x2d4>)
 80083a0:	f001 fc6c 	bl	8009c7c <__assert_func>
 80083a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80083a8:	6007      	str	r7, [r0, #0]
 80083aa:	60c7      	str	r7, [r0, #12]
 80083ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80083b0:	6819      	ldr	r1, [r3, #0]
 80083b2:	b159      	cbz	r1, 80083cc <_dtoa_r+0x5c>
 80083b4:	685a      	ldr	r2, [r3, #4]
 80083b6:	604a      	str	r2, [r1, #4]
 80083b8:	2301      	movs	r3, #1
 80083ba:	4093      	lsls	r3, r2
 80083bc:	608b      	str	r3, [r1, #8]
 80083be:	4648      	mov	r0, r9
 80083c0:	f000 fee6 	bl	8009190 <_Bfree>
 80083c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80083c8:	2200      	movs	r2, #0
 80083ca:	601a      	str	r2, [r3, #0]
 80083cc:	1e2b      	subs	r3, r5, #0
 80083ce:	bfb9      	ittee	lt
 80083d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80083d4:	9305      	strlt	r3, [sp, #20]
 80083d6:	2300      	movge	r3, #0
 80083d8:	6033      	strge	r3, [r6, #0]
 80083da:	9f05      	ldr	r7, [sp, #20]
 80083dc:	4b9a      	ldr	r3, [pc, #616]	@ (8008648 <_dtoa_r+0x2d8>)
 80083de:	bfbc      	itt	lt
 80083e0:	2201      	movlt	r2, #1
 80083e2:	6032      	strlt	r2, [r6, #0]
 80083e4:	43bb      	bics	r3, r7
 80083e6:	d112      	bne.n	800840e <_dtoa_r+0x9e>
 80083e8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80083ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80083ee:	6013      	str	r3, [r2, #0]
 80083f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80083f4:	4323      	orrs	r3, r4
 80083f6:	f000 855a 	beq.w	8008eae <_dtoa_r+0xb3e>
 80083fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80083fc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800865c <_dtoa_r+0x2ec>
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 855c 	beq.w	8008ebe <_dtoa_r+0xb4e>
 8008406:	f10a 0303 	add.w	r3, sl, #3
 800840a:	f000 bd56 	b.w	8008eba <_dtoa_r+0xb4a>
 800840e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008412:	2200      	movs	r2, #0
 8008414:	ec51 0b17 	vmov	r0, r1, d7
 8008418:	2300      	movs	r3, #0
 800841a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800841e:	f7f8 fb53 	bl	8000ac8 <__aeabi_dcmpeq>
 8008422:	4680      	mov	r8, r0
 8008424:	b158      	cbz	r0, 800843e <_dtoa_r+0xce>
 8008426:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008428:	2301      	movs	r3, #1
 800842a:	6013      	str	r3, [r2, #0]
 800842c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800842e:	b113      	cbz	r3, 8008436 <_dtoa_r+0xc6>
 8008430:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008432:	4b86      	ldr	r3, [pc, #536]	@ (800864c <_dtoa_r+0x2dc>)
 8008434:	6013      	str	r3, [r2, #0]
 8008436:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008660 <_dtoa_r+0x2f0>
 800843a:	f000 bd40 	b.w	8008ebe <_dtoa_r+0xb4e>
 800843e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008442:	aa14      	add	r2, sp, #80	@ 0x50
 8008444:	a915      	add	r1, sp, #84	@ 0x54
 8008446:	4648      	mov	r0, r9
 8008448:	f001 f984 	bl	8009754 <__d2b>
 800844c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008450:	9002      	str	r0, [sp, #8]
 8008452:	2e00      	cmp	r6, #0
 8008454:	d078      	beq.n	8008548 <_dtoa_r+0x1d8>
 8008456:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008458:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800845c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008460:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008464:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008468:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800846c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008470:	4619      	mov	r1, r3
 8008472:	2200      	movs	r2, #0
 8008474:	4b76      	ldr	r3, [pc, #472]	@ (8008650 <_dtoa_r+0x2e0>)
 8008476:	f7f7 ff07 	bl	8000288 <__aeabi_dsub>
 800847a:	a36b      	add	r3, pc, #428	@ (adr r3, 8008628 <_dtoa_r+0x2b8>)
 800847c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008480:	f7f8 f8ba 	bl	80005f8 <__aeabi_dmul>
 8008484:	a36a      	add	r3, pc, #424	@ (adr r3, 8008630 <_dtoa_r+0x2c0>)
 8008486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848a:	f7f7 feff 	bl	800028c <__adddf3>
 800848e:	4604      	mov	r4, r0
 8008490:	4630      	mov	r0, r6
 8008492:	460d      	mov	r5, r1
 8008494:	f7f8 f846 	bl	8000524 <__aeabi_i2d>
 8008498:	a367      	add	r3, pc, #412	@ (adr r3, 8008638 <_dtoa_r+0x2c8>)
 800849a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849e:	f7f8 f8ab 	bl	80005f8 <__aeabi_dmul>
 80084a2:	4602      	mov	r2, r0
 80084a4:	460b      	mov	r3, r1
 80084a6:	4620      	mov	r0, r4
 80084a8:	4629      	mov	r1, r5
 80084aa:	f7f7 feef 	bl	800028c <__adddf3>
 80084ae:	4604      	mov	r4, r0
 80084b0:	460d      	mov	r5, r1
 80084b2:	f7f8 fb51 	bl	8000b58 <__aeabi_d2iz>
 80084b6:	2200      	movs	r2, #0
 80084b8:	4607      	mov	r7, r0
 80084ba:	2300      	movs	r3, #0
 80084bc:	4620      	mov	r0, r4
 80084be:	4629      	mov	r1, r5
 80084c0:	f7f8 fb0c 	bl	8000adc <__aeabi_dcmplt>
 80084c4:	b140      	cbz	r0, 80084d8 <_dtoa_r+0x168>
 80084c6:	4638      	mov	r0, r7
 80084c8:	f7f8 f82c 	bl	8000524 <__aeabi_i2d>
 80084cc:	4622      	mov	r2, r4
 80084ce:	462b      	mov	r3, r5
 80084d0:	f7f8 fafa 	bl	8000ac8 <__aeabi_dcmpeq>
 80084d4:	b900      	cbnz	r0, 80084d8 <_dtoa_r+0x168>
 80084d6:	3f01      	subs	r7, #1
 80084d8:	2f16      	cmp	r7, #22
 80084da:	d852      	bhi.n	8008582 <_dtoa_r+0x212>
 80084dc:	4b5d      	ldr	r3, [pc, #372]	@ (8008654 <_dtoa_r+0x2e4>)
 80084de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80084ea:	f7f8 faf7 	bl	8000adc <__aeabi_dcmplt>
 80084ee:	2800      	cmp	r0, #0
 80084f0:	d049      	beq.n	8008586 <_dtoa_r+0x216>
 80084f2:	3f01      	subs	r7, #1
 80084f4:	2300      	movs	r3, #0
 80084f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80084f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80084fa:	1b9b      	subs	r3, r3, r6
 80084fc:	1e5a      	subs	r2, r3, #1
 80084fe:	bf45      	ittet	mi
 8008500:	f1c3 0301 	rsbmi	r3, r3, #1
 8008504:	9300      	strmi	r3, [sp, #0]
 8008506:	2300      	movpl	r3, #0
 8008508:	2300      	movmi	r3, #0
 800850a:	9206      	str	r2, [sp, #24]
 800850c:	bf54      	ite	pl
 800850e:	9300      	strpl	r3, [sp, #0]
 8008510:	9306      	strmi	r3, [sp, #24]
 8008512:	2f00      	cmp	r7, #0
 8008514:	db39      	blt.n	800858a <_dtoa_r+0x21a>
 8008516:	9b06      	ldr	r3, [sp, #24]
 8008518:	970d      	str	r7, [sp, #52]	@ 0x34
 800851a:	443b      	add	r3, r7
 800851c:	9306      	str	r3, [sp, #24]
 800851e:	2300      	movs	r3, #0
 8008520:	9308      	str	r3, [sp, #32]
 8008522:	9b07      	ldr	r3, [sp, #28]
 8008524:	2b09      	cmp	r3, #9
 8008526:	d863      	bhi.n	80085f0 <_dtoa_r+0x280>
 8008528:	2b05      	cmp	r3, #5
 800852a:	bfc4      	itt	gt
 800852c:	3b04      	subgt	r3, #4
 800852e:	9307      	strgt	r3, [sp, #28]
 8008530:	9b07      	ldr	r3, [sp, #28]
 8008532:	f1a3 0302 	sub.w	r3, r3, #2
 8008536:	bfcc      	ite	gt
 8008538:	2400      	movgt	r4, #0
 800853a:	2401      	movle	r4, #1
 800853c:	2b03      	cmp	r3, #3
 800853e:	d863      	bhi.n	8008608 <_dtoa_r+0x298>
 8008540:	e8df f003 	tbb	[pc, r3]
 8008544:	2b375452 	.word	0x2b375452
 8008548:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800854c:	441e      	add	r6, r3
 800854e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008552:	2b20      	cmp	r3, #32
 8008554:	bfc1      	itttt	gt
 8008556:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800855a:	409f      	lslgt	r7, r3
 800855c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008560:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008564:	bfd6      	itet	le
 8008566:	f1c3 0320 	rsble	r3, r3, #32
 800856a:	ea47 0003 	orrgt.w	r0, r7, r3
 800856e:	fa04 f003 	lslle.w	r0, r4, r3
 8008572:	f7f7 ffc7 	bl	8000504 <__aeabi_ui2d>
 8008576:	2201      	movs	r2, #1
 8008578:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800857c:	3e01      	subs	r6, #1
 800857e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008580:	e776      	b.n	8008470 <_dtoa_r+0x100>
 8008582:	2301      	movs	r3, #1
 8008584:	e7b7      	b.n	80084f6 <_dtoa_r+0x186>
 8008586:	9010      	str	r0, [sp, #64]	@ 0x40
 8008588:	e7b6      	b.n	80084f8 <_dtoa_r+0x188>
 800858a:	9b00      	ldr	r3, [sp, #0]
 800858c:	1bdb      	subs	r3, r3, r7
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	427b      	negs	r3, r7
 8008592:	9308      	str	r3, [sp, #32]
 8008594:	2300      	movs	r3, #0
 8008596:	930d      	str	r3, [sp, #52]	@ 0x34
 8008598:	e7c3      	b.n	8008522 <_dtoa_r+0x1b2>
 800859a:	2301      	movs	r3, #1
 800859c:	9309      	str	r3, [sp, #36]	@ 0x24
 800859e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085a0:	eb07 0b03 	add.w	fp, r7, r3
 80085a4:	f10b 0301 	add.w	r3, fp, #1
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	9303      	str	r3, [sp, #12]
 80085ac:	bfb8      	it	lt
 80085ae:	2301      	movlt	r3, #1
 80085b0:	e006      	b.n	80085c0 <_dtoa_r+0x250>
 80085b2:	2301      	movs	r3, #1
 80085b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80085b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	dd28      	ble.n	800860e <_dtoa_r+0x29e>
 80085bc:	469b      	mov	fp, r3
 80085be:	9303      	str	r3, [sp, #12]
 80085c0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80085c4:	2100      	movs	r1, #0
 80085c6:	2204      	movs	r2, #4
 80085c8:	f102 0514 	add.w	r5, r2, #20
 80085cc:	429d      	cmp	r5, r3
 80085ce:	d926      	bls.n	800861e <_dtoa_r+0x2ae>
 80085d0:	6041      	str	r1, [r0, #4]
 80085d2:	4648      	mov	r0, r9
 80085d4:	f000 fd9c 	bl	8009110 <_Balloc>
 80085d8:	4682      	mov	sl, r0
 80085da:	2800      	cmp	r0, #0
 80085dc:	d142      	bne.n	8008664 <_dtoa_r+0x2f4>
 80085de:	4b1e      	ldr	r3, [pc, #120]	@ (8008658 <_dtoa_r+0x2e8>)
 80085e0:	4602      	mov	r2, r0
 80085e2:	f240 11af 	movw	r1, #431	@ 0x1af
 80085e6:	e6da      	b.n	800839e <_dtoa_r+0x2e>
 80085e8:	2300      	movs	r3, #0
 80085ea:	e7e3      	b.n	80085b4 <_dtoa_r+0x244>
 80085ec:	2300      	movs	r3, #0
 80085ee:	e7d5      	b.n	800859c <_dtoa_r+0x22c>
 80085f0:	2401      	movs	r4, #1
 80085f2:	2300      	movs	r3, #0
 80085f4:	9307      	str	r3, [sp, #28]
 80085f6:	9409      	str	r4, [sp, #36]	@ 0x24
 80085f8:	f04f 3bff 	mov.w	fp, #4294967295
 80085fc:	2200      	movs	r2, #0
 80085fe:	f8cd b00c 	str.w	fp, [sp, #12]
 8008602:	2312      	movs	r3, #18
 8008604:	920c      	str	r2, [sp, #48]	@ 0x30
 8008606:	e7db      	b.n	80085c0 <_dtoa_r+0x250>
 8008608:	2301      	movs	r3, #1
 800860a:	9309      	str	r3, [sp, #36]	@ 0x24
 800860c:	e7f4      	b.n	80085f8 <_dtoa_r+0x288>
 800860e:	f04f 0b01 	mov.w	fp, #1
 8008612:	f8cd b00c 	str.w	fp, [sp, #12]
 8008616:	465b      	mov	r3, fp
 8008618:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800861c:	e7d0      	b.n	80085c0 <_dtoa_r+0x250>
 800861e:	3101      	adds	r1, #1
 8008620:	0052      	lsls	r2, r2, #1
 8008622:	e7d1      	b.n	80085c8 <_dtoa_r+0x258>
 8008624:	f3af 8000 	nop.w
 8008628:	636f4361 	.word	0x636f4361
 800862c:	3fd287a7 	.word	0x3fd287a7
 8008630:	8b60c8b3 	.word	0x8b60c8b3
 8008634:	3fc68a28 	.word	0x3fc68a28
 8008638:	509f79fb 	.word	0x509f79fb
 800863c:	3fd34413 	.word	0x3fd34413
 8008640:	0800b015 	.word	0x0800b015
 8008644:	0800b02c 	.word	0x0800b02c
 8008648:	7ff00000 	.word	0x7ff00000
 800864c:	0800afe5 	.word	0x0800afe5
 8008650:	3ff80000 	.word	0x3ff80000
 8008654:	0800b180 	.word	0x0800b180
 8008658:	0800b084 	.word	0x0800b084
 800865c:	0800b011 	.word	0x0800b011
 8008660:	0800afe4 	.word	0x0800afe4
 8008664:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008668:	6018      	str	r0, [r3, #0]
 800866a:	9b03      	ldr	r3, [sp, #12]
 800866c:	2b0e      	cmp	r3, #14
 800866e:	f200 80a1 	bhi.w	80087b4 <_dtoa_r+0x444>
 8008672:	2c00      	cmp	r4, #0
 8008674:	f000 809e 	beq.w	80087b4 <_dtoa_r+0x444>
 8008678:	2f00      	cmp	r7, #0
 800867a:	dd33      	ble.n	80086e4 <_dtoa_r+0x374>
 800867c:	4b9c      	ldr	r3, [pc, #624]	@ (80088f0 <_dtoa_r+0x580>)
 800867e:	f007 020f 	and.w	r2, r7, #15
 8008682:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008686:	ed93 7b00 	vldr	d7, [r3]
 800868a:	05f8      	lsls	r0, r7, #23
 800868c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008690:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008694:	d516      	bpl.n	80086c4 <_dtoa_r+0x354>
 8008696:	4b97      	ldr	r3, [pc, #604]	@ (80088f4 <_dtoa_r+0x584>)
 8008698:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800869c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086a0:	f7f8 f8d4 	bl	800084c <__aeabi_ddiv>
 80086a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086a8:	f004 040f 	and.w	r4, r4, #15
 80086ac:	2603      	movs	r6, #3
 80086ae:	4d91      	ldr	r5, [pc, #580]	@ (80088f4 <_dtoa_r+0x584>)
 80086b0:	b954      	cbnz	r4, 80086c8 <_dtoa_r+0x358>
 80086b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80086b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086ba:	f7f8 f8c7 	bl	800084c <__aeabi_ddiv>
 80086be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086c2:	e028      	b.n	8008716 <_dtoa_r+0x3a6>
 80086c4:	2602      	movs	r6, #2
 80086c6:	e7f2      	b.n	80086ae <_dtoa_r+0x33e>
 80086c8:	07e1      	lsls	r1, r4, #31
 80086ca:	d508      	bpl.n	80086de <_dtoa_r+0x36e>
 80086cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80086d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086d4:	f7f7 ff90 	bl	80005f8 <__aeabi_dmul>
 80086d8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80086dc:	3601      	adds	r6, #1
 80086de:	1064      	asrs	r4, r4, #1
 80086e0:	3508      	adds	r5, #8
 80086e2:	e7e5      	b.n	80086b0 <_dtoa_r+0x340>
 80086e4:	f000 80af 	beq.w	8008846 <_dtoa_r+0x4d6>
 80086e8:	427c      	negs	r4, r7
 80086ea:	4b81      	ldr	r3, [pc, #516]	@ (80088f0 <_dtoa_r+0x580>)
 80086ec:	4d81      	ldr	r5, [pc, #516]	@ (80088f4 <_dtoa_r+0x584>)
 80086ee:	f004 020f 	and.w	r2, r4, #15
 80086f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80086fe:	f7f7 ff7b 	bl	80005f8 <__aeabi_dmul>
 8008702:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008706:	1124      	asrs	r4, r4, #4
 8008708:	2300      	movs	r3, #0
 800870a:	2602      	movs	r6, #2
 800870c:	2c00      	cmp	r4, #0
 800870e:	f040 808f 	bne.w	8008830 <_dtoa_r+0x4c0>
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1d3      	bne.n	80086be <_dtoa_r+0x34e>
 8008716:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008718:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800871c:	2b00      	cmp	r3, #0
 800871e:	f000 8094 	beq.w	800884a <_dtoa_r+0x4da>
 8008722:	4b75      	ldr	r3, [pc, #468]	@ (80088f8 <_dtoa_r+0x588>)
 8008724:	2200      	movs	r2, #0
 8008726:	4620      	mov	r0, r4
 8008728:	4629      	mov	r1, r5
 800872a:	f7f8 f9d7 	bl	8000adc <__aeabi_dcmplt>
 800872e:	2800      	cmp	r0, #0
 8008730:	f000 808b 	beq.w	800884a <_dtoa_r+0x4da>
 8008734:	9b03      	ldr	r3, [sp, #12]
 8008736:	2b00      	cmp	r3, #0
 8008738:	f000 8087 	beq.w	800884a <_dtoa_r+0x4da>
 800873c:	f1bb 0f00 	cmp.w	fp, #0
 8008740:	dd34      	ble.n	80087ac <_dtoa_r+0x43c>
 8008742:	4620      	mov	r0, r4
 8008744:	4b6d      	ldr	r3, [pc, #436]	@ (80088fc <_dtoa_r+0x58c>)
 8008746:	2200      	movs	r2, #0
 8008748:	4629      	mov	r1, r5
 800874a:	f7f7 ff55 	bl	80005f8 <__aeabi_dmul>
 800874e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008752:	f107 38ff 	add.w	r8, r7, #4294967295
 8008756:	3601      	adds	r6, #1
 8008758:	465c      	mov	r4, fp
 800875a:	4630      	mov	r0, r6
 800875c:	f7f7 fee2 	bl	8000524 <__aeabi_i2d>
 8008760:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008764:	f7f7 ff48 	bl	80005f8 <__aeabi_dmul>
 8008768:	4b65      	ldr	r3, [pc, #404]	@ (8008900 <_dtoa_r+0x590>)
 800876a:	2200      	movs	r2, #0
 800876c:	f7f7 fd8e 	bl	800028c <__adddf3>
 8008770:	4605      	mov	r5, r0
 8008772:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008776:	2c00      	cmp	r4, #0
 8008778:	d16a      	bne.n	8008850 <_dtoa_r+0x4e0>
 800877a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800877e:	4b61      	ldr	r3, [pc, #388]	@ (8008904 <_dtoa_r+0x594>)
 8008780:	2200      	movs	r2, #0
 8008782:	f7f7 fd81 	bl	8000288 <__aeabi_dsub>
 8008786:	4602      	mov	r2, r0
 8008788:	460b      	mov	r3, r1
 800878a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800878e:	462a      	mov	r2, r5
 8008790:	4633      	mov	r3, r6
 8008792:	f7f8 f9c1 	bl	8000b18 <__aeabi_dcmpgt>
 8008796:	2800      	cmp	r0, #0
 8008798:	f040 8298 	bne.w	8008ccc <_dtoa_r+0x95c>
 800879c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087a0:	462a      	mov	r2, r5
 80087a2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80087a6:	f7f8 f999 	bl	8000adc <__aeabi_dcmplt>
 80087aa:	bb38      	cbnz	r0, 80087fc <_dtoa_r+0x48c>
 80087ac:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80087b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80087b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f2c0 8157 	blt.w	8008a6a <_dtoa_r+0x6fa>
 80087bc:	2f0e      	cmp	r7, #14
 80087be:	f300 8154 	bgt.w	8008a6a <_dtoa_r+0x6fa>
 80087c2:	4b4b      	ldr	r3, [pc, #300]	@ (80088f0 <_dtoa_r+0x580>)
 80087c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80087c8:	ed93 7b00 	vldr	d7, [r3]
 80087cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	ed8d 7b00 	vstr	d7, [sp]
 80087d4:	f280 80e5 	bge.w	80089a2 <_dtoa_r+0x632>
 80087d8:	9b03      	ldr	r3, [sp, #12]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f300 80e1 	bgt.w	80089a2 <_dtoa_r+0x632>
 80087e0:	d10c      	bne.n	80087fc <_dtoa_r+0x48c>
 80087e2:	4b48      	ldr	r3, [pc, #288]	@ (8008904 <_dtoa_r+0x594>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	ec51 0b17 	vmov	r0, r1, d7
 80087ea:	f7f7 ff05 	bl	80005f8 <__aeabi_dmul>
 80087ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087f2:	f7f8 f987 	bl	8000b04 <__aeabi_dcmpge>
 80087f6:	2800      	cmp	r0, #0
 80087f8:	f000 8266 	beq.w	8008cc8 <_dtoa_r+0x958>
 80087fc:	2400      	movs	r4, #0
 80087fe:	4625      	mov	r5, r4
 8008800:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008802:	4656      	mov	r6, sl
 8008804:	ea6f 0803 	mvn.w	r8, r3
 8008808:	2700      	movs	r7, #0
 800880a:	4621      	mov	r1, r4
 800880c:	4648      	mov	r0, r9
 800880e:	f000 fcbf 	bl	8009190 <_Bfree>
 8008812:	2d00      	cmp	r5, #0
 8008814:	f000 80bd 	beq.w	8008992 <_dtoa_r+0x622>
 8008818:	b12f      	cbz	r7, 8008826 <_dtoa_r+0x4b6>
 800881a:	42af      	cmp	r7, r5
 800881c:	d003      	beq.n	8008826 <_dtoa_r+0x4b6>
 800881e:	4639      	mov	r1, r7
 8008820:	4648      	mov	r0, r9
 8008822:	f000 fcb5 	bl	8009190 <_Bfree>
 8008826:	4629      	mov	r1, r5
 8008828:	4648      	mov	r0, r9
 800882a:	f000 fcb1 	bl	8009190 <_Bfree>
 800882e:	e0b0      	b.n	8008992 <_dtoa_r+0x622>
 8008830:	07e2      	lsls	r2, r4, #31
 8008832:	d505      	bpl.n	8008840 <_dtoa_r+0x4d0>
 8008834:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008838:	f7f7 fede 	bl	80005f8 <__aeabi_dmul>
 800883c:	3601      	adds	r6, #1
 800883e:	2301      	movs	r3, #1
 8008840:	1064      	asrs	r4, r4, #1
 8008842:	3508      	adds	r5, #8
 8008844:	e762      	b.n	800870c <_dtoa_r+0x39c>
 8008846:	2602      	movs	r6, #2
 8008848:	e765      	b.n	8008716 <_dtoa_r+0x3a6>
 800884a:	9c03      	ldr	r4, [sp, #12]
 800884c:	46b8      	mov	r8, r7
 800884e:	e784      	b.n	800875a <_dtoa_r+0x3ea>
 8008850:	4b27      	ldr	r3, [pc, #156]	@ (80088f0 <_dtoa_r+0x580>)
 8008852:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008854:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008858:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800885c:	4454      	add	r4, sl
 800885e:	2900      	cmp	r1, #0
 8008860:	d054      	beq.n	800890c <_dtoa_r+0x59c>
 8008862:	4929      	ldr	r1, [pc, #164]	@ (8008908 <_dtoa_r+0x598>)
 8008864:	2000      	movs	r0, #0
 8008866:	f7f7 fff1 	bl	800084c <__aeabi_ddiv>
 800886a:	4633      	mov	r3, r6
 800886c:	462a      	mov	r2, r5
 800886e:	f7f7 fd0b 	bl	8000288 <__aeabi_dsub>
 8008872:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008876:	4656      	mov	r6, sl
 8008878:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800887c:	f7f8 f96c 	bl	8000b58 <__aeabi_d2iz>
 8008880:	4605      	mov	r5, r0
 8008882:	f7f7 fe4f 	bl	8000524 <__aeabi_i2d>
 8008886:	4602      	mov	r2, r0
 8008888:	460b      	mov	r3, r1
 800888a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800888e:	f7f7 fcfb 	bl	8000288 <__aeabi_dsub>
 8008892:	3530      	adds	r5, #48	@ 0x30
 8008894:	4602      	mov	r2, r0
 8008896:	460b      	mov	r3, r1
 8008898:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800889c:	f806 5b01 	strb.w	r5, [r6], #1
 80088a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80088a4:	f7f8 f91a 	bl	8000adc <__aeabi_dcmplt>
 80088a8:	2800      	cmp	r0, #0
 80088aa:	d172      	bne.n	8008992 <_dtoa_r+0x622>
 80088ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088b0:	4911      	ldr	r1, [pc, #68]	@ (80088f8 <_dtoa_r+0x588>)
 80088b2:	2000      	movs	r0, #0
 80088b4:	f7f7 fce8 	bl	8000288 <__aeabi_dsub>
 80088b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80088bc:	f7f8 f90e 	bl	8000adc <__aeabi_dcmplt>
 80088c0:	2800      	cmp	r0, #0
 80088c2:	f040 80b4 	bne.w	8008a2e <_dtoa_r+0x6be>
 80088c6:	42a6      	cmp	r6, r4
 80088c8:	f43f af70 	beq.w	80087ac <_dtoa_r+0x43c>
 80088cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80088d0:	4b0a      	ldr	r3, [pc, #40]	@ (80088fc <_dtoa_r+0x58c>)
 80088d2:	2200      	movs	r2, #0
 80088d4:	f7f7 fe90 	bl	80005f8 <__aeabi_dmul>
 80088d8:	4b08      	ldr	r3, [pc, #32]	@ (80088fc <_dtoa_r+0x58c>)
 80088da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80088de:	2200      	movs	r2, #0
 80088e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088e4:	f7f7 fe88 	bl	80005f8 <__aeabi_dmul>
 80088e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088ec:	e7c4      	b.n	8008878 <_dtoa_r+0x508>
 80088ee:	bf00      	nop
 80088f0:	0800b180 	.word	0x0800b180
 80088f4:	0800b158 	.word	0x0800b158
 80088f8:	3ff00000 	.word	0x3ff00000
 80088fc:	40240000 	.word	0x40240000
 8008900:	401c0000 	.word	0x401c0000
 8008904:	40140000 	.word	0x40140000
 8008908:	3fe00000 	.word	0x3fe00000
 800890c:	4631      	mov	r1, r6
 800890e:	4628      	mov	r0, r5
 8008910:	f7f7 fe72 	bl	80005f8 <__aeabi_dmul>
 8008914:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008918:	9413      	str	r4, [sp, #76]	@ 0x4c
 800891a:	4656      	mov	r6, sl
 800891c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008920:	f7f8 f91a 	bl	8000b58 <__aeabi_d2iz>
 8008924:	4605      	mov	r5, r0
 8008926:	f7f7 fdfd 	bl	8000524 <__aeabi_i2d>
 800892a:	4602      	mov	r2, r0
 800892c:	460b      	mov	r3, r1
 800892e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008932:	f7f7 fca9 	bl	8000288 <__aeabi_dsub>
 8008936:	3530      	adds	r5, #48	@ 0x30
 8008938:	f806 5b01 	strb.w	r5, [r6], #1
 800893c:	4602      	mov	r2, r0
 800893e:	460b      	mov	r3, r1
 8008940:	42a6      	cmp	r6, r4
 8008942:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008946:	f04f 0200 	mov.w	r2, #0
 800894a:	d124      	bne.n	8008996 <_dtoa_r+0x626>
 800894c:	4baf      	ldr	r3, [pc, #700]	@ (8008c0c <_dtoa_r+0x89c>)
 800894e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008952:	f7f7 fc9b 	bl	800028c <__adddf3>
 8008956:	4602      	mov	r2, r0
 8008958:	460b      	mov	r3, r1
 800895a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800895e:	f7f8 f8db 	bl	8000b18 <__aeabi_dcmpgt>
 8008962:	2800      	cmp	r0, #0
 8008964:	d163      	bne.n	8008a2e <_dtoa_r+0x6be>
 8008966:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800896a:	49a8      	ldr	r1, [pc, #672]	@ (8008c0c <_dtoa_r+0x89c>)
 800896c:	2000      	movs	r0, #0
 800896e:	f7f7 fc8b 	bl	8000288 <__aeabi_dsub>
 8008972:	4602      	mov	r2, r0
 8008974:	460b      	mov	r3, r1
 8008976:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800897a:	f7f8 f8af 	bl	8000adc <__aeabi_dcmplt>
 800897e:	2800      	cmp	r0, #0
 8008980:	f43f af14 	beq.w	80087ac <_dtoa_r+0x43c>
 8008984:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008986:	1e73      	subs	r3, r6, #1
 8008988:	9313      	str	r3, [sp, #76]	@ 0x4c
 800898a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800898e:	2b30      	cmp	r3, #48	@ 0x30
 8008990:	d0f8      	beq.n	8008984 <_dtoa_r+0x614>
 8008992:	4647      	mov	r7, r8
 8008994:	e03b      	b.n	8008a0e <_dtoa_r+0x69e>
 8008996:	4b9e      	ldr	r3, [pc, #632]	@ (8008c10 <_dtoa_r+0x8a0>)
 8008998:	f7f7 fe2e 	bl	80005f8 <__aeabi_dmul>
 800899c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089a0:	e7bc      	b.n	800891c <_dtoa_r+0x5ac>
 80089a2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80089a6:	4656      	mov	r6, sl
 80089a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089ac:	4620      	mov	r0, r4
 80089ae:	4629      	mov	r1, r5
 80089b0:	f7f7 ff4c 	bl	800084c <__aeabi_ddiv>
 80089b4:	f7f8 f8d0 	bl	8000b58 <__aeabi_d2iz>
 80089b8:	4680      	mov	r8, r0
 80089ba:	f7f7 fdb3 	bl	8000524 <__aeabi_i2d>
 80089be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089c2:	f7f7 fe19 	bl	80005f8 <__aeabi_dmul>
 80089c6:	4602      	mov	r2, r0
 80089c8:	460b      	mov	r3, r1
 80089ca:	4620      	mov	r0, r4
 80089cc:	4629      	mov	r1, r5
 80089ce:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80089d2:	f7f7 fc59 	bl	8000288 <__aeabi_dsub>
 80089d6:	f806 4b01 	strb.w	r4, [r6], #1
 80089da:	9d03      	ldr	r5, [sp, #12]
 80089dc:	eba6 040a 	sub.w	r4, r6, sl
 80089e0:	42a5      	cmp	r5, r4
 80089e2:	4602      	mov	r2, r0
 80089e4:	460b      	mov	r3, r1
 80089e6:	d133      	bne.n	8008a50 <_dtoa_r+0x6e0>
 80089e8:	f7f7 fc50 	bl	800028c <__adddf3>
 80089ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089f0:	4604      	mov	r4, r0
 80089f2:	460d      	mov	r5, r1
 80089f4:	f7f8 f890 	bl	8000b18 <__aeabi_dcmpgt>
 80089f8:	b9c0      	cbnz	r0, 8008a2c <_dtoa_r+0x6bc>
 80089fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089fe:	4620      	mov	r0, r4
 8008a00:	4629      	mov	r1, r5
 8008a02:	f7f8 f861 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a06:	b110      	cbz	r0, 8008a0e <_dtoa_r+0x69e>
 8008a08:	f018 0f01 	tst.w	r8, #1
 8008a0c:	d10e      	bne.n	8008a2c <_dtoa_r+0x6bc>
 8008a0e:	9902      	ldr	r1, [sp, #8]
 8008a10:	4648      	mov	r0, r9
 8008a12:	f000 fbbd 	bl	8009190 <_Bfree>
 8008a16:	2300      	movs	r3, #0
 8008a18:	7033      	strb	r3, [r6, #0]
 8008a1a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008a1c:	3701      	adds	r7, #1
 8008a1e:	601f      	str	r7, [r3, #0]
 8008a20:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f000 824b 	beq.w	8008ebe <_dtoa_r+0xb4e>
 8008a28:	601e      	str	r6, [r3, #0]
 8008a2a:	e248      	b.n	8008ebe <_dtoa_r+0xb4e>
 8008a2c:	46b8      	mov	r8, r7
 8008a2e:	4633      	mov	r3, r6
 8008a30:	461e      	mov	r6, r3
 8008a32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a36:	2a39      	cmp	r2, #57	@ 0x39
 8008a38:	d106      	bne.n	8008a48 <_dtoa_r+0x6d8>
 8008a3a:	459a      	cmp	sl, r3
 8008a3c:	d1f8      	bne.n	8008a30 <_dtoa_r+0x6c0>
 8008a3e:	2230      	movs	r2, #48	@ 0x30
 8008a40:	f108 0801 	add.w	r8, r8, #1
 8008a44:	f88a 2000 	strb.w	r2, [sl]
 8008a48:	781a      	ldrb	r2, [r3, #0]
 8008a4a:	3201      	adds	r2, #1
 8008a4c:	701a      	strb	r2, [r3, #0]
 8008a4e:	e7a0      	b.n	8008992 <_dtoa_r+0x622>
 8008a50:	4b6f      	ldr	r3, [pc, #444]	@ (8008c10 <_dtoa_r+0x8a0>)
 8008a52:	2200      	movs	r2, #0
 8008a54:	f7f7 fdd0 	bl	80005f8 <__aeabi_dmul>
 8008a58:	2200      	movs	r2, #0
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	4604      	mov	r4, r0
 8008a5e:	460d      	mov	r5, r1
 8008a60:	f7f8 f832 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a64:	2800      	cmp	r0, #0
 8008a66:	d09f      	beq.n	80089a8 <_dtoa_r+0x638>
 8008a68:	e7d1      	b.n	8008a0e <_dtoa_r+0x69e>
 8008a6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a6c:	2a00      	cmp	r2, #0
 8008a6e:	f000 80ea 	beq.w	8008c46 <_dtoa_r+0x8d6>
 8008a72:	9a07      	ldr	r2, [sp, #28]
 8008a74:	2a01      	cmp	r2, #1
 8008a76:	f300 80cd 	bgt.w	8008c14 <_dtoa_r+0x8a4>
 8008a7a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008a7c:	2a00      	cmp	r2, #0
 8008a7e:	f000 80c1 	beq.w	8008c04 <_dtoa_r+0x894>
 8008a82:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008a86:	9c08      	ldr	r4, [sp, #32]
 8008a88:	9e00      	ldr	r6, [sp, #0]
 8008a8a:	9a00      	ldr	r2, [sp, #0]
 8008a8c:	441a      	add	r2, r3
 8008a8e:	9200      	str	r2, [sp, #0]
 8008a90:	9a06      	ldr	r2, [sp, #24]
 8008a92:	2101      	movs	r1, #1
 8008a94:	441a      	add	r2, r3
 8008a96:	4648      	mov	r0, r9
 8008a98:	9206      	str	r2, [sp, #24]
 8008a9a:	f000 fc2d 	bl	80092f8 <__i2b>
 8008a9e:	4605      	mov	r5, r0
 8008aa0:	b166      	cbz	r6, 8008abc <_dtoa_r+0x74c>
 8008aa2:	9b06      	ldr	r3, [sp, #24]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	dd09      	ble.n	8008abc <_dtoa_r+0x74c>
 8008aa8:	42b3      	cmp	r3, r6
 8008aaa:	9a00      	ldr	r2, [sp, #0]
 8008aac:	bfa8      	it	ge
 8008aae:	4633      	movge	r3, r6
 8008ab0:	1ad2      	subs	r2, r2, r3
 8008ab2:	9200      	str	r2, [sp, #0]
 8008ab4:	9a06      	ldr	r2, [sp, #24]
 8008ab6:	1af6      	subs	r6, r6, r3
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	9306      	str	r3, [sp, #24]
 8008abc:	9b08      	ldr	r3, [sp, #32]
 8008abe:	b30b      	cbz	r3, 8008b04 <_dtoa_r+0x794>
 8008ac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f000 80c6 	beq.w	8008c54 <_dtoa_r+0x8e4>
 8008ac8:	2c00      	cmp	r4, #0
 8008aca:	f000 80c0 	beq.w	8008c4e <_dtoa_r+0x8de>
 8008ace:	4629      	mov	r1, r5
 8008ad0:	4622      	mov	r2, r4
 8008ad2:	4648      	mov	r0, r9
 8008ad4:	f000 fcc8 	bl	8009468 <__pow5mult>
 8008ad8:	9a02      	ldr	r2, [sp, #8]
 8008ada:	4601      	mov	r1, r0
 8008adc:	4605      	mov	r5, r0
 8008ade:	4648      	mov	r0, r9
 8008ae0:	f000 fc20 	bl	8009324 <__multiply>
 8008ae4:	9902      	ldr	r1, [sp, #8]
 8008ae6:	4680      	mov	r8, r0
 8008ae8:	4648      	mov	r0, r9
 8008aea:	f000 fb51 	bl	8009190 <_Bfree>
 8008aee:	9b08      	ldr	r3, [sp, #32]
 8008af0:	1b1b      	subs	r3, r3, r4
 8008af2:	9308      	str	r3, [sp, #32]
 8008af4:	f000 80b1 	beq.w	8008c5a <_dtoa_r+0x8ea>
 8008af8:	9a08      	ldr	r2, [sp, #32]
 8008afa:	4641      	mov	r1, r8
 8008afc:	4648      	mov	r0, r9
 8008afe:	f000 fcb3 	bl	8009468 <__pow5mult>
 8008b02:	9002      	str	r0, [sp, #8]
 8008b04:	2101      	movs	r1, #1
 8008b06:	4648      	mov	r0, r9
 8008b08:	f000 fbf6 	bl	80092f8 <__i2b>
 8008b0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b0e:	4604      	mov	r4, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f000 81d8 	beq.w	8008ec6 <_dtoa_r+0xb56>
 8008b16:	461a      	mov	r2, r3
 8008b18:	4601      	mov	r1, r0
 8008b1a:	4648      	mov	r0, r9
 8008b1c:	f000 fca4 	bl	8009468 <__pow5mult>
 8008b20:	9b07      	ldr	r3, [sp, #28]
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	4604      	mov	r4, r0
 8008b26:	f300 809f 	bgt.w	8008c68 <_dtoa_r+0x8f8>
 8008b2a:	9b04      	ldr	r3, [sp, #16]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f040 8097 	bne.w	8008c60 <_dtoa_r+0x8f0>
 8008b32:	9b05      	ldr	r3, [sp, #20]
 8008b34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f040 8093 	bne.w	8008c64 <_dtoa_r+0x8f4>
 8008b3e:	9b05      	ldr	r3, [sp, #20]
 8008b40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b44:	0d1b      	lsrs	r3, r3, #20
 8008b46:	051b      	lsls	r3, r3, #20
 8008b48:	b133      	cbz	r3, 8008b58 <_dtoa_r+0x7e8>
 8008b4a:	9b00      	ldr	r3, [sp, #0]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	9b06      	ldr	r3, [sp, #24]
 8008b52:	3301      	adds	r3, #1
 8008b54:	9306      	str	r3, [sp, #24]
 8008b56:	2301      	movs	r3, #1
 8008b58:	9308      	str	r3, [sp, #32]
 8008b5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f000 81b8 	beq.w	8008ed2 <_dtoa_r+0xb62>
 8008b62:	6923      	ldr	r3, [r4, #16]
 8008b64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b68:	6918      	ldr	r0, [r3, #16]
 8008b6a:	f000 fb79 	bl	8009260 <__hi0bits>
 8008b6e:	f1c0 0020 	rsb	r0, r0, #32
 8008b72:	9b06      	ldr	r3, [sp, #24]
 8008b74:	4418      	add	r0, r3
 8008b76:	f010 001f 	ands.w	r0, r0, #31
 8008b7a:	f000 8082 	beq.w	8008c82 <_dtoa_r+0x912>
 8008b7e:	f1c0 0320 	rsb	r3, r0, #32
 8008b82:	2b04      	cmp	r3, #4
 8008b84:	dd73      	ble.n	8008c6e <_dtoa_r+0x8fe>
 8008b86:	9b00      	ldr	r3, [sp, #0]
 8008b88:	f1c0 001c 	rsb	r0, r0, #28
 8008b8c:	4403      	add	r3, r0
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	9b06      	ldr	r3, [sp, #24]
 8008b92:	4403      	add	r3, r0
 8008b94:	4406      	add	r6, r0
 8008b96:	9306      	str	r3, [sp, #24]
 8008b98:	9b00      	ldr	r3, [sp, #0]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	dd05      	ble.n	8008baa <_dtoa_r+0x83a>
 8008b9e:	9902      	ldr	r1, [sp, #8]
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	4648      	mov	r0, r9
 8008ba4:	f000 fcba 	bl	800951c <__lshift>
 8008ba8:	9002      	str	r0, [sp, #8]
 8008baa:	9b06      	ldr	r3, [sp, #24]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	dd05      	ble.n	8008bbc <_dtoa_r+0x84c>
 8008bb0:	4621      	mov	r1, r4
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	4648      	mov	r0, r9
 8008bb6:	f000 fcb1 	bl	800951c <__lshift>
 8008bba:	4604      	mov	r4, r0
 8008bbc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d061      	beq.n	8008c86 <_dtoa_r+0x916>
 8008bc2:	9802      	ldr	r0, [sp, #8]
 8008bc4:	4621      	mov	r1, r4
 8008bc6:	f000 fd15 	bl	80095f4 <__mcmp>
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	da5b      	bge.n	8008c86 <_dtoa_r+0x916>
 8008bce:	2300      	movs	r3, #0
 8008bd0:	9902      	ldr	r1, [sp, #8]
 8008bd2:	220a      	movs	r2, #10
 8008bd4:	4648      	mov	r0, r9
 8008bd6:	f000 fafd 	bl	80091d4 <__multadd>
 8008bda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bdc:	9002      	str	r0, [sp, #8]
 8008bde:	f107 38ff 	add.w	r8, r7, #4294967295
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f000 8177 	beq.w	8008ed6 <_dtoa_r+0xb66>
 8008be8:	4629      	mov	r1, r5
 8008bea:	2300      	movs	r3, #0
 8008bec:	220a      	movs	r2, #10
 8008bee:	4648      	mov	r0, r9
 8008bf0:	f000 faf0 	bl	80091d4 <__multadd>
 8008bf4:	f1bb 0f00 	cmp.w	fp, #0
 8008bf8:	4605      	mov	r5, r0
 8008bfa:	dc6f      	bgt.n	8008cdc <_dtoa_r+0x96c>
 8008bfc:	9b07      	ldr	r3, [sp, #28]
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	dc49      	bgt.n	8008c96 <_dtoa_r+0x926>
 8008c02:	e06b      	b.n	8008cdc <_dtoa_r+0x96c>
 8008c04:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008c06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008c0a:	e73c      	b.n	8008a86 <_dtoa_r+0x716>
 8008c0c:	3fe00000 	.word	0x3fe00000
 8008c10:	40240000 	.word	0x40240000
 8008c14:	9b03      	ldr	r3, [sp, #12]
 8008c16:	1e5c      	subs	r4, r3, #1
 8008c18:	9b08      	ldr	r3, [sp, #32]
 8008c1a:	42a3      	cmp	r3, r4
 8008c1c:	db09      	blt.n	8008c32 <_dtoa_r+0x8c2>
 8008c1e:	1b1c      	subs	r4, r3, r4
 8008c20:	9b03      	ldr	r3, [sp, #12]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f6bf af30 	bge.w	8008a88 <_dtoa_r+0x718>
 8008c28:	9b00      	ldr	r3, [sp, #0]
 8008c2a:	9a03      	ldr	r2, [sp, #12]
 8008c2c:	1a9e      	subs	r6, r3, r2
 8008c2e:	2300      	movs	r3, #0
 8008c30:	e72b      	b.n	8008a8a <_dtoa_r+0x71a>
 8008c32:	9b08      	ldr	r3, [sp, #32]
 8008c34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008c36:	9408      	str	r4, [sp, #32]
 8008c38:	1ae3      	subs	r3, r4, r3
 8008c3a:	441a      	add	r2, r3
 8008c3c:	9e00      	ldr	r6, [sp, #0]
 8008c3e:	9b03      	ldr	r3, [sp, #12]
 8008c40:	920d      	str	r2, [sp, #52]	@ 0x34
 8008c42:	2400      	movs	r4, #0
 8008c44:	e721      	b.n	8008a8a <_dtoa_r+0x71a>
 8008c46:	9c08      	ldr	r4, [sp, #32]
 8008c48:	9e00      	ldr	r6, [sp, #0]
 8008c4a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008c4c:	e728      	b.n	8008aa0 <_dtoa_r+0x730>
 8008c4e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008c52:	e751      	b.n	8008af8 <_dtoa_r+0x788>
 8008c54:	9a08      	ldr	r2, [sp, #32]
 8008c56:	9902      	ldr	r1, [sp, #8]
 8008c58:	e750      	b.n	8008afc <_dtoa_r+0x78c>
 8008c5a:	f8cd 8008 	str.w	r8, [sp, #8]
 8008c5e:	e751      	b.n	8008b04 <_dtoa_r+0x794>
 8008c60:	2300      	movs	r3, #0
 8008c62:	e779      	b.n	8008b58 <_dtoa_r+0x7e8>
 8008c64:	9b04      	ldr	r3, [sp, #16]
 8008c66:	e777      	b.n	8008b58 <_dtoa_r+0x7e8>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	9308      	str	r3, [sp, #32]
 8008c6c:	e779      	b.n	8008b62 <_dtoa_r+0x7f2>
 8008c6e:	d093      	beq.n	8008b98 <_dtoa_r+0x828>
 8008c70:	9a00      	ldr	r2, [sp, #0]
 8008c72:	331c      	adds	r3, #28
 8008c74:	441a      	add	r2, r3
 8008c76:	9200      	str	r2, [sp, #0]
 8008c78:	9a06      	ldr	r2, [sp, #24]
 8008c7a:	441a      	add	r2, r3
 8008c7c:	441e      	add	r6, r3
 8008c7e:	9206      	str	r2, [sp, #24]
 8008c80:	e78a      	b.n	8008b98 <_dtoa_r+0x828>
 8008c82:	4603      	mov	r3, r0
 8008c84:	e7f4      	b.n	8008c70 <_dtoa_r+0x900>
 8008c86:	9b03      	ldr	r3, [sp, #12]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	46b8      	mov	r8, r7
 8008c8c:	dc20      	bgt.n	8008cd0 <_dtoa_r+0x960>
 8008c8e:	469b      	mov	fp, r3
 8008c90:	9b07      	ldr	r3, [sp, #28]
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	dd1e      	ble.n	8008cd4 <_dtoa_r+0x964>
 8008c96:	f1bb 0f00 	cmp.w	fp, #0
 8008c9a:	f47f adb1 	bne.w	8008800 <_dtoa_r+0x490>
 8008c9e:	4621      	mov	r1, r4
 8008ca0:	465b      	mov	r3, fp
 8008ca2:	2205      	movs	r2, #5
 8008ca4:	4648      	mov	r0, r9
 8008ca6:	f000 fa95 	bl	80091d4 <__multadd>
 8008caa:	4601      	mov	r1, r0
 8008cac:	4604      	mov	r4, r0
 8008cae:	9802      	ldr	r0, [sp, #8]
 8008cb0:	f000 fca0 	bl	80095f4 <__mcmp>
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	f77f ada3 	ble.w	8008800 <_dtoa_r+0x490>
 8008cba:	4656      	mov	r6, sl
 8008cbc:	2331      	movs	r3, #49	@ 0x31
 8008cbe:	f806 3b01 	strb.w	r3, [r6], #1
 8008cc2:	f108 0801 	add.w	r8, r8, #1
 8008cc6:	e59f      	b.n	8008808 <_dtoa_r+0x498>
 8008cc8:	9c03      	ldr	r4, [sp, #12]
 8008cca:	46b8      	mov	r8, r7
 8008ccc:	4625      	mov	r5, r4
 8008cce:	e7f4      	b.n	8008cba <_dtoa_r+0x94a>
 8008cd0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008cd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f000 8101 	beq.w	8008ede <_dtoa_r+0xb6e>
 8008cdc:	2e00      	cmp	r6, #0
 8008cde:	dd05      	ble.n	8008cec <_dtoa_r+0x97c>
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	4632      	mov	r2, r6
 8008ce4:	4648      	mov	r0, r9
 8008ce6:	f000 fc19 	bl	800951c <__lshift>
 8008cea:	4605      	mov	r5, r0
 8008cec:	9b08      	ldr	r3, [sp, #32]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d05c      	beq.n	8008dac <_dtoa_r+0xa3c>
 8008cf2:	6869      	ldr	r1, [r5, #4]
 8008cf4:	4648      	mov	r0, r9
 8008cf6:	f000 fa0b 	bl	8009110 <_Balloc>
 8008cfa:	4606      	mov	r6, r0
 8008cfc:	b928      	cbnz	r0, 8008d0a <_dtoa_r+0x99a>
 8008cfe:	4b82      	ldr	r3, [pc, #520]	@ (8008f08 <_dtoa_r+0xb98>)
 8008d00:	4602      	mov	r2, r0
 8008d02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008d06:	f7ff bb4a 	b.w	800839e <_dtoa_r+0x2e>
 8008d0a:	692a      	ldr	r2, [r5, #16]
 8008d0c:	3202      	adds	r2, #2
 8008d0e:	0092      	lsls	r2, r2, #2
 8008d10:	f105 010c 	add.w	r1, r5, #12
 8008d14:	300c      	adds	r0, #12
 8008d16:	f000 ffa3 	bl	8009c60 <memcpy>
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	4631      	mov	r1, r6
 8008d1e:	4648      	mov	r0, r9
 8008d20:	f000 fbfc 	bl	800951c <__lshift>
 8008d24:	f10a 0301 	add.w	r3, sl, #1
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	eb0a 030b 	add.w	r3, sl, fp
 8008d2e:	9308      	str	r3, [sp, #32]
 8008d30:	9b04      	ldr	r3, [sp, #16]
 8008d32:	f003 0301 	and.w	r3, r3, #1
 8008d36:	462f      	mov	r7, r5
 8008d38:	9306      	str	r3, [sp, #24]
 8008d3a:	4605      	mov	r5, r0
 8008d3c:	9b00      	ldr	r3, [sp, #0]
 8008d3e:	9802      	ldr	r0, [sp, #8]
 8008d40:	4621      	mov	r1, r4
 8008d42:	f103 3bff 	add.w	fp, r3, #4294967295
 8008d46:	f7ff fa88 	bl	800825a <quorem>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	3330      	adds	r3, #48	@ 0x30
 8008d4e:	9003      	str	r0, [sp, #12]
 8008d50:	4639      	mov	r1, r7
 8008d52:	9802      	ldr	r0, [sp, #8]
 8008d54:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d56:	f000 fc4d 	bl	80095f4 <__mcmp>
 8008d5a:	462a      	mov	r2, r5
 8008d5c:	9004      	str	r0, [sp, #16]
 8008d5e:	4621      	mov	r1, r4
 8008d60:	4648      	mov	r0, r9
 8008d62:	f000 fc63 	bl	800962c <__mdiff>
 8008d66:	68c2      	ldr	r2, [r0, #12]
 8008d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d6a:	4606      	mov	r6, r0
 8008d6c:	bb02      	cbnz	r2, 8008db0 <_dtoa_r+0xa40>
 8008d6e:	4601      	mov	r1, r0
 8008d70:	9802      	ldr	r0, [sp, #8]
 8008d72:	f000 fc3f 	bl	80095f4 <__mcmp>
 8008d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d78:	4602      	mov	r2, r0
 8008d7a:	4631      	mov	r1, r6
 8008d7c:	4648      	mov	r0, r9
 8008d7e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008d80:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d82:	f000 fa05 	bl	8009190 <_Bfree>
 8008d86:	9b07      	ldr	r3, [sp, #28]
 8008d88:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008d8a:	9e00      	ldr	r6, [sp, #0]
 8008d8c:	ea42 0103 	orr.w	r1, r2, r3
 8008d90:	9b06      	ldr	r3, [sp, #24]
 8008d92:	4319      	orrs	r1, r3
 8008d94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d96:	d10d      	bne.n	8008db4 <_dtoa_r+0xa44>
 8008d98:	2b39      	cmp	r3, #57	@ 0x39
 8008d9a:	d027      	beq.n	8008dec <_dtoa_r+0xa7c>
 8008d9c:	9a04      	ldr	r2, [sp, #16]
 8008d9e:	2a00      	cmp	r2, #0
 8008da0:	dd01      	ble.n	8008da6 <_dtoa_r+0xa36>
 8008da2:	9b03      	ldr	r3, [sp, #12]
 8008da4:	3331      	adds	r3, #49	@ 0x31
 8008da6:	f88b 3000 	strb.w	r3, [fp]
 8008daa:	e52e      	b.n	800880a <_dtoa_r+0x49a>
 8008dac:	4628      	mov	r0, r5
 8008dae:	e7b9      	b.n	8008d24 <_dtoa_r+0x9b4>
 8008db0:	2201      	movs	r2, #1
 8008db2:	e7e2      	b.n	8008d7a <_dtoa_r+0xa0a>
 8008db4:	9904      	ldr	r1, [sp, #16]
 8008db6:	2900      	cmp	r1, #0
 8008db8:	db04      	blt.n	8008dc4 <_dtoa_r+0xa54>
 8008dba:	9807      	ldr	r0, [sp, #28]
 8008dbc:	4301      	orrs	r1, r0
 8008dbe:	9806      	ldr	r0, [sp, #24]
 8008dc0:	4301      	orrs	r1, r0
 8008dc2:	d120      	bne.n	8008e06 <_dtoa_r+0xa96>
 8008dc4:	2a00      	cmp	r2, #0
 8008dc6:	ddee      	ble.n	8008da6 <_dtoa_r+0xa36>
 8008dc8:	9902      	ldr	r1, [sp, #8]
 8008dca:	9300      	str	r3, [sp, #0]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	4648      	mov	r0, r9
 8008dd0:	f000 fba4 	bl	800951c <__lshift>
 8008dd4:	4621      	mov	r1, r4
 8008dd6:	9002      	str	r0, [sp, #8]
 8008dd8:	f000 fc0c 	bl	80095f4 <__mcmp>
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	9b00      	ldr	r3, [sp, #0]
 8008de0:	dc02      	bgt.n	8008de8 <_dtoa_r+0xa78>
 8008de2:	d1e0      	bne.n	8008da6 <_dtoa_r+0xa36>
 8008de4:	07da      	lsls	r2, r3, #31
 8008de6:	d5de      	bpl.n	8008da6 <_dtoa_r+0xa36>
 8008de8:	2b39      	cmp	r3, #57	@ 0x39
 8008dea:	d1da      	bne.n	8008da2 <_dtoa_r+0xa32>
 8008dec:	2339      	movs	r3, #57	@ 0x39
 8008dee:	f88b 3000 	strb.w	r3, [fp]
 8008df2:	4633      	mov	r3, r6
 8008df4:	461e      	mov	r6, r3
 8008df6:	3b01      	subs	r3, #1
 8008df8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008dfc:	2a39      	cmp	r2, #57	@ 0x39
 8008dfe:	d04e      	beq.n	8008e9e <_dtoa_r+0xb2e>
 8008e00:	3201      	adds	r2, #1
 8008e02:	701a      	strb	r2, [r3, #0]
 8008e04:	e501      	b.n	800880a <_dtoa_r+0x49a>
 8008e06:	2a00      	cmp	r2, #0
 8008e08:	dd03      	ble.n	8008e12 <_dtoa_r+0xaa2>
 8008e0a:	2b39      	cmp	r3, #57	@ 0x39
 8008e0c:	d0ee      	beq.n	8008dec <_dtoa_r+0xa7c>
 8008e0e:	3301      	adds	r3, #1
 8008e10:	e7c9      	b.n	8008da6 <_dtoa_r+0xa36>
 8008e12:	9a00      	ldr	r2, [sp, #0]
 8008e14:	9908      	ldr	r1, [sp, #32]
 8008e16:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008e1a:	428a      	cmp	r2, r1
 8008e1c:	d028      	beq.n	8008e70 <_dtoa_r+0xb00>
 8008e1e:	9902      	ldr	r1, [sp, #8]
 8008e20:	2300      	movs	r3, #0
 8008e22:	220a      	movs	r2, #10
 8008e24:	4648      	mov	r0, r9
 8008e26:	f000 f9d5 	bl	80091d4 <__multadd>
 8008e2a:	42af      	cmp	r7, r5
 8008e2c:	9002      	str	r0, [sp, #8]
 8008e2e:	f04f 0300 	mov.w	r3, #0
 8008e32:	f04f 020a 	mov.w	r2, #10
 8008e36:	4639      	mov	r1, r7
 8008e38:	4648      	mov	r0, r9
 8008e3a:	d107      	bne.n	8008e4c <_dtoa_r+0xadc>
 8008e3c:	f000 f9ca 	bl	80091d4 <__multadd>
 8008e40:	4607      	mov	r7, r0
 8008e42:	4605      	mov	r5, r0
 8008e44:	9b00      	ldr	r3, [sp, #0]
 8008e46:	3301      	adds	r3, #1
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	e777      	b.n	8008d3c <_dtoa_r+0x9cc>
 8008e4c:	f000 f9c2 	bl	80091d4 <__multadd>
 8008e50:	4629      	mov	r1, r5
 8008e52:	4607      	mov	r7, r0
 8008e54:	2300      	movs	r3, #0
 8008e56:	220a      	movs	r2, #10
 8008e58:	4648      	mov	r0, r9
 8008e5a:	f000 f9bb 	bl	80091d4 <__multadd>
 8008e5e:	4605      	mov	r5, r0
 8008e60:	e7f0      	b.n	8008e44 <_dtoa_r+0xad4>
 8008e62:	f1bb 0f00 	cmp.w	fp, #0
 8008e66:	bfcc      	ite	gt
 8008e68:	465e      	movgt	r6, fp
 8008e6a:	2601      	movle	r6, #1
 8008e6c:	4456      	add	r6, sl
 8008e6e:	2700      	movs	r7, #0
 8008e70:	9902      	ldr	r1, [sp, #8]
 8008e72:	9300      	str	r3, [sp, #0]
 8008e74:	2201      	movs	r2, #1
 8008e76:	4648      	mov	r0, r9
 8008e78:	f000 fb50 	bl	800951c <__lshift>
 8008e7c:	4621      	mov	r1, r4
 8008e7e:	9002      	str	r0, [sp, #8]
 8008e80:	f000 fbb8 	bl	80095f4 <__mcmp>
 8008e84:	2800      	cmp	r0, #0
 8008e86:	dcb4      	bgt.n	8008df2 <_dtoa_r+0xa82>
 8008e88:	d102      	bne.n	8008e90 <_dtoa_r+0xb20>
 8008e8a:	9b00      	ldr	r3, [sp, #0]
 8008e8c:	07db      	lsls	r3, r3, #31
 8008e8e:	d4b0      	bmi.n	8008df2 <_dtoa_r+0xa82>
 8008e90:	4633      	mov	r3, r6
 8008e92:	461e      	mov	r6, r3
 8008e94:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e98:	2a30      	cmp	r2, #48	@ 0x30
 8008e9a:	d0fa      	beq.n	8008e92 <_dtoa_r+0xb22>
 8008e9c:	e4b5      	b.n	800880a <_dtoa_r+0x49a>
 8008e9e:	459a      	cmp	sl, r3
 8008ea0:	d1a8      	bne.n	8008df4 <_dtoa_r+0xa84>
 8008ea2:	2331      	movs	r3, #49	@ 0x31
 8008ea4:	f108 0801 	add.w	r8, r8, #1
 8008ea8:	f88a 3000 	strb.w	r3, [sl]
 8008eac:	e4ad      	b.n	800880a <_dtoa_r+0x49a>
 8008eae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008eb0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008f0c <_dtoa_r+0xb9c>
 8008eb4:	b11b      	cbz	r3, 8008ebe <_dtoa_r+0xb4e>
 8008eb6:	f10a 0308 	add.w	r3, sl, #8
 8008eba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008ebc:	6013      	str	r3, [r2, #0]
 8008ebe:	4650      	mov	r0, sl
 8008ec0:	b017      	add	sp, #92	@ 0x5c
 8008ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec6:	9b07      	ldr	r3, [sp, #28]
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	f77f ae2e 	ble.w	8008b2a <_dtoa_r+0x7ba>
 8008ece:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ed0:	9308      	str	r3, [sp, #32]
 8008ed2:	2001      	movs	r0, #1
 8008ed4:	e64d      	b.n	8008b72 <_dtoa_r+0x802>
 8008ed6:	f1bb 0f00 	cmp.w	fp, #0
 8008eda:	f77f aed9 	ble.w	8008c90 <_dtoa_r+0x920>
 8008ede:	4656      	mov	r6, sl
 8008ee0:	9802      	ldr	r0, [sp, #8]
 8008ee2:	4621      	mov	r1, r4
 8008ee4:	f7ff f9b9 	bl	800825a <quorem>
 8008ee8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008eec:	f806 3b01 	strb.w	r3, [r6], #1
 8008ef0:	eba6 020a 	sub.w	r2, r6, sl
 8008ef4:	4593      	cmp	fp, r2
 8008ef6:	ddb4      	ble.n	8008e62 <_dtoa_r+0xaf2>
 8008ef8:	9902      	ldr	r1, [sp, #8]
 8008efa:	2300      	movs	r3, #0
 8008efc:	220a      	movs	r2, #10
 8008efe:	4648      	mov	r0, r9
 8008f00:	f000 f968 	bl	80091d4 <__multadd>
 8008f04:	9002      	str	r0, [sp, #8]
 8008f06:	e7eb      	b.n	8008ee0 <_dtoa_r+0xb70>
 8008f08:	0800b084 	.word	0x0800b084
 8008f0c:	0800b008 	.word	0x0800b008

08008f10 <_free_r>:
 8008f10:	b538      	push	{r3, r4, r5, lr}
 8008f12:	4605      	mov	r5, r0
 8008f14:	2900      	cmp	r1, #0
 8008f16:	d041      	beq.n	8008f9c <_free_r+0x8c>
 8008f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f1c:	1f0c      	subs	r4, r1, #4
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	bfb8      	it	lt
 8008f22:	18e4      	addlt	r4, r4, r3
 8008f24:	f000 f8e8 	bl	80090f8 <__malloc_lock>
 8008f28:	4a1d      	ldr	r2, [pc, #116]	@ (8008fa0 <_free_r+0x90>)
 8008f2a:	6813      	ldr	r3, [r2, #0]
 8008f2c:	b933      	cbnz	r3, 8008f3c <_free_r+0x2c>
 8008f2e:	6063      	str	r3, [r4, #4]
 8008f30:	6014      	str	r4, [r2, #0]
 8008f32:	4628      	mov	r0, r5
 8008f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f38:	f000 b8e4 	b.w	8009104 <__malloc_unlock>
 8008f3c:	42a3      	cmp	r3, r4
 8008f3e:	d908      	bls.n	8008f52 <_free_r+0x42>
 8008f40:	6820      	ldr	r0, [r4, #0]
 8008f42:	1821      	adds	r1, r4, r0
 8008f44:	428b      	cmp	r3, r1
 8008f46:	bf01      	itttt	eq
 8008f48:	6819      	ldreq	r1, [r3, #0]
 8008f4a:	685b      	ldreq	r3, [r3, #4]
 8008f4c:	1809      	addeq	r1, r1, r0
 8008f4e:	6021      	streq	r1, [r4, #0]
 8008f50:	e7ed      	b.n	8008f2e <_free_r+0x1e>
 8008f52:	461a      	mov	r2, r3
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	b10b      	cbz	r3, 8008f5c <_free_r+0x4c>
 8008f58:	42a3      	cmp	r3, r4
 8008f5a:	d9fa      	bls.n	8008f52 <_free_r+0x42>
 8008f5c:	6811      	ldr	r1, [r2, #0]
 8008f5e:	1850      	adds	r0, r2, r1
 8008f60:	42a0      	cmp	r0, r4
 8008f62:	d10b      	bne.n	8008f7c <_free_r+0x6c>
 8008f64:	6820      	ldr	r0, [r4, #0]
 8008f66:	4401      	add	r1, r0
 8008f68:	1850      	adds	r0, r2, r1
 8008f6a:	4283      	cmp	r3, r0
 8008f6c:	6011      	str	r1, [r2, #0]
 8008f6e:	d1e0      	bne.n	8008f32 <_free_r+0x22>
 8008f70:	6818      	ldr	r0, [r3, #0]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	6053      	str	r3, [r2, #4]
 8008f76:	4408      	add	r0, r1
 8008f78:	6010      	str	r0, [r2, #0]
 8008f7a:	e7da      	b.n	8008f32 <_free_r+0x22>
 8008f7c:	d902      	bls.n	8008f84 <_free_r+0x74>
 8008f7e:	230c      	movs	r3, #12
 8008f80:	602b      	str	r3, [r5, #0]
 8008f82:	e7d6      	b.n	8008f32 <_free_r+0x22>
 8008f84:	6820      	ldr	r0, [r4, #0]
 8008f86:	1821      	adds	r1, r4, r0
 8008f88:	428b      	cmp	r3, r1
 8008f8a:	bf04      	itt	eq
 8008f8c:	6819      	ldreq	r1, [r3, #0]
 8008f8e:	685b      	ldreq	r3, [r3, #4]
 8008f90:	6063      	str	r3, [r4, #4]
 8008f92:	bf04      	itt	eq
 8008f94:	1809      	addeq	r1, r1, r0
 8008f96:	6021      	streq	r1, [r4, #0]
 8008f98:	6054      	str	r4, [r2, #4]
 8008f9a:	e7ca      	b.n	8008f32 <_free_r+0x22>
 8008f9c:	bd38      	pop	{r3, r4, r5, pc}
 8008f9e:	bf00      	nop
 8008fa0:	200005cc 	.word	0x200005cc

08008fa4 <malloc>:
 8008fa4:	4b02      	ldr	r3, [pc, #8]	@ (8008fb0 <malloc+0xc>)
 8008fa6:	4601      	mov	r1, r0
 8008fa8:	6818      	ldr	r0, [r3, #0]
 8008faa:	f000 b825 	b.w	8008ff8 <_malloc_r>
 8008fae:	bf00      	nop
 8008fb0:	20000018 	.word	0x20000018

08008fb4 <sbrk_aligned>:
 8008fb4:	b570      	push	{r4, r5, r6, lr}
 8008fb6:	4e0f      	ldr	r6, [pc, #60]	@ (8008ff4 <sbrk_aligned+0x40>)
 8008fb8:	460c      	mov	r4, r1
 8008fba:	6831      	ldr	r1, [r6, #0]
 8008fbc:	4605      	mov	r5, r0
 8008fbe:	b911      	cbnz	r1, 8008fc6 <sbrk_aligned+0x12>
 8008fc0:	f000 fe3e 	bl	8009c40 <_sbrk_r>
 8008fc4:	6030      	str	r0, [r6, #0]
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	4628      	mov	r0, r5
 8008fca:	f000 fe39 	bl	8009c40 <_sbrk_r>
 8008fce:	1c43      	adds	r3, r0, #1
 8008fd0:	d103      	bne.n	8008fda <sbrk_aligned+0x26>
 8008fd2:	f04f 34ff 	mov.w	r4, #4294967295
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	bd70      	pop	{r4, r5, r6, pc}
 8008fda:	1cc4      	adds	r4, r0, #3
 8008fdc:	f024 0403 	bic.w	r4, r4, #3
 8008fe0:	42a0      	cmp	r0, r4
 8008fe2:	d0f8      	beq.n	8008fd6 <sbrk_aligned+0x22>
 8008fe4:	1a21      	subs	r1, r4, r0
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	f000 fe2a 	bl	8009c40 <_sbrk_r>
 8008fec:	3001      	adds	r0, #1
 8008fee:	d1f2      	bne.n	8008fd6 <sbrk_aligned+0x22>
 8008ff0:	e7ef      	b.n	8008fd2 <sbrk_aligned+0x1e>
 8008ff2:	bf00      	nop
 8008ff4:	200005c8 	.word	0x200005c8

08008ff8 <_malloc_r>:
 8008ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ffc:	1ccd      	adds	r5, r1, #3
 8008ffe:	f025 0503 	bic.w	r5, r5, #3
 8009002:	3508      	adds	r5, #8
 8009004:	2d0c      	cmp	r5, #12
 8009006:	bf38      	it	cc
 8009008:	250c      	movcc	r5, #12
 800900a:	2d00      	cmp	r5, #0
 800900c:	4606      	mov	r6, r0
 800900e:	db01      	blt.n	8009014 <_malloc_r+0x1c>
 8009010:	42a9      	cmp	r1, r5
 8009012:	d904      	bls.n	800901e <_malloc_r+0x26>
 8009014:	230c      	movs	r3, #12
 8009016:	6033      	str	r3, [r6, #0]
 8009018:	2000      	movs	r0, #0
 800901a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800901e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80090f4 <_malloc_r+0xfc>
 8009022:	f000 f869 	bl	80090f8 <__malloc_lock>
 8009026:	f8d8 3000 	ldr.w	r3, [r8]
 800902a:	461c      	mov	r4, r3
 800902c:	bb44      	cbnz	r4, 8009080 <_malloc_r+0x88>
 800902e:	4629      	mov	r1, r5
 8009030:	4630      	mov	r0, r6
 8009032:	f7ff ffbf 	bl	8008fb4 <sbrk_aligned>
 8009036:	1c43      	adds	r3, r0, #1
 8009038:	4604      	mov	r4, r0
 800903a:	d158      	bne.n	80090ee <_malloc_r+0xf6>
 800903c:	f8d8 4000 	ldr.w	r4, [r8]
 8009040:	4627      	mov	r7, r4
 8009042:	2f00      	cmp	r7, #0
 8009044:	d143      	bne.n	80090ce <_malloc_r+0xd6>
 8009046:	2c00      	cmp	r4, #0
 8009048:	d04b      	beq.n	80090e2 <_malloc_r+0xea>
 800904a:	6823      	ldr	r3, [r4, #0]
 800904c:	4639      	mov	r1, r7
 800904e:	4630      	mov	r0, r6
 8009050:	eb04 0903 	add.w	r9, r4, r3
 8009054:	f000 fdf4 	bl	8009c40 <_sbrk_r>
 8009058:	4581      	cmp	r9, r0
 800905a:	d142      	bne.n	80090e2 <_malloc_r+0xea>
 800905c:	6821      	ldr	r1, [r4, #0]
 800905e:	1a6d      	subs	r5, r5, r1
 8009060:	4629      	mov	r1, r5
 8009062:	4630      	mov	r0, r6
 8009064:	f7ff ffa6 	bl	8008fb4 <sbrk_aligned>
 8009068:	3001      	adds	r0, #1
 800906a:	d03a      	beq.n	80090e2 <_malloc_r+0xea>
 800906c:	6823      	ldr	r3, [r4, #0]
 800906e:	442b      	add	r3, r5
 8009070:	6023      	str	r3, [r4, #0]
 8009072:	f8d8 3000 	ldr.w	r3, [r8]
 8009076:	685a      	ldr	r2, [r3, #4]
 8009078:	bb62      	cbnz	r2, 80090d4 <_malloc_r+0xdc>
 800907a:	f8c8 7000 	str.w	r7, [r8]
 800907e:	e00f      	b.n	80090a0 <_malloc_r+0xa8>
 8009080:	6822      	ldr	r2, [r4, #0]
 8009082:	1b52      	subs	r2, r2, r5
 8009084:	d420      	bmi.n	80090c8 <_malloc_r+0xd0>
 8009086:	2a0b      	cmp	r2, #11
 8009088:	d917      	bls.n	80090ba <_malloc_r+0xc2>
 800908a:	1961      	adds	r1, r4, r5
 800908c:	42a3      	cmp	r3, r4
 800908e:	6025      	str	r5, [r4, #0]
 8009090:	bf18      	it	ne
 8009092:	6059      	strne	r1, [r3, #4]
 8009094:	6863      	ldr	r3, [r4, #4]
 8009096:	bf08      	it	eq
 8009098:	f8c8 1000 	streq.w	r1, [r8]
 800909c:	5162      	str	r2, [r4, r5]
 800909e:	604b      	str	r3, [r1, #4]
 80090a0:	4630      	mov	r0, r6
 80090a2:	f000 f82f 	bl	8009104 <__malloc_unlock>
 80090a6:	f104 000b 	add.w	r0, r4, #11
 80090aa:	1d23      	adds	r3, r4, #4
 80090ac:	f020 0007 	bic.w	r0, r0, #7
 80090b0:	1ac2      	subs	r2, r0, r3
 80090b2:	bf1c      	itt	ne
 80090b4:	1a1b      	subne	r3, r3, r0
 80090b6:	50a3      	strne	r3, [r4, r2]
 80090b8:	e7af      	b.n	800901a <_malloc_r+0x22>
 80090ba:	6862      	ldr	r2, [r4, #4]
 80090bc:	42a3      	cmp	r3, r4
 80090be:	bf0c      	ite	eq
 80090c0:	f8c8 2000 	streq.w	r2, [r8]
 80090c4:	605a      	strne	r2, [r3, #4]
 80090c6:	e7eb      	b.n	80090a0 <_malloc_r+0xa8>
 80090c8:	4623      	mov	r3, r4
 80090ca:	6864      	ldr	r4, [r4, #4]
 80090cc:	e7ae      	b.n	800902c <_malloc_r+0x34>
 80090ce:	463c      	mov	r4, r7
 80090d0:	687f      	ldr	r7, [r7, #4]
 80090d2:	e7b6      	b.n	8009042 <_malloc_r+0x4a>
 80090d4:	461a      	mov	r2, r3
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	42a3      	cmp	r3, r4
 80090da:	d1fb      	bne.n	80090d4 <_malloc_r+0xdc>
 80090dc:	2300      	movs	r3, #0
 80090de:	6053      	str	r3, [r2, #4]
 80090e0:	e7de      	b.n	80090a0 <_malloc_r+0xa8>
 80090e2:	230c      	movs	r3, #12
 80090e4:	6033      	str	r3, [r6, #0]
 80090e6:	4630      	mov	r0, r6
 80090e8:	f000 f80c 	bl	8009104 <__malloc_unlock>
 80090ec:	e794      	b.n	8009018 <_malloc_r+0x20>
 80090ee:	6005      	str	r5, [r0, #0]
 80090f0:	e7d6      	b.n	80090a0 <_malloc_r+0xa8>
 80090f2:	bf00      	nop
 80090f4:	200005cc 	.word	0x200005cc

080090f8 <__malloc_lock>:
 80090f8:	4801      	ldr	r0, [pc, #4]	@ (8009100 <__malloc_lock+0x8>)
 80090fa:	f7ff b8ac 	b.w	8008256 <__retarget_lock_acquire_recursive>
 80090fe:	bf00      	nop
 8009100:	200005c4 	.word	0x200005c4

08009104 <__malloc_unlock>:
 8009104:	4801      	ldr	r0, [pc, #4]	@ (800910c <__malloc_unlock+0x8>)
 8009106:	f7ff b8a7 	b.w	8008258 <__retarget_lock_release_recursive>
 800910a:	bf00      	nop
 800910c:	200005c4 	.word	0x200005c4

08009110 <_Balloc>:
 8009110:	b570      	push	{r4, r5, r6, lr}
 8009112:	69c6      	ldr	r6, [r0, #28]
 8009114:	4604      	mov	r4, r0
 8009116:	460d      	mov	r5, r1
 8009118:	b976      	cbnz	r6, 8009138 <_Balloc+0x28>
 800911a:	2010      	movs	r0, #16
 800911c:	f7ff ff42 	bl	8008fa4 <malloc>
 8009120:	4602      	mov	r2, r0
 8009122:	61e0      	str	r0, [r4, #28]
 8009124:	b920      	cbnz	r0, 8009130 <_Balloc+0x20>
 8009126:	4b18      	ldr	r3, [pc, #96]	@ (8009188 <_Balloc+0x78>)
 8009128:	4818      	ldr	r0, [pc, #96]	@ (800918c <_Balloc+0x7c>)
 800912a:	216b      	movs	r1, #107	@ 0x6b
 800912c:	f000 fda6 	bl	8009c7c <__assert_func>
 8009130:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009134:	6006      	str	r6, [r0, #0]
 8009136:	60c6      	str	r6, [r0, #12]
 8009138:	69e6      	ldr	r6, [r4, #28]
 800913a:	68f3      	ldr	r3, [r6, #12]
 800913c:	b183      	cbz	r3, 8009160 <_Balloc+0x50>
 800913e:	69e3      	ldr	r3, [r4, #28]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009146:	b9b8      	cbnz	r0, 8009178 <_Balloc+0x68>
 8009148:	2101      	movs	r1, #1
 800914a:	fa01 f605 	lsl.w	r6, r1, r5
 800914e:	1d72      	adds	r2, r6, #5
 8009150:	0092      	lsls	r2, r2, #2
 8009152:	4620      	mov	r0, r4
 8009154:	f000 fdb0 	bl	8009cb8 <_calloc_r>
 8009158:	b160      	cbz	r0, 8009174 <_Balloc+0x64>
 800915a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800915e:	e00e      	b.n	800917e <_Balloc+0x6e>
 8009160:	2221      	movs	r2, #33	@ 0x21
 8009162:	2104      	movs	r1, #4
 8009164:	4620      	mov	r0, r4
 8009166:	f000 fda7 	bl	8009cb8 <_calloc_r>
 800916a:	69e3      	ldr	r3, [r4, #28]
 800916c:	60f0      	str	r0, [r6, #12]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d1e4      	bne.n	800913e <_Balloc+0x2e>
 8009174:	2000      	movs	r0, #0
 8009176:	bd70      	pop	{r4, r5, r6, pc}
 8009178:	6802      	ldr	r2, [r0, #0]
 800917a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800917e:	2300      	movs	r3, #0
 8009180:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009184:	e7f7      	b.n	8009176 <_Balloc+0x66>
 8009186:	bf00      	nop
 8009188:	0800b015 	.word	0x0800b015
 800918c:	0800b095 	.word	0x0800b095

08009190 <_Bfree>:
 8009190:	b570      	push	{r4, r5, r6, lr}
 8009192:	69c6      	ldr	r6, [r0, #28]
 8009194:	4605      	mov	r5, r0
 8009196:	460c      	mov	r4, r1
 8009198:	b976      	cbnz	r6, 80091b8 <_Bfree+0x28>
 800919a:	2010      	movs	r0, #16
 800919c:	f7ff ff02 	bl	8008fa4 <malloc>
 80091a0:	4602      	mov	r2, r0
 80091a2:	61e8      	str	r0, [r5, #28]
 80091a4:	b920      	cbnz	r0, 80091b0 <_Bfree+0x20>
 80091a6:	4b09      	ldr	r3, [pc, #36]	@ (80091cc <_Bfree+0x3c>)
 80091a8:	4809      	ldr	r0, [pc, #36]	@ (80091d0 <_Bfree+0x40>)
 80091aa:	218f      	movs	r1, #143	@ 0x8f
 80091ac:	f000 fd66 	bl	8009c7c <__assert_func>
 80091b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091b4:	6006      	str	r6, [r0, #0]
 80091b6:	60c6      	str	r6, [r0, #12]
 80091b8:	b13c      	cbz	r4, 80091ca <_Bfree+0x3a>
 80091ba:	69eb      	ldr	r3, [r5, #28]
 80091bc:	6862      	ldr	r2, [r4, #4]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80091c4:	6021      	str	r1, [r4, #0]
 80091c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80091ca:	bd70      	pop	{r4, r5, r6, pc}
 80091cc:	0800b015 	.word	0x0800b015
 80091d0:	0800b095 	.word	0x0800b095

080091d4 <__multadd>:
 80091d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091d8:	690d      	ldr	r5, [r1, #16]
 80091da:	4607      	mov	r7, r0
 80091dc:	460c      	mov	r4, r1
 80091de:	461e      	mov	r6, r3
 80091e0:	f101 0c14 	add.w	ip, r1, #20
 80091e4:	2000      	movs	r0, #0
 80091e6:	f8dc 3000 	ldr.w	r3, [ip]
 80091ea:	b299      	uxth	r1, r3
 80091ec:	fb02 6101 	mla	r1, r2, r1, r6
 80091f0:	0c1e      	lsrs	r6, r3, #16
 80091f2:	0c0b      	lsrs	r3, r1, #16
 80091f4:	fb02 3306 	mla	r3, r2, r6, r3
 80091f8:	b289      	uxth	r1, r1
 80091fa:	3001      	adds	r0, #1
 80091fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009200:	4285      	cmp	r5, r0
 8009202:	f84c 1b04 	str.w	r1, [ip], #4
 8009206:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800920a:	dcec      	bgt.n	80091e6 <__multadd+0x12>
 800920c:	b30e      	cbz	r6, 8009252 <__multadd+0x7e>
 800920e:	68a3      	ldr	r3, [r4, #8]
 8009210:	42ab      	cmp	r3, r5
 8009212:	dc19      	bgt.n	8009248 <__multadd+0x74>
 8009214:	6861      	ldr	r1, [r4, #4]
 8009216:	4638      	mov	r0, r7
 8009218:	3101      	adds	r1, #1
 800921a:	f7ff ff79 	bl	8009110 <_Balloc>
 800921e:	4680      	mov	r8, r0
 8009220:	b928      	cbnz	r0, 800922e <__multadd+0x5a>
 8009222:	4602      	mov	r2, r0
 8009224:	4b0c      	ldr	r3, [pc, #48]	@ (8009258 <__multadd+0x84>)
 8009226:	480d      	ldr	r0, [pc, #52]	@ (800925c <__multadd+0x88>)
 8009228:	21ba      	movs	r1, #186	@ 0xba
 800922a:	f000 fd27 	bl	8009c7c <__assert_func>
 800922e:	6922      	ldr	r2, [r4, #16]
 8009230:	3202      	adds	r2, #2
 8009232:	f104 010c 	add.w	r1, r4, #12
 8009236:	0092      	lsls	r2, r2, #2
 8009238:	300c      	adds	r0, #12
 800923a:	f000 fd11 	bl	8009c60 <memcpy>
 800923e:	4621      	mov	r1, r4
 8009240:	4638      	mov	r0, r7
 8009242:	f7ff ffa5 	bl	8009190 <_Bfree>
 8009246:	4644      	mov	r4, r8
 8009248:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800924c:	3501      	adds	r5, #1
 800924e:	615e      	str	r6, [r3, #20]
 8009250:	6125      	str	r5, [r4, #16]
 8009252:	4620      	mov	r0, r4
 8009254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009258:	0800b084 	.word	0x0800b084
 800925c:	0800b095 	.word	0x0800b095

08009260 <__hi0bits>:
 8009260:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009264:	4603      	mov	r3, r0
 8009266:	bf36      	itet	cc
 8009268:	0403      	lslcc	r3, r0, #16
 800926a:	2000      	movcs	r0, #0
 800926c:	2010      	movcc	r0, #16
 800926e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009272:	bf3c      	itt	cc
 8009274:	021b      	lslcc	r3, r3, #8
 8009276:	3008      	addcc	r0, #8
 8009278:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800927c:	bf3c      	itt	cc
 800927e:	011b      	lslcc	r3, r3, #4
 8009280:	3004      	addcc	r0, #4
 8009282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009286:	bf3c      	itt	cc
 8009288:	009b      	lslcc	r3, r3, #2
 800928a:	3002      	addcc	r0, #2
 800928c:	2b00      	cmp	r3, #0
 800928e:	db05      	blt.n	800929c <__hi0bits+0x3c>
 8009290:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009294:	f100 0001 	add.w	r0, r0, #1
 8009298:	bf08      	it	eq
 800929a:	2020      	moveq	r0, #32
 800929c:	4770      	bx	lr

0800929e <__lo0bits>:
 800929e:	6803      	ldr	r3, [r0, #0]
 80092a0:	4602      	mov	r2, r0
 80092a2:	f013 0007 	ands.w	r0, r3, #7
 80092a6:	d00b      	beq.n	80092c0 <__lo0bits+0x22>
 80092a8:	07d9      	lsls	r1, r3, #31
 80092aa:	d421      	bmi.n	80092f0 <__lo0bits+0x52>
 80092ac:	0798      	lsls	r0, r3, #30
 80092ae:	bf49      	itett	mi
 80092b0:	085b      	lsrmi	r3, r3, #1
 80092b2:	089b      	lsrpl	r3, r3, #2
 80092b4:	2001      	movmi	r0, #1
 80092b6:	6013      	strmi	r3, [r2, #0]
 80092b8:	bf5c      	itt	pl
 80092ba:	6013      	strpl	r3, [r2, #0]
 80092bc:	2002      	movpl	r0, #2
 80092be:	4770      	bx	lr
 80092c0:	b299      	uxth	r1, r3
 80092c2:	b909      	cbnz	r1, 80092c8 <__lo0bits+0x2a>
 80092c4:	0c1b      	lsrs	r3, r3, #16
 80092c6:	2010      	movs	r0, #16
 80092c8:	b2d9      	uxtb	r1, r3
 80092ca:	b909      	cbnz	r1, 80092d0 <__lo0bits+0x32>
 80092cc:	3008      	adds	r0, #8
 80092ce:	0a1b      	lsrs	r3, r3, #8
 80092d0:	0719      	lsls	r1, r3, #28
 80092d2:	bf04      	itt	eq
 80092d4:	091b      	lsreq	r3, r3, #4
 80092d6:	3004      	addeq	r0, #4
 80092d8:	0799      	lsls	r1, r3, #30
 80092da:	bf04      	itt	eq
 80092dc:	089b      	lsreq	r3, r3, #2
 80092de:	3002      	addeq	r0, #2
 80092e0:	07d9      	lsls	r1, r3, #31
 80092e2:	d403      	bmi.n	80092ec <__lo0bits+0x4e>
 80092e4:	085b      	lsrs	r3, r3, #1
 80092e6:	f100 0001 	add.w	r0, r0, #1
 80092ea:	d003      	beq.n	80092f4 <__lo0bits+0x56>
 80092ec:	6013      	str	r3, [r2, #0]
 80092ee:	4770      	bx	lr
 80092f0:	2000      	movs	r0, #0
 80092f2:	4770      	bx	lr
 80092f4:	2020      	movs	r0, #32
 80092f6:	4770      	bx	lr

080092f8 <__i2b>:
 80092f8:	b510      	push	{r4, lr}
 80092fa:	460c      	mov	r4, r1
 80092fc:	2101      	movs	r1, #1
 80092fe:	f7ff ff07 	bl	8009110 <_Balloc>
 8009302:	4602      	mov	r2, r0
 8009304:	b928      	cbnz	r0, 8009312 <__i2b+0x1a>
 8009306:	4b05      	ldr	r3, [pc, #20]	@ (800931c <__i2b+0x24>)
 8009308:	4805      	ldr	r0, [pc, #20]	@ (8009320 <__i2b+0x28>)
 800930a:	f240 1145 	movw	r1, #325	@ 0x145
 800930e:	f000 fcb5 	bl	8009c7c <__assert_func>
 8009312:	2301      	movs	r3, #1
 8009314:	6144      	str	r4, [r0, #20]
 8009316:	6103      	str	r3, [r0, #16]
 8009318:	bd10      	pop	{r4, pc}
 800931a:	bf00      	nop
 800931c:	0800b084 	.word	0x0800b084
 8009320:	0800b095 	.word	0x0800b095

08009324 <__multiply>:
 8009324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009328:	4617      	mov	r7, r2
 800932a:	690a      	ldr	r2, [r1, #16]
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	429a      	cmp	r2, r3
 8009330:	bfa8      	it	ge
 8009332:	463b      	movge	r3, r7
 8009334:	4689      	mov	r9, r1
 8009336:	bfa4      	itt	ge
 8009338:	460f      	movge	r7, r1
 800933a:	4699      	movge	r9, r3
 800933c:	693d      	ldr	r5, [r7, #16]
 800933e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	6879      	ldr	r1, [r7, #4]
 8009346:	eb05 060a 	add.w	r6, r5, sl
 800934a:	42b3      	cmp	r3, r6
 800934c:	b085      	sub	sp, #20
 800934e:	bfb8      	it	lt
 8009350:	3101      	addlt	r1, #1
 8009352:	f7ff fedd 	bl	8009110 <_Balloc>
 8009356:	b930      	cbnz	r0, 8009366 <__multiply+0x42>
 8009358:	4602      	mov	r2, r0
 800935a:	4b41      	ldr	r3, [pc, #260]	@ (8009460 <__multiply+0x13c>)
 800935c:	4841      	ldr	r0, [pc, #260]	@ (8009464 <__multiply+0x140>)
 800935e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009362:	f000 fc8b 	bl	8009c7c <__assert_func>
 8009366:	f100 0414 	add.w	r4, r0, #20
 800936a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800936e:	4623      	mov	r3, r4
 8009370:	2200      	movs	r2, #0
 8009372:	4573      	cmp	r3, lr
 8009374:	d320      	bcc.n	80093b8 <__multiply+0x94>
 8009376:	f107 0814 	add.w	r8, r7, #20
 800937a:	f109 0114 	add.w	r1, r9, #20
 800937e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009382:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009386:	9302      	str	r3, [sp, #8]
 8009388:	1beb      	subs	r3, r5, r7
 800938a:	3b15      	subs	r3, #21
 800938c:	f023 0303 	bic.w	r3, r3, #3
 8009390:	3304      	adds	r3, #4
 8009392:	3715      	adds	r7, #21
 8009394:	42bd      	cmp	r5, r7
 8009396:	bf38      	it	cc
 8009398:	2304      	movcc	r3, #4
 800939a:	9301      	str	r3, [sp, #4]
 800939c:	9b02      	ldr	r3, [sp, #8]
 800939e:	9103      	str	r1, [sp, #12]
 80093a0:	428b      	cmp	r3, r1
 80093a2:	d80c      	bhi.n	80093be <__multiply+0x9a>
 80093a4:	2e00      	cmp	r6, #0
 80093a6:	dd03      	ble.n	80093b0 <__multiply+0x8c>
 80093a8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d055      	beq.n	800945c <__multiply+0x138>
 80093b0:	6106      	str	r6, [r0, #16]
 80093b2:	b005      	add	sp, #20
 80093b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b8:	f843 2b04 	str.w	r2, [r3], #4
 80093bc:	e7d9      	b.n	8009372 <__multiply+0x4e>
 80093be:	f8b1 a000 	ldrh.w	sl, [r1]
 80093c2:	f1ba 0f00 	cmp.w	sl, #0
 80093c6:	d01f      	beq.n	8009408 <__multiply+0xe4>
 80093c8:	46c4      	mov	ip, r8
 80093ca:	46a1      	mov	r9, r4
 80093cc:	2700      	movs	r7, #0
 80093ce:	f85c 2b04 	ldr.w	r2, [ip], #4
 80093d2:	f8d9 3000 	ldr.w	r3, [r9]
 80093d6:	fa1f fb82 	uxth.w	fp, r2
 80093da:	b29b      	uxth	r3, r3
 80093dc:	fb0a 330b 	mla	r3, sl, fp, r3
 80093e0:	443b      	add	r3, r7
 80093e2:	f8d9 7000 	ldr.w	r7, [r9]
 80093e6:	0c12      	lsrs	r2, r2, #16
 80093e8:	0c3f      	lsrs	r7, r7, #16
 80093ea:	fb0a 7202 	mla	r2, sl, r2, r7
 80093ee:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093f8:	4565      	cmp	r5, ip
 80093fa:	f849 3b04 	str.w	r3, [r9], #4
 80093fe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009402:	d8e4      	bhi.n	80093ce <__multiply+0xaa>
 8009404:	9b01      	ldr	r3, [sp, #4]
 8009406:	50e7      	str	r7, [r4, r3]
 8009408:	9b03      	ldr	r3, [sp, #12]
 800940a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800940e:	3104      	adds	r1, #4
 8009410:	f1b9 0f00 	cmp.w	r9, #0
 8009414:	d020      	beq.n	8009458 <__multiply+0x134>
 8009416:	6823      	ldr	r3, [r4, #0]
 8009418:	4647      	mov	r7, r8
 800941a:	46a4      	mov	ip, r4
 800941c:	f04f 0a00 	mov.w	sl, #0
 8009420:	f8b7 b000 	ldrh.w	fp, [r7]
 8009424:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009428:	fb09 220b 	mla	r2, r9, fp, r2
 800942c:	4452      	add	r2, sl
 800942e:	b29b      	uxth	r3, r3
 8009430:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009434:	f84c 3b04 	str.w	r3, [ip], #4
 8009438:	f857 3b04 	ldr.w	r3, [r7], #4
 800943c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009440:	f8bc 3000 	ldrh.w	r3, [ip]
 8009444:	fb09 330a 	mla	r3, r9, sl, r3
 8009448:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800944c:	42bd      	cmp	r5, r7
 800944e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009452:	d8e5      	bhi.n	8009420 <__multiply+0xfc>
 8009454:	9a01      	ldr	r2, [sp, #4]
 8009456:	50a3      	str	r3, [r4, r2]
 8009458:	3404      	adds	r4, #4
 800945a:	e79f      	b.n	800939c <__multiply+0x78>
 800945c:	3e01      	subs	r6, #1
 800945e:	e7a1      	b.n	80093a4 <__multiply+0x80>
 8009460:	0800b084 	.word	0x0800b084
 8009464:	0800b095 	.word	0x0800b095

08009468 <__pow5mult>:
 8009468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800946c:	4615      	mov	r5, r2
 800946e:	f012 0203 	ands.w	r2, r2, #3
 8009472:	4607      	mov	r7, r0
 8009474:	460e      	mov	r6, r1
 8009476:	d007      	beq.n	8009488 <__pow5mult+0x20>
 8009478:	4c25      	ldr	r4, [pc, #148]	@ (8009510 <__pow5mult+0xa8>)
 800947a:	3a01      	subs	r2, #1
 800947c:	2300      	movs	r3, #0
 800947e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009482:	f7ff fea7 	bl	80091d4 <__multadd>
 8009486:	4606      	mov	r6, r0
 8009488:	10ad      	asrs	r5, r5, #2
 800948a:	d03d      	beq.n	8009508 <__pow5mult+0xa0>
 800948c:	69fc      	ldr	r4, [r7, #28]
 800948e:	b97c      	cbnz	r4, 80094b0 <__pow5mult+0x48>
 8009490:	2010      	movs	r0, #16
 8009492:	f7ff fd87 	bl	8008fa4 <malloc>
 8009496:	4602      	mov	r2, r0
 8009498:	61f8      	str	r0, [r7, #28]
 800949a:	b928      	cbnz	r0, 80094a8 <__pow5mult+0x40>
 800949c:	4b1d      	ldr	r3, [pc, #116]	@ (8009514 <__pow5mult+0xac>)
 800949e:	481e      	ldr	r0, [pc, #120]	@ (8009518 <__pow5mult+0xb0>)
 80094a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80094a4:	f000 fbea 	bl	8009c7c <__assert_func>
 80094a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80094ac:	6004      	str	r4, [r0, #0]
 80094ae:	60c4      	str	r4, [r0, #12]
 80094b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80094b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80094b8:	b94c      	cbnz	r4, 80094ce <__pow5mult+0x66>
 80094ba:	f240 2171 	movw	r1, #625	@ 0x271
 80094be:	4638      	mov	r0, r7
 80094c0:	f7ff ff1a 	bl	80092f8 <__i2b>
 80094c4:	2300      	movs	r3, #0
 80094c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80094ca:	4604      	mov	r4, r0
 80094cc:	6003      	str	r3, [r0, #0]
 80094ce:	f04f 0900 	mov.w	r9, #0
 80094d2:	07eb      	lsls	r3, r5, #31
 80094d4:	d50a      	bpl.n	80094ec <__pow5mult+0x84>
 80094d6:	4631      	mov	r1, r6
 80094d8:	4622      	mov	r2, r4
 80094da:	4638      	mov	r0, r7
 80094dc:	f7ff ff22 	bl	8009324 <__multiply>
 80094e0:	4631      	mov	r1, r6
 80094e2:	4680      	mov	r8, r0
 80094e4:	4638      	mov	r0, r7
 80094e6:	f7ff fe53 	bl	8009190 <_Bfree>
 80094ea:	4646      	mov	r6, r8
 80094ec:	106d      	asrs	r5, r5, #1
 80094ee:	d00b      	beq.n	8009508 <__pow5mult+0xa0>
 80094f0:	6820      	ldr	r0, [r4, #0]
 80094f2:	b938      	cbnz	r0, 8009504 <__pow5mult+0x9c>
 80094f4:	4622      	mov	r2, r4
 80094f6:	4621      	mov	r1, r4
 80094f8:	4638      	mov	r0, r7
 80094fa:	f7ff ff13 	bl	8009324 <__multiply>
 80094fe:	6020      	str	r0, [r4, #0]
 8009500:	f8c0 9000 	str.w	r9, [r0]
 8009504:	4604      	mov	r4, r0
 8009506:	e7e4      	b.n	80094d2 <__pow5mult+0x6a>
 8009508:	4630      	mov	r0, r6
 800950a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800950e:	bf00      	nop
 8009510:	0800b148 	.word	0x0800b148
 8009514:	0800b015 	.word	0x0800b015
 8009518:	0800b095 	.word	0x0800b095

0800951c <__lshift>:
 800951c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009520:	460c      	mov	r4, r1
 8009522:	6849      	ldr	r1, [r1, #4]
 8009524:	6923      	ldr	r3, [r4, #16]
 8009526:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800952a:	68a3      	ldr	r3, [r4, #8]
 800952c:	4607      	mov	r7, r0
 800952e:	4691      	mov	r9, r2
 8009530:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009534:	f108 0601 	add.w	r6, r8, #1
 8009538:	42b3      	cmp	r3, r6
 800953a:	db0b      	blt.n	8009554 <__lshift+0x38>
 800953c:	4638      	mov	r0, r7
 800953e:	f7ff fde7 	bl	8009110 <_Balloc>
 8009542:	4605      	mov	r5, r0
 8009544:	b948      	cbnz	r0, 800955a <__lshift+0x3e>
 8009546:	4602      	mov	r2, r0
 8009548:	4b28      	ldr	r3, [pc, #160]	@ (80095ec <__lshift+0xd0>)
 800954a:	4829      	ldr	r0, [pc, #164]	@ (80095f0 <__lshift+0xd4>)
 800954c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009550:	f000 fb94 	bl	8009c7c <__assert_func>
 8009554:	3101      	adds	r1, #1
 8009556:	005b      	lsls	r3, r3, #1
 8009558:	e7ee      	b.n	8009538 <__lshift+0x1c>
 800955a:	2300      	movs	r3, #0
 800955c:	f100 0114 	add.w	r1, r0, #20
 8009560:	f100 0210 	add.w	r2, r0, #16
 8009564:	4618      	mov	r0, r3
 8009566:	4553      	cmp	r3, sl
 8009568:	db33      	blt.n	80095d2 <__lshift+0xb6>
 800956a:	6920      	ldr	r0, [r4, #16]
 800956c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009570:	f104 0314 	add.w	r3, r4, #20
 8009574:	f019 091f 	ands.w	r9, r9, #31
 8009578:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800957c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009580:	d02b      	beq.n	80095da <__lshift+0xbe>
 8009582:	f1c9 0e20 	rsb	lr, r9, #32
 8009586:	468a      	mov	sl, r1
 8009588:	2200      	movs	r2, #0
 800958a:	6818      	ldr	r0, [r3, #0]
 800958c:	fa00 f009 	lsl.w	r0, r0, r9
 8009590:	4310      	orrs	r0, r2
 8009592:	f84a 0b04 	str.w	r0, [sl], #4
 8009596:	f853 2b04 	ldr.w	r2, [r3], #4
 800959a:	459c      	cmp	ip, r3
 800959c:	fa22 f20e 	lsr.w	r2, r2, lr
 80095a0:	d8f3      	bhi.n	800958a <__lshift+0x6e>
 80095a2:	ebac 0304 	sub.w	r3, ip, r4
 80095a6:	3b15      	subs	r3, #21
 80095a8:	f023 0303 	bic.w	r3, r3, #3
 80095ac:	3304      	adds	r3, #4
 80095ae:	f104 0015 	add.w	r0, r4, #21
 80095b2:	4560      	cmp	r0, ip
 80095b4:	bf88      	it	hi
 80095b6:	2304      	movhi	r3, #4
 80095b8:	50ca      	str	r2, [r1, r3]
 80095ba:	b10a      	cbz	r2, 80095c0 <__lshift+0xa4>
 80095bc:	f108 0602 	add.w	r6, r8, #2
 80095c0:	3e01      	subs	r6, #1
 80095c2:	4638      	mov	r0, r7
 80095c4:	612e      	str	r6, [r5, #16]
 80095c6:	4621      	mov	r1, r4
 80095c8:	f7ff fde2 	bl	8009190 <_Bfree>
 80095cc:	4628      	mov	r0, r5
 80095ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80095d6:	3301      	adds	r3, #1
 80095d8:	e7c5      	b.n	8009566 <__lshift+0x4a>
 80095da:	3904      	subs	r1, #4
 80095dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80095e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80095e4:	459c      	cmp	ip, r3
 80095e6:	d8f9      	bhi.n	80095dc <__lshift+0xc0>
 80095e8:	e7ea      	b.n	80095c0 <__lshift+0xa4>
 80095ea:	bf00      	nop
 80095ec:	0800b084 	.word	0x0800b084
 80095f0:	0800b095 	.word	0x0800b095

080095f4 <__mcmp>:
 80095f4:	690a      	ldr	r2, [r1, #16]
 80095f6:	4603      	mov	r3, r0
 80095f8:	6900      	ldr	r0, [r0, #16]
 80095fa:	1a80      	subs	r0, r0, r2
 80095fc:	b530      	push	{r4, r5, lr}
 80095fe:	d10e      	bne.n	800961e <__mcmp+0x2a>
 8009600:	3314      	adds	r3, #20
 8009602:	3114      	adds	r1, #20
 8009604:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009608:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800960c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009610:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009614:	4295      	cmp	r5, r2
 8009616:	d003      	beq.n	8009620 <__mcmp+0x2c>
 8009618:	d205      	bcs.n	8009626 <__mcmp+0x32>
 800961a:	f04f 30ff 	mov.w	r0, #4294967295
 800961e:	bd30      	pop	{r4, r5, pc}
 8009620:	42a3      	cmp	r3, r4
 8009622:	d3f3      	bcc.n	800960c <__mcmp+0x18>
 8009624:	e7fb      	b.n	800961e <__mcmp+0x2a>
 8009626:	2001      	movs	r0, #1
 8009628:	e7f9      	b.n	800961e <__mcmp+0x2a>
	...

0800962c <__mdiff>:
 800962c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009630:	4689      	mov	r9, r1
 8009632:	4606      	mov	r6, r0
 8009634:	4611      	mov	r1, r2
 8009636:	4648      	mov	r0, r9
 8009638:	4614      	mov	r4, r2
 800963a:	f7ff ffdb 	bl	80095f4 <__mcmp>
 800963e:	1e05      	subs	r5, r0, #0
 8009640:	d112      	bne.n	8009668 <__mdiff+0x3c>
 8009642:	4629      	mov	r1, r5
 8009644:	4630      	mov	r0, r6
 8009646:	f7ff fd63 	bl	8009110 <_Balloc>
 800964a:	4602      	mov	r2, r0
 800964c:	b928      	cbnz	r0, 800965a <__mdiff+0x2e>
 800964e:	4b3f      	ldr	r3, [pc, #252]	@ (800974c <__mdiff+0x120>)
 8009650:	f240 2137 	movw	r1, #567	@ 0x237
 8009654:	483e      	ldr	r0, [pc, #248]	@ (8009750 <__mdiff+0x124>)
 8009656:	f000 fb11 	bl	8009c7c <__assert_func>
 800965a:	2301      	movs	r3, #1
 800965c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009660:	4610      	mov	r0, r2
 8009662:	b003      	add	sp, #12
 8009664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009668:	bfbc      	itt	lt
 800966a:	464b      	movlt	r3, r9
 800966c:	46a1      	movlt	r9, r4
 800966e:	4630      	mov	r0, r6
 8009670:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009674:	bfba      	itte	lt
 8009676:	461c      	movlt	r4, r3
 8009678:	2501      	movlt	r5, #1
 800967a:	2500      	movge	r5, #0
 800967c:	f7ff fd48 	bl	8009110 <_Balloc>
 8009680:	4602      	mov	r2, r0
 8009682:	b918      	cbnz	r0, 800968c <__mdiff+0x60>
 8009684:	4b31      	ldr	r3, [pc, #196]	@ (800974c <__mdiff+0x120>)
 8009686:	f240 2145 	movw	r1, #581	@ 0x245
 800968a:	e7e3      	b.n	8009654 <__mdiff+0x28>
 800968c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009690:	6926      	ldr	r6, [r4, #16]
 8009692:	60c5      	str	r5, [r0, #12]
 8009694:	f109 0310 	add.w	r3, r9, #16
 8009698:	f109 0514 	add.w	r5, r9, #20
 800969c:	f104 0e14 	add.w	lr, r4, #20
 80096a0:	f100 0b14 	add.w	fp, r0, #20
 80096a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80096a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80096ac:	9301      	str	r3, [sp, #4]
 80096ae:	46d9      	mov	r9, fp
 80096b0:	f04f 0c00 	mov.w	ip, #0
 80096b4:	9b01      	ldr	r3, [sp, #4]
 80096b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80096ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 80096be:	9301      	str	r3, [sp, #4]
 80096c0:	fa1f f38a 	uxth.w	r3, sl
 80096c4:	4619      	mov	r1, r3
 80096c6:	b283      	uxth	r3, r0
 80096c8:	1acb      	subs	r3, r1, r3
 80096ca:	0c00      	lsrs	r0, r0, #16
 80096cc:	4463      	add	r3, ip
 80096ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80096d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80096dc:	4576      	cmp	r6, lr
 80096de:	f849 3b04 	str.w	r3, [r9], #4
 80096e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80096e6:	d8e5      	bhi.n	80096b4 <__mdiff+0x88>
 80096e8:	1b33      	subs	r3, r6, r4
 80096ea:	3b15      	subs	r3, #21
 80096ec:	f023 0303 	bic.w	r3, r3, #3
 80096f0:	3415      	adds	r4, #21
 80096f2:	3304      	adds	r3, #4
 80096f4:	42a6      	cmp	r6, r4
 80096f6:	bf38      	it	cc
 80096f8:	2304      	movcc	r3, #4
 80096fa:	441d      	add	r5, r3
 80096fc:	445b      	add	r3, fp
 80096fe:	461e      	mov	r6, r3
 8009700:	462c      	mov	r4, r5
 8009702:	4544      	cmp	r4, r8
 8009704:	d30e      	bcc.n	8009724 <__mdiff+0xf8>
 8009706:	f108 0103 	add.w	r1, r8, #3
 800970a:	1b49      	subs	r1, r1, r5
 800970c:	f021 0103 	bic.w	r1, r1, #3
 8009710:	3d03      	subs	r5, #3
 8009712:	45a8      	cmp	r8, r5
 8009714:	bf38      	it	cc
 8009716:	2100      	movcc	r1, #0
 8009718:	440b      	add	r3, r1
 800971a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800971e:	b191      	cbz	r1, 8009746 <__mdiff+0x11a>
 8009720:	6117      	str	r7, [r2, #16]
 8009722:	e79d      	b.n	8009660 <__mdiff+0x34>
 8009724:	f854 1b04 	ldr.w	r1, [r4], #4
 8009728:	46e6      	mov	lr, ip
 800972a:	0c08      	lsrs	r0, r1, #16
 800972c:	fa1c fc81 	uxtah	ip, ip, r1
 8009730:	4471      	add	r1, lr
 8009732:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009736:	b289      	uxth	r1, r1
 8009738:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800973c:	f846 1b04 	str.w	r1, [r6], #4
 8009740:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009744:	e7dd      	b.n	8009702 <__mdiff+0xd6>
 8009746:	3f01      	subs	r7, #1
 8009748:	e7e7      	b.n	800971a <__mdiff+0xee>
 800974a:	bf00      	nop
 800974c:	0800b084 	.word	0x0800b084
 8009750:	0800b095 	.word	0x0800b095

08009754 <__d2b>:
 8009754:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009758:	460f      	mov	r7, r1
 800975a:	2101      	movs	r1, #1
 800975c:	ec59 8b10 	vmov	r8, r9, d0
 8009760:	4616      	mov	r6, r2
 8009762:	f7ff fcd5 	bl	8009110 <_Balloc>
 8009766:	4604      	mov	r4, r0
 8009768:	b930      	cbnz	r0, 8009778 <__d2b+0x24>
 800976a:	4602      	mov	r2, r0
 800976c:	4b23      	ldr	r3, [pc, #140]	@ (80097fc <__d2b+0xa8>)
 800976e:	4824      	ldr	r0, [pc, #144]	@ (8009800 <__d2b+0xac>)
 8009770:	f240 310f 	movw	r1, #783	@ 0x30f
 8009774:	f000 fa82 	bl	8009c7c <__assert_func>
 8009778:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800977c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009780:	b10d      	cbz	r5, 8009786 <__d2b+0x32>
 8009782:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009786:	9301      	str	r3, [sp, #4]
 8009788:	f1b8 0300 	subs.w	r3, r8, #0
 800978c:	d023      	beq.n	80097d6 <__d2b+0x82>
 800978e:	4668      	mov	r0, sp
 8009790:	9300      	str	r3, [sp, #0]
 8009792:	f7ff fd84 	bl	800929e <__lo0bits>
 8009796:	e9dd 1200 	ldrd	r1, r2, [sp]
 800979a:	b1d0      	cbz	r0, 80097d2 <__d2b+0x7e>
 800979c:	f1c0 0320 	rsb	r3, r0, #32
 80097a0:	fa02 f303 	lsl.w	r3, r2, r3
 80097a4:	430b      	orrs	r3, r1
 80097a6:	40c2      	lsrs	r2, r0
 80097a8:	6163      	str	r3, [r4, #20]
 80097aa:	9201      	str	r2, [sp, #4]
 80097ac:	9b01      	ldr	r3, [sp, #4]
 80097ae:	61a3      	str	r3, [r4, #24]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	bf0c      	ite	eq
 80097b4:	2201      	moveq	r2, #1
 80097b6:	2202      	movne	r2, #2
 80097b8:	6122      	str	r2, [r4, #16]
 80097ba:	b1a5      	cbz	r5, 80097e6 <__d2b+0x92>
 80097bc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80097c0:	4405      	add	r5, r0
 80097c2:	603d      	str	r5, [r7, #0]
 80097c4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80097c8:	6030      	str	r0, [r6, #0]
 80097ca:	4620      	mov	r0, r4
 80097cc:	b003      	add	sp, #12
 80097ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097d2:	6161      	str	r1, [r4, #20]
 80097d4:	e7ea      	b.n	80097ac <__d2b+0x58>
 80097d6:	a801      	add	r0, sp, #4
 80097d8:	f7ff fd61 	bl	800929e <__lo0bits>
 80097dc:	9b01      	ldr	r3, [sp, #4]
 80097de:	6163      	str	r3, [r4, #20]
 80097e0:	3020      	adds	r0, #32
 80097e2:	2201      	movs	r2, #1
 80097e4:	e7e8      	b.n	80097b8 <__d2b+0x64>
 80097e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80097ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80097ee:	6038      	str	r0, [r7, #0]
 80097f0:	6918      	ldr	r0, [r3, #16]
 80097f2:	f7ff fd35 	bl	8009260 <__hi0bits>
 80097f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80097fa:	e7e5      	b.n	80097c8 <__d2b+0x74>
 80097fc:	0800b084 	.word	0x0800b084
 8009800:	0800b095 	.word	0x0800b095

08009804 <__ssputs_r>:
 8009804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009808:	688e      	ldr	r6, [r1, #8]
 800980a:	461f      	mov	r7, r3
 800980c:	42be      	cmp	r6, r7
 800980e:	680b      	ldr	r3, [r1, #0]
 8009810:	4682      	mov	sl, r0
 8009812:	460c      	mov	r4, r1
 8009814:	4690      	mov	r8, r2
 8009816:	d82d      	bhi.n	8009874 <__ssputs_r+0x70>
 8009818:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800981c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009820:	d026      	beq.n	8009870 <__ssputs_r+0x6c>
 8009822:	6965      	ldr	r5, [r4, #20]
 8009824:	6909      	ldr	r1, [r1, #16]
 8009826:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800982a:	eba3 0901 	sub.w	r9, r3, r1
 800982e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009832:	1c7b      	adds	r3, r7, #1
 8009834:	444b      	add	r3, r9
 8009836:	106d      	asrs	r5, r5, #1
 8009838:	429d      	cmp	r5, r3
 800983a:	bf38      	it	cc
 800983c:	461d      	movcc	r5, r3
 800983e:	0553      	lsls	r3, r2, #21
 8009840:	d527      	bpl.n	8009892 <__ssputs_r+0x8e>
 8009842:	4629      	mov	r1, r5
 8009844:	f7ff fbd8 	bl	8008ff8 <_malloc_r>
 8009848:	4606      	mov	r6, r0
 800984a:	b360      	cbz	r0, 80098a6 <__ssputs_r+0xa2>
 800984c:	6921      	ldr	r1, [r4, #16]
 800984e:	464a      	mov	r2, r9
 8009850:	f000 fa06 	bl	8009c60 <memcpy>
 8009854:	89a3      	ldrh	r3, [r4, #12]
 8009856:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800985a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800985e:	81a3      	strh	r3, [r4, #12]
 8009860:	6126      	str	r6, [r4, #16]
 8009862:	6165      	str	r5, [r4, #20]
 8009864:	444e      	add	r6, r9
 8009866:	eba5 0509 	sub.w	r5, r5, r9
 800986a:	6026      	str	r6, [r4, #0]
 800986c:	60a5      	str	r5, [r4, #8]
 800986e:	463e      	mov	r6, r7
 8009870:	42be      	cmp	r6, r7
 8009872:	d900      	bls.n	8009876 <__ssputs_r+0x72>
 8009874:	463e      	mov	r6, r7
 8009876:	6820      	ldr	r0, [r4, #0]
 8009878:	4632      	mov	r2, r6
 800987a:	4641      	mov	r1, r8
 800987c:	f000 f9c6 	bl	8009c0c <memmove>
 8009880:	68a3      	ldr	r3, [r4, #8]
 8009882:	1b9b      	subs	r3, r3, r6
 8009884:	60a3      	str	r3, [r4, #8]
 8009886:	6823      	ldr	r3, [r4, #0]
 8009888:	4433      	add	r3, r6
 800988a:	6023      	str	r3, [r4, #0]
 800988c:	2000      	movs	r0, #0
 800988e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009892:	462a      	mov	r2, r5
 8009894:	f000 fa36 	bl	8009d04 <_realloc_r>
 8009898:	4606      	mov	r6, r0
 800989a:	2800      	cmp	r0, #0
 800989c:	d1e0      	bne.n	8009860 <__ssputs_r+0x5c>
 800989e:	6921      	ldr	r1, [r4, #16]
 80098a0:	4650      	mov	r0, sl
 80098a2:	f7ff fb35 	bl	8008f10 <_free_r>
 80098a6:	230c      	movs	r3, #12
 80098a8:	f8ca 3000 	str.w	r3, [sl]
 80098ac:	89a3      	ldrh	r3, [r4, #12]
 80098ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098b2:	81a3      	strh	r3, [r4, #12]
 80098b4:	f04f 30ff 	mov.w	r0, #4294967295
 80098b8:	e7e9      	b.n	800988e <__ssputs_r+0x8a>
	...

080098bc <_svfiprintf_r>:
 80098bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c0:	4698      	mov	r8, r3
 80098c2:	898b      	ldrh	r3, [r1, #12]
 80098c4:	061b      	lsls	r3, r3, #24
 80098c6:	b09d      	sub	sp, #116	@ 0x74
 80098c8:	4607      	mov	r7, r0
 80098ca:	460d      	mov	r5, r1
 80098cc:	4614      	mov	r4, r2
 80098ce:	d510      	bpl.n	80098f2 <_svfiprintf_r+0x36>
 80098d0:	690b      	ldr	r3, [r1, #16]
 80098d2:	b973      	cbnz	r3, 80098f2 <_svfiprintf_r+0x36>
 80098d4:	2140      	movs	r1, #64	@ 0x40
 80098d6:	f7ff fb8f 	bl	8008ff8 <_malloc_r>
 80098da:	6028      	str	r0, [r5, #0]
 80098dc:	6128      	str	r0, [r5, #16]
 80098de:	b930      	cbnz	r0, 80098ee <_svfiprintf_r+0x32>
 80098e0:	230c      	movs	r3, #12
 80098e2:	603b      	str	r3, [r7, #0]
 80098e4:	f04f 30ff 	mov.w	r0, #4294967295
 80098e8:	b01d      	add	sp, #116	@ 0x74
 80098ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ee:	2340      	movs	r3, #64	@ 0x40
 80098f0:	616b      	str	r3, [r5, #20]
 80098f2:	2300      	movs	r3, #0
 80098f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80098f6:	2320      	movs	r3, #32
 80098f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80098fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009900:	2330      	movs	r3, #48	@ 0x30
 8009902:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009aa0 <_svfiprintf_r+0x1e4>
 8009906:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800990a:	f04f 0901 	mov.w	r9, #1
 800990e:	4623      	mov	r3, r4
 8009910:	469a      	mov	sl, r3
 8009912:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009916:	b10a      	cbz	r2, 800991c <_svfiprintf_r+0x60>
 8009918:	2a25      	cmp	r2, #37	@ 0x25
 800991a:	d1f9      	bne.n	8009910 <_svfiprintf_r+0x54>
 800991c:	ebba 0b04 	subs.w	fp, sl, r4
 8009920:	d00b      	beq.n	800993a <_svfiprintf_r+0x7e>
 8009922:	465b      	mov	r3, fp
 8009924:	4622      	mov	r2, r4
 8009926:	4629      	mov	r1, r5
 8009928:	4638      	mov	r0, r7
 800992a:	f7ff ff6b 	bl	8009804 <__ssputs_r>
 800992e:	3001      	adds	r0, #1
 8009930:	f000 80a7 	beq.w	8009a82 <_svfiprintf_r+0x1c6>
 8009934:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009936:	445a      	add	r2, fp
 8009938:	9209      	str	r2, [sp, #36]	@ 0x24
 800993a:	f89a 3000 	ldrb.w	r3, [sl]
 800993e:	2b00      	cmp	r3, #0
 8009940:	f000 809f 	beq.w	8009a82 <_svfiprintf_r+0x1c6>
 8009944:	2300      	movs	r3, #0
 8009946:	f04f 32ff 	mov.w	r2, #4294967295
 800994a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800994e:	f10a 0a01 	add.w	sl, sl, #1
 8009952:	9304      	str	r3, [sp, #16]
 8009954:	9307      	str	r3, [sp, #28]
 8009956:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800995a:	931a      	str	r3, [sp, #104]	@ 0x68
 800995c:	4654      	mov	r4, sl
 800995e:	2205      	movs	r2, #5
 8009960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009964:	484e      	ldr	r0, [pc, #312]	@ (8009aa0 <_svfiprintf_r+0x1e4>)
 8009966:	f7f6 fc33 	bl	80001d0 <memchr>
 800996a:	9a04      	ldr	r2, [sp, #16]
 800996c:	b9d8      	cbnz	r0, 80099a6 <_svfiprintf_r+0xea>
 800996e:	06d0      	lsls	r0, r2, #27
 8009970:	bf44      	itt	mi
 8009972:	2320      	movmi	r3, #32
 8009974:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009978:	0711      	lsls	r1, r2, #28
 800997a:	bf44      	itt	mi
 800997c:	232b      	movmi	r3, #43	@ 0x2b
 800997e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009982:	f89a 3000 	ldrb.w	r3, [sl]
 8009986:	2b2a      	cmp	r3, #42	@ 0x2a
 8009988:	d015      	beq.n	80099b6 <_svfiprintf_r+0xfa>
 800998a:	9a07      	ldr	r2, [sp, #28]
 800998c:	4654      	mov	r4, sl
 800998e:	2000      	movs	r0, #0
 8009990:	f04f 0c0a 	mov.w	ip, #10
 8009994:	4621      	mov	r1, r4
 8009996:	f811 3b01 	ldrb.w	r3, [r1], #1
 800999a:	3b30      	subs	r3, #48	@ 0x30
 800999c:	2b09      	cmp	r3, #9
 800999e:	d94b      	bls.n	8009a38 <_svfiprintf_r+0x17c>
 80099a0:	b1b0      	cbz	r0, 80099d0 <_svfiprintf_r+0x114>
 80099a2:	9207      	str	r2, [sp, #28]
 80099a4:	e014      	b.n	80099d0 <_svfiprintf_r+0x114>
 80099a6:	eba0 0308 	sub.w	r3, r0, r8
 80099aa:	fa09 f303 	lsl.w	r3, r9, r3
 80099ae:	4313      	orrs	r3, r2
 80099b0:	9304      	str	r3, [sp, #16]
 80099b2:	46a2      	mov	sl, r4
 80099b4:	e7d2      	b.n	800995c <_svfiprintf_r+0xa0>
 80099b6:	9b03      	ldr	r3, [sp, #12]
 80099b8:	1d19      	adds	r1, r3, #4
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	9103      	str	r1, [sp, #12]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	bfbb      	ittet	lt
 80099c2:	425b      	neglt	r3, r3
 80099c4:	f042 0202 	orrlt.w	r2, r2, #2
 80099c8:	9307      	strge	r3, [sp, #28]
 80099ca:	9307      	strlt	r3, [sp, #28]
 80099cc:	bfb8      	it	lt
 80099ce:	9204      	strlt	r2, [sp, #16]
 80099d0:	7823      	ldrb	r3, [r4, #0]
 80099d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80099d4:	d10a      	bne.n	80099ec <_svfiprintf_r+0x130>
 80099d6:	7863      	ldrb	r3, [r4, #1]
 80099d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80099da:	d132      	bne.n	8009a42 <_svfiprintf_r+0x186>
 80099dc:	9b03      	ldr	r3, [sp, #12]
 80099de:	1d1a      	adds	r2, r3, #4
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	9203      	str	r2, [sp, #12]
 80099e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099e8:	3402      	adds	r4, #2
 80099ea:	9305      	str	r3, [sp, #20]
 80099ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009ab0 <_svfiprintf_r+0x1f4>
 80099f0:	7821      	ldrb	r1, [r4, #0]
 80099f2:	2203      	movs	r2, #3
 80099f4:	4650      	mov	r0, sl
 80099f6:	f7f6 fbeb 	bl	80001d0 <memchr>
 80099fa:	b138      	cbz	r0, 8009a0c <_svfiprintf_r+0x150>
 80099fc:	9b04      	ldr	r3, [sp, #16]
 80099fe:	eba0 000a 	sub.w	r0, r0, sl
 8009a02:	2240      	movs	r2, #64	@ 0x40
 8009a04:	4082      	lsls	r2, r0
 8009a06:	4313      	orrs	r3, r2
 8009a08:	3401      	adds	r4, #1
 8009a0a:	9304      	str	r3, [sp, #16]
 8009a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a10:	4824      	ldr	r0, [pc, #144]	@ (8009aa4 <_svfiprintf_r+0x1e8>)
 8009a12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a16:	2206      	movs	r2, #6
 8009a18:	f7f6 fbda 	bl	80001d0 <memchr>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d036      	beq.n	8009a8e <_svfiprintf_r+0x1d2>
 8009a20:	4b21      	ldr	r3, [pc, #132]	@ (8009aa8 <_svfiprintf_r+0x1ec>)
 8009a22:	bb1b      	cbnz	r3, 8009a6c <_svfiprintf_r+0x1b0>
 8009a24:	9b03      	ldr	r3, [sp, #12]
 8009a26:	3307      	adds	r3, #7
 8009a28:	f023 0307 	bic.w	r3, r3, #7
 8009a2c:	3308      	adds	r3, #8
 8009a2e:	9303      	str	r3, [sp, #12]
 8009a30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a32:	4433      	add	r3, r6
 8009a34:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a36:	e76a      	b.n	800990e <_svfiprintf_r+0x52>
 8009a38:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	2001      	movs	r0, #1
 8009a40:	e7a8      	b.n	8009994 <_svfiprintf_r+0xd8>
 8009a42:	2300      	movs	r3, #0
 8009a44:	3401      	adds	r4, #1
 8009a46:	9305      	str	r3, [sp, #20]
 8009a48:	4619      	mov	r1, r3
 8009a4a:	f04f 0c0a 	mov.w	ip, #10
 8009a4e:	4620      	mov	r0, r4
 8009a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a54:	3a30      	subs	r2, #48	@ 0x30
 8009a56:	2a09      	cmp	r2, #9
 8009a58:	d903      	bls.n	8009a62 <_svfiprintf_r+0x1a6>
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d0c6      	beq.n	80099ec <_svfiprintf_r+0x130>
 8009a5e:	9105      	str	r1, [sp, #20]
 8009a60:	e7c4      	b.n	80099ec <_svfiprintf_r+0x130>
 8009a62:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a66:	4604      	mov	r4, r0
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e7f0      	b.n	8009a4e <_svfiprintf_r+0x192>
 8009a6c:	ab03      	add	r3, sp, #12
 8009a6e:	9300      	str	r3, [sp, #0]
 8009a70:	462a      	mov	r2, r5
 8009a72:	4b0e      	ldr	r3, [pc, #56]	@ (8009aac <_svfiprintf_r+0x1f0>)
 8009a74:	a904      	add	r1, sp, #16
 8009a76:	4638      	mov	r0, r7
 8009a78:	f7fd fe92 	bl	80077a0 <_printf_float>
 8009a7c:	1c42      	adds	r2, r0, #1
 8009a7e:	4606      	mov	r6, r0
 8009a80:	d1d6      	bne.n	8009a30 <_svfiprintf_r+0x174>
 8009a82:	89ab      	ldrh	r3, [r5, #12]
 8009a84:	065b      	lsls	r3, r3, #25
 8009a86:	f53f af2d 	bmi.w	80098e4 <_svfiprintf_r+0x28>
 8009a8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a8c:	e72c      	b.n	80098e8 <_svfiprintf_r+0x2c>
 8009a8e:	ab03      	add	r3, sp, #12
 8009a90:	9300      	str	r3, [sp, #0]
 8009a92:	462a      	mov	r2, r5
 8009a94:	4b05      	ldr	r3, [pc, #20]	@ (8009aac <_svfiprintf_r+0x1f0>)
 8009a96:	a904      	add	r1, sp, #16
 8009a98:	4638      	mov	r0, r7
 8009a9a:	f7fe f919 	bl	8007cd0 <_printf_i>
 8009a9e:	e7ed      	b.n	8009a7c <_svfiprintf_r+0x1c0>
 8009aa0:	0800b0ee 	.word	0x0800b0ee
 8009aa4:	0800b0f8 	.word	0x0800b0f8
 8009aa8:	080077a1 	.word	0x080077a1
 8009aac:	08009805 	.word	0x08009805
 8009ab0:	0800b0f4 	.word	0x0800b0f4

08009ab4 <__sflush_r>:
 8009ab4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009abc:	0716      	lsls	r6, r2, #28
 8009abe:	4605      	mov	r5, r0
 8009ac0:	460c      	mov	r4, r1
 8009ac2:	d454      	bmi.n	8009b6e <__sflush_r+0xba>
 8009ac4:	684b      	ldr	r3, [r1, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	dc02      	bgt.n	8009ad0 <__sflush_r+0x1c>
 8009aca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	dd48      	ble.n	8009b62 <__sflush_r+0xae>
 8009ad0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ad2:	2e00      	cmp	r6, #0
 8009ad4:	d045      	beq.n	8009b62 <__sflush_r+0xae>
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009adc:	682f      	ldr	r7, [r5, #0]
 8009ade:	6a21      	ldr	r1, [r4, #32]
 8009ae0:	602b      	str	r3, [r5, #0]
 8009ae2:	d030      	beq.n	8009b46 <__sflush_r+0x92>
 8009ae4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009ae6:	89a3      	ldrh	r3, [r4, #12]
 8009ae8:	0759      	lsls	r1, r3, #29
 8009aea:	d505      	bpl.n	8009af8 <__sflush_r+0x44>
 8009aec:	6863      	ldr	r3, [r4, #4]
 8009aee:	1ad2      	subs	r2, r2, r3
 8009af0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009af2:	b10b      	cbz	r3, 8009af8 <__sflush_r+0x44>
 8009af4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009af6:	1ad2      	subs	r2, r2, r3
 8009af8:	2300      	movs	r3, #0
 8009afa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009afc:	6a21      	ldr	r1, [r4, #32]
 8009afe:	4628      	mov	r0, r5
 8009b00:	47b0      	blx	r6
 8009b02:	1c43      	adds	r3, r0, #1
 8009b04:	89a3      	ldrh	r3, [r4, #12]
 8009b06:	d106      	bne.n	8009b16 <__sflush_r+0x62>
 8009b08:	6829      	ldr	r1, [r5, #0]
 8009b0a:	291d      	cmp	r1, #29
 8009b0c:	d82b      	bhi.n	8009b66 <__sflush_r+0xb2>
 8009b0e:	4a2a      	ldr	r2, [pc, #168]	@ (8009bb8 <__sflush_r+0x104>)
 8009b10:	40ca      	lsrs	r2, r1
 8009b12:	07d6      	lsls	r6, r2, #31
 8009b14:	d527      	bpl.n	8009b66 <__sflush_r+0xb2>
 8009b16:	2200      	movs	r2, #0
 8009b18:	6062      	str	r2, [r4, #4]
 8009b1a:	04d9      	lsls	r1, r3, #19
 8009b1c:	6922      	ldr	r2, [r4, #16]
 8009b1e:	6022      	str	r2, [r4, #0]
 8009b20:	d504      	bpl.n	8009b2c <__sflush_r+0x78>
 8009b22:	1c42      	adds	r2, r0, #1
 8009b24:	d101      	bne.n	8009b2a <__sflush_r+0x76>
 8009b26:	682b      	ldr	r3, [r5, #0]
 8009b28:	b903      	cbnz	r3, 8009b2c <__sflush_r+0x78>
 8009b2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8009b2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b2e:	602f      	str	r7, [r5, #0]
 8009b30:	b1b9      	cbz	r1, 8009b62 <__sflush_r+0xae>
 8009b32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b36:	4299      	cmp	r1, r3
 8009b38:	d002      	beq.n	8009b40 <__sflush_r+0x8c>
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	f7ff f9e8 	bl	8008f10 <_free_r>
 8009b40:	2300      	movs	r3, #0
 8009b42:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b44:	e00d      	b.n	8009b62 <__sflush_r+0xae>
 8009b46:	2301      	movs	r3, #1
 8009b48:	4628      	mov	r0, r5
 8009b4a:	47b0      	blx	r6
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	1c50      	adds	r0, r2, #1
 8009b50:	d1c9      	bne.n	8009ae6 <__sflush_r+0x32>
 8009b52:	682b      	ldr	r3, [r5, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d0c6      	beq.n	8009ae6 <__sflush_r+0x32>
 8009b58:	2b1d      	cmp	r3, #29
 8009b5a:	d001      	beq.n	8009b60 <__sflush_r+0xac>
 8009b5c:	2b16      	cmp	r3, #22
 8009b5e:	d11e      	bne.n	8009b9e <__sflush_r+0xea>
 8009b60:	602f      	str	r7, [r5, #0]
 8009b62:	2000      	movs	r0, #0
 8009b64:	e022      	b.n	8009bac <__sflush_r+0xf8>
 8009b66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b6a:	b21b      	sxth	r3, r3
 8009b6c:	e01b      	b.n	8009ba6 <__sflush_r+0xf2>
 8009b6e:	690f      	ldr	r7, [r1, #16]
 8009b70:	2f00      	cmp	r7, #0
 8009b72:	d0f6      	beq.n	8009b62 <__sflush_r+0xae>
 8009b74:	0793      	lsls	r3, r2, #30
 8009b76:	680e      	ldr	r6, [r1, #0]
 8009b78:	bf08      	it	eq
 8009b7a:	694b      	ldreq	r3, [r1, #20]
 8009b7c:	600f      	str	r7, [r1, #0]
 8009b7e:	bf18      	it	ne
 8009b80:	2300      	movne	r3, #0
 8009b82:	eba6 0807 	sub.w	r8, r6, r7
 8009b86:	608b      	str	r3, [r1, #8]
 8009b88:	f1b8 0f00 	cmp.w	r8, #0
 8009b8c:	dde9      	ble.n	8009b62 <__sflush_r+0xae>
 8009b8e:	6a21      	ldr	r1, [r4, #32]
 8009b90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009b92:	4643      	mov	r3, r8
 8009b94:	463a      	mov	r2, r7
 8009b96:	4628      	mov	r0, r5
 8009b98:	47b0      	blx	r6
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	dc08      	bgt.n	8009bb0 <__sflush_r+0xfc>
 8009b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ba6:	81a3      	strh	r3, [r4, #12]
 8009ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bb0:	4407      	add	r7, r0
 8009bb2:	eba8 0800 	sub.w	r8, r8, r0
 8009bb6:	e7e7      	b.n	8009b88 <__sflush_r+0xd4>
 8009bb8:	20400001 	.word	0x20400001

08009bbc <_fflush_r>:
 8009bbc:	b538      	push	{r3, r4, r5, lr}
 8009bbe:	690b      	ldr	r3, [r1, #16]
 8009bc0:	4605      	mov	r5, r0
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	b913      	cbnz	r3, 8009bcc <_fflush_r+0x10>
 8009bc6:	2500      	movs	r5, #0
 8009bc8:	4628      	mov	r0, r5
 8009bca:	bd38      	pop	{r3, r4, r5, pc}
 8009bcc:	b118      	cbz	r0, 8009bd6 <_fflush_r+0x1a>
 8009bce:	6a03      	ldr	r3, [r0, #32]
 8009bd0:	b90b      	cbnz	r3, 8009bd6 <_fflush_r+0x1a>
 8009bd2:	f7fe fa27 	bl	8008024 <__sinit>
 8009bd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d0f3      	beq.n	8009bc6 <_fflush_r+0xa>
 8009bde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009be0:	07d0      	lsls	r0, r2, #31
 8009be2:	d404      	bmi.n	8009bee <_fflush_r+0x32>
 8009be4:	0599      	lsls	r1, r3, #22
 8009be6:	d402      	bmi.n	8009bee <_fflush_r+0x32>
 8009be8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bea:	f7fe fb34 	bl	8008256 <__retarget_lock_acquire_recursive>
 8009bee:	4628      	mov	r0, r5
 8009bf0:	4621      	mov	r1, r4
 8009bf2:	f7ff ff5f 	bl	8009ab4 <__sflush_r>
 8009bf6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009bf8:	07da      	lsls	r2, r3, #31
 8009bfa:	4605      	mov	r5, r0
 8009bfc:	d4e4      	bmi.n	8009bc8 <_fflush_r+0xc>
 8009bfe:	89a3      	ldrh	r3, [r4, #12]
 8009c00:	059b      	lsls	r3, r3, #22
 8009c02:	d4e1      	bmi.n	8009bc8 <_fflush_r+0xc>
 8009c04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c06:	f7fe fb27 	bl	8008258 <__retarget_lock_release_recursive>
 8009c0a:	e7dd      	b.n	8009bc8 <_fflush_r+0xc>

08009c0c <memmove>:
 8009c0c:	4288      	cmp	r0, r1
 8009c0e:	b510      	push	{r4, lr}
 8009c10:	eb01 0402 	add.w	r4, r1, r2
 8009c14:	d902      	bls.n	8009c1c <memmove+0x10>
 8009c16:	4284      	cmp	r4, r0
 8009c18:	4623      	mov	r3, r4
 8009c1a:	d807      	bhi.n	8009c2c <memmove+0x20>
 8009c1c:	1e43      	subs	r3, r0, #1
 8009c1e:	42a1      	cmp	r1, r4
 8009c20:	d008      	beq.n	8009c34 <memmove+0x28>
 8009c22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c2a:	e7f8      	b.n	8009c1e <memmove+0x12>
 8009c2c:	4402      	add	r2, r0
 8009c2e:	4601      	mov	r1, r0
 8009c30:	428a      	cmp	r2, r1
 8009c32:	d100      	bne.n	8009c36 <memmove+0x2a>
 8009c34:	bd10      	pop	{r4, pc}
 8009c36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c3e:	e7f7      	b.n	8009c30 <memmove+0x24>

08009c40 <_sbrk_r>:
 8009c40:	b538      	push	{r3, r4, r5, lr}
 8009c42:	4d06      	ldr	r5, [pc, #24]	@ (8009c5c <_sbrk_r+0x1c>)
 8009c44:	2300      	movs	r3, #0
 8009c46:	4604      	mov	r4, r0
 8009c48:	4608      	mov	r0, r1
 8009c4a:	602b      	str	r3, [r5, #0]
 8009c4c:	f7f8 f9ce 	bl	8001fec <_sbrk>
 8009c50:	1c43      	adds	r3, r0, #1
 8009c52:	d102      	bne.n	8009c5a <_sbrk_r+0x1a>
 8009c54:	682b      	ldr	r3, [r5, #0]
 8009c56:	b103      	cbz	r3, 8009c5a <_sbrk_r+0x1a>
 8009c58:	6023      	str	r3, [r4, #0]
 8009c5a:	bd38      	pop	{r3, r4, r5, pc}
 8009c5c:	200005c0 	.word	0x200005c0

08009c60 <memcpy>:
 8009c60:	440a      	add	r2, r1
 8009c62:	4291      	cmp	r1, r2
 8009c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c68:	d100      	bne.n	8009c6c <memcpy+0xc>
 8009c6a:	4770      	bx	lr
 8009c6c:	b510      	push	{r4, lr}
 8009c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c76:	4291      	cmp	r1, r2
 8009c78:	d1f9      	bne.n	8009c6e <memcpy+0xe>
 8009c7a:	bd10      	pop	{r4, pc}

08009c7c <__assert_func>:
 8009c7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c7e:	4614      	mov	r4, r2
 8009c80:	461a      	mov	r2, r3
 8009c82:	4b09      	ldr	r3, [pc, #36]	@ (8009ca8 <__assert_func+0x2c>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4605      	mov	r5, r0
 8009c88:	68d8      	ldr	r0, [r3, #12]
 8009c8a:	b14c      	cbz	r4, 8009ca0 <__assert_func+0x24>
 8009c8c:	4b07      	ldr	r3, [pc, #28]	@ (8009cac <__assert_func+0x30>)
 8009c8e:	9100      	str	r1, [sp, #0]
 8009c90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c94:	4906      	ldr	r1, [pc, #24]	@ (8009cb0 <__assert_func+0x34>)
 8009c96:	462b      	mov	r3, r5
 8009c98:	f000 f870 	bl	8009d7c <fiprintf>
 8009c9c:	f000 f880 	bl	8009da0 <abort>
 8009ca0:	4b04      	ldr	r3, [pc, #16]	@ (8009cb4 <__assert_func+0x38>)
 8009ca2:	461c      	mov	r4, r3
 8009ca4:	e7f3      	b.n	8009c8e <__assert_func+0x12>
 8009ca6:	bf00      	nop
 8009ca8:	20000018 	.word	0x20000018
 8009cac:	0800b109 	.word	0x0800b109
 8009cb0:	0800b116 	.word	0x0800b116
 8009cb4:	0800b144 	.word	0x0800b144

08009cb8 <_calloc_r>:
 8009cb8:	b570      	push	{r4, r5, r6, lr}
 8009cba:	fba1 5402 	umull	r5, r4, r1, r2
 8009cbe:	b934      	cbnz	r4, 8009cce <_calloc_r+0x16>
 8009cc0:	4629      	mov	r1, r5
 8009cc2:	f7ff f999 	bl	8008ff8 <_malloc_r>
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	b928      	cbnz	r0, 8009cd6 <_calloc_r+0x1e>
 8009cca:	4630      	mov	r0, r6
 8009ccc:	bd70      	pop	{r4, r5, r6, pc}
 8009cce:	220c      	movs	r2, #12
 8009cd0:	6002      	str	r2, [r0, #0]
 8009cd2:	2600      	movs	r6, #0
 8009cd4:	e7f9      	b.n	8009cca <_calloc_r+0x12>
 8009cd6:	462a      	mov	r2, r5
 8009cd8:	4621      	mov	r1, r4
 8009cda:	f7fe fa3e 	bl	800815a <memset>
 8009cde:	e7f4      	b.n	8009cca <_calloc_r+0x12>

08009ce0 <__ascii_mbtowc>:
 8009ce0:	b082      	sub	sp, #8
 8009ce2:	b901      	cbnz	r1, 8009ce6 <__ascii_mbtowc+0x6>
 8009ce4:	a901      	add	r1, sp, #4
 8009ce6:	b142      	cbz	r2, 8009cfa <__ascii_mbtowc+0x1a>
 8009ce8:	b14b      	cbz	r3, 8009cfe <__ascii_mbtowc+0x1e>
 8009cea:	7813      	ldrb	r3, [r2, #0]
 8009cec:	600b      	str	r3, [r1, #0]
 8009cee:	7812      	ldrb	r2, [r2, #0]
 8009cf0:	1e10      	subs	r0, r2, #0
 8009cf2:	bf18      	it	ne
 8009cf4:	2001      	movne	r0, #1
 8009cf6:	b002      	add	sp, #8
 8009cf8:	4770      	bx	lr
 8009cfa:	4610      	mov	r0, r2
 8009cfc:	e7fb      	b.n	8009cf6 <__ascii_mbtowc+0x16>
 8009cfe:	f06f 0001 	mvn.w	r0, #1
 8009d02:	e7f8      	b.n	8009cf6 <__ascii_mbtowc+0x16>

08009d04 <_realloc_r>:
 8009d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d08:	4607      	mov	r7, r0
 8009d0a:	4614      	mov	r4, r2
 8009d0c:	460d      	mov	r5, r1
 8009d0e:	b921      	cbnz	r1, 8009d1a <_realloc_r+0x16>
 8009d10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d14:	4611      	mov	r1, r2
 8009d16:	f7ff b96f 	b.w	8008ff8 <_malloc_r>
 8009d1a:	b92a      	cbnz	r2, 8009d28 <_realloc_r+0x24>
 8009d1c:	f7ff f8f8 	bl	8008f10 <_free_r>
 8009d20:	4625      	mov	r5, r4
 8009d22:	4628      	mov	r0, r5
 8009d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d28:	f000 f841 	bl	8009dae <_malloc_usable_size_r>
 8009d2c:	4284      	cmp	r4, r0
 8009d2e:	4606      	mov	r6, r0
 8009d30:	d802      	bhi.n	8009d38 <_realloc_r+0x34>
 8009d32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d36:	d8f4      	bhi.n	8009d22 <_realloc_r+0x1e>
 8009d38:	4621      	mov	r1, r4
 8009d3a:	4638      	mov	r0, r7
 8009d3c:	f7ff f95c 	bl	8008ff8 <_malloc_r>
 8009d40:	4680      	mov	r8, r0
 8009d42:	b908      	cbnz	r0, 8009d48 <_realloc_r+0x44>
 8009d44:	4645      	mov	r5, r8
 8009d46:	e7ec      	b.n	8009d22 <_realloc_r+0x1e>
 8009d48:	42b4      	cmp	r4, r6
 8009d4a:	4622      	mov	r2, r4
 8009d4c:	4629      	mov	r1, r5
 8009d4e:	bf28      	it	cs
 8009d50:	4632      	movcs	r2, r6
 8009d52:	f7ff ff85 	bl	8009c60 <memcpy>
 8009d56:	4629      	mov	r1, r5
 8009d58:	4638      	mov	r0, r7
 8009d5a:	f7ff f8d9 	bl	8008f10 <_free_r>
 8009d5e:	e7f1      	b.n	8009d44 <_realloc_r+0x40>

08009d60 <__ascii_wctomb>:
 8009d60:	4603      	mov	r3, r0
 8009d62:	4608      	mov	r0, r1
 8009d64:	b141      	cbz	r1, 8009d78 <__ascii_wctomb+0x18>
 8009d66:	2aff      	cmp	r2, #255	@ 0xff
 8009d68:	d904      	bls.n	8009d74 <__ascii_wctomb+0x14>
 8009d6a:	228a      	movs	r2, #138	@ 0x8a
 8009d6c:	601a      	str	r2, [r3, #0]
 8009d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d72:	4770      	bx	lr
 8009d74:	700a      	strb	r2, [r1, #0]
 8009d76:	2001      	movs	r0, #1
 8009d78:	4770      	bx	lr
	...

08009d7c <fiprintf>:
 8009d7c:	b40e      	push	{r1, r2, r3}
 8009d7e:	b503      	push	{r0, r1, lr}
 8009d80:	4601      	mov	r1, r0
 8009d82:	ab03      	add	r3, sp, #12
 8009d84:	4805      	ldr	r0, [pc, #20]	@ (8009d9c <fiprintf+0x20>)
 8009d86:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d8a:	6800      	ldr	r0, [r0, #0]
 8009d8c:	9301      	str	r3, [sp, #4]
 8009d8e:	f000 f83f 	bl	8009e10 <_vfiprintf_r>
 8009d92:	b002      	add	sp, #8
 8009d94:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d98:	b003      	add	sp, #12
 8009d9a:	4770      	bx	lr
 8009d9c:	20000018 	.word	0x20000018

08009da0 <abort>:
 8009da0:	b508      	push	{r3, lr}
 8009da2:	2006      	movs	r0, #6
 8009da4:	f000 fa08 	bl	800a1b8 <raise>
 8009da8:	2001      	movs	r0, #1
 8009daa:	f7f8 f8a6 	bl	8001efa <_exit>

08009dae <_malloc_usable_size_r>:
 8009dae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009db2:	1f18      	subs	r0, r3, #4
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	bfbc      	itt	lt
 8009db8:	580b      	ldrlt	r3, [r1, r0]
 8009dba:	18c0      	addlt	r0, r0, r3
 8009dbc:	4770      	bx	lr

08009dbe <__sfputc_r>:
 8009dbe:	6893      	ldr	r3, [r2, #8]
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	b410      	push	{r4}
 8009dc6:	6093      	str	r3, [r2, #8]
 8009dc8:	da08      	bge.n	8009ddc <__sfputc_r+0x1e>
 8009dca:	6994      	ldr	r4, [r2, #24]
 8009dcc:	42a3      	cmp	r3, r4
 8009dce:	db01      	blt.n	8009dd4 <__sfputc_r+0x16>
 8009dd0:	290a      	cmp	r1, #10
 8009dd2:	d103      	bne.n	8009ddc <__sfputc_r+0x1e>
 8009dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dd8:	f000 b932 	b.w	800a040 <__swbuf_r>
 8009ddc:	6813      	ldr	r3, [r2, #0]
 8009dde:	1c58      	adds	r0, r3, #1
 8009de0:	6010      	str	r0, [r2, #0]
 8009de2:	7019      	strb	r1, [r3, #0]
 8009de4:	4608      	mov	r0, r1
 8009de6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <__sfputs_r>:
 8009dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dee:	4606      	mov	r6, r0
 8009df0:	460f      	mov	r7, r1
 8009df2:	4614      	mov	r4, r2
 8009df4:	18d5      	adds	r5, r2, r3
 8009df6:	42ac      	cmp	r4, r5
 8009df8:	d101      	bne.n	8009dfe <__sfputs_r+0x12>
 8009dfa:	2000      	movs	r0, #0
 8009dfc:	e007      	b.n	8009e0e <__sfputs_r+0x22>
 8009dfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e02:	463a      	mov	r2, r7
 8009e04:	4630      	mov	r0, r6
 8009e06:	f7ff ffda 	bl	8009dbe <__sfputc_r>
 8009e0a:	1c43      	adds	r3, r0, #1
 8009e0c:	d1f3      	bne.n	8009df6 <__sfputs_r+0xa>
 8009e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e10 <_vfiprintf_r>:
 8009e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e14:	460d      	mov	r5, r1
 8009e16:	b09d      	sub	sp, #116	@ 0x74
 8009e18:	4614      	mov	r4, r2
 8009e1a:	4698      	mov	r8, r3
 8009e1c:	4606      	mov	r6, r0
 8009e1e:	b118      	cbz	r0, 8009e28 <_vfiprintf_r+0x18>
 8009e20:	6a03      	ldr	r3, [r0, #32]
 8009e22:	b90b      	cbnz	r3, 8009e28 <_vfiprintf_r+0x18>
 8009e24:	f7fe f8fe 	bl	8008024 <__sinit>
 8009e28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e2a:	07d9      	lsls	r1, r3, #31
 8009e2c:	d405      	bmi.n	8009e3a <_vfiprintf_r+0x2a>
 8009e2e:	89ab      	ldrh	r3, [r5, #12]
 8009e30:	059a      	lsls	r2, r3, #22
 8009e32:	d402      	bmi.n	8009e3a <_vfiprintf_r+0x2a>
 8009e34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e36:	f7fe fa0e 	bl	8008256 <__retarget_lock_acquire_recursive>
 8009e3a:	89ab      	ldrh	r3, [r5, #12]
 8009e3c:	071b      	lsls	r3, r3, #28
 8009e3e:	d501      	bpl.n	8009e44 <_vfiprintf_r+0x34>
 8009e40:	692b      	ldr	r3, [r5, #16]
 8009e42:	b99b      	cbnz	r3, 8009e6c <_vfiprintf_r+0x5c>
 8009e44:	4629      	mov	r1, r5
 8009e46:	4630      	mov	r0, r6
 8009e48:	f000 f938 	bl	800a0bc <__swsetup_r>
 8009e4c:	b170      	cbz	r0, 8009e6c <_vfiprintf_r+0x5c>
 8009e4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e50:	07dc      	lsls	r4, r3, #31
 8009e52:	d504      	bpl.n	8009e5e <_vfiprintf_r+0x4e>
 8009e54:	f04f 30ff 	mov.w	r0, #4294967295
 8009e58:	b01d      	add	sp, #116	@ 0x74
 8009e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e5e:	89ab      	ldrh	r3, [r5, #12]
 8009e60:	0598      	lsls	r0, r3, #22
 8009e62:	d4f7      	bmi.n	8009e54 <_vfiprintf_r+0x44>
 8009e64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e66:	f7fe f9f7 	bl	8008258 <__retarget_lock_release_recursive>
 8009e6a:	e7f3      	b.n	8009e54 <_vfiprintf_r+0x44>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e70:	2320      	movs	r3, #32
 8009e72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e76:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e7a:	2330      	movs	r3, #48	@ 0x30
 8009e7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a02c <_vfiprintf_r+0x21c>
 8009e80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e84:	f04f 0901 	mov.w	r9, #1
 8009e88:	4623      	mov	r3, r4
 8009e8a:	469a      	mov	sl, r3
 8009e8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e90:	b10a      	cbz	r2, 8009e96 <_vfiprintf_r+0x86>
 8009e92:	2a25      	cmp	r2, #37	@ 0x25
 8009e94:	d1f9      	bne.n	8009e8a <_vfiprintf_r+0x7a>
 8009e96:	ebba 0b04 	subs.w	fp, sl, r4
 8009e9a:	d00b      	beq.n	8009eb4 <_vfiprintf_r+0xa4>
 8009e9c:	465b      	mov	r3, fp
 8009e9e:	4622      	mov	r2, r4
 8009ea0:	4629      	mov	r1, r5
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	f7ff ffa2 	bl	8009dec <__sfputs_r>
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	f000 80a7 	beq.w	8009ffc <_vfiprintf_r+0x1ec>
 8009eae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009eb0:	445a      	add	r2, fp
 8009eb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	f000 809f 	beq.w	8009ffc <_vfiprintf_r+0x1ec>
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ec4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ec8:	f10a 0a01 	add.w	sl, sl, #1
 8009ecc:	9304      	str	r3, [sp, #16]
 8009ece:	9307      	str	r3, [sp, #28]
 8009ed0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ed4:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ed6:	4654      	mov	r4, sl
 8009ed8:	2205      	movs	r2, #5
 8009eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ede:	4853      	ldr	r0, [pc, #332]	@ (800a02c <_vfiprintf_r+0x21c>)
 8009ee0:	f7f6 f976 	bl	80001d0 <memchr>
 8009ee4:	9a04      	ldr	r2, [sp, #16]
 8009ee6:	b9d8      	cbnz	r0, 8009f20 <_vfiprintf_r+0x110>
 8009ee8:	06d1      	lsls	r1, r2, #27
 8009eea:	bf44      	itt	mi
 8009eec:	2320      	movmi	r3, #32
 8009eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ef2:	0713      	lsls	r3, r2, #28
 8009ef4:	bf44      	itt	mi
 8009ef6:	232b      	movmi	r3, #43	@ 0x2b
 8009ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009efc:	f89a 3000 	ldrb.w	r3, [sl]
 8009f00:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f02:	d015      	beq.n	8009f30 <_vfiprintf_r+0x120>
 8009f04:	9a07      	ldr	r2, [sp, #28]
 8009f06:	4654      	mov	r4, sl
 8009f08:	2000      	movs	r0, #0
 8009f0a:	f04f 0c0a 	mov.w	ip, #10
 8009f0e:	4621      	mov	r1, r4
 8009f10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f14:	3b30      	subs	r3, #48	@ 0x30
 8009f16:	2b09      	cmp	r3, #9
 8009f18:	d94b      	bls.n	8009fb2 <_vfiprintf_r+0x1a2>
 8009f1a:	b1b0      	cbz	r0, 8009f4a <_vfiprintf_r+0x13a>
 8009f1c:	9207      	str	r2, [sp, #28]
 8009f1e:	e014      	b.n	8009f4a <_vfiprintf_r+0x13a>
 8009f20:	eba0 0308 	sub.w	r3, r0, r8
 8009f24:	fa09 f303 	lsl.w	r3, r9, r3
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	9304      	str	r3, [sp, #16]
 8009f2c:	46a2      	mov	sl, r4
 8009f2e:	e7d2      	b.n	8009ed6 <_vfiprintf_r+0xc6>
 8009f30:	9b03      	ldr	r3, [sp, #12]
 8009f32:	1d19      	adds	r1, r3, #4
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	9103      	str	r1, [sp, #12]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	bfbb      	ittet	lt
 8009f3c:	425b      	neglt	r3, r3
 8009f3e:	f042 0202 	orrlt.w	r2, r2, #2
 8009f42:	9307      	strge	r3, [sp, #28]
 8009f44:	9307      	strlt	r3, [sp, #28]
 8009f46:	bfb8      	it	lt
 8009f48:	9204      	strlt	r2, [sp, #16]
 8009f4a:	7823      	ldrb	r3, [r4, #0]
 8009f4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f4e:	d10a      	bne.n	8009f66 <_vfiprintf_r+0x156>
 8009f50:	7863      	ldrb	r3, [r4, #1]
 8009f52:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f54:	d132      	bne.n	8009fbc <_vfiprintf_r+0x1ac>
 8009f56:	9b03      	ldr	r3, [sp, #12]
 8009f58:	1d1a      	adds	r2, r3, #4
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	9203      	str	r2, [sp, #12]
 8009f5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f62:	3402      	adds	r4, #2
 8009f64:	9305      	str	r3, [sp, #20]
 8009f66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a03c <_vfiprintf_r+0x22c>
 8009f6a:	7821      	ldrb	r1, [r4, #0]
 8009f6c:	2203      	movs	r2, #3
 8009f6e:	4650      	mov	r0, sl
 8009f70:	f7f6 f92e 	bl	80001d0 <memchr>
 8009f74:	b138      	cbz	r0, 8009f86 <_vfiprintf_r+0x176>
 8009f76:	9b04      	ldr	r3, [sp, #16]
 8009f78:	eba0 000a 	sub.w	r0, r0, sl
 8009f7c:	2240      	movs	r2, #64	@ 0x40
 8009f7e:	4082      	lsls	r2, r0
 8009f80:	4313      	orrs	r3, r2
 8009f82:	3401      	adds	r4, #1
 8009f84:	9304      	str	r3, [sp, #16]
 8009f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f8a:	4829      	ldr	r0, [pc, #164]	@ (800a030 <_vfiprintf_r+0x220>)
 8009f8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f90:	2206      	movs	r2, #6
 8009f92:	f7f6 f91d 	bl	80001d0 <memchr>
 8009f96:	2800      	cmp	r0, #0
 8009f98:	d03f      	beq.n	800a01a <_vfiprintf_r+0x20a>
 8009f9a:	4b26      	ldr	r3, [pc, #152]	@ (800a034 <_vfiprintf_r+0x224>)
 8009f9c:	bb1b      	cbnz	r3, 8009fe6 <_vfiprintf_r+0x1d6>
 8009f9e:	9b03      	ldr	r3, [sp, #12]
 8009fa0:	3307      	adds	r3, #7
 8009fa2:	f023 0307 	bic.w	r3, r3, #7
 8009fa6:	3308      	adds	r3, #8
 8009fa8:	9303      	str	r3, [sp, #12]
 8009faa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fac:	443b      	add	r3, r7
 8009fae:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fb0:	e76a      	b.n	8009e88 <_vfiprintf_r+0x78>
 8009fb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fb6:	460c      	mov	r4, r1
 8009fb8:	2001      	movs	r0, #1
 8009fba:	e7a8      	b.n	8009f0e <_vfiprintf_r+0xfe>
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	3401      	adds	r4, #1
 8009fc0:	9305      	str	r3, [sp, #20]
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	f04f 0c0a 	mov.w	ip, #10
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fce:	3a30      	subs	r2, #48	@ 0x30
 8009fd0:	2a09      	cmp	r2, #9
 8009fd2:	d903      	bls.n	8009fdc <_vfiprintf_r+0x1cc>
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d0c6      	beq.n	8009f66 <_vfiprintf_r+0x156>
 8009fd8:	9105      	str	r1, [sp, #20]
 8009fda:	e7c4      	b.n	8009f66 <_vfiprintf_r+0x156>
 8009fdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fe0:	4604      	mov	r4, r0
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e7f0      	b.n	8009fc8 <_vfiprintf_r+0x1b8>
 8009fe6:	ab03      	add	r3, sp, #12
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	462a      	mov	r2, r5
 8009fec:	4b12      	ldr	r3, [pc, #72]	@ (800a038 <_vfiprintf_r+0x228>)
 8009fee:	a904      	add	r1, sp, #16
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	f7fd fbd5 	bl	80077a0 <_printf_float>
 8009ff6:	4607      	mov	r7, r0
 8009ff8:	1c78      	adds	r0, r7, #1
 8009ffa:	d1d6      	bne.n	8009faa <_vfiprintf_r+0x19a>
 8009ffc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ffe:	07d9      	lsls	r1, r3, #31
 800a000:	d405      	bmi.n	800a00e <_vfiprintf_r+0x1fe>
 800a002:	89ab      	ldrh	r3, [r5, #12]
 800a004:	059a      	lsls	r2, r3, #22
 800a006:	d402      	bmi.n	800a00e <_vfiprintf_r+0x1fe>
 800a008:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a00a:	f7fe f925 	bl	8008258 <__retarget_lock_release_recursive>
 800a00e:	89ab      	ldrh	r3, [r5, #12]
 800a010:	065b      	lsls	r3, r3, #25
 800a012:	f53f af1f 	bmi.w	8009e54 <_vfiprintf_r+0x44>
 800a016:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a018:	e71e      	b.n	8009e58 <_vfiprintf_r+0x48>
 800a01a:	ab03      	add	r3, sp, #12
 800a01c:	9300      	str	r3, [sp, #0]
 800a01e:	462a      	mov	r2, r5
 800a020:	4b05      	ldr	r3, [pc, #20]	@ (800a038 <_vfiprintf_r+0x228>)
 800a022:	a904      	add	r1, sp, #16
 800a024:	4630      	mov	r0, r6
 800a026:	f7fd fe53 	bl	8007cd0 <_printf_i>
 800a02a:	e7e4      	b.n	8009ff6 <_vfiprintf_r+0x1e6>
 800a02c:	0800b0ee 	.word	0x0800b0ee
 800a030:	0800b0f8 	.word	0x0800b0f8
 800a034:	080077a1 	.word	0x080077a1
 800a038:	08009ded 	.word	0x08009ded
 800a03c:	0800b0f4 	.word	0x0800b0f4

0800a040 <__swbuf_r>:
 800a040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a042:	460e      	mov	r6, r1
 800a044:	4614      	mov	r4, r2
 800a046:	4605      	mov	r5, r0
 800a048:	b118      	cbz	r0, 800a052 <__swbuf_r+0x12>
 800a04a:	6a03      	ldr	r3, [r0, #32]
 800a04c:	b90b      	cbnz	r3, 800a052 <__swbuf_r+0x12>
 800a04e:	f7fd ffe9 	bl	8008024 <__sinit>
 800a052:	69a3      	ldr	r3, [r4, #24]
 800a054:	60a3      	str	r3, [r4, #8]
 800a056:	89a3      	ldrh	r3, [r4, #12]
 800a058:	071a      	lsls	r2, r3, #28
 800a05a:	d501      	bpl.n	800a060 <__swbuf_r+0x20>
 800a05c:	6923      	ldr	r3, [r4, #16]
 800a05e:	b943      	cbnz	r3, 800a072 <__swbuf_r+0x32>
 800a060:	4621      	mov	r1, r4
 800a062:	4628      	mov	r0, r5
 800a064:	f000 f82a 	bl	800a0bc <__swsetup_r>
 800a068:	b118      	cbz	r0, 800a072 <__swbuf_r+0x32>
 800a06a:	f04f 37ff 	mov.w	r7, #4294967295
 800a06e:	4638      	mov	r0, r7
 800a070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a072:	6823      	ldr	r3, [r4, #0]
 800a074:	6922      	ldr	r2, [r4, #16]
 800a076:	1a98      	subs	r0, r3, r2
 800a078:	6963      	ldr	r3, [r4, #20]
 800a07a:	b2f6      	uxtb	r6, r6
 800a07c:	4283      	cmp	r3, r0
 800a07e:	4637      	mov	r7, r6
 800a080:	dc05      	bgt.n	800a08e <__swbuf_r+0x4e>
 800a082:	4621      	mov	r1, r4
 800a084:	4628      	mov	r0, r5
 800a086:	f7ff fd99 	bl	8009bbc <_fflush_r>
 800a08a:	2800      	cmp	r0, #0
 800a08c:	d1ed      	bne.n	800a06a <__swbuf_r+0x2a>
 800a08e:	68a3      	ldr	r3, [r4, #8]
 800a090:	3b01      	subs	r3, #1
 800a092:	60a3      	str	r3, [r4, #8]
 800a094:	6823      	ldr	r3, [r4, #0]
 800a096:	1c5a      	adds	r2, r3, #1
 800a098:	6022      	str	r2, [r4, #0]
 800a09a:	701e      	strb	r6, [r3, #0]
 800a09c:	6962      	ldr	r2, [r4, #20]
 800a09e:	1c43      	adds	r3, r0, #1
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d004      	beq.n	800a0ae <__swbuf_r+0x6e>
 800a0a4:	89a3      	ldrh	r3, [r4, #12]
 800a0a6:	07db      	lsls	r3, r3, #31
 800a0a8:	d5e1      	bpl.n	800a06e <__swbuf_r+0x2e>
 800a0aa:	2e0a      	cmp	r6, #10
 800a0ac:	d1df      	bne.n	800a06e <__swbuf_r+0x2e>
 800a0ae:	4621      	mov	r1, r4
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	f7ff fd83 	bl	8009bbc <_fflush_r>
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	d0d9      	beq.n	800a06e <__swbuf_r+0x2e>
 800a0ba:	e7d6      	b.n	800a06a <__swbuf_r+0x2a>

0800a0bc <__swsetup_r>:
 800a0bc:	b538      	push	{r3, r4, r5, lr}
 800a0be:	4b29      	ldr	r3, [pc, #164]	@ (800a164 <__swsetup_r+0xa8>)
 800a0c0:	4605      	mov	r5, r0
 800a0c2:	6818      	ldr	r0, [r3, #0]
 800a0c4:	460c      	mov	r4, r1
 800a0c6:	b118      	cbz	r0, 800a0d0 <__swsetup_r+0x14>
 800a0c8:	6a03      	ldr	r3, [r0, #32]
 800a0ca:	b90b      	cbnz	r3, 800a0d0 <__swsetup_r+0x14>
 800a0cc:	f7fd ffaa 	bl	8008024 <__sinit>
 800a0d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0d4:	0719      	lsls	r1, r3, #28
 800a0d6:	d422      	bmi.n	800a11e <__swsetup_r+0x62>
 800a0d8:	06da      	lsls	r2, r3, #27
 800a0da:	d407      	bmi.n	800a0ec <__swsetup_r+0x30>
 800a0dc:	2209      	movs	r2, #9
 800a0de:	602a      	str	r2, [r5, #0]
 800a0e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0e4:	81a3      	strh	r3, [r4, #12]
 800a0e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ea:	e033      	b.n	800a154 <__swsetup_r+0x98>
 800a0ec:	0758      	lsls	r0, r3, #29
 800a0ee:	d512      	bpl.n	800a116 <__swsetup_r+0x5a>
 800a0f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0f2:	b141      	cbz	r1, 800a106 <__swsetup_r+0x4a>
 800a0f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0f8:	4299      	cmp	r1, r3
 800a0fa:	d002      	beq.n	800a102 <__swsetup_r+0x46>
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	f7fe ff07 	bl	8008f10 <_free_r>
 800a102:	2300      	movs	r3, #0
 800a104:	6363      	str	r3, [r4, #52]	@ 0x34
 800a106:	89a3      	ldrh	r3, [r4, #12]
 800a108:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a10c:	81a3      	strh	r3, [r4, #12]
 800a10e:	2300      	movs	r3, #0
 800a110:	6063      	str	r3, [r4, #4]
 800a112:	6923      	ldr	r3, [r4, #16]
 800a114:	6023      	str	r3, [r4, #0]
 800a116:	89a3      	ldrh	r3, [r4, #12]
 800a118:	f043 0308 	orr.w	r3, r3, #8
 800a11c:	81a3      	strh	r3, [r4, #12]
 800a11e:	6923      	ldr	r3, [r4, #16]
 800a120:	b94b      	cbnz	r3, 800a136 <__swsetup_r+0x7a>
 800a122:	89a3      	ldrh	r3, [r4, #12]
 800a124:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a12c:	d003      	beq.n	800a136 <__swsetup_r+0x7a>
 800a12e:	4621      	mov	r1, r4
 800a130:	4628      	mov	r0, r5
 800a132:	f000 f883 	bl	800a23c <__smakebuf_r>
 800a136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a13a:	f013 0201 	ands.w	r2, r3, #1
 800a13e:	d00a      	beq.n	800a156 <__swsetup_r+0x9a>
 800a140:	2200      	movs	r2, #0
 800a142:	60a2      	str	r2, [r4, #8]
 800a144:	6962      	ldr	r2, [r4, #20]
 800a146:	4252      	negs	r2, r2
 800a148:	61a2      	str	r2, [r4, #24]
 800a14a:	6922      	ldr	r2, [r4, #16]
 800a14c:	b942      	cbnz	r2, 800a160 <__swsetup_r+0xa4>
 800a14e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a152:	d1c5      	bne.n	800a0e0 <__swsetup_r+0x24>
 800a154:	bd38      	pop	{r3, r4, r5, pc}
 800a156:	0799      	lsls	r1, r3, #30
 800a158:	bf58      	it	pl
 800a15a:	6962      	ldrpl	r2, [r4, #20]
 800a15c:	60a2      	str	r2, [r4, #8]
 800a15e:	e7f4      	b.n	800a14a <__swsetup_r+0x8e>
 800a160:	2000      	movs	r0, #0
 800a162:	e7f7      	b.n	800a154 <__swsetup_r+0x98>
 800a164:	20000018 	.word	0x20000018

0800a168 <_raise_r>:
 800a168:	291f      	cmp	r1, #31
 800a16a:	b538      	push	{r3, r4, r5, lr}
 800a16c:	4605      	mov	r5, r0
 800a16e:	460c      	mov	r4, r1
 800a170:	d904      	bls.n	800a17c <_raise_r+0x14>
 800a172:	2316      	movs	r3, #22
 800a174:	6003      	str	r3, [r0, #0]
 800a176:	f04f 30ff 	mov.w	r0, #4294967295
 800a17a:	bd38      	pop	{r3, r4, r5, pc}
 800a17c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a17e:	b112      	cbz	r2, 800a186 <_raise_r+0x1e>
 800a180:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a184:	b94b      	cbnz	r3, 800a19a <_raise_r+0x32>
 800a186:	4628      	mov	r0, r5
 800a188:	f000 f830 	bl	800a1ec <_getpid_r>
 800a18c:	4622      	mov	r2, r4
 800a18e:	4601      	mov	r1, r0
 800a190:	4628      	mov	r0, r5
 800a192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a196:	f000 b817 	b.w	800a1c8 <_kill_r>
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d00a      	beq.n	800a1b4 <_raise_r+0x4c>
 800a19e:	1c59      	adds	r1, r3, #1
 800a1a0:	d103      	bne.n	800a1aa <_raise_r+0x42>
 800a1a2:	2316      	movs	r3, #22
 800a1a4:	6003      	str	r3, [r0, #0]
 800a1a6:	2001      	movs	r0, #1
 800a1a8:	e7e7      	b.n	800a17a <_raise_r+0x12>
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	4798      	blx	r3
 800a1b4:	2000      	movs	r0, #0
 800a1b6:	e7e0      	b.n	800a17a <_raise_r+0x12>

0800a1b8 <raise>:
 800a1b8:	4b02      	ldr	r3, [pc, #8]	@ (800a1c4 <raise+0xc>)
 800a1ba:	4601      	mov	r1, r0
 800a1bc:	6818      	ldr	r0, [r3, #0]
 800a1be:	f7ff bfd3 	b.w	800a168 <_raise_r>
 800a1c2:	bf00      	nop
 800a1c4:	20000018 	.word	0x20000018

0800a1c8 <_kill_r>:
 800a1c8:	b538      	push	{r3, r4, r5, lr}
 800a1ca:	4d07      	ldr	r5, [pc, #28]	@ (800a1e8 <_kill_r+0x20>)
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	4608      	mov	r0, r1
 800a1d2:	4611      	mov	r1, r2
 800a1d4:	602b      	str	r3, [r5, #0]
 800a1d6:	f7f7 fe80 	bl	8001eda <_kill>
 800a1da:	1c43      	adds	r3, r0, #1
 800a1dc:	d102      	bne.n	800a1e4 <_kill_r+0x1c>
 800a1de:	682b      	ldr	r3, [r5, #0]
 800a1e0:	b103      	cbz	r3, 800a1e4 <_kill_r+0x1c>
 800a1e2:	6023      	str	r3, [r4, #0]
 800a1e4:	bd38      	pop	{r3, r4, r5, pc}
 800a1e6:	bf00      	nop
 800a1e8:	200005c0 	.word	0x200005c0

0800a1ec <_getpid_r>:
 800a1ec:	f7f7 be6d 	b.w	8001eca <_getpid>

0800a1f0 <__swhatbuf_r>:
 800a1f0:	b570      	push	{r4, r5, r6, lr}
 800a1f2:	460c      	mov	r4, r1
 800a1f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1f8:	2900      	cmp	r1, #0
 800a1fa:	b096      	sub	sp, #88	@ 0x58
 800a1fc:	4615      	mov	r5, r2
 800a1fe:	461e      	mov	r6, r3
 800a200:	da0d      	bge.n	800a21e <__swhatbuf_r+0x2e>
 800a202:	89a3      	ldrh	r3, [r4, #12]
 800a204:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a208:	f04f 0100 	mov.w	r1, #0
 800a20c:	bf14      	ite	ne
 800a20e:	2340      	movne	r3, #64	@ 0x40
 800a210:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a214:	2000      	movs	r0, #0
 800a216:	6031      	str	r1, [r6, #0]
 800a218:	602b      	str	r3, [r5, #0]
 800a21a:	b016      	add	sp, #88	@ 0x58
 800a21c:	bd70      	pop	{r4, r5, r6, pc}
 800a21e:	466a      	mov	r2, sp
 800a220:	f000 f848 	bl	800a2b4 <_fstat_r>
 800a224:	2800      	cmp	r0, #0
 800a226:	dbec      	blt.n	800a202 <__swhatbuf_r+0x12>
 800a228:	9901      	ldr	r1, [sp, #4]
 800a22a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a22e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a232:	4259      	negs	r1, r3
 800a234:	4159      	adcs	r1, r3
 800a236:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a23a:	e7eb      	b.n	800a214 <__swhatbuf_r+0x24>

0800a23c <__smakebuf_r>:
 800a23c:	898b      	ldrh	r3, [r1, #12]
 800a23e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a240:	079d      	lsls	r5, r3, #30
 800a242:	4606      	mov	r6, r0
 800a244:	460c      	mov	r4, r1
 800a246:	d507      	bpl.n	800a258 <__smakebuf_r+0x1c>
 800a248:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a24c:	6023      	str	r3, [r4, #0]
 800a24e:	6123      	str	r3, [r4, #16]
 800a250:	2301      	movs	r3, #1
 800a252:	6163      	str	r3, [r4, #20]
 800a254:	b003      	add	sp, #12
 800a256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a258:	ab01      	add	r3, sp, #4
 800a25a:	466a      	mov	r2, sp
 800a25c:	f7ff ffc8 	bl	800a1f0 <__swhatbuf_r>
 800a260:	9f00      	ldr	r7, [sp, #0]
 800a262:	4605      	mov	r5, r0
 800a264:	4639      	mov	r1, r7
 800a266:	4630      	mov	r0, r6
 800a268:	f7fe fec6 	bl	8008ff8 <_malloc_r>
 800a26c:	b948      	cbnz	r0, 800a282 <__smakebuf_r+0x46>
 800a26e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a272:	059a      	lsls	r2, r3, #22
 800a274:	d4ee      	bmi.n	800a254 <__smakebuf_r+0x18>
 800a276:	f023 0303 	bic.w	r3, r3, #3
 800a27a:	f043 0302 	orr.w	r3, r3, #2
 800a27e:	81a3      	strh	r3, [r4, #12]
 800a280:	e7e2      	b.n	800a248 <__smakebuf_r+0xc>
 800a282:	89a3      	ldrh	r3, [r4, #12]
 800a284:	6020      	str	r0, [r4, #0]
 800a286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a28a:	81a3      	strh	r3, [r4, #12]
 800a28c:	9b01      	ldr	r3, [sp, #4]
 800a28e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a292:	b15b      	cbz	r3, 800a2ac <__smakebuf_r+0x70>
 800a294:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a298:	4630      	mov	r0, r6
 800a29a:	f000 f81d 	bl	800a2d8 <_isatty_r>
 800a29e:	b128      	cbz	r0, 800a2ac <__smakebuf_r+0x70>
 800a2a0:	89a3      	ldrh	r3, [r4, #12]
 800a2a2:	f023 0303 	bic.w	r3, r3, #3
 800a2a6:	f043 0301 	orr.w	r3, r3, #1
 800a2aa:	81a3      	strh	r3, [r4, #12]
 800a2ac:	89a3      	ldrh	r3, [r4, #12]
 800a2ae:	431d      	orrs	r5, r3
 800a2b0:	81a5      	strh	r5, [r4, #12]
 800a2b2:	e7cf      	b.n	800a254 <__smakebuf_r+0x18>

0800a2b4 <_fstat_r>:
 800a2b4:	b538      	push	{r3, r4, r5, lr}
 800a2b6:	4d07      	ldr	r5, [pc, #28]	@ (800a2d4 <_fstat_r+0x20>)
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	4608      	mov	r0, r1
 800a2be:	4611      	mov	r1, r2
 800a2c0:	602b      	str	r3, [r5, #0]
 800a2c2:	f7f7 fe6a 	bl	8001f9a <_fstat>
 800a2c6:	1c43      	adds	r3, r0, #1
 800a2c8:	d102      	bne.n	800a2d0 <_fstat_r+0x1c>
 800a2ca:	682b      	ldr	r3, [r5, #0]
 800a2cc:	b103      	cbz	r3, 800a2d0 <_fstat_r+0x1c>
 800a2ce:	6023      	str	r3, [r4, #0]
 800a2d0:	bd38      	pop	{r3, r4, r5, pc}
 800a2d2:	bf00      	nop
 800a2d4:	200005c0 	.word	0x200005c0

0800a2d8 <_isatty_r>:
 800a2d8:	b538      	push	{r3, r4, r5, lr}
 800a2da:	4d06      	ldr	r5, [pc, #24]	@ (800a2f4 <_isatty_r+0x1c>)
 800a2dc:	2300      	movs	r3, #0
 800a2de:	4604      	mov	r4, r0
 800a2e0:	4608      	mov	r0, r1
 800a2e2:	602b      	str	r3, [r5, #0]
 800a2e4:	f7f7 fe69 	bl	8001fba <_isatty>
 800a2e8:	1c43      	adds	r3, r0, #1
 800a2ea:	d102      	bne.n	800a2f2 <_isatty_r+0x1a>
 800a2ec:	682b      	ldr	r3, [r5, #0]
 800a2ee:	b103      	cbz	r3, 800a2f2 <_isatty_r+0x1a>
 800a2f0:	6023      	str	r3, [r4, #0]
 800a2f2:	bd38      	pop	{r3, r4, r5, pc}
 800a2f4:	200005c0 	.word	0x200005c0

0800a2f8 <log>:
 800a2f8:	b538      	push	{r3, r4, r5, lr}
 800a2fa:	ed2d 8b02 	vpush	{d8}
 800a2fe:	ec55 4b10 	vmov	r4, r5, d0
 800a302:	f000 f841 	bl	800a388 <__ieee754_log>
 800a306:	4622      	mov	r2, r4
 800a308:	462b      	mov	r3, r5
 800a30a:	4620      	mov	r0, r4
 800a30c:	4629      	mov	r1, r5
 800a30e:	eeb0 8a40 	vmov.f32	s16, s0
 800a312:	eef0 8a60 	vmov.f32	s17, s1
 800a316:	f7f6 fc09 	bl	8000b2c <__aeabi_dcmpun>
 800a31a:	b998      	cbnz	r0, 800a344 <log+0x4c>
 800a31c:	2200      	movs	r2, #0
 800a31e:	2300      	movs	r3, #0
 800a320:	4620      	mov	r0, r4
 800a322:	4629      	mov	r1, r5
 800a324:	f7f6 fbf8 	bl	8000b18 <__aeabi_dcmpgt>
 800a328:	b960      	cbnz	r0, 800a344 <log+0x4c>
 800a32a:	2200      	movs	r2, #0
 800a32c:	2300      	movs	r3, #0
 800a32e:	4620      	mov	r0, r4
 800a330:	4629      	mov	r1, r5
 800a332:	f7f6 fbc9 	bl	8000ac8 <__aeabi_dcmpeq>
 800a336:	b160      	cbz	r0, 800a352 <log+0x5a>
 800a338:	f7fd ff62 	bl	8008200 <__errno>
 800a33c:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800a368 <log+0x70>
 800a340:	2322      	movs	r3, #34	@ 0x22
 800a342:	6003      	str	r3, [r0, #0]
 800a344:	eeb0 0a48 	vmov.f32	s0, s16
 800a348:	eef0 0a68 	vmov.f32	s1, s17
 800a34c:	ecbd 8b02 	vpop	{d8}
 800a350:	bd38      	pop	{r3, r4, r5, pc}
 800a352:	f7fd ff55 	bl	8008200 <__errno>
 800a356:	ecbd 8b02 	vpop	{d8}
 800a35a:	2321      	movs	r3, #33	@ 0x21
 800a35c:	6003      	str	r3, [r0, #0]
 800a35e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a362:	4803      	ldr	r0, [pc, #12]	@ (800a370 <log+0x78>)
 800a364:	f000 b808 	b.w	800a378 <nan>
 800a368:	00000000 	.word	0x00000000
 800a36c:	fff00000 	.word	0xfff00000
 800a370:	0800b144 	.word	0x0800b144
 800a374:	00000000 	.word	0x00000000

0800a378 <nan>:
 800a378:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a380 <nan+0x8>
 800a37c:	4770      	bx	lr
 800a37e:	bf00      	nop
 800a380:	00000000 	.word	0x00000000
 800a384:	7ff80000 	.word	0x7ff80000

0800a388 <__ieee754_log>:
 800a388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a38c:	ec51 0b10 	vmov	r0, r1, d0
 800a390:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800a394:	b087      	sub	sp, #28
 800a396:	460d      	mov	r5, r1
 800a398:	da26      	bge.n	800a3e8 <__ieee754_log+0x60>
 800a39a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a39e:	4303      	orrs	r3, r0
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	d10a      	bne.n	800a3ba <__ieee754_log+0x32>
 800a3a4:	49ce      	ldr	r1, [pc, #824]	@ (800a6e0 <__ieee754_log+0x358>)
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	2000      	movs	r0, #0
 800a3ac:	f7f6 fa4e 	bl	800084c <__aeabi_ddiv>
 800a3b0:	ec41 0b10 	vmov	d0, r0, r1
 800a3b4:	b007      	add	sp, #28
 800a3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ba:	2900      	cmp	r1, #0
 800a3bc:	da05      	bge.n	800a3ca <__ieee754_log+0x42>
 800a3be:	460b      	mov	r3, r1
 800a3c0:	f7f5 ff62 	bl	8000288 <__aeabi_dsub>
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	e7f0      	b.n	800a3ac <__ieee754_log+0x24>
 800a3ca:	4bc6      	ldr	r3, [pc, #792]	@ (800a6e4 <__ieee754_log+0x35c>)
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f7f6 f913 	bl	80005f8 <__aeabi_dmul>
 800a3d2:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800a3d6:	460d      	mov	r5, r1
 800a3d8:	4ac3      	ldr	r2, [pc, #780]	@ (800a6e8 <__ieee754_log+0x360>)
 800a3da:	4295      	cmp	r5, r2
 800a3dc:	dd06      	ble.n	800a3ec <__ieee754_log+0x64>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	f7f5 ff53 	bl	800028c <__adddf3>
 800a3e6:	e7e3      	b.n	800a3b0 <__ieee754_log+0x28>
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	e7f5      	b.n	800a3d8 <__ieee754_log+0x50>
 800a3ec:	152c      	asrs	r4, r5, #20
 800a3ee:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800a3f2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a3f6:	441c      	add	r4, r3
 800a3f8:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800a3fc:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800a400:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a404:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800a408:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800a40c:	ea42 0105 	orr.w	r1, r2, r5
 800a410:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800a414:	2200      	movs	r2, #0
 800a416:	4bb5      	ldr	r3, [pc, #724]	@ (800a6ec <__ieee754_log+0x364>)
 800a418:	f7f5 ff36 	bl	8000288 <__aeabi_dsub>
 800a41c:	1cab      	adds	r3, r5, #2
 800a41e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a422:	2b02      	cmp	r3, #2
 800a424:	4682      	mov	sl, r0
 800a426:	468b      	mov	fp, r1
 800a428:	f04f 0200 	mov.w	r2, #0
 800a42c:	dc53      	bgt.n	800a4d6 <__ieee754_log+0x14e>
 800a42e:	2300      	movs	r3, #0
 800a430:	f7f6 fb4a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a434:	b1d0      	cbz	r0, 800a46c <__ieee754_log+0xe4>
 800a436:	2c00      	cmp	r4, #0
 800a438:	f000 8120 	beq.w	800a67c <__ieee754_log+0x2f4>
 800a43c:	4620      	mov	r0, r4
 800a43e:	f7f6 f871 	bl	8000524 <__aeabi_i2d>
 800a442:	a391      	add	r3, pc, #580	@ (adr r3, 800a688 <__ieee754_log+0x300>)
 800a444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a448:	4606      	mov	r6, r0
 800a44a:	460f      	mov	r7, r1
 800a44c:	f7f6 f8d4 	bl	80005f8 <__aeabi_dmul>
 800a450:	a38f      	add	r3, pc, #572	@ (adr r3, 800a690 <__ieee754_log+0x308>)
 800a452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a456:	4604      	mov	r4, r0
 800a458:	460d      	mov	r5, r1
 800a45a:	4630      	mov	r0, r6
 800a45c:	4639      	mov	r1, r7
 800a45e:	f7f6 f8cb 	bl	80005f8 <__aeabi_dmul>
 800a462:	4602      	mov	r2, r0
 800a464:	460b      	mov	r3, r1
 800a466:	4620      	mov	r0, r4
 800a468:	4629      	mov	r1, r5
 800a46a:	e7ba      	b.n	800a3e2 <__ieee754_log+0x5a>
 800a46c:	a38a      	add	r3, pc, #552	@ (adr r3, 800a698 <__ieee754_log+0x310>)
 800a46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a472:	4650      	mov	r0, sl
 800a474:	4659      	mov	r1, fp
 800a476:	f7f6 f8bf 	bl	80005f8 <__aeabi_dmul>
 800a47a:	4602      	mov	r2, r0
 800a47c:	460b      	mov	r3, r1
 800a47e:	2000      	movs	r0, #0
 800a480:	499b      	ldr	r1, [pc, #620]	@ (800a6f0 <__ieee754_log+0x368>)
 800a482:	f7f5 ff01 	bl	8000288 <__aeabi_dsub>
 800a486:	4652      	mov	r2, sl
 800a488:	4606      	mov	r6, r0
 800a48a:	460f      	mov	r7, r1
 800a48c:	465b      	mov	r3, fp
 800a48e:	4650      	mov	r0, sl
 800a490:	4659      	mov	r1, fp
 800a492:	f7f6 f8b1 	bl	80005f8 <__aeabi_dmul>
 800a496:	4602      	mov	r2, r0
 800a498:	460b      	mov	r3, r1
 800a49a:	4630      	mov	r0, r6
 800a49c:	4639      	mov	r1, r7
 800a49e:	f7f6 f8ab 	bl	80005f8 <__aeabi_dmul>
 800a4a2:	4606      	mov	r6, r0
 800a4a4:	460f      	mov	r7, r1
 800a4a6:	b914      	cbnz	r4, 800a4ae <__ieee754_log+0x126>
 800a4a8:	4632      	mov	r2, r6
 800a4aa:	463b      	mov	r3, r7
 800a4ac:	e0a0      	b.n	800a5f0 <__ieee754_log+0x268>
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	f7f6 f838 	bl	8000524 <__aeabi_i2d>
 800a4b4:	a374      	add	r3, pc, #464	@ (adr r3, 800a688 <__ieee754_log+0x300>)
 800a4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ba:	4680      	mov	r8, r0
 800a4bc:	4689      	mov	r9, r1
 800a4be:	f7f6 f89b 	bl	80005f8 <__aeabi_dmul>
 800a4c2:	a373      	add	r3, pc, #460	@ (adr r3, 800a690 <__ieee754_log+0x308>)
 800a4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c8:	4604      	mov	r4, r0
 800a4ca:	460d      	mov	r5, r1
 800a4cc:	4640      	mov	r0, r8
 800a4ce:	4649      	mov	r1, r9
 800a4d0:	f7f6 f892 	bl	80005f8 <__aeabi_dmul>
 800a4d4:	e0a5      	b.n	800a622 <__ieee754_log+0x29a>
 800a4d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a4da:	f7f5 fed7 	bl	800028c <__adddf3>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	4650      	mov	r0, sl
 800a4e4:	4659      	mov	r1, fp
 800a4e6:	f7f6 f9b1 	bl	800084c <__aeabi_ddiv>
 800a4ea:	e9cd 0100 	strd	r0, r1, [sp]
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	f7f6 f818 	bl	8000524 <__aeabi_i2d>
 800a4f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4fc:	4610      	mov	r0, r2
 800a4fe:	4619      	mov	r1, r3
 800a500:	f7f6 f87a 	bl	80005f8 <__aeabi_dmul>
 800a504:	4602      	mov	r2, r0
 800a506:	460b      	mov	r3, r1
 800a508:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a50c:	f7f6 f874 	bl	80005f8 <__aeabi_dmul>
 800a510:	a363      	add	r3, pc, #396	@ (adr r3, 800a6a0 <__ieee754_log+0x318>)
 800a512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a516:	4680      	mov	r8, r0
 800a518:	4689      	mov	r9, r1
 800a51a:	f7f6 f86d 	bl	80005f8 <__aeabi_dmul>
 800a51e:	a362      	add	r3, pc, #392	@ (adr r3, 800a6a8 <__ieee754_log+0x320>)
 800a520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a524:	f7f5 feb2 	bl	800028c <__adddf3>
 800a528:	4642      	mov	r2, r8
 800a52a:	464b      	mov	r3, r9
 800a52c:	f7f6 f864 	bl	80005f8 <__aeabi_dmul>
 800a530:	a35f      	add	r3, pc, #380	@ (adr r3, 800a6b0 <__ieee754_log+0x328>)
 800a532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a536:	f7f5 fea9 	bl	800028c <__adddf3>
 800a53a:	4642      	mov	r2, r8
 800a53c:	464b      	mov	r3, r9
 800a53e:	f7f6 f85b 	bl	80005f8 <__aeabi_dmul>
 800a542:	a35d      	add	r3, pc, #372	@ (adr r3, 800a6b8 <__ieee754_log+0x330>)
 800a544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a548:	f7f5 fea0 	bl	800028c <__adddf3>
 800a54c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a550:	f7f6 f852 	bl	80005f8 <__aeabi_dmul>
 800a554:	a35a      	add	r3, pc, #360	@ (adr r3, 800a6c0 <__ieee754_log+0x338>)
 800a556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a55e:	4640      	mov	r0, r8
 800a560:	4649      	mov	r1, r9
 800a562:	f7f6 f849 	bl	80005f8 <__aeabi_dmul>
 800a566:	a358      	add	r3, pc, #352	@ (adr r3, 800a6c8 <__ieee754_log+0x340>)
 800a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56c:	f7f5 fe8e 	bl	800028c <__adddf3>
 800a570:	4642      	mov	r2, r8
 800a572:	464b      	mov	r3, r9
 800a574:	f7f6 f840 	bl	80005f8 <__aeabi_dmul>
 800a578:	a355      	add	r3, pc, #340	@ (adr r3, 800a6d0 <__ieee754_log+0x348>)
 800a57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57e:	f7f5 fe85 	bl	800028c <__adddf3>
 800a582:	4642      	mov	r2, r8
 800a584:	464b      	mov	r3, r9
 800a586:	f7f6 f837 	bl	80005f8 <__aeabi_dmul>
 800a58a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800a58e:	4602      	mov	r2, r0
 800a590:	460b      	mov	r3, r1
 800a592:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800a596:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a59a:	f7f5 fe77 	bl	800028c <__adddf3>
 800a59e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800a5a2:	3551      	adds	r5, #81	@ 0x51
 800a5a4:	4335      	orrs	r5, r6
 800a5a6:	2d00      	cmp	r5, #0
 800a5a8:	4680      	mov	r8, r0
 800a5aa:	4689      	mov	r9, r1
 800a5ac:	dd48      	ble.n	800a640 <__ieee754_log+0x2b8>
 800a5ae:	4b50      	ldr	r3, [pc, #320]	@ (800a6f0 <__ieee754_log+0x368>)
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	4650      	mov	r0, sl
 800a5b4:	4659      	mov	r1, fp
 800a5b6:	f7f6 f81f 	bl	80005f8 <__aeabi_dmul>
 800a5ba:	4652      	mov	r2, sl
 800a5bc:	465b      	mov	r3, fp
 800a5be:	f7f6 f81b 	bl	80005f8 <__aeabi_dmul>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	4606      	mov	r6, r0
 800a5c8:	460f      	mov	r7, r1
 800a5ca:	4640      	mov	r0, r8
 800a5cc:	4649      	mov	r1, r9
 800a5ce:	f7f5 fe5d 	bl	800028c <__adddf3>
 800a5d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5d6:	f7f6 f80f 	bl	80005f8 <__aeabi_dmul>
 800a5da:	4680      	mov	r8, r0
 800a5dc:	4689      	mov	r9, r1
 800a5de:	b964      	cbnz	r4, 800a5fa <__ieee754_log+0x272>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	4630      	mov	r0, r6
 800a5e6:	4639      	mov	r1, r7
 800a5e8:	f7f5 fe4e 	bl	8000288 <__aeabi_dsub>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	4650      	mov	r0, sl
 800a5f2:	4659      	mov	r1, fp
 800a5f4:	f7f5 fe48 	bl	8000288 <__aeabi_dsub>
 800a5f8:	e6da      	b.n	800a3b0 <__ieee754_log+0x28>
 800a5fa:	a323      	add	r3, pc, #140	@ (adr r3, 800a688 <__ieee754_log+0x300>)
 800a5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a604:	f7f5 fff8 	bl	80005f8 <__aeabi_dmul>
 800a608:	a321      	add	r3, pc, #132	@ (adr r3, 800a690 <__ieee754_log+0x308>)
 800a60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60e:	4604      	mov	r4, r0
 800a610:	460d      	mov	r5, r1
 800a612:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a616:	f7f5 ffef 	bl	80005f8 <__aeabi_dmul>
 800a61a:	4642      	mov	r2, r8
 800a61c:	464b      	mov	r3, r9
 800a61e:	f7f5 fe35 	bl	800028c <__adddf3>
 800a622:	4602      	mov	r2, r0
 800a624:	460b      	mov	r3, r1
 800a626:	4630      	mov	r0, r6
 800a628:	4639      	mov	r1, r7
 800a62a:	f7f5 fe2d 	bl	8000288 <__aeabi_dsub>
 800a62e:	4652      	mov	r2, sl
 800a630:	465b      	mov	r3, fp
 800a632:	f7f5 fe29 	bl	8000288 <__aeabi_dsub>
 800a636:	4602      	mov	r2, r0
 800a638:	460b      	mov	r3, r1
 800a63a:	4620      	mov	r0, r4
 800a63c:	4629      	mov	r1, r5
 800a63e:	e7d9      	b.n	800a5f4 <__ieee754_log+0x26c>
 800a640:	4602      	mov	r2, r0
 800a642:	460b      	mov	r3, r1
 800a644:	4650      	mov	r0, sl
 800a646:	4659      	mov	r1, fp
 800a648:	f7f5 fe1e 	bl	8000288 <__aeabi_dsub>
 800a64c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a650:	f7f5 ffd2 	bl	80005f8 <__aeabi_dmul>
 800a654:	4606      	mov	r6, r0
 800a656:	460f      	mov	r7, r1
 800a658:	2c00      	cmp	r4, #0
 800a65a:	f43f af25 	beq.w	800a4a8 <__ieee754_log+0x120>
 800a65e:	a30a      	add	r3, pc, #40	@ (adr r3, 800a688 <__ieee754_log+0x300>)
 800a660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a664:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a668:	f7f5 ffc6 	bl	80005f8 <__aeabi_dmul>
 800a66c:	a308      	add	r3, pc, #32	@ (adr r3, 800a690 <__ieee754_log+0x308>)
 800a66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a672:	4604      	mov	r4, r0
 800a674:	460d      	mov	r5, r1
 800a676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a67a:	e729      	b.n	800a4d0 <__ieee754_log+0x148>
 800a67c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800a6d8 <__ieee754_log+0x350>
 800a680:	e698      	b.n	800a3b4 <__ieee754_log+0x2c>
 800a682:	bf00      	nop
 800a684:	f3af 8000 	nop.w
 800a688:	fee00000 	.word	0xfee00000
 800a68c:	3fe62e42 	.word	0x3fe62e42
 800a690:	35793c76 	.word	0x35793c76
 800a694:	3dea39ef 	.word	0x3dea39ef
 800a698:	55555555 	.word	0x55555555
 800a69c:	3fd55555 	.word	0x3fd55555
 800a6a0:	df3e5244 	.word	0xdf3e5244
 800a6a4:	3fc2f112 	.word	0x3fc2f112
 800a6a8:	96cb03de 	.word	0x96cb03de
 800a6ac:	3fc74664 	.word	0x3fc74664
 800a6b0:	94229359 	.word	0x94229359
 800a6b4:	3fd24924 	.word	0x3fd24924
 800a6b8:	55555593 	.word	0x55555593
 800a6bc:	3fe55555 	.word	0x3fe55555
 800a6c0:	d078c69f 	.word	0xd078c69f
 800a6c4:	3fc39a09 	.word	0x3fc39a09
 800a6c8:	1d8e78af 	.word	0x1d8e78af
 800a6cc:	3fcc71c5 	.word	0x3fcc71c5
 800a6d0:	9997fa04 	.word	0x9997fa04
 800a6d4:	3fd99999 	.word	0x3fd99999
	...
 800a6e0:	c3500000 	.word	0xc3500000
 800a6e4:	43500000 	.word	0x43500000
 800a6e8:	7fefffff 	.word	0x7fefffff
 800a6ec:	3ff00000 	.word	0x3ff00000
 800a6f0:	3fe00000 	.word	0x3fe00000

0800a6f4 <_init>:
 800a6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6f6:	bf00      	nop
 800a6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6fa:	bc08      	pop	{r3}
 800a6fc:	469e      	mov	lr, r3
 800a6fe:	4770      	bx	lr

0800a700 <_fini>:
 800a700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a702:	bf00      	nop
 800a704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a706:	bc08      	pop	{r3}
 800a708:	469e      	mov	lr, r3
 800a70a:	4770      	bx	lr
