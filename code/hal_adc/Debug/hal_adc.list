
hal_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e60  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002fec  08002fec  00003fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800302c  0800302c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  0800302c  0800302c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800302c  0800302c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800302c  0800302c  0000402c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003030  08003030  00004030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003034  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  08003040  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08003040  00005094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080ee  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000171e  00000000  00000000  0000d12a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  0000e848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000657  00000000  00000000  0000f0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021925  00000000  00000000  0000f727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ff5  00000000  00000000  0003104c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2592  00000000  00000000  0003a041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c5d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021ec  00000000  00000000  0010c618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  0010e804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002fd4 	.word	0x08002fd4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002fd4 	.word	0x08002fd4

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 f9ed 	bl	80005ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f818 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f8ca 	bl	8000370 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001dc:	f000 f864 	bl	80002a8 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80001e0:	4807      	ldr	r0, [pc, #28]	@ (8000200 <main+0x34>)
 80001e2:	f000 fd63 	bl	8000cac <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 20); // 20 milli second
 80001e6:	2114      	movs	r1, #20
 80001e8:	4805      	ldr	r0, [pc, #20]	@ (8000200 <main+0x34>)
 80001ea:	f000 fdc2 	bl	8000d72 <HAL_ADC_PollForConversion>
	  val = HAL_ADC_GetValue(&hadc1);
 80001ee:	4804      	ldr	r0, [pc, #16]	@ (8000200 <main+0x34>)
 80001f0:	f000 fe4e 	bl	8000e90 <HAL_ADC_GetValue>
 80001f4:	4603      	mov	r3, r0
 80001f6:	b29a      	uxth	r2, r3
 80001f8:	4b02      	ldr	r3, [pc, #8]	@ (8000204 <main+0x38>)
 80001fa:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Start(&hadc1);
 80001fc:	bf00      	nop
 80001fe:	e7ef      	b.n	80001e0 <main+0x14>
 8000200:	20000028 	.word	0x20000028
 8000204:	2000008c 	.word	0x2000008c

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b096      	sub	sp, #88	@ 0x58
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0314 	add.w	r3, r7, #20
 8000212:	2244      	movs	r2, #68	@ 0x44
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f002 feb0 	bl	8002f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	463b      	mov	r3, r7
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800022a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800022e:	f001 fd13 	bl	8001c58 <HAL_PWREx_ControlVoltageScaling>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000238:	f000 f8be 	bl	80003b8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800023c:	2301      	movs	r3, #1
 800023e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000240:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000244:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000246:	2302      	movs	r3, #2
 8000248:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024a:	2303      	movs	r3, #3
 800024c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800024e:	2301      	movs	r3, #1
 8000250:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000252:	2308      	movs	r3, #8
 8000254:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000256:	2307      	movs	r3, #7
 8000258:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800025a:	2302      	movs	r3, #2
 800025c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800025e:	2302      	movs	r3, #2
 8000260:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000262:	f107 0314 	add.w	r3, r7, #20
 8000266:	4618      	mov	r0, r3
 8000268:	f001 fd4c 	bl	8001d04 <HAL_RCC_OscConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000272:	f000 f8a1 	bl	80003b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000276:	230f      	movs	r3, #15
 8000278:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027a:	2303      	movs	r3, #3
 800027c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800028a:	463b      	mov	r3, r7
 800028c:	2101      	movs	r1, #1
 800028e:	4618      	mov	r0, r3
 8000290:	f002 f94c 	bl	800252c <HAL_RCC_ClockConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800029a:	f000 f88d 	bl	80003b8 <Error_Handler>
  }
}
 800029e:	bf00      	nop
 80002a0:	3758      	adds	r7, #88	@ 0x58
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
	...

080002a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002ae:	463b      	mov	r3, r7
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
 80002b4:	605a      	str	r2, [r3, #4]
 80002b6:	609a      	str	r2, [r3, #8]
 80002b8:	60da      	str	r2, [r3, #12]
 80002ba:	611a      	str	r2, [r3, #16]
 80002bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002be:	4b29      	ldr	r3, [pc, #164]	@ (8000364 <MX_ADC1_Init+0xbc>)
 80002c0:	4a29      	ldr	r2, [pc, #164]	@ (8000368 <MX_ADC1_Init+0xc0>)
 80002c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002c4:	4b27      	ldr	r3, [pc, #156]	@ (8000364 <MX_ADC1_Init+0xbc>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002ca:	4b26      	ldr	r3, [pc, #152]	@ (8000364 <MX_ADC1_Init+0xbc>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002d0:	4b24      	ldr	r3, [pc, #144]	@ (8000364 <MX_ADC1_Init+0xbc>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002d6:	4b23      	ldr	r3, [pc, #140]	@ (8000364 <MX_ADC1_Init+0xbc>)
 80002d8:	2200      	movs	r2, #0
 80002da:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002dc:	4b21      	ldr	r3, [pc, #132]	@ (8000364 <MX_ADC1_Init+0xbc>)
 80002de:	2204      	movs	r2, #4
 80002e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002e2:	4b20      	ldr	r3, [pc, #128]	@ (8000364 <MX_ADC1_Init+0xbc>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000364 <MX_ADC1_Init+0xbc>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80002ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000364 <MX_ADC1_Init+0xbc>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000364 <MX_ADC1_Init+0xbc>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002fc:	4b19      	ldr	r3, [pc, #100]	@ (8000364 <MX_ADC1_Init+0xbc>)
 80002fe:	2200      	movs	r2, #0
 8000300:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000302:	4b18      	ldr	r3, [pc, #96]	@ (8000364 <MX_ADC1_Init+0xbc>)
 8000304:	2200      	movs	r2, #0
 8000306:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000308:	4b16      	ldr	r3, [pc, #88]	@ (8000364 <MX_ADC1_Init+0xbc>)
 800030a:	2200      	movs	r2, #0
 800030c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000310:	4b14      	ldr	r3, [pc, #80]	@ (8000364 <MX_ADC1_Init+0xbc>)
 8000312:	2200      	movs	r2, #0
 8000314:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000316:	4b13      	ldr	r3, [pc, #76]	@ (8000364 <MX_ADC1_Init+0xbc>)
 8000318:	2200      	movs	r2, #0
 800031a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800031e:	4811      	ldr	r0, [pc, #68]	@ (8000364 <MX_ADC1_Init+0xbc>)
 8000320:	f000 fb82 	bl	8000a28 <HAL_ADC_Init>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800032a:	f000 f845 	bl	80003b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800032e:	4b0f      	ldr	r3, [pc, #60]	@ (800036c <MX_ADC1_Init+0xc4>)
 8000330:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000332:	2306      	movs	r3, #6
 8000334:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000336:	2300      	movs	r3, #0
 8000338:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800033a:	237f      	movs	r3, #127	@ 0x7f
 800033c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800033e:	2304      	movs	r3, #4
 8000340:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000342:	2300      	movs	r3, #0
 8000344:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000346:	463b      	mov	r3, r7
 8000348:	4619      	mov	r1, r3
 800034a:	4806      	ldr	r0, [pc, #24]	@ (8000364 <MX_ADC1_Init+0xbc>)
 800034c:	f000 fdae 	bl	8000eac <HAL_ADC_ConfigChannel>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000356:	f000 f82f 	bl	80003b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800035a:	bf00      	nop
 800035c:	3718      	adds	r7, #24
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000028 	.word	0x20000028
 8000368:	50040000 	.word	0x50040000
 800036c:	04300002 	.word	0x04300002

08000370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000376:	4b0f      	ldr	r3, [pc, #60]	@ (80003b4 <MX_GPIO_Init+0x44>)
 8000378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800037a:	4a0e      	ldr	r2, [pc, #56]	@ (80003b4 <MX_GPIO_Init+0x44>)
 800037c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000380:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000382:	4b0c      	ldr	r3, [pc, #48]	@ (80003b4 <MX_GPIO_Init+0x44>)
 8000384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800038e:	4b09      	ldr	r3, [pc, #36]	@ (80003b4 <MX_GPIO_Init+0x44>)
 8000390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000392:	4a08      	ldr	r2, [pc, #32]	@ (80003b4 <MX_GPIO_Init+0x44>)
 8000394:	f043 0304 	orr.w	r3, r3, #4
 8000398:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800039a:	4b06      	ldr	r3, [pc, #24]	@ (80003b4 <MX_GPIO_Init+0x44>)
 800039c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800039e:	f003 0304 	and.w	r3, r3, #4
 80003a2:	603b      	str	r3, [r7, #0]
 80003a4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003a6:	bf00      	nop
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	40021000 	.word	0x40021000

080003b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003bc:	b672      	cpsid	i
}
 80003be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003c0:	bf00      	nop
 80003c2:	e7fd      	b.n	80003c0 <Error_Handler+0x8>

080003c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000408 <HAL_MspInit+0x44>)
 80003cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000408 <HAL_MspInit+0x44>)
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80003d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000408 <HAL_MspInit+0x44>)
 80003d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003da:	f003 0301 	and.w	r3, r3, #1
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003e2:	4b09      	ldr	r3, [pc, #36]	@ (8000408 <HAL_MspInit+0x44>)
 80003e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003e6:	4a08      	ldr	r2, [pc, #32]	@ (8000408 <HAL_MspInit+0x44>)
 80003e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80003ee:	4b06      	ldr	r3, [pc, #24]	@ (8000408 <HAL_MspInit+0x44>)
 80003f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003f6:	603b      	str	r3, [r7, #0]
 80003f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	40021000 	.word	0x40021000

0800040c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b0a2      	sub	sp, #136	@ 0x88
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000414:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
 8000422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000424:	f107 0314 	add.w	r3, r7, #20
 8000428:	2260      	movs	r2, #96	@ 0x60
 800042a:	2100      	movs	r1, #0
 800042c:	4618      	mov	r0, r3
 800042e:	f002 fda5 	bl	8002f7c <memset>
  if(hadc->Instance==ADC1)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a25      	ldr	r2, [pc, #148]	@ (80004cc <HAL_ADC_MspInit+0xc0>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d142      	bne.n	80004c2 <HAL_ADC_MspInit+0xb6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800043c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000440:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000442:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000446:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000448:	2303      	movs	r3, #3
 800044a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800044c:	2301      	movs	r3, #1
 800044e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000450:	2308      	movs	r3, #8
 8000452:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000454:	2307      	movs	r3, #7
 8000456:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000458:	2302      	movs	r3, #2
 800045a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800045c:	2302      	movs	r3, #2
 800045e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000460:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000464:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000466:	f107 0314 	add.w	r3, r7, #20
 800046a:	4618      	mov	r0, r3
 800046c:	f002 fa4a 	bl	8002904 <HAL_RCCEx_PeriphCLKConfig>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000476:	f7ff ff9f 	bl	80003b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800047a:	4b15      	ldr	r3, [pc, #84]	@ (80004d0 <HAL_ADC_MspInit+0xc4>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800047e:	4a14      	ldr	r2, [pc, #80]	@ (80004d0 <HAL_ADC_MspInit+0xc4>)
 8000480:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000484:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000486:	4b12      	ldr	r3, [pc, #72]	@ (80004d0 <HAL_ADC_MspInit+0xc4>)
 8000488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800048a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800048e:	613b      	str	r3, [r7, #16]
 8000490:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000492:	4b0f      	ldr	r3, [pc, #60]	@ (80004d0 <HAL_ADC_MspInit+0xc4>)
 8000494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000496:	4a0e      	ldr	r2, [pc, #56]	@ (80004d0 <HAL_ADC_MspInit+0xc4>)
 8000498:	f043 0304 	orr.w	r3, r3, #4
 800049c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800049e:	4b0c      	ldr	r3, [pc, #48]	@ (80004d0 <HAL_ADC_MspInit+0xc4>)
 80004a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004a2:	f003 0304 	and.w	r3, r3, #4
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004aa:	2301      	movs	r3, #1
 80004ac:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80004ae:	230b      	movs	r3, #11
 80004b0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b2:	2300      	movs	r3, #0
 80004b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004b6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80004ba:	4619      	mov	r1, r3
 80004bc:	4805      	ldr	r0, [pc, #20]	@ (80004d4 <HAL_ADC_MspInit+0xc8>)
 80004be:	f001 fa43 	bl	8001948 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80004c2:	bf00      	nop
 80004c4:	3788      	adds	r7, #136	@ 0x88
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	50040000 	.word	0x50040000
 80004d0:	40021000 	.word	0x40021000
 80004d4:	48000800 	.word	0x48000800

080004d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <NMI_Handler+0x4>

080004e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <HardFault_Handler+0x4>

080004e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <MemManage_Handler+0x4>

080004f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <BusFault_Handler+0x4>

080004f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <UsageFault_Handler+0x4>

08000500 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800052e:	f000 f893 	bl	8000658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
	...

08000538 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800053c:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <SystemInit+0x20>)
 800053e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000542:	4a05      	ldr	r2, [pc, #20]	@ (8000558 <SystemInit+0x20>)
 8000544:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000548:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800055c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000594 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000560:	f7ff ffea 	bl	8000538 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000564:	480c      	ldr	r0, [pc, #48]	@ (8000598 <LoopForever+0x6>)
  ldr r1, =_edata
 8000566:	490d      	ldr	r1, [pc, #52]	@ (800059c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000568:	4a0d      	ldr	r2, [pc, #52]	@ (80005a0 <LoopForever+0xe>)
  movs r3, #0
 800056a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800056c:	e002      	b.n	8000574 <LoopCopyDataInit>

0800056e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800056e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000572:	3304      	adds	r3, #4

08000574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000578:	d3f9      	bcc.n	800056e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800057a:	4a0a      	ldr	r2, [pc, #40]	@ (80005a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800057c:	4c0a      	ldr	r4, [pc, #40]	@ (80005a8 <LoopForever+0x16>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000580:	e001      	b.n	8000586 <LoopFillZerobss>

08000582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000584:	3204      	adds	r2, #4

08000586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000588:	d3fb      	bcc.n	8000582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800058a:	f002 fcff 	bl	8002f8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800058e:	f7ff fe1d 	bl	80001cc <main>

08000592 <LoopForever>:

LoopForever:
    b LoopForever
 8000592:	e7fe      	b.n	8000592 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000594:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800059c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005a0:	08003034 	.word	0x08003034
  ldr r2, =_sbss
 80005a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005a8:	20000094 	.word	0x20000094

080005ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005ac:	e7fe      	b.n	80005ac <ADC1_IRQHandler>

080005ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b082      	sub	sp, #8
 80005b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005b4:	2300      	movs	r3, #0
 80005b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f001 f991 	bl	80018e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005be:	200f      	movs	r0, #15
 80005c0:	f000 f80e 	bl	80005e0 <HAL_InitTick>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d002      	beq.n	80005d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005ca:	2301      	movs	r3, #1
 80005cc:	71fb      	strb	r3, [r7, #7]
 80005ce:	e001      	b.n	80005d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005d0:	f7ff fef8 	bl	80003c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005d4:	79fb      	ldrb	r3, [r7, #7]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005e8:	2300      	movs	r3, #0
 80005ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005ec:	4b17      	ldr	r3, [pc, #92]	@ (800064c <HAL_InitTick+0x6c>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d023      	beq.n	800063c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005f4:	4b16      	ldr	r3, [pc, #88]	@ (8000650 <HAL_InitTick+0x70>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	4b14      	ldr	r3, [pc, #80]	@ (800064c <HAL_InitTick+0x6c>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	4619      	mov	r1, r3
 80005fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000602:	fbb3 f3f1 	udiv	r3, r3, r1
 8000606:	fbb2 f3f3 	udiv	r3, r2, r3
 800060a:	4618      	mov	r0, r3
 800060c:	f001 f98f 	bl	800192e <HAL_SYSTICK_Config>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d10f      	bne.n	8000636 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2b0f      	cmp	r3, #15
 800061a:	d809      	bhi.n	8000630 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800061c:	2200      	movs	r2, #0
 800061e:	6879      	ldr	r1, [r7, #4]
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f001 f967 	bl	80018f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000628:	4a0a      	ldr	r2, [pc, #40]	@ (8000654 <HAL_InitTick+0x74>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6013      	str	r3, [r2, #0]
 800062e:	e007      	b.n	8000640 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000630:	2301      	movs	r3, #1
 8000632:	73fb      	strb	r3, [r7, #15]
 8000634:	e004      	b.n	8000640 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000636:	2301      	movs	r3, #1
 8000638:	73fb      	strb	r3, [r7, #15]
 800063a:	e001      	b.n	8000640 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800063c:	2301      	movs	r3, #1
 800063e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000640:	7bfb      	ldrb	r3, [r7, #15]
}
 8000642:	4618      	mov	r0, r3
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000008 	.word	0x20000008
 8000650:	20000000 	.word	0x20000000
 8000654:	20000004 	.word	0x20000004

08000658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800065c:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <HAL_IncTick+0x20>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	461a      	mov	r2, r3
 8000662:	4b06      	ldr	r3, [pc, #24]	@ (800067c <HAL_IncTick+0x24>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4413      	add	r3, r2
 8000668:	4a04      	ldr	r2, [pc, #16]	@ (800067c <HAL_IncTick+0x24>)
 800066a:	6013      	str	r3, [r2, #0]
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	20000008 	.word	0x20000008
 800067c:	20000090 	.word	0x20000090

08000680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  return uwTick;
 8000684:	4b03      	ldr	r3, [pc, #12]	@ (8000694 <HAL_GetTick+0x14>)
 8000686:	681b      	ldr	r3, [r3, #0]
}
 8000688:	4618      	mov	r0, r3
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000090 	.word	0x20000090

08000698 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	431a      	orrs	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	609a      	str	r2, [r3, #8]
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80006be:	b480      	push	{r7}
 80006c0:	b083      	sub	sp, #12
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
 80006c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	689b      	ldr	r3, [r3, #8]
 80006cc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	431a      	orrs	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	609a      	str	r2, [r3, #8]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000700:	b480      	push	{r7}
 8000702:	b087      	sub	sp, #28
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
 800070c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	3360      	adds	r3, #96	@ 0x60
 8000712:	461a      	mov	r2, r3
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	4413      	add	r3, r2
 800071a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <LL_ADC_SetOffset+0x44>)
 8000722:	4013      	ands	r3, r2
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800072a:	683a      	ldr	r2, [r7, #0]
 800072c:	430a      	orrs	r2, r1
 800072e:	4313      	orrs	r3, r2
 8000730:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000738:	bf00      	nop
 800073a:	371c      	adds	r7, #28
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	03fff000 	.word	0x03fff000

08000748 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	3360      	adds	r3, #96	@ 0x60
 8000756:	461a      	mov	r2, r3
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000768:	4618      	mov	r0, r3
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000774:	b480      	push	{r7}
 8000776:	b087      	sub	sp, #28
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	3360      	adds	r3, #96	@ 0x60
 8000784:	461a      	mov	r2, r3
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	4413      	add	r3, r2
 800078c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	431a      	orrs	r2, r3
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800079e:	bf00      	nop
 80007a0:	371c      	adds	r7, #28
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b083      	sub	sp, #12
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	68db      	ldr	r3, [r3, #12]
 80007b6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d101      	bne.n	80007c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80007be:	2301      	movs	r3, #1
 80007c0:	e000      	b.n	80007c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80007c2:	2300      	movs	r3, #0
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b087      	sub	sp, #28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	3330      	adds	r3, #48	@ 0x30
 80007e0:	461a      	mov	r2, r3
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	0a1b      	lsrs	r3, r3, #8
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	f003 030c 	and.w	r3, r3, #12
 80007ec:	4413      	add	r3, r2
 80007ee:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	f003 031f 	and.w	r3, r3, #31
 80007fa:	211f      	movs	r1, #31
 80007fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000800:	43db      	mvns	r3, r3
 8000802:	401a      	ands	r2, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	0e9b      	lsrs	r3, r3, #26
 8000808:	f003 011f 	and.w	r1, r3, #31
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	f003 031f 	and.w	r3, r3, #31
 8000812:	fa01 f303 	lsl.w	r3, r1, r3
 8000816:	431a      	orrs	r2, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800081c:	bf00      	nop
 800081e:	371c      	adds	r7, #28
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000828:	b480      	push	{r7}
 800082a:	b087      	sub	sp, #28
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	3314      	adds	r3, #20
 8000838:	461a      	mov	r2, r3
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	0e5b      	lsrs	r3, r3, #25
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	f003 0304 	and.w	r3, r3, #4
 8000844:	4413      	add	r3, r2
 8000846:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	0d1b      	lsrs	r3, r3, #20
 8000850:	f003 031f 	and.w	r3, r3, #31
 8000854:	2107      	movs	r1, #7
 8000856:	fa01 f303 	lsl.w	r3, r1, r3
 800085a:	43db      	mvns	r3, r3
 800085c:	401a      	ands	r2, r3
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	0d1b      	lsrs	r3, r3, #20
 8000862:	f003 031f 	and.w	r3, r3, #31
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	fa01 f303 	lsl.w	r3, r1, r3
 800086c:	431a      	orrs	r2, r3
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000872:	bf00      	nop
 8000874:	371c      	adds	r7, #28
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
	...

08000880 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000898:	43db      	mvns	r3, r3
 800089a:	401a      	ands	r2, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f003 0318 	and.w	r3, r3, #24
 80008a2:	4908      	ldr	r1, [pc, #32]	@ (80008c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80008a4:	40d9      	lsrs	r1, r3
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	400b      	ands	r3, r1
 80008aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80008ae:	431a      	orrs	r2, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	0007ffff 	.word	0x0007ffff

080008c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80008d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	6093      	str	r3, [r2, #8]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80008fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000900:	d101      	bne.n	8000906 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000902:	2301      	movs	r3, #1
 8000904:	e000      	b.n	8000908 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000906:	2300      	movs	r3, #0
}
 8000908:	4618      	mov	r0, r3
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000924:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000928:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800094c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000950:	d101      	bne.n	8000956 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000952:	2301      	movs	r3, #1
 8000954:	e000      	b.n	8000958 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	689b      	ldr	r3, [r3, #8]
 8000970:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000974:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000978:	f043 0201 	orr.w	r2, r3, #1
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	2b01      	cmp	r3, #1
 800099e:	d101      	bne.n	80009a4 <LL_ADC_IsEnabled+0x18>
 80009a0:	2301      	movs	r3, #1
 80009a2:	e000      	b.n	80009a6 <LL_ADC_IsEnabled+0x1a>
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80009b2:	b480      	push	{r7}
 80009b4:	b083      	sub	sp, #12
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80009c2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80009c6:	f043 0204 	orr.w	r2, r3, #4
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	2b04      	cmp	r3, #4
 80009ec:	d101      	bne.n	80009f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80009ee:	2301      	movs	r3, #1
 80009f0:	e000      	b.n	80009f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80009f2:	2300      	movs	r3, #0
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	f003 0308 	and.w	r3, r3, #8
 8000a10:	2b08      	cmp	r3, #8
 8000a12:	d101      	bne.n	8000a18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000a14:	2301      	movs	r3, #1
 8000a16:	e000      	b.n	8000a1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a30:	2300      	movs	r3, #0
 8000a32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d101      	bne.n	8000a42 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e126      	b.n	8000c90 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	691b      	ldr	r3, [r3, #16]
 8000a46:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d109      	bne.n	8000a64 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff fcdb 	bl	800040c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff3f 	bl	80008ec <LL_ADC_IsDeepPowerDownEnabled>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d004      	beq.n	8000a7e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ff25 	bl	80008c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ff5a 	bl	800093c <LL_ADC_IsInternalRegulatorEnabled>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d115      	bne.n	8000aba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ff3e 	bl	8000914 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000a98:	4b7f      	ldr	r3, [pc, #508]	@ (8000c98 <HAL_ADC_Init+0x270>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	099b      	lsrs	r3, r3, #6
 8000a9e:	4a7f      	ldr	r2, [pc, #508]	@ (8000c9c <HAL_ADC_Init+0x274>)
 8000aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa4:	099b      	lsrs	r3, r3, #6
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000aac:	e002      	b.n	8000ab4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d1f9      	bne.n	8000aae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ff3c 	bl	800093c <LL_ADC_IsInternalRegulatorEnabled>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d10d      	bne.n	8000ae6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ace:	f043 0210 	orr.w	r2, r3, #16
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ada:	f043 0201 	orr.w	r2, r3, #1
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff ff75 	bl	80009da <LL_ADC_REG_IsConversionOngoing>
 8000af0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000af6:	f003 0310 	and.w	r3, r3, #16
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f040 80bf 	bne.w	8000c7e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f040 80bb 	bne.w	8000c7e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b0c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000b10:	f043 0202 	orr.w	r2, r3, #2
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff35 	bl	800098c <LL_ADC_IsEnabled>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d10b      	bne.n	8000b40 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000b28:	485d      	ldr	r0, [pc, #372]	@ (8000ca0 <HAL_ADC_Init+0x278>)
 8000b2a:	f7ff ff2f 	bl	800098c <LL_ADC_IsEnabled>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d105      	bne.n	8000b40 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	485a      	ldr	r0, [pc, #360]	@ (8000ca4 <HAL_ADC_Init+0x27c>)
 8000b3c:	f7ff fdac 	bl	8000698 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	7e5b      	ldrb	r3, [r3, #25]
 8000b44:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000b4a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000b50:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000b56:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b5e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000b60:	4313      	orrs	r3, r2
 8000b62:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d106      	bne.n	8000b7c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b72:	3b01      	subs	r3, #1
 8000b74:	045b      	lsls	r3, r3, #17
 8000b76:	69ba      	ldr	r2, [r7, #24]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d009      	beq.n	8000b98 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b88:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b90:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b92:	69ba      	ldr	r2, [r7, #24]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	68da      	ldr	r2, [r3, #12]
 8000b9e:	4b42      	ldr	r3, [pc, #264]	@ (8000ca8 <HAL_ADC_Init+0x280>)
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	6812      	ldr	r2, [r2, #0]
 8000ba6:	69b9      	ldr	r1, [r7, #24]
 8000ba8:	430b      	orrs	r3, r1
 8000baa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff25 	bl	8000a00 <LL_ADC_INJ_IsConversionOngoing>
 8000bb6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d13d      	bne.n	8000c3a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d13a      	bne.n	8000c3a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000bc8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000bd0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000be0:	f023 0302 	bic.w	r3, r3, #2
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	6812      	ldr	r2, [r2, #0]
 8000be8:	69b9      	ldr	r1, [r7, #24]
 8000bea:	430b      	orrs	r3, r1
 8000bec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d118      	bne.n	8000c2a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	691b      	ldr	r3, [r3, #16]
 8000bfe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000c02:	f023 0304 	bic.w	r3, r3, #4
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000c0e:	4311      	orrs	r1, r2
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000c14:	4311      	orrs	r1, r2
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f042 0201 	orr.w	r2, r2, #1
 8000c26:	611a      	str	r2, [r3, #16]
 8000c28:	e007      	b.n	8000c3a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	691a      	ldr	r2, [r3, #16]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f022 0201 	bic.w	r2, r2, #1
 8000c38:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d10c      	bne.n	8000c5c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c48:	f023 010f 	bic.w	r1, r3, #15
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	69db      	ldr	r3, [r3, #28]
 8000c50:	1e5a      	subs	r2, r3, #1
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	430a      	orrs	r2, r1
 8000c58:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c5a:	e007      	b.n	8000c6c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f022 020f 	bic.w	r2, r2, #15
 8000c6a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c70:	f023 0303 	bic.w	r3, r3, #3
 8000c74:	f043 0201 	orr.w	r2, r3, #1
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	655a      	str	r2, [r3, #84]	@ 0x54
 8000c7c:	e007      	b.n	8000c8e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c82:	f043 0210 	orr.w	r2, r3, #16
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000c8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3720      	adds	r7, #32
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	053e2d63 	.word	0x053e2d63
 8000ca0:	50040000 	.word	0x50040000
 8000ca4:	50040300 	.word	0x50040300
 8000ca8:	fff0c007 	.word	0xfff0c007

08000cac <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fe8e 	bl	80009da <LL_ADC_REG_IsConversionOngoing>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14f      	bne.n	8000d64 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d101      	bne.n	8000cd2 <HAL_ADC_Start+0x26>
 8000cce:	2302      	movs	r3, #2
 8000cd0:	e04b      	b.n	8000d6a <HAL_ADC_Start+0xbe>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f000 fcc8 	bl	8001670 <ADC_Enable>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d137      	bne.n	8000d5a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000cee:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000cf2:	f023 0301 	bic.w	r3, r3, #1
 8000cf6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000d0a:	d106      	bne.n	8000d1a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d10:	f023 0206 	bic.w	r2, r3, #6
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	659a      	str	r2, [r3, #88]	@ 0x58
 8000d18:	e002      	b.n	8000d20 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	221c      	movs	r2, #28
 8000d26:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d007      	beq.n	8000d4e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d42:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000d46:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fe2d 	bl	80009b2 <LL_ADC_REG_StartConversion>
 8000d58:	e006      	b.n	8000d68 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8000d62:	e001      	b.n	8000d68 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000d64:	2302      	movs	r3, #2
 8000d66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b086      	sub	sp, #24
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	695b      	ldr	r3, [r3, #20]
 8000d80:	2b08      	cmp	r3, #8
 8000d82:	d102      	bne.n	8000d8a <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8000d84:	2308      	movs	r3, #8
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	e010      	b.n	8000dac <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d007      	beq.n	8000da8 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d9c:	f043 0220 	orr.w	r2, r3, #32
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e06f      	b.n	8000e88 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8000da8:	2304      	movs	r3, #4
 8000daa:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000dac:	f7ff fc68 	bl	8000680 <HAL_GetTick>
 8000db0:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000db2:	e021      	b.n	8000df8 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dba:	d01d      	beq.n	8000df8 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000dbc:	f7ff fc60 	bl	8000680 <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	683a      	ldr	r2, [r7, #0]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d302      	bcc.n	8000dd2 <HAL_ADC_PollForConversion+0x60>
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d112      	bne.n	8000df8 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d10b      	bne.n	8000df8 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000de4:	f043 0204 	orr.w	r2, r3, #4
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8000df4:	2303      	movs	r3, #3
 8000df6:	e047      	b.n	8000e88 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	4013      	ands	r3, r2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0d6      	beq.n	8000db4 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e0a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fcc7 	bl	80007aa <LL_ADC_REG_IsTriggerSourceSWStart>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d01c      	beq.n	8000e5c <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	7e5b      	ldrb	r3, [r3, #25]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d118      	bne.n	8000e5c <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f003 0308 	and.w	r3, r3, #8
 8000e34:	2b08      	cmp	r3, #8
 8000e36:	d111      	bne.n	8000e5c <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d105      	bne.n	8000e5c <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e54:	f043 0201 	orr.w	r2, r3, #1
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	2b08      	cmp	r3, #8
 8000e68:	d104      	bne.n	8000e74 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2208      	movs	r2, #8
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	e008      	b.n	8000e86 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d103      	bne.n	8000e86 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	220c      	movs	r2, #12
 8000e84:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
	...

08000eac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b0b6      	sub	sp, #216	@ 0xd8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d101      	bne.n	8000ece <HAL_ADC_ConfigChannel+0x22>
 8000eca:	2302      	movs	r3, #2
 8000ecc:	e3bb      	b.n	8001646 <HAL_ADC_ConfigChannel+0x79a>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fd7d 	bl	80009da <LL_ADC_REG_IsConversionOngoing>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f040 83a0 	bne.w	8001628 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b05      	cmp	r3, #5
 8000ef6:	d824      	bhi.n	8000f42 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	3b02      	subs	r3, #2
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	d81b      	bhi.n	8000f3a <HAL_ADC_ConfigChannel+0x8e>
 8000f02:	a201      	add	r2, pc, #4	@ (adr r2, 8000f08 <HAL_ADC_ConfigChannel+0x5c>)
 8000f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f08:	08000f19 	.word	0x08000f19
 8000f0c:	08000f21 	.word	0x08000f21
 8000f10:	08000f29 	.word	0x08000f29
 8000f14:	08000f31 	.word	0x08000f31
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8000f18:	230c      	movs	r3, #12
 8000f1a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000f1e:	e010      	b.n	8000f42 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8000f20:	2312      	movs	r3, #18
 8000f22:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000f26:	e00c      	b.n	8000f42 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8000f28:	2318      	movs	r3, #24
 8000f2a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000f2e:	e008      	b.n	8000f42 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8000f30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000f38:	e003      	b.n	8000f42 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8000f3a:	2306      	movs	r3, #6
 8000f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000f40:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6818      	ldr	r0, [r3, #0]
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8000f50:	f7ff fc3e 	bl	80007d0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fd3e 	bl	80009da <LL_ADC_REG_IsConversionOngoing>
 8000f5e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fd4a 	bl	8000a00 <LL_ADC_INJ_IsConversionOngoing>
 8000f6c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000f70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f040 81a4 	bne.w	80012c2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000f7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f040 819f 	bne.w	80012c2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6818      	ldr	r0, [r3, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	6819      	ldr	r1, [r3, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	461a      	mov	r2, r3
 8000f92:	f7ff fc49 	bl	8000828 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	695a      	ldr	r2, [r3, #20]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	08db      	lsrs	r3, r3, #3
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	691b      	ldr	r3, [r3, #16]
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	d00a      	beq.n	8000fce <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	6919      	ldr	r1, [r3, #16]
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000fc8:	f7ff fb9a 	bl	8000700 <LL_ADC_SetOffset>
 8000fcc:	e179      	b.n	80012c2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fbb7 	bl	8000748 <LL_ADC_GetOffsetChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d10a      	bne.n	8000ffa <HAL_ADC_ConfigChannel+0x14e>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fbac 	bl	8000748 <LL_ADC_GetOffsetChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	0e9b      	lsrs	r3, r3, #26
 8000ff4:	f003 021f 	and.w	r2, r3, #31
 8000ff8:	e01e      	b.n	8001038 <HAL_ADC_ConfigChannel+0x18c>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fba1 	bl	8000748 <LL_ADC_GetOffsetChannel>
 8001006:	4603      	mov	r3, r0
 8001008:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001010:	fa93 f3a3 	rbit	r3, r3
 8001014:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001018:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800101c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001020:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001028:	2320      	movs	r3, #32
 800102a:	e004      	b.n	8001036 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800102c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001030:	fab3 f383 	clz	r3, r3
 8001034:	b2db      	uxtb	r3, r3
 8001036:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001040:	2b00      	cmp	r3, #0
 8001042:	d105      	bne.n	8001050 <HAL_ADC_ConfigChannel+0x1a4>
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	0e9b      	lsrs	r3, r3, #26
 800104a:	f003 031f 	and.w	r3, r3, #31
 800104e:	e018      	b.n	8001082 <HAL_ADC_ConfigChannel+0x1d6>
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001058:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800105c:	fa93 f3a3 	rbit	r3, r3
 8001060:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001064:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001068:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800106c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d101      	bne.n	8001078 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001074:	2320      	movs	r3, #32
 8001076:	e004      	b.n	8001082 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001078:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800107c:	fab3 f383 	clz	r3, r3
 8001080:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001082:	429a      	cmp	r2, r3
 8001084:	d106      	bne.n	8001094 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fb70 	bl	8000774 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2101      	movs	r1, #1
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fb54 	bl	8000748 <LL_ADC_GetOffsetChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d10a      	bne.n	80010c0 <HAL_ADC_ConfigChannel+0x214>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2101      	movs	r1, #1
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fb49 	bl	8000748 <LL_ADC_GetOffsetChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	0e9b      	lsrs	r3, r3, #26
 80010ba:	f003 021f 	and.w	r2, r3, #31
 80010be:	e01e      	b.n	80010fe <HAL_ADC_ConfigChannel+0x252>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2101      	movs	r1, #1
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fb3e 	bl	8000748 <LL_ADC_GetOffsetChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80010d6:	fa93 f3a3 	rbit	r3, r3
 80010da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80010de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80010e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80010e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80010ee:	2320      	movs	r3, #32
 80010f0:	e004      	b.n	80010fc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80010f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80010f6:	fab3 f383 	clz	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001106:	2b00      	cmp	r3, #0
 8001108:	d105      	bne.n	8001116 <HAL_ADC_ConfigChannel+0x26a>
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	0e9b      	lsrs	r3, r3, #26
 8001110:	f003 031f 	and.w	r3, r3, #31
 8001114:	e018      	b.n	8001148 <HAL_ADC_ConfigChannel+0x29c>
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001122:	fa93 f3a3 	rbit	r3, r3
 8001126:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800112a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800112e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001132:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800113a:	2320      	movs	r3, #32
 800113c:	e004      	b.n	8001148 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800113e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001142:	fab3 f383 	clz	r3, r3
 8001146:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001148:	429a      	cmp	r2, r3
 800114a:	d106      	bne.n	800115a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2200      	movs	r2, #0
 8001152:	2101      	movs	r1, #1
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fb0d 	bl	8000774 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2102      	movs	r1, #2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff faf1 	bl	8000748 <LL_ADC_GetOffsetChannel>
 8001166:	4603      	mov	r3, r0
 8001168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800116c:	2b00      	cmp	r3, #0
 800116e:	d10a      	bne.n	8001186 <HAL_ADC_ConfigChannel+0x2da>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2102      	movs	r1, #2
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fae6 	bl	8000748 <LL_ADC_GetOffsetChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	0e9b      	lsrs	r3, r3, #26
 8001180:	f003 021f 	and.w	r2, r3, #31
 8001184:	e01e      	b.n	80011c4 <HAL_ADC_ConfigChannel+0x318>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2102      	movs	r1, #2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fadb 	bl	8000748 <LL_ADC_GetOffsetChannel>
 8001192:	4603      	mov	r3, r0
 8001194:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001198:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800119c:	fa93 f3a3 	rbit	r3, r3
 80011a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80011a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80011ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80011b4:	2320      	movs	r3, #32
 80011b6:	e004      	b.n	80011c2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80011b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80011bc:	fab3 f383 	clz	r3, r3
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d105      	bne.n	80011dc <HAL_ADC_ConfigChannel+0x330>
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	0e9b      	lsrs	r3, r3, #26
 80011d6:	f003 031f 	and.w	r3, r3, #31
 80011da:	e014      	b.n	8001206 <HAL_ADC_ConfigChannel+0x35a>
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80011e4:	fa93 f3a3 	rbit	r3, r3
 80011e8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80011ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80011ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80011f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d101      	bne.n	80011fc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80011f8:	2320      	movs	r3, #32
 80011fa:	e004      	b.n	8001206 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80011fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001200:	fab3 f383 	clz	r3, r3
 8001204:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001206:	429a      	cmp	r2, r3
 8001208:	d106      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2200      	movs	r2, #0
 8001210:	2102      	movs	r1, #2
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff faae 	bl	8000774 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2103      	movs	r1, #3
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff fa92 	bl	8000748 <LL_ADC_GetOffsetChannel>
 8001224:	4603      	mov	r3, r0
 8001226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10a      	bne.n	8001244 <HAL_ADC_ConfigChannel+0x398>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2103      	movs	r1, #3
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fa87 	bl	8000748 <LL_ADC_GetOffsetChannel>
 800123a:	4603      	mov	r3, r0
 800123c:	0e9b      	lsrs	r3, r3, #26
 800123e:	f003 021f 	and.w	r2, r3, #31
 8001242:	e017      	b.n	8001274 <HAL_ADC_ConfigChannel+0x3c8>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2103      	movs	r1, #3
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fa7c 	bl	8000748 <LL_ADC_GetOffsetChannel>
 8001250:	4603      	mov	r3, r0
 8001252:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001254:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001256:	fa93 f3a3 	rbit	r3, r3
 800125a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800125c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800125e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001260:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001266:	2320      	movs	r3, #32
 8001268:	e003      	b.n	8001272 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800126a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800126c:	fab3 f383 	clz	r3, r3
 8001270:	b2db      	uxtb	r3, r3
 8001272:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800127c:	2b00      	cmp	r3, #0
 800127e:	d105      	bne.n	800128c <HAL_ADC_ConfigChannel+0x3e0>
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	0e9b      	lsrs	r3, r3, #26
 8001286:	f003 031f 	and.w	r3, r3, #31
 800128a:	e011      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x404>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001294:	fa93 f3a3 	rbit	r3, r3
 8001298:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800129a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800129c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800129e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80012a4:	2320      	movs	r3, #32
 80012a6:	e003      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80012a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80012aa:	fab3 f383 	clz	r3, r3
 80012ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d106      	bne.n	80012c2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2200      	movs	r2, #0
 80012ba:	2103      	movs	r1, #3
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fa59 	bl	8000774 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fb60 	bl	800098c <LL_ADC_IsEnabled>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f040 8140 	bne.w	8001554 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	6819      	ldr	r1, [r3, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	461a      	mov	r2, r3
 80012e2:	f7ff facd 	bl	8000880 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	4a8f      	ldr	r2, [pc, #572]	@ (8001528 <HAL_ADC_ConfigChannel+0x67c>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	f040 8131 	bne.w	8001554 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10b      	bne.n	800131a <HAL_ADC_ConfigChannel+0x46e>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	0e9b      	lsrs	r3, r3, #26
 8001308:	3301      	adds	r3, #1
 800130a:	f003 031f 	and.w	r3, r3, #31
 800130e:	2b09      	cmp	r3, #9
 8001310:	bf94      	ite	ls
 8001312:	2301      	movls	r3, #1
 8001314:	2300      	movhi	r3, #0
 8001316:	b2db      	uxtb	r3, r3
 8001318:	e019      	b.n	800134e <HAL_ADC_ConfigChannel+0x4a2>
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001320:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001322:	fa93 f3a3 	rbit	r3, r3
 8001326:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800132a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800132c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001332:	2320      	movs	r3, #32
 8001334:	e003      	b.n	800133e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001336:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001338:	fab3 f383 	clz	r3, r3
 800133c:	b2db      	uxtb	r3, r3
 800133e:	3301      	adds	r3, #1
 8001340:	f003 031f 	and.w	r3, r3, #31
 8001344:	2b09      	cmp	r3, #9
 8001346:	bf94      	ite	ls
 8001348:	2301      	movls	r3, #1
 800134a:	2300      	movhi	r3, #0
 800134c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800134e:	2b00      	cmp	r3, #0
 8001350:	d079      	beq.n	8001446 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800135a:	2b00      	cmp	r3, #0
 800135c:	d107      	bne.n	800136e <HAL_ADC_ConfigChannel+0x4c2>
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	0e9b      	lsrs	r3, r3, #26
 8001364:	3301      	adds	r3, #1
 8001366:	069b      	lsls	r3, r3, #26
 8001368:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800136c:	e015      	b.n	800139a <HAL_ADC_ConfigChannel+0x4ee>
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001374:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001376:	fa93 f3a3 	rbit	r3, r3
 800137a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800137c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800137e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001380:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001386:	2320      	movs	r3, #32
 8001388:	e003      	b.n	8001392 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800138a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800138c:	fab3 f383 	clz	r3, r3
 8001390:	b2db      	uxtb	r3, r3
 8001392:	3301      	adds	r3, #1
 8001394:	069b      	lsls	r3, r3, #26
 8001396:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d109      	bne.n	80013ba <HAL_ADC_ConfigChannel+0x50e>
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	0e9b      	lsrs	r3, r3, #26
 80013ac:	3301      	adds	r3, #1
 80013ae:	f003 031f 	and.w	r3, r3, #31
 80013b2:	2101      	movs	r1, #1
 80013b4:	fa01 f303 	lsl.w	r3, r1, r3
 80013b8:	e017      	b.n	80013ea <HAL_ADC_ConfigChannel+0x53e>
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013c2:	fa93 f3a3 	rbit	r3, r3
 80013c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80013c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013ca:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80013cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80013d2:	2320      	movs	r3, #32
 80013d4:	e003      	b.n	80013de <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80013d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013d8:	fab3 f383 	clz	r3, r3
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	3301      	adds	r3, #1
 80013e0:	f003 031f 	and.w	r3, r3, #31
 80013e4:	2101      	movs	r1, #1
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ea:	ea42 0103 	orr.w	r1, r2, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10a      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x564>
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	0e9b      	lsrs	r3, r3, #26
 8001400:	3301      	adds	r3, #1
 8001402:	f003 021f 	and.w	r2, r3, #31
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	051b      	lsls	r3, r3, #20
 800140e:	e018      	b.n	8001442 <HAL_ADC_ConfigChannel+0x596>
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001418:	fa93 f3a3 	rbit	r3, r3
 800141c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800141e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001420:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001428:	2320      	movs	r3, #32
 800142a:	e003      	b.n	8001434 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800142c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800142e:	fab3 f383 	clz	r3, r3
 8001432:	b2db      	uxtb	r3, r3
 8001434:	3301      	adds	r3, #1
 8001436:	f003 021f 	and.w	r2, r3, #31
 800143a:	4613      	mov	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001442:	430b      	orrs	r3, r1
 8001444:	e081      	b.n	800154a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800144e:	2b00      	cmp	r3, #0
 8001450:	d107      	bne.n	8001462 <HAL_ADC_ConfigChannel+0x5b6>
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	0e9b      	lsrs	r3, r3, #26
 8001458:	3301      	adds	r3, #1
 800145a:	069b      	lsls	r3, r3, #26
 800145c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001460:	e015      	b.n	800148e <HAL_ADC_ConfigChannel+0x5e2>
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800146a:	fa93 f3a3 	rbit	r3, r3
 800146e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800147a:	2320      	movs	r3, #32
 800147c:	e003      	b.n	8001486 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800147e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001480:	fab3 f383 	clz	r3, r3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	3301      	adds	r3, #1
 8001488:	069b      	lsls	r3, r3, #26
 800148a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001496:	2b00      	cmp	r3, #0
 8001498:	d109      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x602>
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	0e9b      	lsrs	r3, r3, #26
 80014a0:	3301      	adds	r3, #1
 80014a2:	f003 031f 	and.w	r3, r3, #31
 80014a6:	2101      	movs	r1, #1
 80014a8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ac:	e017      	b.n	80014de <HAL_ADC_ConfigChannel+0x632>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	fa93 f3a3 	rbit	r3, r3
 80014ba:	61bb      	str	r3, [r7, #24]
  return result;
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80014c0:	6a3b      	ldr	r3, [r7, #32]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80014c6:	2320      	movs	r3, #32
 80014c8:	e003      	b.n	80014d2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80014ca:	6a3b      	ldr	r3, [r7, #32]
 80014cc:	fab3 f383 	clz	r3, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	3301      	adds	r3, #1
 80014d4:	f003 031f 	and.w	r3, r3, #31
 80014d8:	2101      	movs	r1, #1
 80014da:	fa01 f303 	lsl.w	r3, r1, r3
 80014de:	ea42 0103 	orr.w	r1, r2, r3
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10d      	bne.n	800150a <HAL_ADC_ConfigChannel+0x65e>
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	0e9b      	lsrs	r3, r3, #26
 80014f4:	3301      	adds	r3, #1
 80014f6:	f003 021f 	and.w	r2, r3, #31
 80014fa:	4613      	mov	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4413      	add	r3, r2
 8001500:	3b1e      	subs	r3, #30
 8001502:	051b      	lsls	r3, r3, #20
 8001504:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001508:	e01e      	b.n	8001548 <HAL_ADC_ConfigChannel+0x69c>
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	fa93 f3a3 	rbit	r3, r3
 8001516:	60fb      	str	r3, [r7, #12]
  return result;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d104      	bne.n	800152c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001522:	2320      	movs	r3, #32
 8001524:	e006      	b.n	8001534 <HAL_ADC_ConfigChannel+0x688>
 8001526:	bf00      	nop
 8001528:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	fab3 f383 	clz	r3, r3
 8001532:	b2db      	uxtb	r3, r3
 8001534:	3301      	adds	r3, #1
 8001536:	f003 021f 	and.w	r2, r3, #31
 800153a:	4613      	mov	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	4413      	add	r3, r2
 8001540:	3b1e      	subs	r3, #30
 8001542:	051b      	lsls	r3, r3, #20
 8001544:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001548:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800154e:	4619      	mov	r1, r3
 8001550:	f7ff f96a 	bl	8000828 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b3d      	ldr	r3, [pc, #244]	@ (8001650 <HAL_ADC_ConfigChannel+0x7a4>)
 800155a:	4013      	ands	r3, r2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d06c      	beq.n	800163a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001560:	483c      	ldr	r0, [pc, #240]	@ (8001654 <HAL_ADC_ConfigChannel+0x7a8>)
 8001562:	f7ff f8bf 	bl	80006e4 <LL_ADC_GetCommonPathInternalCh>
 8001566:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a3a      	ldr	r2, [pc, #232]	@ (8001658 <HAL_ADC_ConfigChannel+0x7ac>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d127      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001574:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001578:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d121      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a35      	ldr	r2, [pc, #212]	@ (800165c <HAL_ADC_ConfigChannel+0x7b0>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d157      	bne.n	800163a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800158a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800158e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001592:	4619      	mov	r1, r3
 8001594:	482f      	ldr	r0, [pc, #188]	@ (8001654 <HAL_ADC_ConfigChannel+0x7a8>)
 8001596:	f7ff f892 	bl	80006be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800159a:	4b31      	ldr	r3, [pc, #196]	@ (8001660 <HAL_ADC_ConfigChannel+0x7b4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	099b      	lsrs	r3, r3, #6
 80015a0:	4a30      	ldr	r2, [pc, #192]	@ (8001664 <HAL_ADC_ConfigChannel+0x7b8>)
 80015a2:	fba2 2303 	umull	r2, r3, r2, r3
 80015a6:	099b      	lsrs	r3, r3, #6
 80015a8:	1c5a      	adds	r2, r3, #1
 80015aa:	4613      	mov	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80015b4:	e002      	b.n	80015bc <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	3b01      	subs	r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f9      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80015c2:	e03a      	b.n	800163a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a27      	ldr	r2, [pc, #156]	@ (8001668 <HAL_ADC_ConfigChannel+0x7bc>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d113      	bne.n	80015f6 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80015ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80015d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10d      	bne.n	80015f6 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a1f      	ldr	r2, [pc, #124]	@ (800165c <HAL_ADC_ConfigChannel+0x7b0>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d12a      	bne.n	800163a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80015e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015ec:	4619      	mov	r1, r3
 80015ee:	4819      	ldr	r0, [pc, #100]	@ (8001654 <HAL_ADC_ConfigChannel+0x7a8>)
 80015f0:	f7ff f865 	bl	80006be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80015f4:	e021      	b.n	800163a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a1c      	ldr	r2, [pc, #112]	@ (800166c <HAL_ADC_ConfigChannel+0x7c0>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d11c      	bne.n	800163a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001600:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001604:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d116      	bne.n	800163a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a12      	ldr	r2, [pc, #72]	@ (800165c <HAL_ADC_ConfigChannel+0x7b0>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d111      	bne.n	800163a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001616:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800161a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800161e:	4619      	mov	r1, r3
 8001620:	480c      	ldr	r0, [pc, #48]	@ (8001654 <HAL_ADC_ConfigChannel+0x7a8>)
 8001622:	f7ff f84c 	bl	80006be <LL_ADC_SetCommonPathInternalCh>
 8001626:	e008      	b.n	800163a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800162c:	f043 0220 	orr.w	r2, r3, #32
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001642:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001646:	4618      	mov	r0, r3
 8001648:	37d8      	adds	r7, #216	@ 0xd8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	80080000 	.word	0x80080000
 8001654:	50040300 	.word	0x50040300
 8001658:	c7520000 	.word	0xc7520000
 800165c:	50040000 	.word	0x50040000
 8001660:	20000000 	.word	0x20000000
 8001664:	053e2d63 	.word	0x053e2d63
 8001668:	cb840000 	.word	0xcb840000
 800166c:	80000001 	.word	0x80000001

08001670 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001678:	2300      	movs	r3, #0
 800167a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff f983 	bl	800098c <LL_ADC_IsEnabled>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d169      	bne.n	8001760 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	4b36      	ldr	r3, [pc, #216]	@ (800176c <ADC_Enable+0xfc>)
 8001694:	4013      	ands	r3, r2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00d      	beq.n	80016b6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800169e:	f043 0210 	orr.w	r2, r3, #16
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016aa:	f043 0201 	orr.w	r2, r3, #1
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e055      	b.n	8001762 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff f952 	bl	8000964 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80016c0:	482b      	ldr	r0, [pc, #172]	@ (8001770 <ADC_Enable+0x100>)
 80016c2:	f7ff f80f 	bl	80006e4 <LL_ADC_GetCommonPathInternalCh>
 80016c6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80016c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d013      	beq.n	80016f8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016d0:	4b28      	ldr	r3, [pc, #160]	@ (8001774 <ADC_Enable+0x104>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	099b      	lsrs	r3, r3, #6
 80016d6:	4a28      	ldr	r2, [pc, #160]	@ (8001778 <ADC_Enable+0x108>)
 80016d8:	fba2 2303 	umull	r2, r3, r2, r3
 80016dc:	099b      	lsrs	r3, r3, #6
 80016de:	1c5a      	adds	r2, r3, #1
 80016e0:	4613      	mov	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80016ea:	e002      	b.n	80016f2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1f9      	bne.n	80016ec <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80016f8:	f7fe ffc2 	bl	8000680 <HAL_GetTick>
 80016fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80016fe:	e028      	b.n	8001752 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff f941 	bl	800098c <LL_ADC_IsEnabled>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d104      	bne.n	800171a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff f925 	bl	8000964 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800171a:	f7fe ffb1 	bl	8000680 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d914      	bls.n	8001752 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b01      	cmp	r3, #1
 8001734:	d00d      	beq.n	8001752 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800173a:	f043 0210 	orr.w	r2, r3, #16
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001746:	f043 0201 	orr.w	r2, r3, #1
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e007      	b.n	8001762 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b01      	cmp	r3, #1
 800175e:	d1cf      	bne.n	8001700 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	8000003f 	.word	0x8000003f
 8001770:	50040300 	.word	0x50040300
 8001774:	20000000 	.word	0x20000000
 8001778:	053e2d63 	.word	0x053e2d63

0800177c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800178c:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <__NVIC_SetPriorityGrouping+0x44>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001798:	4013      	ands	r3, r2
 800179a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ae:	4a04      	ldr	r2, [pc, #16]	@ (80017c0 <__NVIC_SetPriorityGrouping+0x44>)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	60d3      	str	r3, [r2, #12]
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c8:	4b04      	ldr	r3, [pc, #16]	@ (80017dc <__NVIC_GetPriorityGrouping+0x18>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	f003 0307 	and.w	r3, r3, #7
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	db0a      	blt.n	800180a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	490c      	ldr	r1, [pc, #48]	@ (800182c <__NVIC_SetPriority+0x4c>)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	0112      	lsls	r2, r2, #4
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	440b      	add	r3, r1
 8001804:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001808:	e00a      	b.n	8001820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4908      	ldr	r1, [pc, #32]	@ (8001830 <__NVIC_SetPriority+0x50>)
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	3b04      	subs	r3, #4
 8001818:	0112      	lsls	r2, r2, #4
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	440b      	add	r3, r1
 800181e:	761a      	strb	r2, [r3, #24]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000e100 	.word	0xe000e100
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001834:	b480      	push	{r7}
 8001836:	b089      	sub	sp, #36	@ 0x24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f1c3 0307 	rsb	r3, r3, #7
 800184e:	2b04      	cmp	r3, #4
 8001850:	bf28      	it	cs
 8001852:	2304      	movcs	r3, #4
 8001854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3304      	adds	r3, #4
 800185a:	2b06      	cmp	r3, #6
 800185c:	d902      	bls.n	8001864 <NVIC_EncodePriority+0x30>
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3b03      	subs	r3, #3
 8001862:	e000      	b.n	8001866 <NVIC_EncodePriority+0x32>
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	f04f 32ff 	mov.w	r2, #4294967295
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43da      	mvns	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	401a      	ands	r2, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800187c:	f04f 31ff 	mov.w	r1, #4294967295
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa01 f303 	lsl.w	r3, r1, r3
 8001886:	43d9      	mvns	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	4313      	orrs	r3, r2
         );
}
 800188e:	4618      	mov	r0, r3
 8001890:	3724      	adds	r7, #36	@ 0x24
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018ac:	d301      	bcc.n	80018b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00f      	b.n	80018d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b2:	4a0a      	ldr	r2, [pc, #40]	@ (80018dc <SysTick_Config+0x40>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ba:	210f      	movs	r1, #15
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295
 80018c0:	f7ff ff8e 	bl	80017e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c4:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <SysTick_Config+0x40>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ca:	4b04      	ldr	r3, [pc, #16]	@ (80018dc <SysTick_Config+0x40>)
 80018cc:	2207      	movs	r2, #7
 80018ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	e000e010 	.word	0xe000e010

080018e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ff47 	bl	800177c <__NVIC_SetPriorityGrouping>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b086      	sub	sp, #24
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4603      	mov	r3, r0
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
 8001902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001908:	f7ff ff5c 	bl	80017c4 <__NVIC_GetPriorityGrouping>
 800190c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	6978      	ldr	r0, [r7, #20]
 8001914:	f7ff ff8e 	bl	8001834 <NVIC_EncodePriority>
 8001918:	4602      	mov	r2, r0
 800191a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff5d 	bl	80017e0 <__NVIC_SetPriority>
}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ffb0 	bl	800189c <SysTick_Config>
 800193c:	4603      	mov	r3, r0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001948:	b480      	push	{r7}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001956:	e154      	b.n	8001c02 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	2101      	movs	r1, #1
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	fa01 f303 	lsl.w	r3, r1, r3
 8001964:	4013      	ands	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 8146 	beq.w	8001bfc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b01      	cmp	r3, #1
 800197a:	d005      	beq.n	8001988 <HAL_GPIO_Init+0x40>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d130      	bne.n	80019ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	68da      	ldr	r2, [r3, #12]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019be:	2201      	movs	r2, #1
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	091b      	lsrs	r3, r3, #4
 80019d4:	f003 0201 	and.w	r2, r3, #1
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d017      	beq.n	8001a26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	2203      	movs	r2, #3
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d123      	bne.n	8001a7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	08da      	lsrs	r2, r3, #3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3208      	adds	r2, #8
 8001a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	220f      	movs	r2, #15
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	4013      	ands	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	691a      	ldr	r2, [r3, #16]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	08da      	lsrs	r2, r3, #3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3208      	adds	r2, #8
 8001a74:	6939      	ldr	r1, [r7, #16]
 8001a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 0203 	and.w	r2, r3, #3
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 80a0 	beq.w	8001bfc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001abc:	4b58      	ldr	r3, [pc, #352]	@ (8001c20 <HAL_GPIO_Init+0x2d8>)
 8001abe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ac0:	4a57      	ldr	r2, [pc, #348]	@ (8001c20 <HAL_GPIO_Init+0x2d8>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ac8:	4b55      	ldr	r3, [pc, #340]	@ (8001c20 <HAL_GPIO_Init+0x2d8>)
 8001aca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ad4:	4a53      	ldr	r2, [pc, #332]	@ (8001c24 <HAL_GPIO_Init+0x2dc>)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	089b      	lsrs	r3, r3, #2
 8001ada:	3302      	adds	r3, #2
 8001adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	220f      	movs	r2, #15
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001afe:	d019      	beq.n	8001b34 <HAL_GPIO_Init+0x1ec>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a49      	ldr	r2, [pc, #292]	@ (8001c28 <HAL_GPIO_Init+0x2e0>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d013      	beq.n	8001b30 <HAL_GPIO_Init+0x1e8>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a48      	ldr	r2, [pc, #288]	@ (8001c2c <HAL_GPIO_Init+0x2e4>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d00d      	beq.n	8001b2c <HAL_GPIO_Init+0x1e4>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a47      	ldr	r2, [pc, #284]	@ (8001c30 <HAL_GPIO_Init+0x2e8>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d007      	beq.n	8001b28 <HAL_GPIO_Init+0x1e0>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a46      	ldr	r2, [pc, #280]	@ (8001c34 <HAL_GPIO_Init+0x2ec>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d101      	bne.n	8001b24 <HAL_GPIO_Init+0x1dc>
 8001b20:	2304      	movs	r3, #4
 8001b22:	e008      	b.n	8001b36 <HAL_GPIO_Init+0x1ee>
 8001b24:	2307      	movs	r3, #7
 8001b26:	e006      	b.n	8001b36 <HAL_GPIO_Init+0x1ee>
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e004      	b.n	8001b36 <HAL_GPIO_Init+0x1ee>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e002      	b.n	8001b36 <HAL_GPIO_Init+0x1ee>
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <HAL_GPIO_Init+0x1ee>
 8001b34:	2300      	movs	r3, #0
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	f002 0203 	and.w	r2, r2, #3
 8001b3c:	0092      	lsls	r2, r2, #2
 8001b3e:	4093      	lsls	r3, r2
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b46:	4937      	ldr	r1, [pc, #220]	@ (8001c24 <HAL_GPIO_Init+0x2dc>)
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	089b      	lsrs	r3, r3, #2
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b54:	4b38      	ldr	r3, [pc, #224]	@ (8001c38 <HAL_GPIO_Init+0x2f0>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b78:	4a2f      	ldr	r2, [pc, #188]	@ (8001c38 <HAL_GPIO_Init+0x2f0>)
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b7e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c38 <HAL_GPIO_Init+0x2f0>)
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ba2:	4a25      	ldr	r2, [pc, #148]	@ (8001c38 <HAL_GPIO_Init+0x2f0>)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ba8:	4b23      	ldr	r3, [pc, #140]	@ (8001c38 <HAL_GPIO_Init+0x2f0>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bcc:	4a1a      	ldr	r2, [pc, #104]	@ (8001c38 <HAL_GPIO_Init+0x2f0>)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bd2:	4b19      	ldr	r3, [pc, #100]	@ (8001c38 <HAL_GPIO_Init+0x2f0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4013      	ands	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bf6:	4a10      	ldr	r2, [pc, #64]	@ (8001c38 <HAL_GPIO_Init+0x2f0>)
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f47f aea3 	bne.w	8001958 <HAL_GPIO_Init+0x10>
  }
}
 8001c12:	bf00      	nop
 8001c14:	bf00      	nop
 8001c16:	371c      	adds	r7, #28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40010000 	.word	0x40010000
 8001c28:	48000400 	.word	0x48000400
 8001c2c:	48000800 	.word	0x48000800
 8001c30:	48000c00 	.word	0x48000c00
 8001c34:	48001000 	.word	0x48001000
 8001c38:	40010400 	.word	0x40010400

08001c3c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c40:	4b04      	ldr	r3, [pc, #16]	@ (8001c54 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40007000 	.word	0x40007000

08001c58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c66:	d130      	bne.n	8001cca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c68:	4b23      	ldr	r3, [pc, #140]	@ (8001cf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c74:	d038      	beq.n	8001ce8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c76:	4b20      	ldr	r3, [pc, #128]	@ (8001cf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c7e:	4a1e      	ldr	r2, [pc, #120]	@ (8001cf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c80:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c84:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c86:	4b1d      	ldr	r3, [pc, #116]	@ (8001cfc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2232      	movs	r2, #50	@ 0x32
 8001c8c:	fb02 f303 	mul.w	r3, r2, r3
 8001c90:	4a1b      	ldr	r2, [pc, #108]	@ (8001d00 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c92:	fba2 2303 	umull	r2, r3, r2, r3
 8001c96:	0c9b      	lsrs	r3, r3, #18
 8001c98:	3301      	adds	r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c9c:	e002      	b.n	8001ca4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ca4:	4b14      	ldr	r3, [pc, #80]	@ (8001cf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cb0:	d102      	bne.n	8001cb8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1f2      	bne.n	8001c9e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cc4:	d110      	bne.n	8001ce8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e00f      	b.n	8001cea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cca:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001cd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cd6:	d007      	beq.n	8001ce8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cd8:	4b07      	ldr	r3, [pc, #28]	@ (8001cf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ce0:	4a05      	ldr	r2, [pc, #20]	@ (8001cf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ce2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ce6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40007000 	.word	0x40007000
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	431bde83 	.word	0x431bde83

08001d04 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d102      	bne.n	8001d18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	f000 bc02 	b.w	800251c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d18:	4b96      	ldr	r3, [pc, #600]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
 8001d20:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d22:	4b94      	ldr	r3, [pc, #592]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0310 	and.w	r3, r3, #16
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 80e4 	beq.w	8001f02 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d007      	beq.n	8001d50 <HAL_RCC_OscConfig+0x4c>
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	2b0c      	cmp	r3, #12
 8001d44:	f040 808b 	bne.w	8001e5e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	f040 8087 	bne.w	8001e5e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d50:	4b88      	ldr	r3, [pc, #544]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_OscConfig+0x64>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e3d9      	b.n	800251c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a1a      	ldr	r2, [r3, #32]
 8001d6c:	4b81      	ldr	r3, [pc, #516]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d004      	beq.n	8001d82 <HAL_RCC_OscConfig+0x7e>
 8001d78:	4b7e      	ldr	r3, [pc, #504]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d80:	e005      	b.n	8001d8e <HAL_RCC_OscConfig+0x8a>
 8001d82:	4b7c      	ldr	r3, [pc, #496]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001d84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d223      	bcs.n	8001dda <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 fd54 	bl	8002844 <RCC_SetFlashLatencyFromMSIRange>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e3ba      	b.n	800251c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001da6:	4b73      	ldr	r3, [pc, #460]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a72      	ldr	r2, [pc, #456]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001dac:	f043 0308 	orr.w	r3, r3, #8
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	4b70      	ldr	r3, [pc, #448]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	496d      	ldr	r1, [pc, #436]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dc4:	4b6b      	ldr	r3, [pc, #428]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	021b      	lsls	r3, r3, #8
 8001dd2:	4968      	ldr	r1, [pc, #416]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]
 8001dd8:	e025      	b.n	8001e26 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dda:	4b66      	ldr	r3, [pc, #408]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a65      	ldr	r2, [pc, #404]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001de0:	f043 0308 	orr.w	r3, r3, #8
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	4b63      	ldr	r3, [pc, #396]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	4960      	ldr	r1, [pc, #384]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001df8:	4b5e      	ldr	r3, [pc, #376]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	495b      	ldr	r1, [pc, #364]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d109      	bne.n	8001e26 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 fd14 	bl	8002844 <RCC_SetFlashLatencyFromMSIRange>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e37a      	b.n	800251c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e26:	f000 fc81 	bl	800272c <HAL_RCC_GetSysClockFreq>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	4b51      	ldr	r3, [pc, #324]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	4950      	ldr	r1, [pc, #320]	@ (8001f78 <HAL_RCC_OscConfig+0x274>)
 8001e38:	5ccb      	ldrb	r3, [r1, r3]
 8001e3a:	f003 031f 	and.w	r3, r3, #31
 8001e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e42:	4a4e      	ldr	r2, [pc, #312]	@ (8001f7c <HAL_RCC_OscConfig+0x278>)
 8001e44:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e46:	4b4e      	ldr	r3, [pc, #312]	@ (8001f80 <HAL_RCC_OscConfig+0x27c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fbc8 	bl	80005e0 <HAL_InitTick>
 8001e50:	4603      	mov	r3, r0
 8001e52:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d052      	beq.n	8001f00 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	e35e      	b.n	800251c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d032      	beq.n	8001ecc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e66:	4b43      	ldr	r3, [pc, #268]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a42      	ldr	r2, [pc, #264]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e72:	f7fe fc05 	bl	8000680 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e7a:	f7fe fc01 	bl	8000680 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e347      	b.n	800251c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e8c:	4b39      	ldr	r3, [pc, #228]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0f0      	beq.n	8001e7a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e98:	4b36      	ldr	r3, [pc, #216]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a35      	ldr	r2, [pc, #212]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001e9e:	f043 0308 	orr.w	r3, r3, #8
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	4b33      	ldr	r3, [pc, #204]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	4930      	ldr	r1, [pc, #192]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eb6:	4b2f      	ldr	r3, [pc, #188]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	021b      	lsls	r3, r3, #8
 8001ec4:	492b      	ldr	r1, [pc, #172]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	604b      	str	r3, [r1, #4]
 8001eca:	e01a      	b.n	8001f02 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ecc:	4b29      	ldr	r3, [pc, #164]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a28      	ldr	r2, [pc, #160]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001ed2:	f023 0301 	bic.w	r3, r3, #1
 8001ed6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ed8:	f7fe fbd2 	bl	8000680 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ee0:	f7fe fbce 	bl	8000680 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e314      	b.n	800251c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ef2:	4b20      	ldr	r3, [pc, #128]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x1dc>
 8001efe:	e000      	b.n	8001f02 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f00:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d073      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d005      	beq.n	8001f20 <HAL_RCC_OscConfig+0x21c>
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2b0c      	cmp	r3, #12
 8001f18:	d10e      	bne.n	8001f38 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d10b      	bne.n	8001f38 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f20:	4b14      	ldr	r3, [pc, #80]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d063      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x2f0>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d15f      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e2f1      	b.n	800251c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f40:	d106      	bne.n	8001f50 <HAL_RCC_OscConfig+0x24c>
 8001f42:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a0b      	ldr	r2, [pc, #44]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001f48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e025      	b.n	8001f9c <HAL_RCC_OscConfig+0x298>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f58:	d114      	bne.n	8001f84 <HAL_RCC_OscConfig+0x280>
 8001f5a:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a05      	ldr	r2, [pc, #20]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001f60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4b03      	ldr	r3, [pc, #12]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a02      	ldr	r2, [pc, #8]	@ (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e013      	b.n	8001f9c <HAL_RCC_OscConfig+0x298>
 8001f74:	40021000 	.word	0x40021000
 8001f78:	08002fec 	.word	0x08002fec
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	20000004 	.word	0x20000004
 8001f84:	4ba0      	ldr	r3, [pc, #640]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a9f      	ldr	r2, [pc, #636]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 8001f8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	4b9d      	ldr	r3, [pc, #628]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a9c      	ldr	r2, [pc, #624]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 8001f96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d013      	beq.n	8001fcc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7fe fb6c 	bl	8000680 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fac:	f7fe fb68 	bl	8000680 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b64      	cmp	r3, #100	@ 0x64
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e2ae      	b.n	800251c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fbe:	4b92      	ldr	r3, [pc, #584]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0x2a8>
 8001fca:	e014      	b.n	8001ff6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fcc:	f7fe fb58 	bl	8000680 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd4:	f7fe fb54 	bl	8000680 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b64      	cmp	r3, #100	@ 0x64
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e29a      	b.n	800251c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fe6:	4b88      	ldr	r3, [pc, #544]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x2d0>
 8001ff2:	e000      	b.n	8001ff6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d060      	beq.n	80020c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	2b04      	cmp	r3, #4
 8002006:	d005      	beq.n	8002014 <HAL_RCC_OscConfig+0x310>
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	2b0c      	cmp	r3, #12
 800200c:	d119      	bne.n	8002042 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d116      	bne.n	8002042 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002014:	4b7c      	ldr	r3, [pc, #496]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_RCC_OscConfig+0x328>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e277      	b.n	800251c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202c:	4b76      	ldr	r3, [pc, #472]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	061b      	lsls	r3, r3, #24
 800203a:	4973      	ldr	r1, [pc, #460]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 800203c:	4313      	orrs	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002040:	e040      	b.n	80020c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d023      	beq.n	8002092 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800204a:	4b6f      	ldr	r3, [pc, #444]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a6e      	ldr	r2, [pc, #440]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 8002050:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002056:	f7fe fb13 	bl	8000680 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800205e:	f7fe fb0f 	bl	8000680 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e255      	b.n	800251c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002070:	4b65      	ldr	r3, [pc, #404]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f0      	beq.n	800205e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207c:	4b62      	ldr	r3, [pc, #392]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	061b      	lsls	r3, r3, #24
 800208a:	495f      	ldr	r1, [pc, #380]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 800208c:	4313      	orrs	r3, r2
 800208e:	604b      	str	r3, [r1, #4]
 8002090:	e018      	b.n	80020c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002092:	4b5d      	ldr	r3, [pc, #372]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a5c      	ldr	r2, [pc, #368]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 8002098:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800209c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209e:	f7fe faef 	bl	8000680 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a6:	f7fe faeb 	bl	8000680 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e231      	b.n	800251c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020b8:	4b53      	ldr	r3, [pc, #332]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1f0      	bne.n	80020a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d03c      	beq.n	800214a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d01c      	beq.n	8002112 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 80020da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020de:	4a4a      	ldr	r2, [pc, #296]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e8:	f7fe faca 	bl	8000680 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f0:	f7fe fac6 	bl	8000680 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e20c      	b.n	800251c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002102:	4b41      	ldr	r3, [pc, #260]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 8002104:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0ef      	beq.n	80020f0 <HAL_RCC_OscConfig+0x3ec>
 8002110:	e01b      	b.n	800214a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002112:	4b3d      	ldr	r3, [pc, #244]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 8002114:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002118:	4a3b      	ldr	r2, [pc, #236]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 800211a:	f023 0301 	bic.w	r3, r3, #1
 800211e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002122:	f7fe faad 	bl	8000680 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800212a:	f7fe faa9 	bl	8000680 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e1ef      	b.n	800251c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800213c:	4b32      	ldr	r3, [pc, #200]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 800213e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1ef      	bne.n	800212a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 80a6 	beq.w	80022a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002158:	2300      	movs	r3, #0
 800215a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800215c:	4b2a      	ldr	r3, [pc, #168]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 800215e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002160:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10d      	bne.n	8002184 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002168:	4b27      	ldr	r3, [pc, #156]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 800216a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216c:	4a26      	ldr	r2, [pc, #152]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 800216e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002172:	6593      	str	r3, [r2, #88]	@ 0x58
 8002174:	4b24      	ldr	r3, [pc, #144]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 8002176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002178:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002180:	2301      	movs	r3, #1
 8002182:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002184:	4b21      	ldr	r3, [pc, #132]	@ (800220c <HAL_RCC_OscConfig+0x508>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800218c:	2b00      	cmp	r3, #0
 800218e:	d118      	bne.n	80021c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002190:	4b1e      	ldr	r3, [pc, #120]	@ (800220c <HAL_RCC_OscConfig+0x508>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a1d      	ldr	r2, [pc, #116]	@ (800220c <HAL_RCC_OscConfig+0x508>)
 8002196:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800219a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800219c:	f7fe fa70 	bl	8000680 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a4:	f7fe fa6c 	bl	8000680 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e1b2      	b.n	800251c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b6:	4b15      	ldr	r3, [pc, #84]	@ (800220c <HAL_RCC_OscConfig+0x508>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d108      	bne.n	80021dc <HAL_RCC_OscConfig+0x4d8>
 80021ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 80021cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021da:	e029      	b.n	8002230 <HAL_RCC_OscConfig+0x52c>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b05      	cmp	r3, #5
 80021e2:	d115      	bne.n	8002210 <HAL_RCC_OscConfig+0x50c>
 80021e4:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 80021e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ea:	4a07      	ldr	r2, [pc, #28]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 80021ec:	f043 0304 	orr.w	r3, r3, #4
 80021f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021f4:	4b04      	ldr	r3, [pc, #16]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 80021f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021fa:	4a03      	ldr	r2, [pc, #12]	@ (8002208 <HAL_RCC_OscConfig+0x504>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002204:	e014      	b.n	8002230 <HAL_RCC_OscConfig+0x52c>
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000
 800220c:	40007000 	.word	0x40007000
 8002210:	4b9a      	ldr	r3, [pc, #616]	@ (800247c <HAL_RCC_OscConfig+0x778>)
 8002212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002216:	4a99      	ldr	r2, [pc, #612]	@ (800247c <HAL_RCC_OscConfig+0x778>)
 8002218:	f023 0301 	bic.w	r3, r3, #1
 800221c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002220:	4b96      	ldr	r3, [pc, #600]	@ (800247c <HAL_RCC_OscConfig+0x778>)
 8002222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002226:	4a95      	ldr	r2, [pc, #596]	@ (800247c <HAL_RCC_OscConfig+0x778>)
 8002228:	f023 0304 	bic.w	r3, r3, #4
 800222c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d016      	beq.n	8002266 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002238:	f7fe fa22 	bl	8000680 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800223e:	e00a      	b.n	8002256 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002240:	f7fe fa1e 	bl	8000680 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800224e:	4293      	cmp	r3, r2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e162      	b.n	800251c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002256:	4b89      	ldr	r3, [pc, #548]	@ (800247c <HAL_RCC_OscConfig+0x778>)
 8002258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0ed      	beq.n	8002240 <HAL_RCC_OscConfig+0x53c>
 8002264:	e015      	b.n	8002292 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002266:	f7fe fa0b 	bl	8000680 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800226c:	e00a      	b.n	8002284 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226e:	f7fe fa07 	bl	8000680 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	f241 3288 	movw	r2, #5000	@ 0x1388
 800227c:	4293      	cmp	r3, r2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e14b      	b.n	800251c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002284:	4b7d      	ldr	r3, [pc, #500]	@ (800247c <HAL_RCC_OscConfig+0x778>)
 8002286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1ed      	bne.n	800226e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002292:	7ffb      	ldrb	r3, [r7, #31]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d105      	bne.n	80022a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002298:	4b78      	ldr	r3, [pc, #480]	@ (800247c <HAL_RCC_OscConfig+0x778>)
 800229a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229c:	4a77      	ldr	r2, [pc, #476]	@ (800247c <HAL_RCC_OscConfig+0x778>)
 800229e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022a2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d03c      	beq.n	800232a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d01c      	beq.n	80022f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022b8:	4b70      	ldr	r3, [pc, #448]	@ (800247c <HAL_RCC_OscConfig+0x778>)
 80022ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022be:	4a6f      	ldr	r2, [pc, #444]	@ (800247c <HAL_RCC_OscConfig+0x778>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c8:	f7fe f9da 	bl	8000680 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022d0:	f7fe f9d6 	bl	8000680 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e11c      	b.n	800251c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022e2:	4b66      	ldr	r3, [pc, #408]	@ (800247c <HAL_RCC_OscConfig+0x778>)
 80022e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0ef      	beq.n	80022d0 <HAL_RCC_OscConfig+0x5cc>
 80022f0:	e01b      	b.n	800232a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022f2:	4b62      	ldr	r3, [pc, #392]	@ (800247c <HAL_RCC_OscConfig+0x778>)
 80022f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022f8:	4a60      	ldr	r2, [pc, #384]	@ (800247c <HAL_RCC_OscConfig+0x778>)
 80022fa:	f023 0301 	bic.w	r3, r3, #1
 80022fe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002302:	f7fe f9bd 	bl	8000680 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800230a:	f7fe f9b9 	bl	8000680 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e0ff      	b.n	800251c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800231c:	4b57      	ldr	r3, [pc, #348]	@ (800247c <HAL_RCC_OscConfig+0x778>)
 800231e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1ef      	bne.n	800230a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 80f3 	beq.w	800251a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002338:	2b02      	cmp	r3, #2
 800233a:	f040 80c9 	bne.w	80024d0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800233e:	4b4f      	ldr	r3, [pc, #316]	@ (800247c <HAL_RCC_OscConfig+0x778>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f003 0203 	and.w	r2, r3, #3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234e:	429a      	cmp	r2, r3
 8002350:	d12c      	bne.n	80023ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235c:	3b01      	subs	r3, #1
 800235e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002360:	429a      	cmp	r2, r3
 8002362:	d123      	bne.n	80023ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800236e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002370:	429a      	cmp	r2, r3
 8002372:	d11b      	bne.n	80023ac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800237e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002380:	429a      	cmp	r2, r3
 8002382:	d113      	bne.n	80023ac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800238e:	085b      	lsrs	r3, r3, #1
 8002390:	3b01      	subs	r3, #1
 8002392:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002394:	429a      	cmp	r2, r3
 8002396:	d109      	bne.n	80023ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	085b      	lsrs	r3, r3, #1
 80023a4:	3b01      	subs	r3, #1
 80023a6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d06b      	beq.n	8002484 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	2b0c      	cmp	r3, #12
 80023b0:	d062      	beq.n	8002478 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023b2:	4b32      	ldr	r3, [pc, #200]	@ (800247c <HAL_RCC_OscConfig+0x778>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e0ac      	b.n	800251c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023c2:	4b2e      	ldr	r3, [pc, #184]	@ (800247c <HAL_RCC_OscConfig+0x778>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a2d      	ldr	r2, [pc, #180]	@ (800247c <HAL_RCC_OscConfig+0x778>)
 80023c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023ce:	f7fe f957 	bl	8000680 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d6:	f7fe f953 	bl	8000680 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e099      	b.n	800251c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e8:	4b24      	ldr	r3, [pc, #144]	@ (800247c <HAL_RCC_OscConfig+0x778>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1f0      	bne.n	80023d6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023f4:	4b21      	ldr	r3, [pc, #132]	@ (800247c <HAL_RCC_OscConfig+0x778>)
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	4b21      	ldr	r3, [pc, #132]	@ (8002480 <HAL_RCC_OscConfig+0x77c>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002404:	3a01      	subs	r2, #1
 8002406:	0112      	lsls	r2, r2, #4
 8002408:	4311      	orrs	r1, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800240e:	0212      	lsls	r2, r2, #8
 8002410:	4311      	orrs	r1, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002416:	0852      	lsrs	r2, r2, #1
 8002418:	3a01      	subs	r2, #1
 800241a:	0552      	lsls	r2, r2, #21
 800241c:	4311      	orrs	r1, r2
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002422:	0852      	lsrs	r2, r2, #1
 8002424:	3a01      	subs	r2, #1
 8002426:	0652      	lsls	r2, r2, #25
 8002428:	4311      	orrs	r1, r2
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800242e:	06d2      	lsls	r2, r2, #27
 8002430:	430a      	orrs	r2, r1
 8002432:	4912      	ldr	r1, [pc, #72]	@ (800247c <HAL_RCC_OscConfig+0x778>)
 8002434:	4313      	orrs	r3, r2
 8002436:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002438:	4b10      	ldr	r3, [pc, #64]	@ (800247c <HAL_RCC_OscConfig+0x778>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0f      	ldr	r2, [pc, #60]	@ (800247c <HAL_RCC_OscConfig+0x778>)
 800243e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002442:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002444:	4b0d      	ldr	r3, [pc, #52]	@ (800247c <HAL_RCC_OscConfig+0x778>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4a0c      	ldr	r2, [pc, #48]	@ (800247c <HAL_RCC_OscConfig+0x778>)
 800244a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800244e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002450:	f7fe f916 	bl	8000680 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002458:	f7fe f912 	bl	8000680 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e058      	b.n	800251c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800246a:	4b04      	ldr	r3, [pc, #16]	@ (800247c <HAL_RCC_OscConfig+0x778>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002476:	e050      	b.n	800251a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e04f      	b.n	800251c <HAL_RCC_OscConfig+0x818>
 800247c:	40021000 	.word	0x40021000
 8002480:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002484:	4b27      	ldr	r3, [pc, #156]	@ (8002524 <HAL_RCC_OscConfig+0x820>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d144      	bne.n	800251a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002490:	4b24      	ldr	r3, [pc, #144]	@ (8002524 <HAL_RCC_OscConfig+0x820>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a23      	ldr	r2, [pc, #140]	@ (8002524 <HAL_RCC_OscConfig+0x820>)
 8002496:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800249a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800249c:	4b21      	ldr	r3, [pc, #132]	@ (8002524 <HAL_RCC_OscConfig+0x820>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4a20      	ldr	r2, [pc, #128]	@ (8002524 <HAL_RCC_OscConfig+0x820>)
 80024a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024a8:	f7fe f8ea 	bl	8000680 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b0:	f7fe f8e6 	bl	8000680 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e02c      	b.n	800251c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024c2:	4b18      	ldr	r3, [pc, #96]	@ (8002524 <HAL_RCC_OscConfig+0x820>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0x7ac>
 80024ce:	e024      	b.n	800251a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2b0c      	cmp	r3, #12
 80024d4:	d01f      	beq.n	8002516 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d6:	4b13      	ldr	r3, [pc, #76]	@ (8002524 <HAL_RCC_OscConfig+0x820>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a12      	ldr	r2, [pc, #72]	@ (8002524 <HAL_RCC_OscConfig+0x820>)
 80024dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e2:	f7fe f8cd 	bl	8000680 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ea:	f7fe f8c9 	bl	8000680 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e00f      	b.n	800251c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024fc:	4b09      	ldr	r3, [pc, #36]	@ (8002524 <HAL_RCC_OscConfig+0x820>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1f0      	bne.n	80024ea <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002508:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <HAL_RCC_OscConfig+0x820>)
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	4905      	ldr	r1, [pc, #20]	@ (8002524 <HAL_RCC_OscConfig+0x820>)
 800250e:	4b06      	ldr	r3, [pc, #24]	@ (8002528 <HAL_RCC_OscConfig+0x824>)
 8002510:	4013      	ands	r3, r2
 8002512:	60cb      	str	r3, [r1, #12]
 8002514:	e001      	b.n	800251a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3720      	adds	r7, #32
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40021000 	.word	0x40021000
 8002528:	feeefffc 	.word	0xfeeefffc

0800252c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0e7      	b.n	8002710 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002540:	4b75      	ldr	r3, [pc, #468]	@ (8002718 <HAL_RCC_ClockConfig+0x1ec>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d910      	bls.n	8002570 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b72      	ldr	r3, [pc, #456]	@ (8002718 <HAL_RCC_ClockConfig+0x1ec>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 0207 	bic.w	r2, r3, #7
 8002556:	4970      	ldr	r1, [pc, #448]	@ (8002718 <HAL_RCC_ClockConfig+0x1ec>)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800255e:	4b6e      	ldr	r3, [pc, #440]	@ (8002718 <HAL_RCC_ClockConfig+0x1ec>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0cf      	b.n	8002710 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d010      	beq.n	800259e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	4b66      	ldr	r3, [pc, #408]	@ (800271c <HAL_RCC_ClockConfig+0x1f0>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002588:	429a      	cmp	r2, r3
 800258a:	d908      	bls.n	800259e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800258c:	4b63      	ldr	r3, [pc, #396]	@ (800271c <HAL_RCC_ClockConfig+0x1f0>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	4960      	ldr	r1, [pc, #384]	@ (800271c <HAL_RCC_ClockConfig+0x1f0>)
 800259a:	4313      	orrs	r3, r2
 800259c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d04c      	beq.n	8002644 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	d107      	bne.n	80025c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025b2:	4b5a      	ldr	r3, [pc, #360]	@ (800271c <HAL_RCC_ClockConfig+0x1f0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d121      	bne.n	8002602 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e0a6      	b.n	8002710 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d107      	bne.n	80025da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ca:	4b54      	ldr	r3, [pc, #336]	@ (800271c <HAL_RCC_ClockConfig+0x1f0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d115      	bne.n	8002602 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e09a      	b.n	8002710 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d107      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025e2:	4b4e      	ldr	r3, [pc, #312]	@ (800271c <HAL_RCC_ClockConfig+0x1f0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d109      	bne.n	8002602 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e08e      	b.n	8002710 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025f2:	4b4a      	ldr	r3, [pc, #296]	@ (800271c <HAL_RCC_ClockConfig+0x1f0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e086      	b.n	8002710 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002602:	4b46      	ldr	r3, [pc, #280]	@ (800271c <HAL_RCC_ClockConfig+0x1f0>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f023 0203 	bic.w	r2, r3, #3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4943      	ldr	r1, [pc, #268]	@ (800271c <HAL_RCC_ClockConfig+0x1f0>)
 8002610:	4313      	orrs	r3, r2
 8002612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002614:	f7fe f834 	bl	8000680 <HAL_GetTick>
 8002618:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261a:	e00a      	b.n	8002632 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800261c:	f7fe f830 	bl	8000680 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800262a:	4293      	cmp	r3, r2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e06e      	b.n	8002710 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002632:	4b3a      	ldr	r3, [pc, #232]	@ (800271c <HAL_RCC_ClockConfig+0x1f0>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 020c 	and.w	r2, r3, #12
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	429a      	cmp	r2, r3
 8002642:	d1eb      	bne.n	800261c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d010      	beq.n	8002672 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	4b31      	ldr	r3, [pc, #196]	@ (800271c <HAL_RCC_ClockConfig+0x1f0>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800265c:	429a      	cmp	r2, r3
 800265e:	d208      	bcs.n	8002672 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002660:	4b2e      	ldr	r3, [pc, #184]	@ (800271c <HAL_RCC_ClockConfig+0x1f0>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	492b      	ldr	r1, [pc, #172]	@ (800271c <HAL_RCC_ClockConfig+0x1f0>)
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002672:	4b29      	ldr	r3, [pc, #164]	@ (8002718 <HAL_RCC_ClockConfig+0x1ec>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d210      	bcs.n	80026a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002680:	4b25      	ldr	r3, [pc, #148]	@ (8002718 <HAL_RCC_ClockConfig+0x1ec>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f023 0207 	bic.w	r2, r3, #7
 8002688:	4923      	ldr	r1, [pc, #140]	@ (8002718 <HAL_RCC_ClockConfig+0x1ec>)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	4313      	orrs	r3, r2
 800268e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002690:	4b21      	ldr	r3, [pc, #132]	@ (8002718 <HAL_RCC_ClockConfig+0x1ec>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d001      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e036      	b.n	8002710 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d008      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ae:	4b1b      	ldr	r3, [pc, #108]	@ (800271c <HAL_RCC_ClockConfig+0x1f0>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	4918      	ldr	r1, [pc, #96]	@ (800271c <HAL_RCC_ClockConfig+0x1f0>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d009      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026cc:	4b13      	ldr	r3, [pc, #76]	@ (800271c <HAL_RCC_ClockConfig+0x1f0>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4910      	ldr	r1, [pc, #64]	@ (800271c <HAL_RCC_ClockConfig+0x1f0>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026e0:	f000 f824 	bl	800272c <HAL_RCC_GetSysClockFreq>
 80026e4:	4602      	mov	r2, r0
 80026e6:	4b0d      	ldr	r3, [pc, #52]	@ (800271c <HAL_RCC_ClockConfig+0x1f0>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	091b      	lsrs	r3, r3, #4
 80026ec:	f003 030f 	and.w	r3, r3, #15
 80026f0:	490b      	ldr	r1, [pc, #44]	@ (8002720 <HAL_RCC_ClockConfig+0x1f4>)
 80026f2:	5ccb      	ldrb	r3, [r1, r3]
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	fa22 f303 	lsr.w	r3, r2, r3
 80026fc:	4a09      	ldr	r2, [pc, #36]	@ (8002724 <HAL_RCC_ClockConfig+0x1f8>)
 80026fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002700:	4b09      	ldr	r3, [pc, #36]	@ (8002728 <HAL_RCC_ClockConfig+0x1fc>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7fd ff6b 	bl	80005e0 <HAL_InitTick>
 800270a:	4603      	mov	r3, r0
 800270c:	72fb      	strb	r3, [r7, #11]

  return status;
 800270e:	7afb      	ldrb	r3, [r7, #11]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40022000 	.word	0x40022000
 800271c:	40021000 	.word	0x40021000
 8002720:	08002fec 	.word	0x08002fec
 8002724:	20000000 	.word	0x20000000
 8002728:	20000004 	.word	0x20000004

0800272c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800272c:	b480      	push	{r7}
 800272e:	b089      	sub	sp, #36	@ 0x24
 8002730:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	2300      	movs	r3, #0
 8002738:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800273a:	4b3e      	ldr	r3, [pc, #248]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x108>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 030c 	and.w	r3, r3, #12
 8002742:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002744:	4b3b      	ldr	r3, [pc, #236]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x108>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <HAL_RCC_GetSysClockFreq+0x34>
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	2b0c      	cmp	r3, #12
 8002758:	d121      	bne.n	800279e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d11e      	bne.n	800279e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002760:	4b34      	ldr	r3, [pc, #208]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x108>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d107      	bne.n	800277c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800276c:	4b31      	ldr	r3, [pc, #196]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x108>)
 800276e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002772:	0a1b      	lsrs	r3, r3, #8
 8002774:	f003 030f 	and.w	r3, r3, #15
 8002778:	61fb      	str	r3, [r7, #28]
 800277a:	e005      	b.n	8002788 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800277c:	4b2d      	ldr	r3, [pc, #180]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x108>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002788:	4a2b      	ldr	r2, [pc, #172]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x10c>)
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002790:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10d      	bne.n	80027b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800279c:	e00a      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d102      	bne.n	80027aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027a4:	4b25      	ldr	r3, [pc, #148]	@ (800283c <HAL_RCC_GetSysClockFreq+0x110>)
 80027a6:	61bb      	str	r3, [r7, #24]
 80027a8:	e004      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027b0:	4b23      	ldr	r3, [pc, #140]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x114>)
 80027b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	2b0c      	cmp	r3, #12
 80027b8:	d134      	bne.n	8002824 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x108>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d003      	beq.n	80027d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d003      	beq.n	80027d8 <HAL_RCC_GetSysClockFreq+0xac>
 80027d0:	e005      	b.n	80027de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027d2:	4b1a      	ldr	r3, [pc, #104]	@ (800283c <HAL_RCC_GetSysClockFreq+0x110>)
 80027d4:	617b      	str	r3, [r7, #20]
      break;
 80027d6:	e005      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027d8:	4b19      	ldr	r3, [pc, #100]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x114>)
 80027da:	617b      	str	r3, [r7, #20]
      break;
 80027dc:	e002      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	617b      	str	r3, [r7, #20]
      break;
 80027e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027e4:	4b13      	ldr	r3, [pc, #76]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x108>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	091b      	lsrs	r3, r3, #4
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	3301      	adds	r3, #1
 80027f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027f2:	4b10      	ldr	r3, [pc, #64]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x108>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	0a1b      	lsrs	r3, r3, #8
 80027f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	fb03 f202 	mul.w	r2, r3, r2
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	fbb2 f3f3 	udiv	r3, r2, r3
 8002808:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800280a:	4b0a      	ldr	r3, [pc, #40]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x108>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	0e5b      	lsrs	r3, r3, #25
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	3301      	adds	r3, #1
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002822:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002824:	69bb      	ldr	r3, [r7, #24]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3724      	adds	r7, #36	@ 0x24
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000
 8002838:	08002ffc 	.word	0x08002ffc
 800283c:	00f42400 	.word	0x00f42400
 8002840:	007a1200 	.word	0x007a1200

08002844 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800284c:	2300      	movs	r3, #0
 800284e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002850:	4b2a      	ldr	r3, [pc, #168]	@ (80028fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002854:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800285c:	f7ff f9ee 	bl	8001c3c <HAL_PWREx_GetVoltageRange>
 8002860:	6178      	str	r0, [r7, #20]
 8002862:	e014      	b.n	800288e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002864:	4b25      	ldr	r3, [pc, #148]	@ (80028fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002868:	4a24      	ldr	r2, [pc, #144]	@ (80028fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800286a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800286e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002870:	4b22      	ldr	r3, [pc, #136]	@ (80028fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800287c:	f7ff f9de 	bl	8001c3c <HAL_PWREx_GetVoltageRange>
 8002880:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002882:	4b1e      	ldr	r3, [pc, #120]	@ (80028fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002886:	4a1d      	ldr	r2, [pc, #116]	@ (80028fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002888:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800288c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002894:	d10b      	bne.n	80028ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b80      	cmp	r3, #128	@ 0x80
 800289a:	d919      	bls.n	80028d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2ba0      	cmp	r3, #160	@ 0xa0
 80028a0:	d902      	bls.n	80028a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028a2:	2302      	movs	r3, #2
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	e013      	b.n	80028d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028a8:	2301      	movs	r3, #1
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	e010      	b.n	80028d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b80      	cmp	r3, #128	@ 0x80
 80028b2:	d902      	bls.n	80028ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80028b4:	2303      	movs	r3, #3
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	e00a      	b.n	80028d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b80      	cmp	r3, #128	@ 0x80
 80028be:	d102      	bne.n	80028c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028c0:	2302      	movs	r3, #2
 80028c2:	613b      	str	r3, [r7, #16]
 80028c4:	e004      	b.n	80028d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b70      	cmp	r3, #112	@ 0x70
 80028ca:	d101      	bne.n	80028d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028cc:	2301      	movs	r3, #1
 80028ce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f023 0207 	bic.w	r2, r3, #7
 80028d8:	4909      	ldr	r1, [pc, #36]	@ (8002900 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028e0:	4b07      	ldr	r3, [pc, #28]	@ (8002900 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d001      	beq.n	80028f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40021000 	.word	0x40021000
 8002900:	40022000 	.word	0x40022000

08002904 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800290c:	2300      	movs	r3, #0
 800290e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002910:	2300      	movs	r3, #0
 8002912:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800291c:	2b00      	cmp	r3, #0
 800291e:	d031      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002924:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002928:	d01a      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800292a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800292e:	d814      	bhi.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002930:	2b00      	cmp	r3, #0
 8002932:	d009      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002934:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002938:	d10f      	bne.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800293a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	4a5c      	ldr	r2, [pc, #368]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002944:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002946:	e00c      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3304      	adds	r3, #4
 800294c:	2100      	movs	r1, #0
 800294e:	4618      	mov	r0, r3
 8002950:	f000 fa22 	bl	8002d98 <RCCEx_PLLSAI1_Config>
 8002954:	4603      	mov	r3, r0
 8002956:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002958:	e003      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	74fb      	strb	r3, [r7, #19]
      break;
 800295e:	e000      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002960:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002962:	7cfb      	ldrb	r3, [r7, #19]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10b      	bne.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002968:	4b51      	ldr	r3, [pc, #324]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002976:	494e      	ldr	r1, [pc, #312]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800297e:	e001      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002980:	7cfb      	ldrb	r3, [r7, #19]
 8002982:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 809e 	beq.w	8002ace <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002992:	2300      	movs	r3, #0
 8002994:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002996:	4b46      	ldr	r3, [pc, #280]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800299a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80029a6:	2300      	movs	r3, #0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00d      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ac:	4b40      	ldr	r3, [pc, #256]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b0:	4a3f      	ldr	r2, [pc, #252]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80029b8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c4:	2301      	movs	r3, #1
 80029c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029c8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a39      	ldr	r2, [pc, #228]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80029ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029d4:	f7fd fe54 	bl	8000680 <HAL_GetTick>
 80029d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029da:	e009      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029dc:	f7fd fe50 	bl	8000680 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d902      	bls.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	74fb      	strb	r3, [r7, #19]
        break;
 80029ee:	e005      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029f0:	4b30      	ldr	r3, [pc, #192]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0ef      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80029fc:	7cfb      	ldrb	r3, [r7, #19]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d15a      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a02:	4b2b      	ldr	r3, [pc, #172]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a0c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d01e      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d019      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a1e:	4b24      	ldr	r3, [pc, #144]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a28:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a2a:	4b21      	ldr	r3, [pc, #132]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a30:	4a1f      	ldr	r2, [pc, #124]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a40:	4a1b      	ldr	r2, [pc, #108]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a4a:	4a19      	ldr	r2, [pc, #100]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d016      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5c:	f7fd fe10 	bl	8000680 <HAL_GetTick>
 8002a60:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a62:	e00b      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a64:	f7fd fe0c 	bl	8000680 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d902      	bls.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	74fb      	strb	r3, [r7, #19]
            break;
 8002a7a:	e006      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0ec      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002a8a:	7cfb      	ldrb	r3, [r7, #19]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10b      	bne.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a90:	4b07      	ldr	r3, [pc, #28]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a96:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a9e:	4904      	ldr	r1, [pc, #16]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002aa6:	e009      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002aa8:	7cfb      	ldrb	r3, [r7, #19]
 8002aaa:	74bb      	strb	r3, [r7, #18]
 8002aac:	e006      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002aae:	bf00      	nop
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab8:	7cfb      	ldrb	r3, [r7, #19]
 8002aba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002abc:	7c7b      	ldrb	r3, [r7, #17]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d105      	bne.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac2:	4b8d      	ldr	r3, [pc, #564]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac6:	4a8c      	ldr	r2, [pc, #560]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002ac8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002acc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ada:	4b87      	ldr	r3, [pc, #540]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae0:	f023 0203 	bic.w	r2, r3, #3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	4983      	ldr	r1, [pc, #524]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002afc:	4b7e      	ldr	r3, [pc, #504]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b02:	f023 020c 	bic.w	r2, r3, #12
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0a:	497b      	ldr	r1, [pc, #492]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b1e:	4b76      	ldr	r3, [pc, #472]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b24:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2c:	4972      	ldr	r1, [pc, #456]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00a      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b40:	4b6d      	ldr	r3, [pc, #436]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b46:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4e:	496a      	ldr	r1, [pc, #424]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00a      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b62:	4b65      	ldr	r3, [pc, #404]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b68:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b70:	4961      	ldr	r1, [pc, #388]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00a      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b84:	4b5c      	ldr	r3, [pc, #368]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b92:	4959      	ldr	r1, [pc, #356]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ba6:	4b54      	ldr	r3, [pc, #336]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb4:	4950      	ldr	r1, [pc, #320]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00a      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bc8:	4b4b      	ldr	r3, [pc, #300]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd6:	4948      	ldr	r1, [pc, #288]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bea:	4b43      	ldr	r3, [pc, #268]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf8:	493f      	ldr	r1, [pc, #252]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d028      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c0c:	4b3a      	ldr	r3, [pc, #232]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c1a:	4937      	ldr	r1, [pc, #220]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c2a:	d106      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c2c:	4b32      	ldr	r3, [pc, #200]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	4a31      	ldr	r2, [pc, #196]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c36:	60d3      	str	r3, [r2, #12]
 8002c38:	e011      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c42:	d10c      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3304      	adds	r3, #4
 8002c48:	2101      	movs	r1, #1
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 f8a4 	bl	8002d98 <RCCEx_PLLSAI1_Config>
 8002c50:	4603      	mov	r3, r0
 8002c52:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c54:	7cfb      	ldrb	r3, [r7, #19]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8002c5a:	7cfb      	ldrb	r3, [r7, #19]
 8002c5c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d028      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c6a:	4b23      	ldr	r3, [pc, #140]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c70:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c78:	491f      	ldr	r1, [pc, #124]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c88:	d106      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	4a1a      	ldr	r2, [pc, #104]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c94:	60d3      	str	r3, [r2, #12]
 8002c96:	e011      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ca0:	d10c      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 f875 	bl	8002d98 <RCCEx_PLLSAI1_Config>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cb2:	7cfb      	ldrb	r3, [r7, #19]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002cb8:	7cfb      	ldrb	r3, [r7, #19]
 8002cba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d02b      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cd6:	4908      	ldr	r1, [pc, #32]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ce2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ce6:	d109      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ce8:	4b03      	ldr	r3, [pc, #12]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4a02      	ldr	r2, [pc, #8]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002cee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cf2:	60d3      	str	r3, [r2, #12]
 8002cf4:	e014      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d04:	d10c      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 f843 	bl	8002d98 <RCCEx_PLLSAI1_Config>
 8002d12:	4603      	mov	r3, r0
 8002d14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d16:	7cfb      	ldrb	r3, [r7, #19]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8002d1c:	7cfb      	ldrb	r3, [r7, #19]
 8002d1e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d01c      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d2c:	4b19      	ldr	r3, [pc, #100]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d32:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3a:	4916      	ldr	r1, [pc, #88]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d4a:	d10c      	bne.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3304      	adds	r3, #4
 8002d50:	2102      	movs	r1, #2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 f820 	bl	8002d98 <RCCEx_PLLSAI1_Config>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d5c:	7cfb      	ldrb	r3, [r7, #19]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8002d62:	7cfb      	ldrb	r3, [r7, #19]
 8002d64:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d72:	4b08      	ldr	r3, [pc, #32]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d78:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d80:	4904      	ldr	r1, [pc, #16]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d88:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40021000 	.word	0x40021000

08002d98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002da2:	2300      	movs	r3, #0
 8002da4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002da6:	4b74      	ldr	r3, [pc, #464]	@ (8002f78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d018      	beq.n	8002de4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002db2:	4b71      	ldr	r3, [pc, #452]	@ (8002f78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f003 0203 	and.w	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d10d      	bne.n	8002dde <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
       ||
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d009      	beq.n	8002dde <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002dca:	4b6b      	ldr	r3, [pc, #428]	@ (8002f78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	091b      	lsrs	r3, r3, #4
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
       ||
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d047      	beq.n	8002e6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	73fb      	strb	r3, [r7, #15]
 8002de2:	e044      	b.n	8002e6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d018      	beq.n	8002e1e <RCCEx_PLLSAI1_Config+0x86>
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d825      	bhi.n	8002e3c <RCCEx_PLLSAI1_Config+0xa4>
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d002      	beq.n	8002dfa <RCCEx_PLLSAI1_Config+0x62>
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d009      	beq.n	8002e0c <RCCEx_PLLSAI1_Config+0x74>
 8002df8:	e020      	b.n	8002e3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dfa:	4b5f      	ldr	r3, [pc, #380]	@ (8002f78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d11d      	bne.n	8002e42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e0a:	e01a      	b.n	8002e42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e0c:	4b5a      	ldr	r3, [pc, #360]	@ (8002f78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d116      	bne.n	8002e46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e1c:	e013      	b.n	8002e46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e1e:	4b56      	ldr	r3, [pc, #344]	@ (8002f78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10f      	bne.n	8002e4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e2a:	4b53      	ldr	r3, [pc, #332]	@ (8002f78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e3a:	e006      	b.n	8002e4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e40:	e004      	b.n	8002e4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e42:	bf00      	nop
 8002e44:	e002      	b.n	8002e4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e46:	bf00      	nop
 8002e48:	e000      	b.n	8002e4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10d      	bne.n	8002e6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e52:	4b49      	ldr	r3, [pc, #292]	@ (8002f78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6819      	ldr	r1, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	430b      	orrs	r3, r1
 8002e68:	4943      	ldr	r1, [pc, #268]	@ (8002f78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d17c      	bne.n	8002f6e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e74:	4b40      	ldr	r3, [pc, #256]	@ (8002f78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a3f      	ldr	r2, [pc, #252]	@ (8002f78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002e7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e80:	f7fd fbfe 	bl	8000680 <HAL_GetTick>
 8002e84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e86:	e009      	b.n	8002e9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e88:	f7fd fbfa 	bl	8000680 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d902      	bls.n	8002e9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	73fb      	strb	r3, [r7, #15]
        break;
 8002e9a:	e005      	b.n	8002ea8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e9c:	4b36      	ldr	r3, [pc, #216]	@ (8002f78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1ef      	bne.n	8002e88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d15f      	bne.n	8002f6e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d110      	bne.n	8002ed6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eb4:	4b30      	ldr	r3, [pc, #192]	@ (8002f78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002ebc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6892      	ldr	r2, [r2, #8]
 8002ec4:	0211      	lsls	r1, r2, #8
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	68d2      	ldr	r2, [r2, #12]
 8002eca:	06d2      	lsls	r2, r2, #27
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	492a      	ldr	r1, [pc, #168]	@ (8002f78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	610b      	str	r3, [r1, #16]
 8002ed4:	e027      	b.n	8002f26 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d112      	bne.n	8002f02 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002edc:	4b26      	ldr	r3, [pc, #152]	@ (8002f78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002ee4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6892      	ldr	r2, [r2, #8]
 8002eec:	0211      	lsls	r1, r2, #8
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6912      	ldr	r2, [r2, #16]
 8002ef2:	0852      	lsrs	r2, r2, #1
 8002ef4:	3a01      	subs	r2, #1
 8002ef6:	0552      	lsls	r2, r2, #21
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	491f      	ldr	r1, [pc, #124]	@ (8002f78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	610b      	str	r3, [r1, #16]
 8002f00:	e011      	b.n	8002f26 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f02:	4b1d      	ldr	r3, [pc, #116]	@ (8002f78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002f0a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6892      	ldr	r2, [r2, #8]
 8002f12:	0211      	lsls	r1, r2, #8
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6952      	ldr	r2, [r2, #20]
 8002f18:	0852      	lsrs	r2, r2, #1
 8002f1a:	3a01      	subs	r2, #1
 8002f1c:	0652      	lsls	r2, r2, #25
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	4915      	ldr	r1, [pc, #84]	@ (8002f78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f26:	4b14      	ldr	r3, [pc, #80]	@ (8002f78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a13      	ldr	r2, [pc, #76]	@ (8002f78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f2c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f30:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f32:	f7fd fba5 	bl	8000680 <HAL_GetTick>
 8002f36:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f38:	e009      	b.n	8002f4e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f3a:	f7fd fba1 	bl	8000680 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d902      	bls.n	8002f4e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	73fb      	strb	r3, [r7, #15]
          break;
 8002f4c:	e005      	b.n	8002f5a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0ef      	beq.n	8002f3a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d106      	bne.n	8002f6e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f60:	4b05      	ldr	r3, [pc, #20]	@ (8002f78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	4903      	ldr	r1, [pc, #12]	@ (8002f78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40021000 	.word	0x40021000

08002f7c <memset>:
 8002f7c:	4402      	add	r2, r0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d100      	bne.n	8002f86 <memset+0xa>
 8002f84:	4770      	bx	lr
 8002f86:	f803 1b01 	strb.w	r1, [r3], #1
 8002f8a:	e7f9      	b.n	8002f80 <memset+0x4>

08002f8c <__libc_init_array>:
 8002f8c:	b570      	push	{r4, r5, r6, lr}
 8002f8e:	4d0d      	ldr	r5, [pc, #52]	@ (8002fc4 <__libc_init_array+0x38>)
 8002f90:	4c0d      	ldr	r4, [pc, #52]	@ (8002fc8 <__libc_init_array+0x3c>)
 8002f92:	1b64      	subs	r4, r4, r5
 8002f94:	10a4      	asrs	r4, r4, #2
 8002f96:	2600      	movs	r6, #0
 8002f98:	42a6      	cmp	r6, r4
 8002f9a:	d109      	bne.n	8002fb0 <__libc_init_array+0x24>
 8002f9c:	4d0b      	ldr	r5, [pc, #44]	@ (8002fcc <__libc_init_array+0x40>)
 8002f9e:	4c0c      	ldr	r4, [pc, #48]	@ (8002fd0 <__libc_init_array+0x44>)
 8002fa0:	f000 f818 	bl	8002fd4 <_init>
 8002fa4:	1b64      	subs	r4, r4, r5
 8002fa6:	10a4      	asrs	r4, r4, #2
 8002fa8:	2600      	movs	r6, #0
 8002faa:	42a6      	cmp	r6, r4
 8002fac:	d105      	bne.n	8002fba <__libc_init_array+0x2e>
 8002fae:	bd70      	pop	{r4, r5, r6, pc}
 8002fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fb4:	4798      	blx	r3
 8002fb6:	3601      	adds	r6, #1
 8002fb8:	e7ee      	b.n	8002f98 <__libc_init_array+0xc>
 8002fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fbe:	4798      	blx	r3
 8002fc0:	3601      	adds	r6, #1
 8002fc2:	e7f2      	b.n	8002faa <__libc_init_array+0x1e>
 8002fc4:	0800302c 	.word	0x0800302c
 8002fc8:	0800302c 	.word	0x0800302c
 8002fcc:	0800302c 	.word	0x0800302c
 8002fd0:	08003030 	.word	0x08003030

08002fd4 <_init>:
 8002fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd6:	bf00      	nop
 8002fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fda:	bc08      	pop	{r3}
 8002fdc:	469e      	mov	lr, r3
 8002fde:	4770      	bx	lr

08002fe0 <_fini>:
 8002fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fe2:	bf00      	nop
 8002fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fe6:	bc08      	pop	{r3}
 8002fe8:	469e      	mov	lr, r3
 8002fea:	4770      	bx	lr
