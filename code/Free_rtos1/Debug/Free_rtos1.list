
Free_rtos1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005274  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08005404  08005404  00006404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054cc  080054cc  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080054cc  080054cc  0000706c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080054cc  080054cc  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054cc  080054cc  000064cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054d0  080054d0  000064d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080054d4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001acc  2000006c  08005540  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b38  08005540  00007b38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143dd  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030d3  00000000  00000000  0001b479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  0001e550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f49  00000000  00000000  0001f940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000468b  00000000  00000000  00020889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d17  00000000  00000000  00024f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc06c  00000000  00000000  00039c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00115c97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005944  00000000  00000000  00115cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  0011b620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080053ec 	.word	0x080053ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080053ec 	.word	0x080053ec

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fab1 	bl	800073a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f824 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f868 	bl	80002b0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001e0:	f001 fec8 	bl	8001f74 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 80001e4:	4a09      	ldr	r2, [pc, #36]	@ (800020c <main+0x3c>)
 80001e6:	2100      	movs	r1, #0
 80001e8:	4809      	ldr	r0, [pc, #36]	@ (8000210 <main+0x40>)
 80001ea:	f001 ff0d 	bl	8002008 <osThreadNew>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4a08      	ldr	r2, [pc, #32]	@ (8000214 <main+0x44>)
 80001f2:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 80001f4:	4a08      	ldr	r2, [pc, #32]	@ (8000218 <main+0x48>)
 80001f6:	2100      	movs	r1, #0
 80001f8:	4808      	ldr	r0, [pc, #32]	@ (800021c <main+0x4c>)
 80001fa:	f001 ff05 	bl	8002008 <osThreadNew>
 80001fe:	4603      	mov	r3, r0
 8000200:	4a07      	ldr	r2, [pc, #28]	@ (8000220 <main+0x50>)
 8000202:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000204:	f001 feda 	bl	8001fbc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000208:	bf00      	nop
 800020a:	e7fd      	b.n	8000208 <main+0x38>
 800020c:	0800543c 	.word	0x0800543c
 8000210:	0800032d 	.word	0x0800032d
 8000214:	20000088 	.word	0x20000088
 8000218:	08005460 	.word	0x08005460
 800021c:	0800034d 	.word	0x0800034d
 8000220:	2000008c 	.word	0x2000008c

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b096      	sub	sp, #88	@ 0x58
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0314 	add.w	r3, r7, #20
 800022e:	2244      	movs	r2, #68	@ 0x44
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f004 fe18 	bl	8004e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	463b      	mov	r3, r7
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
 8000244:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000246:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800024a:	f000 fd31 	bl	8000cb0 <HAL_PWREx_ControlVoltageScaling>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000254:	f000 f89c 	bl	8000390 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000258:	2310      	movs	r3, #16
 800025a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800025c:	2301      	movs	r3, #1
 800025e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000260:	2300      	movs	r3, #0
 8000262:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000264:	2360      	movs	r3, #96	@ 0x60
 8000266:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000268:	2300      	movs	r3, #0
 800026a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026c:	f107 0314 	add.w	r3, r7, #20
 8000270:	4618      	mov	r0, r3
 8000272:	f000 fd73 	bl	8000d5c <HAL_RCC_OscConfig>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800027c:	f000 f888 	bl	8000390 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000280:	230f      	movs	r3, #15
 8000282:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000284:	2300      	movs	r3, #0
 8000286:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000294:	463b      	mov	r3, r7
 8000296:	2100      	movs	r1, #0
 8000298:	4618      	mov	r0, r3
 800029a:	f001 f973 	bl	8001584 <HAL_RCC_ClockConfig>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002a4:	f000 f874 	bl	8000390 <Error_Handler>
  }
}
 80002a8:	bf00      	nop
 80002aa:	3758      	adds	r7, #88	@ 0x58
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b088      	sub	sp, #32
 80002b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b6:	f107 030c 	add.w	r3, r7, #12
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
 80002c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c6:	4b18      	ldr	r3, [pc, #96]	@ (8000328 <MX_GPIO_Init+0x78>)
 80002c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ca:	4a17      	ldr	r2, [pc, #92]	@ (8000328 <MX_GPIO_Init+0x78>)
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002d2:	4b15      	ldr	r3, [pc, #84]	@ (8000328 <MX_GPIO_Init+0x78>)
 80002d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002d6:	f003 0301 	and.w	r3, r3, #1
 80002da:	60bb      	str	r3, [r7, #8]
 80002dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002de:	4b12      	ldr	r3, [pc, #72]	@ (8000328 <MX_GPIO_Init+0x78>)
 80002e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002e2:	4a11      	ldr	r2, [pc, #68]	@ (8000328 <MX_GPIO_Init+0x78>)
 80002e4:	f043 0302 	orr.w	r3, r3, #2
 80002e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000328 <MX_GPIO_Init+0x78>)
 80002ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ee:	f003 0302 	and.w	r3, r3, #2
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80002f6:	2200      	movs	r2, #0
 80002f8:	21c0      	movs	r1, #192	@ 0xc0
 80002fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002fe:	f000 fcb1 	bl	8000c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000302:	23c0      	movs	r3, #192	@ 0xc0
 8000304:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000306:	2301      	movs	r3, #1
 8000308:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030a:	2300      	movs	r3, #0
 800030c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030e:	2300      	movs	r3, #0
 8000310:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000312:	f107 030c 	add.w	r3, r7, #12
 8000316:	4619      	mov	r1, r3
 8000318:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800031c:	f000 fb28 	bl	8000970 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000320:	bf00      	nop
 8000322:	3720      	adds	r7, #32
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	40021000 	.word	0x40021000

0800032c <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
//	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
	printf("Task01 \n");// ABOVE NORMAL PRIORITY
 8000334:	4804      	ldr	r0, [pc, #16]	@ (8000348 <StartTask01+0x1c>)
 8000336:	f004 fcb7 	bl	8004ca8 <puts>
    osDelay(1000);// ONE SECONDS
 800033a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800033e:	f001 fef5 	bl	800212c <osDelay>
	printf("Task01 \n");// ABOVE NORMAL PRIORITY
 8000342:	bf00      	nop
 8000344:	e7f6      	b.n	8000334 <StartTask01+0x8>
 8000346:	bf00      	nop
 8000348:	08005414 	.word	0x08005414

0800034c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
//	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
	printf("Task02 \n");// NORMAL PRIORITY
 8000354:	4804      	ldr	r0, [pc, #16]	@ (8000368 <StartTask02+0x1c>)
 8000356:	f004 fca7 	bl	8004ca8 <puts>
    osDelay(2000);
 800035a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800035e:	f001 fee5 	bl	800212c <osDelay>
	printf("Task02 \n");// NORMAL PRIORITY
 8000362:	bf00      	nop
 8000364:	e7f6      	b.n	8000354 <StartTask02+0x8>
 8000366:	bf00      	nop
 8000368:	0800541c 	.word	0x0800541c

0800036c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a04      	ldr	r2, [pc, #16]	@ (800038c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d101      	bne.n	8000382 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800037e:	f000 f9f5 	bl	800076c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000382:	bf00      	nop
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	40001000 	.word	0x40001000

08000390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000394:	b672      	cpsid	i
}
 8000396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000398:	bf00      	nop
 800039a:	e7fd      	b.n	8000398 <Error_Handler+0x8>

0800039c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003a2:	4b11      	ldr	r3, [pc, #68]	@ (80003e8 <HAL_MspInit+0x4c>)
 80003a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003a6:	4a10      	ldr	r2, [pc, #64]	@ (80003e8 <HAL_MspInit+0x4c>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80003ae:	4b0e      	ldr	r3, [pc, #56]	@ (80003e8 <HAL_MspInit+0x4c>)
 80003b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ba:	4b0b      	ldr	r3, [pc, #44]	@ (80003e8 <HAL_MspInit+0x4c>)
 80003bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003be:	4a0a      	ldr	r2, [pc, #40]	@ (80003e8 <HAL_MspInit+0x4c>)
 80003c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80003c6:	4b08      	ldr	r3, [pc, #32]	@ (80003e8 <HAL_MspInit+0x4c>)
 80003c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003ce:	603b      	str	r3, [r7, #0]
 80003d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003d2:	2200      	movs	r2, #0
 80003d4:	210f      	movs	r1, #15
 80003d6:	f06f 0001 	mvn.w	r0, #1
 80003da:	f000 fa9f 	bl	800091c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003de:	bf00      	nop
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000

080003ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b08e      	sub	sp, #56	@ 0x38
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80003f4:	2300      	movs	r3, #0
 80003f6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80003fa:	4b34      	ldr	r3, [pc, #208]	@ (80004cc <HAL_InitTick+0xe0>)
 80003fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003fe:	4a33      	ldr	r2, [pc, #204]	@ (80004cc <HAL_InitTick+0xe0>)
 8000400:	f043 0310 	orr.w	r3, r3, #16
 8000404:	6593      	str	r3, [r2, #88]	@ 0x58
 8000406:	4b31      	ldr	r3, [pc, #196]	@ (80004cc <HAL_InitTick+0xe0>)
 8000408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800040a:	f003 0310 	and.w	r3, r3, #16
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000412:	f107 0210 	add.w	r2, r7, #16
 8000416:	f107 0314 	add.w	r3, r7, #20
 800041a:	4611      	mov	r1, r2
 800041c:	4618      	mov	r0, r3
 800041e:	f001 fa5f 	bl	80018e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000422:	6a3b      	ldr	r3, [r7, #32]
 8000424:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000428:	2b00      	cmp	r3, #0
 800042a:	d103      	bne.n	8000434 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800042c:	f001 fa42 	bl	80018b4 <HAL_RCC_GetPCLK1Freq>
 8000430:	6378      	str	r0, [r7, #52]	@ 0x34
 8000432:	e004      	b.n	800043e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000434:	f001 fa3e 	bl	80018b4 <HAL_RCC_GetPCLK1Freq>
 8000438:	4603      	mov	r3, r0
 800043a:	005b      	lsls	r3, r3, #1
 800043c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800043e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000440:	4a23      	ldr	r2, [pc, #140]	@ (80004d0 <HAL_InitTick+0xe4>)
 8000442:	fba2 2303 	umull	r2, r3, r2, r3
 8000446:	0c9b      	lsrs	r3, r3, #18
 8000448:	3b01      	subs	r3, #1
 800044a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800044c:	4b21      	ldr	r3, [pc, #132]	@ (80004d4 <HAL_InitTick+0xe8>)
 800044e:	4a22      	ldr	r2, [pc, #136]	@ (80004d8 <HAL_InitTick+0xec>)
 8000450:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000452:	4b20      	ldr	r3, [pc, #128]	@ (80004d4 <HAL_InitTick+0xe8>)
 8000454:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000458:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800045a:	4a1e      	ldr	r2, [pc, #120]	@ (80004d4 <HAL_InitTick+0xe8>)
 800045c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800045e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000460:	4b1c      	ldr	r3, [pc, #112]	@ (80004d4 <HAL_InitTick+0xe8>)
 8000462:	2200      	movs	r2, #0
 8000464:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000466:	4b1b      	ldr	r3, [pc, #108]	@ (80004d4 <HAL_InitTick+0xe8>)
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800046c:	4b19      	ldr	r3, [pc, #100]	@ (80004d4 <HAL_InitTick+0xe8>)
 800046e:	2200      	movs	r2, #0
 8000470:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000472:	4818      	ldr	r0, [pc, #96]	@ (80004d4 <HAL_InitTick+0xe8>)
 8000474:	f001 fac6 	bl	8001a04 <HAL_TIM_Base_Init>
 8000478:	4603      	mov	r3, r0
 800047a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800047e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000482:	2b00      	cmp	r3, #0
 8000484:	d11b      	bne.n	80004be <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000486:	4813      	ldr	r0, [pc, #76]	@ (80004d4 <HAL_InitTick+0xe8>)
 8000488:	f001 fb1e 	bl	8001ac8 <HAL_TIM_Base_Start_IT>
 800048c:	4603      	mov	r3, r0
 800048e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000492:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000496:	2b00      	cmp	r3, #0
 8000498:	d111      	bne.n	80004be <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800049a:	2036      	movs	r0, #54	@ 0x36
 800049c:	f000 fa5a 	bl	8000954 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2b0f      	cmp	r3, #15
 80004a4:	d808      	bhi.n	80004b8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80004a6:	2200      	movs	r2, #0
 80004a8:	6879      	ldr	r1, [r7, #4]
 80004aa:	2036      	movs	r0, #54	@ 0x36
 80004ac:	f000 fa36 	bl	800091c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004b0:	4a0a      	ldr	r2, [pc, #40]	@ (80004dc <HAL_InitTick+0xf0>)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	6013      	str	r3, [r2, #0]
 80004b6:	e002      	b.n	80004be <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80004b8:	2301      	movs	r3, #1
 80004ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80004be:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	3738      	adds	r7, #56	@ 0x38
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40021000 	.word	0x40021000
 80004d0:	431bde83 	.word	0x431bde83
 80004d4:	20000090 	.word	0x20000090
 80004d8:	40001000 	.word	0x40001000
 80004dc:	20000004 	.word	0x20000004

080004e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <NMI_Handler+0x4>

080004e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <HardFault_Handler+0x4>

080004f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <MemManage_Handler+0x4>

080004f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <BusFault_Handler+0x4>

08000500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000504:	bf00      	nop
 8000506:	e7fd      	b.n	8000504 <UsageFault_Handler+0x4>

08000508 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
	...

08000518 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800051c:	4802      	ldr	r0, [pc, #8]	@ (8000528 <TIM6_DAC_IRQHandler+0x10>)
 800051e:	f001 fb27 	bl	8001b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000090 	.word	0x20000090

0800052c <ITM_SendChar>:
// ITM Register Address
#define ITM_STIMULUS_PORT0     *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN           *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
    // Enable TRCENA
    DEMCR |= (1 << 24);
 8000536:	4b0f      	ldr	r3, [pc, #60]	@ (8000574 <ITM_SendChar+0x48>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a0e      	ldr	r2, [pc, #56]	@ (8000574 <ITM_SendChar+0x48>)
 800053c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000540:	6013      	str	r3, [r2, #0]

    // Enable Stimulus Port0
    ITM_TRACE_EN |= (1 << 0);
 8000542:	4b0d      	ldr	r3, [pc, #52]	@ (8000578 <ITM_SendChar+0x4c>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a0c      	ldr	r2, [pc, #48]	@ (8000578 <ITM_SendChar+0x4c>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6013      	str	r3, [r2, #0]

    // Read FIFO Status in bit[0]
    while (!(ITM_STIMULUS_PORT0 & 1));
 800054e:	bf00      	nop
 8000550:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	2b00      	cmp	r3, #0
 800055c:	d0f8      	beq.n	8000550 <ITM_SendChar+0x24>

    // Write to ITM Stimulus Port0
    ITM_STIMULUS_PORT0 = ch;
 800055e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	6013      	str	r3, [r2, #0]
}
 8000566:	bf00      	nop
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	e000edfc 	.word	0xe000edfc
 8000578:	e0000e00 	.word	0xe0000e00

0800057c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
 800058c:	e00a      	b.n	80005a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800058e:	f3af 8000 	nop.w
 8000592:	4601      	mov	r1, r0
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	1c5a      	adds	r2, r3, #1
 8000598:	60ba      	str	r2, [r7, #8]
 800059a:	b2ca      	uxtb	r2, r1
 800059c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	3301      	adds	r3, #1
 80005a2:	617b      	str	r3, [r7, #20]
 80005a4:	697a      	ldr	r2, [r7, #20]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	dbf0      	blt.n	800058e <_read+0x12>
  }

  return len;
 80005ac:	687b      	ldr	r3, [r7, #4]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3718      	adds	r7, #24
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b086      	sub	sp, #24
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	60f8      	str	r0, [r7, #12]
 80005be:	60b9      	str	r1, [r7, #8]
 80005c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	e009      	b.n	80005dc <_write+0x26>
  {
//    __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	1c5a      	adds	r2, r3, #1
 80005cc:	60ba      	str	r2, [r7, #8]
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff ffab 	bl	800052c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	3301      	adds	r3, #1
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697a      	ldr	r2, [r7, #20]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	dbf1      	blt.n	80005c8 <_write+0x12>
  }
  return len;
 80005e4:	687b      	ldr	r3, [r7, #4]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3718      	adds	r7, #24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <_close>:

int _close(int file)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b083      	sub	sp, #12
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000606:	b480      	push	{r7}
 8000608:	b083      	sub	sp, #12
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
 800060e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000616:	605a      	str	r2, [r3, #4]
  return 0;
 8000618:	2300      	movs	r3, #0
}
 800061a:	4618      	mov	r0, r3
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <_isatty>:

int _isatty(int file)
{
 8000626:	b480      	push	{r7}
 8000628:	b083      	sub	sp, #12
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800062e:	2301      	movs	r3, #1
}
 8000630:	4618      	mov	r0, r3
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000648:	2300      	movs	r3, #0
}
 800064a:	4618      	mov	r0, r3
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
	...

08000658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000660:	4a14      	ldr	r2, [pc, #80]	@ (80006b4 <_sbrk+0x5c>)
 8000662:	4b15      	ldr	r3, [pc, #84]	@ (80006b8 <_sbrk+0x60>)
 8000664:	1ad3      	subs	r3, r2, r3
 8000666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800066c:	4b13      	ldr	r3, [pc, #76]	@ (80006bc <_sbrk+0x64>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d102      	bne.n	800067a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000674:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <_sbrk+0x64>)
 8000676:	4a12      	ldr	r2, [pc, #72]	@ (80006c0 <_sbrk+0x68>)
 8000678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800067a:	4b10      	ldr	r3, [pc, #64]	@ (80006bc <_sbrk+0x64>)
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4413      	add	r3, r2
 8000682:	693a      	ldr	r2, [r7, #16]
 8000684:	429a      	cmp	r2, r3
 8000686:	d207      	bcs.n	8000698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000688:	f004 fc3c 	bl	8004f04 <__errno>
 800068c:	4603      	mov	r3, r0
 800068e:	220c      	movs	r2, #12
 8000690:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	e009      	b.n	80006ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000698:	4b08      	ldr	r3, [pc, #32]	@ (80006bc <_sbrk+0x64>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800069e:	4b07      	ldr	r3, [pc, #28]	@ (80006bc <_sbrk+0x64>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	4a05      	ldr	r2, [pc, #20]	@ (80006bc <_sbrk+0x64>)
 80006a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006aa:	68fb      	ldr	r3, [r7, #12]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3718      	adds	r7, #24
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	2000c000 	.word	0x2000c000
 80006b8:	00000400 	.word	0x00000400
 80006bc:	200000dc 	.word	0x200000dc
 80006c0:	20001b38 	.word	0x20001b38

080006c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006c8:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <SystemInit+0x20>)
 80006ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006ce:	4a05      	ldr	r2, [pc, #20]	@ (80006e4 <SystemInit+0x20>)
 80006d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000720 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006ec:	f7ff ffea 	bl	80006c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f0:	480c      	ldr	r0, [pc, #48]	@ (8000724 <LoopForever+0x6>)
  ldr r1, =_edata
 80006f2:	490d      	ldr	r1, [pc, #52]	@ (8000728 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f4:	4a0d      	ldr	r2, [pc, #52]	@ (800072c <LoopForever+0xe>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f8:	e002      	b.n	8000700 <LoopCopyDataInit>

080006fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fe:	3304      	adds	r3, #4

08000700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000704:	d3f9      	bcc.n	80006fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000706:	4a0a      	ldr	r2, [pc, #40]	@ (8000730 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000708:	4c0a      	ldr	r4, [pc, #40]	@ (8000734 <LoopForever+0x16>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800070c:	e001      	b.n	8000712 <LoopFillZerobss>

0800070e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000710:	3204      	adds	r2, #4

08000712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000714:	d3fb      	bcc.n	800070e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000716:	f004 fbfb 	bl	8004f10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800071a:	f7ff fd59 	bl	80001d0 <main>

0800071e <LoopForever>:

LoopForever:
    b LoopForever
 800071e:	e7fe      	b.n	800071e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000720:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000728:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800072c:	080054d4 	.word	0x080054d4
  ldr r2, =_sbss
 8000730:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000734:	20001b38 	.word	0x20001b38

08000738 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000738:	e7fe      	b.n	8000738 <ADC1_IRQHandler>

0800073a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000740:	2300      	movs	r3, #0
 8000742:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000744:	2003      	movs	r0, #3
 8000746:	f000 f8de 	bl	8000906 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800074a:	200f      	movs	r0, #15
 800074c:	f7ff fe4e 	bl	80003ec <HAL_InitTick>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d002      	beq.n	800075c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000756:	2301      	movs	r3, #1
 8000758:	71fb      	strb	r3, [r7, #7]
 800075a:	e001      	b.n	8000760 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800075c:	f7ff fe1e 	bl	800039c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000760:	79fb      	ldrb	r3, [r7, #7]
}
 8000762:	4618      	mov	r0, r3
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <HAL_IncTick+0x20>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <HAL_IncTick+0x24>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4413      	add	r3, r2
 800077c:	4a04      	ldr	r2, [pc, #16]	@ (8000790 <HAL_IncTick+0x24>)
 800077e:	6013      	str	r3, [r2, #0]
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	20000008 	.word	0x20000008
 8000790:	200000e0 	.word	0x200000e0

08000794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  return uwTick;
 8000798:	4b03      	ldr	r3, [pc, #12]	@ (80007a8 <HAL_GetTick+0x14>)
 800079a:	681b      	ldr	r3, [r3, #0]
}
 800079c:	4618      	mov	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	200000e0 	.word	0x200000e0

080007ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f003 0307 	and.w	r3, r3, #7
 80007ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007bc:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <__NVIC_SetPriorityGrouping+0x44>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007c8:	4013      	ands	r3, r2
 80007ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007de:	4a04      	ldr	r2, [pc, #16]	@ (80007f0 <__NVIC_SetPriorityGrouping+0x44>)
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	60d3      	str	r3, [r2, #12]
}
 80007e4:	bf00      	nop
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f8:	4b04      	ldr	r3, [pc, #16]	@ (800080c <__NVIC_GetPriorityGrouping+0x18>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	0a1b      	lsrs	r3, r3, #8
 80007fe:	f003 0307 	and.w	r3, r3, #7
}
 8000802:	4618      	mov	r0, r3
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	2b00      	cmp	r3, #0
 8000820:	db0b      	blt.n	800083a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	f003 021f 	and.w	r2, r3, #31
 8000828:	4907      	ldr	r1, [pc, #28]	@ (8000848 <__NVIC_EnableIRQ+0x38>)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	095b      	lsrs	r3, r3, #5
 8000830:	2001      	movs	r0, #1
 8000832:	fa00 f202 	lsl.w	r2, r0, r2
 8000836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	e000e100 	.word	0xe000e100

0800084c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	6039      	str	r1, [r7, #0]
 8000856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085c:	2b00      	cmp	r3, #0
 800085e:	db0a      	blt.n	8000876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	b2da      	uxtb	r2, r3
 8000864:	490c      	ldr	r1, [pc, #48]	@ (8000898 <__NVIC_SetPriority+0x4c>)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	0112      	lsls	r2, r2, #4
 800086c:	b2d2      	uxtb	r2, r2
 800086e:	440b      	add	r3, r1
 8000870:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000874:	e00a      	b.n	800088c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4908      	ldr	r1, [pc, #32]	@ (800089c <__NVIC_SetPriority+0x50>)
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	3b04      	subs	r3, #4
 8000884:	0112      	lsls	r2, r2, #4
 8000886:	b2d2      	uxtb	r2, r2
 8000888:	440b      	add	r3, r1
 800088a:	761a      	strb	r2, [r3, #24]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000e100 	.word	0xe000e100
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b089      	sub	sp, #36	@ 0x24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	f1c3 0307 	rsb	r3, r3, #7
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	bf28      	it	cs
 80008be:	2304      	movcs	r3, #4
 80008c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3304      	adds	r3, #4
 80008c6:	2b06      	cmp	r3, #6
 80008c8:	d902      	bls.n	80008d0 <NVIC_EncodePriority+0x30>
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	3b03      	subs	r3, #3
 80008ce:	e000      	b.n	80008d2 <NVIC_EncodePriority+0x32>
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d4:	f04f 32ff 	mov.w	r2, #4294967295
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	43da      	mvns	r2, r3
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	401a      	ands	r2, r3
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e8:	f04f 31ff 	mov.w	r1, #4294967295
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	fa01 f303 	lsl.w	r3, r1, r3
 80008f2:	43d9      	mvns	r1, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f8:	4313      	orrs	r3, r2
         );
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3724      	adds	r7, #36	@ 0x24
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff ff4c 	bl	80007ac <__NVIC_SetPriorityGrouping>
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
 8000928:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800092e:	f7ff ff61 	bl	80007f4 <__NVIC_GetPriorityGrouping>
 8000932:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	68b9      	ldr	r1, [r7, #8]
 8000938:	6978      	ldr	r0, [r7, #20]
 800093a:	f7ff ffb1 	bl	80008a0 <NVIC_EncodePriority>
 800093e:	4602      	mov	r2, r0
 8000940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000944:	4611      	mov	r1, r2
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff ff80 	bl	800084c <__NVIC_SetPriority>
}
 800094c:	bf00      	nop
 800094e:	3718      	adds	r7, #24
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff ff54 	bl	8000810 <__NVIC_EnableIRQ>
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000970:	b480      	push	{r7}
 8000972:	b087      	sub	sp, #28
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800097e:	e154      	b.n	8000c2a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	2101      	movs	r1, #1
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	fa01 f303 	lsl.w	r3, r1, r3
 800098c:	4013      	ands	r3, r2
 800098e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2b00      	cmp	r3, #0
 8000994:	f000 8146 	beq.w	8000c24 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	f003 0303 	and.w	r3, r3, #3
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d005      	beq.n	80009b0 <HAL_GPIO_Init+0x40>
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f003 0303 	and.w	r3, r3, #3
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d130      	bne.n	8000a12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	2203      	movs	r2, #3
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	43db      	mvns	r3, r3
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4013      	ands	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	68da      	ldr	r2, [r3, #12]
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009e6:	2201      	movs	r2, #1
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43db      	mvns	r3, r3
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	4013      	ands	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	091b      	lsrs	r3, r3, #4
 80009fc:	f003 0201 	and.w	r2, r3, #1
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f003 0303 	and.w	r3, r3, #3
 8000a1a:	2b03      	cmp	r3, #3
 8000a1c:	d017      	beq.n	8000a4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	68db      	ldr	r3, [r3, #12]
 8000a22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	2203      	movs	r2, #3
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	4013      	ands	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	689a      	ldr	r2, [r3, #8]
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f003 0303 	and.w	r3, r3, #3
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d123      	bne.n	8000aa2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	08da      	lsrs	r2, r3, #3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	3208      	adds	r2, #8
 8000a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	220f      	movs	r2, #15
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43db      	mvns	r3, r3
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	691a      	ldr	r2, [r3, #16]
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	f003 0307 	and.w	r3, r3, #7
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	08da      	lsrs	r2, r3, #3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3208      	adds	r2, #8
 8000a9c:	6939      	ldr	r1, [r7, #16]
 8000a9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	2203      	movs	r2, #3
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f003 0203 	and.w	r2, r3, #3
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f000 80a0 	beq.w	8000c24 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae4:	4b58      	ldr	r3, [pc, #352]	@ (8000c48 <HAL_GPIO_Init+0x2d8>)
 8000ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ae8:	4a57      	ldr	r2, [pc, #348]	@ (8000c48 <HAL_GPIO_Init+0x2d8>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6613      	str	r3, [r2, #96]	@ 0x60
 8000af0:	4b55      	ldr	r3, [pc, #340]	@ (8000c48 <HAL_GPIO_Init+0x2d8>)
 8000af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000afc:	4a53      	ldr	r2, [pc, #332]	@ (8000c4c <HAL_GPIO_Init+0x2dc>)
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	089b      	lsrs	r3, r3, #2
 8000b02:	3302      	adds	r3, #2
 8000b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	f003 0303 	and.w	r3, r3, #3
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	220f      	movs	r2, #15
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b26:	d019      	beq.n	8000b5c <HAL_GPIO_Init+0x1ec>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a49      	ldr	r2, [pc, #292]	@ (8000c50 <HAL_GPIO_Init+0x2e0>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d013      	beq.n	8000b58 <HAL_GPIO_Init+0x1e8>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a48      	ldr	r2, [pc, #288]	@ (8000c54 <HAL_GPIO_Init+0x2e4>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d00d      	beq.n	8000b54 <HAL_GPIO_Init+0x1e4>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a47      	ldr	r2, [pc, #284]	@ (8000c58 <HAL_GPIO_Init+0x2e8>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d007      	beq.n	8000b50 <HAL_GPIO_Init+0x1e0>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a46      	ldr	r2, [pc, #280]	@ (8000c5c <HAL_GPIO_Init+0x2ec>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d101      	bne.n	8000b4c <HAL_GPIO_Init+0x1dc>
 8000b48:	2304      	movs	r3, #4
 8000b4a:	e008      	b.n	8000b5e <HAL_GPIO_Init+0x1ee>
 8000b4c:	2307      	movs	r3, #7
 8000b4e:	e006      	b.n	8000b5e <HAL_GPIO_Init+0x1ee>
 8000b50:	2303      	movs	r3, #3
 8000b52:	e004      	b.n	8000b5e <HAL_GPIO_Init+0x1ee>
 8000b54:	2302      	movs	r3, #2
 8000b56:	e002      	b.n	8000b5e <HAL_GPIO_Init+0x1ee>
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e000      	b.n	8000b5e <HAL_GPIO_Init+0x1ee>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	697a      	ldr	r2, [r7, #20]
 8000b60:	f002 0203 	and.w	r2, r2, #3
 8000b64:	0092      	lsls	r2, r2, #2
 8000b66:	4093      	lsls	r3, r2
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b6e:	4937      	ldr	r1, [pc, #220]	@ (8000c4c <HAL_GPIO_Init+0x2dc>)
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	089b      	lsrs	r3, r3, #2
 8000b74:	3302      	adds	r3, #2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b7c:	4b38      	ldr	r3, [pc, #224]	@ (8000c60 <HAL_GPIO_Init+0x2f0>)
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	43db      	mvns	r3, r3
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d003      	beq.n	8000ba0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ba0:	4a2f      	ldr	r2, [pc, #188]	@ (8000c60 <HAL_GPIO_Init+0x2f0>)
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ba6:	4b2e      	ldr	r3, [pc, #184]	@ (8000c60 <HAL_GPIO_Init+0x2f0>)
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d003      	beq.n	8000bca <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bca:	4a25      	ldr	r2, [pc, #148]	@ (8000c60 <HAL_GPIO_Init+0x2f0>)
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000bd0:	4b23      	ldr	r3, [pc, #140]	@ (8000c60 <HAL_GPIO_Init+0x2f0>)
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d003      	beq.n	8000bf4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bf4:	4a1a      	ldr	r2, [pc, #104]	@ (8000c60 <HAL_GPIO_Init+0x2f0>)
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000bfa:	4b19      	ldr	r3, [pc, #100]	@ (8000c60 <HAL_GPIO_Init+0x2f0>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	43db      	mvns	r3, r3
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c1e:	4a10      	ldr	r2, [pc, #64]	@ (8000c60 <HAL_GPIO_Init+0x2f0>)
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	3301      	adds	r3, #1
 8000c28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	fa22 f303 	lsr.w	r3, r2, r3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	f47f aea3 	bne.w	8000980 <HAL_GPIO_Init+0x10>
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	bf00      	nop
 8000c3e:	371c      	adds	r7, #28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40010000 	.word	0x40010000
 8000c50:	48000400 	.word	0x48000400
 8000c54:	48000800 	.word	0x48000800
 8000c58:	48000c00 	.word	0x48000c00
 8000c5c:	48001000 	.word	0x48001000
 8000c60:	40010400 	.word	0x40010400

08000c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	807b      	strh	r3, [r7, #2]
 8000c70:	4613      	mov	r3, r2
 8000c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c74:	787b      	ldrb	r3, [r7, #1]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d003      	beq.n	8000c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c7a:	887a      	ldrh	r2, [r7, #2]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c80:	e002      	b.n	8000c88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c82:	887a      	ldrh	r2, [r7, #2]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c98:	4b04      	ldr	r3, [pc, #16]	@ (8000cac <HAL_PWREx_GetVoltageRange+0x18>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40007000 	.word	0x40007000

08000cb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cbe:	d130      	bne.n	8000d22 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cc0:	4b23      	ldr	r3, [pc, #140]	@ (8000d50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000cc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ccc:	d038      	beq.n	8000d40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cce:	4b20      	ldr	r3, [pc, #128]	@ (8000d50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8000d50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cd8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cdc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000cde:	4b1d      	ldr	r3, [pc, #116]	@ (8000d54 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2232      	movs	r2, #50	@ 0x32
 8000ce4:	fb02 f303 	mul.w	r3, r2, r3
 8000ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d58 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000cea:	fba2 2303 	umull	r2, r3, r2, r3
 8000cee:	0c9b      	lsrs	r3, r3, #18
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cf4:	e002      	b.n	8000cfc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cfc:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cfe:	695b      	ldr	r3, [r3, #20]
 8000d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d08:	d102      	bne.n	8000d10 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1f2      	bne.n	8000cf6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d10:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d12:	695b      	ldr	r3, [r3, #20]
 8000d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d1c:	d110      	bne.n	8000d40 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e00f      	b.n	8000d42 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d22:	4b0b      	ldr	r3, [pc, #44]	@ (8000d50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d2e:	d007      	beq.n	8000d40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d38:	4a05      	ldr	r2, [pc, #20]	@ (8000d50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d3e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3714      	adds	r7, #20
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40007000 	.word	0x40007000
 8000d54:	20000000 	.word	0x20000000
 8000d58:	431bde83 	.word	0x431bde83

08000d5c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d102      	bne.n	8000d70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	f000 bc02 	b.w	8001574 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d70:	4b96      	ldr	r3, [pc, #600]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	f003 030c 	and.w	r3, r3, #12
 8000d78:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d7a:	4b94      	ldr	r3, [pc, #592]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	f003 0303 	and.w	r3, r3, #3
 8000d82:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 0310 	and.w	r3, r3, #16
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f000 80e4 	beq.w	8000f5a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d007      	beq.n	8000da8 <HAL_RCC_OscConfig+0x4c>
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	2b0c      	cmp	r3, #12
 8000d9c:	f040 808b 	bne.w	8000eb6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	f040 8087 	bne.w	8000eb6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000da8:	4b88      	ldr	r3, [pc, #544]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d005      	beq.n	8000dc0 <HAL_RCC_OscConfig+0x64>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d101      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e3d9      	b.n	8001574 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6a1a      	ldr	r2, [r3, #32]
 8000dc4:	4b81      	ldr	r3, [pc, #516]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f003 0308 	and.w	r3, r3, #8
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d004      	beq.n	8000dda <HAL_RCC_OscConfig+0x7e>
 8000dd0:	4b7e      	ldr	r3, [pc, #504]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000dd8:	e005      	b.n	8000de6 <HAL_RCC_OscConfig+0x8a>
 8000dda:	4b7c      	ldr	r3, [pc, #496]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000de0:	091b      	lsrs	r3, r3, #4
 8000de2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d223      	bcs.n	8000e32 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6a1b      	ldr	r3, [r3, #32]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 fda8 	bl	8001944 <RCC_SetFlashLatencyFromMSIRange>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e3ba      	b.n	8001574 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dfe:	4b73      	ldr	r3, [pc, #460]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a72      	ldr	r2, [pc, #456]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000e04:	f043 0308 	orr.w	r3, r3, #8
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	4b70      	ldr	r3, [pc, #448]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6a1b      	ldr	r3, [r3, #32]
 8000e16:	496d      	ldr	r1, [pc, #436]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e1c:	4b6b      	ldr	r3, [pc, #428]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	69db      	ldr	r3, [r3, #28]
 8000e28:	021b      	lsls	r3, r3, #8
 8000e2a:	4968      	ldr	r1, [pc, #416]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	604b      	str	r3, [r1, #4]
 8000e30:	e025      	b.n	8000e7e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e32:	4b66      	ldr	r3, [pc, #408]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a65      	ldr	r2, [pc, #404]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000e38:	f043 0308 	orr.w	r3, r3, #8
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	4b63      	ldr	r3, [pc, #396]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6a1b      	ldr	r3, [r3, #32]
 8000e4a:	4960      	ldr	r1, [pc, #384]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e50:	4b5e      	ldr	r3, [pc, #376]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69db      	ldr	r3, [r3, #28]
 8000e5c:	021b      	lsls	r3, r3, #8
 8000e5e:	495b      	ldr	r1, [pc, #364]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000e60:	4313      	orrs	r3, r2
 8000e62:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d109      	bne.n	8000e7e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a1b      	ldr	r3, [r3, #32]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 fd68 	bl	8001944 <RCC_SetFlashLatencyFromMSIRange>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e37a      	b.n	8001574 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e7e:	f000 fc81 	bl	8001784 <HAL_RCC_GetSysClockFreq>
 8000e82:	4602      	mov	r2, r0
 8000e84:	4b51      	ldr	r3, [pc, #324]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	091b      	lsrs	r3, r3, #4
 8000e8a:	f003 030f 	and.w	r3, r3, #15
 8000e8e:	4950      	ldr	r1, [pc, #320]	@ (8000fd0 <HAL_RCC_OscConfig+0x274>)
 8000e90:	5ccb      	ldrb	r3, [r1, r3]
 8000e92:	f003 031f 	and.w	r3, r3, #31
 8000e96:	fa22 f303 	lsr.w	r3, r2, r3
 8000e9a:	4a4e      	ldr	r2, [pc, #312]	@ (8000fd4 <HAL_RCC_OscConfig+0x278>)
 8000e9c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e9e:	4b4e      	ldr	r3, [pc, #312]	@ (8000fd8 <HAL_RCC_OscConfig+0x27c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff faa2 	bl	80003ec <HAL_InitTick>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d052      	beq.n	8000f58 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	e35e      	b.n	8001574 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d032      	beq.n	8000f24 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ebe:	4b43      	ldr	r3, [pc, #268]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a42      	ldr	r2, [pc, #264]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000eca:	f7ff fc63 	bl	8000794 <HAL_GetTick>
 8000ece:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ed0:	e008      	b.n	8000ee4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ed2:	f7ff fc5f 	bl	8000794 <HAL_GetTick>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d901      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e347      	b.n	8001574 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ee4:	4b39      	ldr	r3, [pc, #228]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 0302 	and.w	r3, r3, #2
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d0f0      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ef0:	4b36      	ldr	r3, [pc, #216]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a35      	ldr	r2, [pc, #212]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000ef6:	f043 0308 	orr.w	r3, r3, #8
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	4b33      	ldr	r3, [pc, #204]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a1b      	ldr	r3, [r3, #32]
 8000f08:	4930      	ldr	r1, [pc, #192]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	021b      	lsls	r3, r3, #8
 8000f1c:	492b      	ldr	r1, [pc, #172]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	604b      	str	r3, [r1, #4]
 8000f22:	e01a      	b.n	8000f5a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f24:	4b29      	ldr	r3, [pc, #164]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a28      	ldr	r2, [pc, #160]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000f2a:	f023 0301 	bic.w	r3, r3, #1
 8000f2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f30:	f7ff fc30 	bl	8000794 <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f38:	f7ff fc2c 	bl	8000794 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e314      	b.n	8001574 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f4a:	4b20      	ldr	r3, [pc, #128]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f0      	bne.n	8000f38 <HAL_RCC_OscConfig+0x1dc>
 8000f56:	e000      	b.n	8000f5a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d073      	beq.n	800104e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	2b08      	cmp	r3, #8
 8000f6a:	d005      	beq.n	8000f78 <HAL_RCC_OscConfig+0x21c>
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	2b0c      	cmp	r3, #12
 8000f70:	d10e      	bne.n	8000f90 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	2b03      	cmp	r3, #3
 8000f76:	d10b      	bne.n	8000f90 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f78:	4b14      	ldr	r3, [pc, #80]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d063      	beq.n	800104c <HAL_RCC_OscConfig+0x2f0>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d15f      	bne.n	800104c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e2f1      	b.n	8001574 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f98:	d106      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x24c>
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a0b      	ldr	r2, [pc, #44]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	e025      	b.n	8000ff4 <HAL_RCC_OscConfig+0x298>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fb0:	d114      	bne.n	8000fdc <HAL_RCC_OscConfig+0x280>
 8000fb2:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a05      	ldr	r2, [pc, #20]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000fb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	4b03      	ldr	r3, [pc, #12]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a02      	ldr	r2, [pc, #8]	@ (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000fc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	e013      	b.n	8000ff4 <HAL_RCC_OscConfig+0x298>
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	08005484 	.word	0x08005484
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	20000004 	.word	0x20000004
 8000fdc:	4ba0      	ldr	r3, [pc, #640]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a9f      	ldr	r2, [pc, #636]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 8000fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	4b9d      	ldr	r3, [pc, #628]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a9c      	ldr	r2, [pc, #624]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 8000fee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d013      	beq.n	8001024 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fbca 	bl	8000794 <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001004:	f7ff fbc6 	bl	8000794 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b64      	cmp	r3, #100	@ 0x64
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e2ae      	b.n	8001574 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001016:	4b92      	ldr	r3, [pc, #584]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0f0      	beq.n	8001004 <HAL_RCC_OscConfig+0x2a8>
 8001022:	e014      	b.n	800104e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001024:	f7ff fbb6 	bl	8000794 <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800102c:	f7ff fbb2 	bl	8000794 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b64      	cmp	r3, #100	@ 0x64
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e29a      	b.n	8001574 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800103e:	4b88      	ldr	r3, [pc, #544]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f0      	bne.n	800102c <HAL_RCC_OscConfig+0x2d0>
 800104a:	e000      	b.n	800104e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d060      	beq.n	800111c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	2b04      	cmp	r3, #4
 800105e:	d005      	beq.n	800106c <HAL_RCC_OscConfig+0x310>
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	2b0c      	cmp	r3, #12
 8001064:	d119      	bne.n	800109a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	2b02      	cmp	r3, #2
 800106a:	d116      	bne.n	800109a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800106c:	4b7c      	ldr	r3, [pc, #496]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <HAL_RCC_OscConfig+0x328>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e277      	b.n	8001574 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001084:	4b76      	ldr	r3, [pc, #472]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	061b      	lsls	r3, r3, #24
 8001092:	4973      	ldr	r1, [pc, #460]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 8001094:	4313      	orrs	r3, r2
 8001096:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001098:	e040      	b.n	800111c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d023      	beq.n	80010ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010a2:	4b6f      	ldr	r3, [pc, #444]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a6e      	ldr	r2, [pc, #440]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 80010a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ae:	f7ff fb71 	bl	8000794 <HAL_GetTick>
 80010b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010b4:	e008      	b.n	80010c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010b6:	f7ff fb6d 	bl	8000794 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e255      	b.n	8001574 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010c8:	4b65      	ldr	r3, [pc, #404]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0f0      	beq.n	80010b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d4:	4b62      	ldr	r3, [pc, #392]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	061b      	lsls	r3, r3, #24
 80010e2:	495f      	ldr	r1, [pc, #380]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 80010e4:	4313      	orrs	r3, r2
 80010e6:	604b      	str	r3, [r1, #4]
 80010e8:	e018      	b.n	800111c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a5c      	ldr	r2, [pc, #368]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 80010f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80010f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f6:	f7ff fb4d 	bl	8000794 <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010fe:	f7ff fb49 	bl	8000794 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e231      	b.n	8001574 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001110:	4b53      	ldr	r3, [pc, #332]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1f0      	bne.n	80010fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0308 	and.w	r3, r3, #8
 8001124:	2b00      	cmp	r3, #0
 8001126:	d03c      	beq.n	80011a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d01c      	beq.n	800116a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001130:	4b4b      	ldr	r3, [pc, #300]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 8001132:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001136:	4a4a      	ldr	r2, [pc, #296]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001140:	f7ff fb28 	bl	8000794 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001148:	f7ff fb24 	bl	8000794 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e20c      	b.n	8001574 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800115a:	4b41      	ldr	r3, [pc, #260]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 800115c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0ef      	beq.n	8001148 <HAL_RCC_OscConfig+0x3ec>
 8001168:	e01b      	b.n	80011a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800116a:	4b3d      	ldr	r3, [pc, #244]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 800116c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001170:	4a3b      	ldr	r2, [pc, #236]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 8001172:	f023 0301 	bic.w	r3, r3, #1
 8001176:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800117a:	f7ff fb0b 	bl	8000794 <HAL_GetTick>
 800117e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001182:	f7ff fb07 	bl	8000794 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e1ef      	b.n	8001574 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001194:	4b32      	ldr	r3, [pc, #200]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 8001196:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1ef      	bne.n	8001182 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 80a6 	beq.w	80012fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011b0:	2300      	movs	r3, #0
 80011b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80011b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 80011b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d10d      	bne.n	80011dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011c0:	4b27      	ldr	r3, [pc, #156]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 80011c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c4:	4a26      	ldr	r2, [pc, #152]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 80011c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80011cc:	4b24      	ldr	r3, [pc, #144]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 80011ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011d8:	2301      	movs	r3, #1
 80011da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011dc:	4b21      	ldr	r3, [pc, #132]	@ (8001264 <HAL_RCC_OscConfig+0x508>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d118      	bne.n	800121a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001264 <HAL_RCC_OscConfig+0x508>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001264 <HAL_RCC_OscConfig+0x508>)
 80011ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011f4:	f7ff face 	bl	8000794 <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011fc:	f7ff faca 	bl	8000794 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e1b2      	b.n	8001574 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800120e:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <HAL_RCC_OscConfig+0x508>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001216:	2b00      	cmp	r3, #0
 8001218:	d0f0      	beq.n	80011fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d108      	bne.n	8001234 <HAL_RCC_OscConfig+0x4d8>
 8001222:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 8001224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001228:	4a0d      	ldr	r2, [pc, #52]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001232:	e029      	b.n	8001288 <HAL_RCC_OscConfig+0x52c>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	2b05      	cmp	r3, #5
 800123a:	d115      	bne.n	8001268 <HAL_RCC_OscConfig+0x50c>
 800123c:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 800123e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001242:	4a07      	ldr	r2, [pc, #28]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800124c:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 800124e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001252:	4a03      	ldr	r2, [pc, #12]	@ (8001260 <HAL_RCC_OscConfig+0x504>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800125c:	e014      	b.n	8001288 <HAL_RCC_OscConfig+0x52c>
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000
 8001264:	40007000 	.word	0x40007000
 8001268:	4b9a      	ldr	r3, [pc, #616]	@ (80014d4 <HAL_RCC_OscConfig+0x778>)
 800126a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800126e:	4a99      	ldr	r2, [pc, #612]	@ (80014d4 <HAL_RCC_OscConfig+0x778>)
 8001270:	f023 0301 	bic.w	r3, r3, #1
 8001274:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001278:	4b96      	ldr	r3, [pc, #600]	@ (80014d4 <HAL_RCC_OscConfig+0x778>)
 800127a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800127e:	4a95      	ldr	r2, [pc, #596]	@ (80014d4 <HAL_RCC_OscConfig+0x778>)
 8001280:	f023 0304 	bic.w	r3, r3, #4
 8001284:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d016      	beq.n	80012be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001290:	f7ff fa80 	bl	8000794 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001296:	e00a      	b.n	80012ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001298:	f7ff fa7c 	bl	8000794 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e162      	b.n	8001574 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012ae:	4b89      	ldr	r3, [pc, #548]	@ (80014d4 <HAL_RCC_OscConfig+0x778>)
 80012b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0ed      	beq.n	8001298 <HAL_RCC_OscConfig+0x53c>
 80012bc:	e015      	b.n	80012ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012be:	f7ff fa69 	bl	8000794 <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012c4:	e00a      	b.n	80012dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c6:	f7ff fa65 	bl	8000794 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e14b      	b.n	8001574 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012dc:	4b7d      	ldr	r3, [pc, #500]	@ (80014d4 <HAL_RCC_OscConfig+0x778>)
 80012de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1ed      	bne.n	80012c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012ea:	7ffb      	ldrb	r3, [r7, #31]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d105      	bne.n	80012fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012f0:	4b78      	ldr	r3, [pc, #480]	@ (80014d4 <HAL_RCC_OscConfig+0x778>)
 80012f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f4:	4a77      	ldr	r2, [pc, #476]	@ (80014d4 <HAL_RCC_OscConfig+0x778>)
 80012f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012fa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0320 	and.w	r3, r3, #32
 8001304:	2b00      	cmp	r3, #0
 8001306:	d03c      	beq.n	8001382 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800130c:	2b00      	cmp	r3, #0
 800130e:	d01c      	beq.n	800134a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001310:	4b70      	ldr	r3, [pc, #448]	@ (80014d4 <HAL_RCC_OscConfig+0x778>)
 8001312:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001316:	4a6f      	ldr	r2, [pc, #444]	@ (80014d4 <HAL_RCC_OscConfig+0x778>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001320:	f7ff fa38 	bl	8000794 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001328:	f7ff fa34 	bl	8000794 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e11c      	b.n	8001574 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800133a:	4b66      	ldr	r3, [pc, #408]	@ (80014d4 <HAL_RCC_OscConfig+0x778>)
 800133c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0ef      	beq.n	8001328 <HAL_RCC_OscConfig+0x5cc>
 8001348:	e01b      	b.n	8001382 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800134a:	4b62      	ldr	r3, [pc, #392]	@ (80014d4 <HAL_RCC_OscConfig+0x778>)
 800134c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001350:	4a60      	ldr	r2, [pc, #384]	@ (80014d4 <HAL_RCC_OscConfig+0x778>)
 8001352:	f023 0301 	bic.w	r3, r3, #1
 8001356:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800135a:	f7ff fa1b 	bl	8000794 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001362:	f7ff fa17 	bl	8000794 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e0ff      	b.n	8001574 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001374:	4b57      	ldr	r3, [pc, #348]	@ (80014d4 <HAL_RCC_OscConfig+0x778>)
 8001376:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1ef      	bne.n	8001362 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001386:	2b00      	cmp	r3, #0
 8001388:	f000 80f3 	beq.w	8001572 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001390:	2b02      	cmp	r3, #2
 8001392:	f040 80c9 	bne.w	8001528 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001396:	4b4f      	ldr	r3, [pc, #316]	@ (80014d4 <HAL_RCC_OscConfig+0x778>)
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	f003 0203 	and.w	r2, r3, #3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d12c      	bne.n	8001404 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b4:	3b01      	subs	r3, #1
 80013b6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d123      	bne.n	8001404 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013c6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d11b      	bne.n	8001404 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013d6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013d8:	429a      	cmp	r2, r3
 80013da:	d113      	bne.n	8001404 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013e6:	085b      	lsrs	r3, r3, #1
 80013e8:	3b01      	subs	r3, #1
 80013ea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d109      	bne.n	8001404 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fa:	085b      	lsrs	r3, r3, #1
 80013fc:	3b01      	subs	r3, #1
 80013fe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001400:	429a      	cmp	r2, r3
 8001402:	d06b      	beq.n	80014dc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	2b0c      	cmp	r3, #12
 8001408:	d062      	beq.n	80014d0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800140a:	4b32      	ldr	r3, [pc, #200]	@ (80014d4 <HAL_RCC_OscConfig+0x778>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e0ac      	b.n	8001574 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800141a:	4b2e      	ldr	r3, [pc, #184]	@ (80014d4 <HAL_RCC_OscConfig+0x778>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a2d      	ldr	r2, [pc, #180]	@ (80014d4 <HAL_RCC_OscConfig+0x778>)
 8001420:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001424:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001426:	f7ff f9b5 	bl	8000794 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800142e:	f7ff f9b1 	bl	8000794 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e099      	b.n	8001574 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001440:	4b24      	ldr	r3, [pc, #144]	@ (80014d4 <HAL_RCC_OscConfig+0x778>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1f0      	bne.n	800142e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800144c:	4b21      	ldr	r3, [pc, #132]	@ (80014d4 <HAL_RCC_OscConfig+0x778>)
 800144e:	68da      	ldr	r2, [r3, #12]
 8001450:	4b21      	ldr	r3, [pc, #132]	@ (80014d8 <HAL_RCC_OscConfig+0x77c>)
 8001452:	4013      	ands	r3, r2
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800145c:	3a01      	subs	r2, #1
 800145e:	0112      	lsls	r2, r2, #4
 8001460:	4311      	orrs	r1, r2
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001466:	0212      	lsls	r2, r2, #8
 8001468:	4311      	orrs	r1, r2
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800146e:	0852      	lsrs	r2, r2, #1
 8001470:	3a01      	subs	r2, #1
 8001472:	0552      	lsls	r2, r2, #21
 8001474:	4311      	orrs	r1, r2
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800147a:	0852      	lsrs	r2, r2, #1
 800147c:	3a01      	subs	r2, #1
 800147e:	0652      	lsls	r2, r2, #25
 8001480:	4311      	orrs	r1, r2
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001486:	06d2      	lsls	r2, r2, #27
 8001488:	430a      	orrs	r2, r1
 800148a:	4912      	ldr	r1, [pc, #72]	@ (80014d4 <HAL_RCC_OscConfig+0x778>)
 800148c:	4313      	orrs	r3, r2
 800148e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001490:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <HAL_RCC_OscConfig+0x778>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a0f      	ldr	r2, [pc, #60]	@ (80014d4 <HAL_RCC_OscConfig+0x778>)
 8001496:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800149a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800149c:	4b0d      	ldr	r3, [pc, #52]	@ (80014d4 <HAL_RCC_OscConfig+0x778>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	4a0c      	ldr	r2, [pc, #48]	@ (80014d4 <HAL_RCC_OscConfig+0x778>)
 80014a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014a8:	f7ff f974 	bl	8000794 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b0:	f7ff f970 	bl	8000794 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e058      	b.n	8001574 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014c2:	4b04      	ldr	r3, [pc, #16]	@ (80014d4 <HAL_RCC_OscConfig+0x778>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f0      	beq.n	80014b0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014ce:	e050      	b.n	8001572 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e04f      	b.n	8001574 <HAL_RCC_OscConfig+0x818>
 80014d4:	40021000 	.word	0x40021000
 80014d8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014dc:	4b27      	ldr	r3, [pc, #156]	@ (800157c <HAL_RCC_OscConfig+0x820>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d144      	bne.n	8001572 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80014e8:	4b24      	ldr	r3, [pc, #144]	@ (800157c <HAL_RCC_OscConfig+0x820>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a23      	ldr	r2, [pc, #140]	@ (800157c <HAL_RCC_OscConfig+0x820>)
 80014ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014f4:	4b21      	ldr	r3, [pc, #132]	@ (800157c <HAL_RCC_OscConfig+0x820>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	4a20      	ldr	r2, [pc, #128]	@ (800157c <HAL_RCC_OscConfig+0x820>)
 80014fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001500:	f7ff f948 	bl	8000794 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001508:	f7ff f944 	bl	8000794 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e02c      	b.n	8001574 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800151a:	4b18      	ldr	r3, [pc, #96]	@ (800157c <HAL_RCC_OscConfig+0x820>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0f0      	beq.n	8001508 <HAL_RCC_OscConfig+0x7ac>
 8001526:	e024      	b.n	8001572 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	2b0c      	cmp	r3, #12
 800152c:	d01f      	beq.n	800156e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800152e:	4b13      	ldr	r3, [pc, #76]	@ (800157c <HAL_RCC_OscConfig+0x820>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a12      	ldr	r2, [pc, #72]	@ (800157c <HAL_RCC_OscConfig+0x820>)
 8001534:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153a:	f7ff f92b 	bl	8000794 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001542:	f7ff f927 	bl	8000794 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e00f      	b.n	8001574 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001554:	4b09      	ldr	r3, [pc, #36]	@ (800157c <HAL_RCC_OscConfig+0x820>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1f0      	bne.n	8001542 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001560:	4b06      	ldr	r3, [pc, #24]	@ (800157c <HAL_RCC_OscConfig+0x820>)
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	4905      	ldr	r1, [pc, #20]	@ (800157c <HAL_RCC_OscConfig+0x820>)
 8001566:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <HAL_RCC_OscConfig+0x824>)
 8001568:	4013      	ands	r3, r2
 800156a:	60cb      	str	r3, [r1, #12]
 800156c:	e001      	b.n	8001572 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3720      	adds	r7, #32
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40021000 	.word	0x40021000
 8001580:	feeefffc 	.word	0xfeeefffc

08001584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0e7      	b.n	8001768 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001598:	4b75      	ldr	r3, [pc, #468]	@ (8001770 <HAL_RCC_ClockConfig+0x1ec>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d910      	bls.n	80015c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a6:	4b72      	ldr	r3, [pc, #456]	@ (8001770 <HAL_RCC_ClockConfig+0x1ec>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 0207 	bic.w	r2, r3, #7
 80015ae:	4970      	ldr	r1, [pc, #448]	@ (8001770 <HAL_RCC_ClockConfig+0x1ec>)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b6:	4b6e      	ldr	r3, [pc, #440]	@ (8001770 <HAL_RCC_ClockConfig+0x1ec>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e0cf      	b.n	8001768 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d010      	beq.n	80015f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	4b66      	ldr	r3, [pc, #408]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d908      	bls.n	80015f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e4:	4b63      	ldr	r3, [pc, #396]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	4960      	ldr	r1, [pc, #384]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d04c      	beq.n	800169c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b03      	cmp	r3, #3
 8001608:	d107      	bne.n	800161a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800160a:	4b5a      	ldr	r3, [pc, #360]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d121      	bne.n	800165a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e0a6      	b.n	8001768 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d107      	bne.n	8001632 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001622:	4b54      	ldr	r3, [pc, #336]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d115      	bne.n	800165a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e09a      	b.n	8001768 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d107      	bne.n	800164a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800163a:	4b4e      	ldr	r3, [pc, #312]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d109      	bne.n	800165a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e08e      	b.n	8001768 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800164a:	4b4a      	ldr	r3, [pc, #296]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e086      	b.n	8001768 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800165a:	4b46      	ldr	r3, [pc, #280]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f023 0203 	bic.w	r2, r3, #3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4943      	ldr	r1, [pc, #268]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 8001668:	4313      	orrs	r3, r2
 800166a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800166c:	f7ff f892 	bl	8000794 <HAL_GetTick>
 8001670:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001672:	e00a      	b.n	800168a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001674:	f7ff f88e 	bl	8000794 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001682:	4293      	cmp	r3, r2
 8001684:	d901      	bls.n	800168a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e06e      	b.n	8001768 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168a:	4b3a      	ldr	r3, [pc, #232]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 020c 	and.w	r2, r3, #12
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	429a      	cmp	r2, r3
 800169a:	d1eb      	bne.n	8001674 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d010      	beq.n	80016ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	4b31      	ldr	r3, [pc, #196]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d208      	bcs.n	80016ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	492b      	ldr	r1, [pc, #172]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016ca:	4b29      	ldr	r3, [pc, #164]	@ (8001770 <HAL_RCC_ClockConfig+0x1ec>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d210      	bcs.n	80016fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d8:	4b25      	ldr	r3, [pc, #148]	@ (8001770 <HAL_RCC_ClockConfig+0x1ec>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f023 0207 	bic.w	r2, r3, #7
 80016e0:	4923      	ldr	r1, [pc, #140]	@ (8001770 <HAL_RCC_ClockConfig+0x1ec>)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e8:	4b21      	ldr	r3, [pc, #132]	@ (8001770 <HAL_RCC_ClockConfig+0x1ec>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d001      	beq.n	80016fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e036      	b.n	8001768 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	2b00      	cmp	r3, #0
 8001704:	d008      	beq.n	8001718 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001706:	4b1b      	ldr	r3, [pc, #108]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	4918      	ldr	r1, [pc, #96]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 8001714:	4313      	orrs	r3, r2
 8001716:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	2b00      	cmp	r3, #0
 8001722:	d009      	beq.n	8001738 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001724:	4b13      	ldr	r3, [pc, #76]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	4910      	ldr	r1, [pc, #64]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 8001734:	4313      	orrs	r3, r2
 8001736:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001738:	f000 f824 	bl	8001784 <HAL_RCC_GetSysClockFreq>
 800173c:	4602      	mov	r2, r0
 800173e:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <HAL_RCC_ClockConfig+0x1f0>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	091b      	lsrs	r3, r3, #4
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	490b      	ldr	r1, [pc, #44]	@ (8001778 <HAL_RCC_ClockConfig+0x1f4>)
 800174a:	5ccb      	ldrb	r3, [r1, r3]
 800174c:	f003 031f 	and.w	r3, r3, #31
 8001750:	fa22 f303 	lsr.w	r3, r2, r3
 8001754:	4a09      	ldr	r2, [pc, #36]	@ (800177c <HAL_RCC_ClockConfig+0x1f8>)
 8001756:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001758:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <HAL_RCC_ClockConfig+0x1fc>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe fe45 	bl	80003ec <HAL_InitTick>
 8001762:	4603      	mov	r3, r0
 8001764:	72fb      	strb	r3, [r7, #11]

  return status;
 8001766:	7afb      	ldrb	r3, [r7, #11]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40022000 	.word	0x40022000
 8001774:	40021000 	.word	0x40021000
 8001778:	08005484 	.word	0x08005484
 800177c:	20000000 	.word	0x20000000
 8001780:	20000004 	.word	0x20000004

08001784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001784:	b480      	push	{r7}
 8001786:	b089      	sub	sp, #36	@ 0x24
 8001788:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001792:	4b3e      	ldr	r3, [pc, #248]	@ (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800179c:	4b3b      	ldr	r3, [pc, #236]	@ (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_GetSysClockFreq+0x34>
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	2b0c      	cmp	r3, #12
 80017b0:	d121      	bne.n	80017f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d11e      	bne.n	80017f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017b8:	4b34      	ldr	r3, [pc, #208]	@ (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d107      	bne.n	80017d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80017c4:	4b31      	ldr	r3, [pc, #196]	@ (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 80017c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017ca:	0a1b      	lsrs	r3, r3, #8
 80017cc:	f003 030f 	and.w	r3, r3, #15
 80017d0:	61fb      	str	r3, [r7, #28]
 80017d2:	e005      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80017d4:	4b2d      	ldr	r3, [pc, #180]	@ (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80017e0:	4a2b      	ldr	r2, [pc, #172]	@ (8001890 <HAL_RCC_GetSysClockFreq+0x10c>)
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d10d      	bne.n	800180c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017f4:	e00a      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d102      	bne.n	8001802 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017fc:	4b25      	ldr	r3, [pc, #148]	@ (8001894 <HAL_RCC_GetSysClockFreq+0x110>)
 80017fe:	61bb      	str	r3, [r7, #24]
 8001800:	e004      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	2b08      	cmp	r3, #8
 8001806:	d101      	bne.n	800180c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001808:	4b23      	ldr	r3, [pc, #140]	@ (8001898 <HAL_RCC_GetSysClockFreq+0x114>)
 800180a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	2b0c      	cmp	r3, #12
 8001810:	d134      	bne.n	800187c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001812:	4b1e      	ldr	r3, [pc, #120]	@ (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d003      	beq.n	800182a <HAL_RCC_GetSysClockFreq+0xa6>
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2b03      	cmp	r3, #3
 8001826:	d003      	beq.n	8001830 <HAL_RCC_GetSysClockFreq+0xac>
 8001828:	e005      	b.n	8001836 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800182a:	4b1a      	ldr	r3, [pc, #104]	@ (8001894 <HAL_RCC_GetSysClockFreq+0x110>)
 800182c:	617b      	str	r3, [r7, #20]
      break;
 800182e:	e005      	b.n	800183c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001830:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <HAL_RCC_GetSysClockFreq+0x114>)
 8001832:	617b      	str	r3, [r7, #20]
      break;
 8001834:	e002      	b.n	800183c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	617b      	str	r3, [r7, #20]
      break;
 800183a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800183c:	4b13      	ldr	r3, [pc, #76]	@ (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	091b      	lsrs	r3, r3, #4
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	3301      	adds	r3, #1
 8001848:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800184a:	4b10      	ldr	r3, [pc, #64]	@ (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	0a1b      	lsrs	r3, r3, #8
 8001850:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	fb03 f202 	mul.w	r2, r3, r2
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001860:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001862:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <HAL_RCC_GetSysClockFreq+0x108>)
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	0e5b      	lsrs	r3, r3, #25
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	3301      	adds	r3, #1
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	fbb2 f3f3 	udiv	r3, r2, r3
 800187a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800187c:	69bb      	ldr	r3, [r7, #24]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3724      	adds	r7, #36	@ 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	40021000 	.word	0x40021000
 8001890:	0800549c 	.word	0x0800549c
 8001894:	00f42400 	.word	0x00f42400
 8001898:	007a1200 	.word	0x007a1200

0800189c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018a0:	4b03      	ldr	r3, [pc, #12]	@ (80018b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000000 	.word	0x20000000

080018b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80018b8:	f7ff fff0 	bl	800189c <HAL_RCC_GetHCLKFreq>
 80018bc:	4602      	mov	r2, r0
 80018be:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	0a1b      	lsrs	r3, r3, #8
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	4904      	ldr	r1, [pc, #16]	@ (80018dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80018ca:	5ccb      	ldrb	r3, [r1, r3]
 80018cc:	f003 031f 	and.w	r3, r3, #31
 80018d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40021000 	.word	0x40021000
 80018dc:	08005494 	.word	0x08005494

080018e0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	220f      	movs	r2, #15
 80018ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80018f0:	4b12      	ldr	r3, [pc, #72]	@ (800193c <HAL_RCC_GetClockConfig+0x5c>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 0203 	and.w	r2, r3, #3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80018fc:	4b0f      	ldr	r3, [pc, #60]	@ (800193c <HAL_RCC_GetClockConfig+0x5c>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001908:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <HAL_RCC_GetClockConfig+0x5c>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001914:	4b09      	ldr	r3, [pc, #36]	@ (800193c <HAL_RCC_GetClockConfig+0x5c>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	08db      	lsrs	r3, r3, #3
 800191a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001922:	4b07      	ldr	r3, [pc, #28]	@ (8001940 <HAL_RCC_GetClockConfig+0x60>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0207 	and.w	r2, r3, #7
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	601a      	str	r2, [r3, #0]
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000
 8001940:	40022000 	.word	0x40022000

08001944 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001950:	4b2a      	ldr	r3, [pc, #168]	@ (80019fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800195c:	f7ff f99a 	bl	8000c94 <HAL_PWREx_GetVoltageRange>
 8001960:	6178      	str	r0, [r7, #20]
 8001962:	e014      	b.n	800198e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001964:	4b25      	ldr	r3, [pc, #148]	@ (80019fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001968:	4a24      	ldr	r2, [pc, #144]	@ (80019fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800196a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800196e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001970:	4b22      	ldr	r3, [pc, #136]	@ (80019fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800197c:	f7ff f98a 	bl	8000c94 <HAL_PWREx_GetVoltageRange>
 8001980:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001982:	4b1e      	ldr	r3, [pc, #120]	@ (80019fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001986:	4a1d      	ldr	r2, [pc, #116]	@ (80019fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001988:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800198c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001994:	d10b      	bne.n	80019ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b80      	cmp	r3, #128	@ 0x80
 800199a:	d919      	bls.n	80019d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2ba0      	cmp	r3, #160	@ 0xa0
 80019a0:	d902      	bls.n	80019a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019a2:	2302      	movs	r3, #2
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	e013      	b.n	80019d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019a8:	2301      	movs	r3, #1
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	e010      	b.n	80019d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b80      	cmp	r3, #128	@ 0x80
 80019b2:	d902      	bls.n	80019ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80019b4:	2303      	movs	r3, #3
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	e00a      	b.n	80019d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b80      	cmp	r3, #128	@ 0x80
 80019be:	d102      	bne.n	80019c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019c0:	2302      	movs	r3, #2
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	e004      	b.n	80019d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b70      	cmp	r3, #112	@ 0x70
 80019ca:	d101      	bne.n	80019d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019cc:	2301      	movs	r3, #1
 80019ce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80019d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f023 0207 	bic.w	r2, r3, #7
 80019d8:	4909      	ldr	r1, [pc, #36]	@ (8001a00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80019e0:	4b07      	ldr	r3, [pc, #28]	@ (8001a00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d001      	beq.n	80019f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e000      	b.n	80019f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40022000 	.word	0x40022000

08001a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e049      	b.n	8001aaa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d106      	bne.n	8001a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f841 	bl	8001ab2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2202      	movs	r2, #2
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3304      	adds	r3, #4
 8001a40:	4619      	mov	r1, r3
 8001a42:	4610      	mov	r0, r2
 8001a44:	f000 f9c4 	bl	8001dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d001      	beq.n	8001ae0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e03b      	b.n	8001b58 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68da      	ldr	r2, [r3, #12]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0201 	orr.w	r2, r2, #1
 8001af6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a19      	ldr	r2, [pc, #100]	@ (8001b64 <HAL_TIM_Base_Start_IT+0x9c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d009      	beq.n	8001b16 <HAL_TIM_Base_Start_IT+0x4e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b0a:	d004      	beq.n	8001b16 <HAL_TIM_Base_Start_IT+0x4e>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a15      	ldr	r2, [pc, #84]	@ (8001b68 <HAL_TIM_Base_Start_IT+0xa0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d115      	bne.n	8001b42 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	4b13      	ldr	r3, [pc, #76]	@ (8001b6c <HAL_TIM_Base_Start_IT+0xa4>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2b06      	cmp	r3, #6
 8001b26:	d015      	beq.n	8001b54 <HAL_TIM_Base_Start_IT+0x8c>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b2e:	d011      	beq.n	8001b54 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0201 	orr.w	r2, r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b40:	e008      	b.n	8001b54 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f042 0201 	orr.w	r2, r2, #1
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	e000      	b.n	8001b56 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	40012c00 	.word	0x40012c00
 8001b68:	40014000 	.word	0x40014000
 8001b6c:	00010007 	.word	0x00010007

08001b70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d020      	beq.n	8001bd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d01b      	beq.n	8001bd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f06f 0202 	mvn.w	r2, #2
 8001ba4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f8e9 	bl	8001d92 <HAL_TIM_IC_CaptureCallback>
 8001bc0:	e005      	b.n	8001bce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f8db 	bl	8001d7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f8ec 	bl	8001da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d020      	beq.n	8001c20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d01b      	beq.n	8001c20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0204 	mvn.w	r2, #4
 8001bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f8c3 	bl	8001d92 <HAL_TIM_IC_CaptureCallback>
 8001c0c:	e005      	b.n	8001c1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f8b5 	bl	8001d7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f8c6 	bl	8001da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d020      	beq.n	8001c6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d01b      	beq.n	8001c6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f06f 0208 	mvn.w	r2, #8
 8001c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2204      	movs	r2, #4
 8001c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f89d 	bl	8001d92 <HAL_TIM_IC_CaptureCallback>
 8001c58:	e005      	b.n	8001c66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f88f 	bl	8001d7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f8a0 	bl	8001da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	f003 0310 	and.w	r3, r3, #16
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d020      	beq.n	8001cb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d01b      	beq.n	8001cb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f06f 0210 	mvn.w	r2, #16
 8001c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2208      	movs	r2, #8
 8001c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f877 	bl	8001d92 <HAL_TIM_IC_CaptureCallback>
 8001ca4:	e005      	b.n	8001cb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f869 	bl	8001d7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f87a 	bl	8001da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00c      	beq.n	8001cdc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d007      	beq.n	8001cdc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0201 	mvn.w	r2, #1
 8001cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7fe fb48 	bl	800036c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d104      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00c      	beq.n	8001d0a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d007      	beq.n	8001d0a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f8dd 	bl	8001ec4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00c      	beq.n	8001d2e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d007      	beq.n	8001d2e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f8d5 	bl	8001ed8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00c      	beq.n	8001d52 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d007      	beq.n	8001d52 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f834 	bl	8001dba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	f003 0320 	and.w	r3, r3, #32
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00c      	beq.n	8001d76 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 0320 	and.w	r3, r3, #32
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d007      	beq.n	8001d76 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f06f 0220 	mvn.w	r2, #32
 8001d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f89d 	bl	8001eb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a30      	ldr	r2, [pc, #192]	@ (8001ea4 <TIM_Base_SetConfig+0xd4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d003      	beq.n	8001df0 <TIM_Base_SetConfig+0x20>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dee:	d108      	bne.n	8001e02 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a27      	ldr	r2, [pc, #156]	@ (8001ea4 <TIM_Base_SetConfig+0xd4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00b      	beq.n	8001e22 <TIM_Base_SetConfig+0x52>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e10:	d007      	beq.n	8001e22 <TIM_Base_SetConfig+0x52>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a24      	ldr	r2, [pc, #144]	@ (8001ea8 <TIM_Base_SetConfig+0xd8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d003      	beq.n	8001e22 <TIM_Base_SetConfig+0x52>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a23      	ldr	r2, [pc, #140]	@ (8001eac <TIM_Base_SetConfig+0xdc>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d108      	bne.n	8001e34 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a12      	ldr	r2, [pc, #72]	@ (8001ea4 <TIM_Base_SetConfig+0xd4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d007      	beq.n	8001e70 <TIM_Base_SetConfig+0xa0>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a11      	ldr	r2, [pc, #68]	@ (8001ea8 <TIM_Base_SetConfig+0xd8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d003      	beq.n	8001e70 <TIM_Base_SetConfig+0xa0>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a10      	ldr	r2, [pc, #64]	@ (8001eac <TIM_Base_SetConfig+0xdc>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d103      	bne.n	8001e78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d105      	bne.n	8001e96 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f023 0201 	bic.w	r2, r3, #1
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	611a      	str	r2, [r3, #16]
  }
}
 8001e96:	bf00      	nop
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40012c00 	.word	0x40012c00
 8001ea8:	40014000 	.word	0x40014000
 8001eac:	40014400 	.word	0x40014400

08001eb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <__NVIC_SetPriority>:
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	6039      	str	r1, [r7, #0]
 8001ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	db0a      	blt.n	8001f16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	490c      	ldr	r1, [pc, #48]	@ (8001f38 <__NVIC_SetPriority+0x4c>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	0112      	lsls	r2, r2, #4
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001f14:	e00a      	b.n	8001f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4908      	ldr	r1, [pc, #32]	@ (8001f3c <__NVIC_SetPriority+0x50>)
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	3b04      	subs	r3, #4
 8001f24:	0112      	lsls	r2, r2, #4
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	440b      	add	r3, r1
 8001f2a:	761a      	strb	r2, [r3, #24]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000e100 	.word	0xe000e100
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001f44:	4b05      	ldr	r3, [pc, #20]	@ (8001f5c <SysTick_Handler+0x1c>)
 8001f46:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001f48:	f001 fd18 	bl	800397c <xTaskGetSchedulerState>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d001      	beq.n	8001f56 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001f52:	f002 fb11 	bl	8004578 <xPortSysTickHandler>
  }
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	e000e010 	.word	0xe000e010

08001f60 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001f64:	2100      	movs	r1, #0
 8001f66:	f06f 0004 	mvn.w	r0, #4
 8001f6a:	f7ff ffbf 	bl	8001eec <__NVIC_SetPriority>
#endif
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f7a:	f3ef 8305 	mrs	r3, IPSR
 8001f7e:	603b      	str	r3, [r7, #0]
  return(result);
 8001f80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001f86:	f06f 0305 	mvn.w	r3, #5
 8001f8a:	607b      	str	r3, [r7, #4]
 8001f8c:	e00c      	b.n	8001fa8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb8 <osKernelInitialize+0x44>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d105      	bne.n	8001fa2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001f96:	4b08      	ldr	r3, [pc, #32]	@ (8001fb8 <osKernelInitialize+0x44>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	e002      	b.n	8001fa8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001fa8:	687b      	ldr	r3, [r7, #4]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	200000e4 	.word	0x200000e4

08001fbc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fc2:	f3ef 8305 	mrs	r3, IPSR
 8001fc6:	603b      	str	r3, [r7, #0]
  return(result);
 8001fc8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001fce:	f06f 0305 	mvn.w	r3, #5
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	e010      	b.n	8001ff8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8002004 <osKernelStart+0x48>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d109      	bne.n	8001ff2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001fde:	f7ff ffbf 	bl	8001f60 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001fe2:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <osKernelStart+0x48>)
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001fe8:	f001 f87a 	bl	80030e0 <vTaskStartScheduler>
      stat = osOK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	e002      	b.n	8001ff8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001ff8:	687b      	ldr	r3, [r7, #4]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	200000e4 	.word	0x200000e4

08002008 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002008:	b580      	push	{r7, lr}
 800200a:	b08e      	sub	sp, #56	@ 0x38
 800200c:	af04      	add	r7, sp, #16
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002014:	2300      	movs	r3, #0
 8002016:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002018:	f3ef 8305 	mrs	r3, IPSR
 800201c:	617b      	str	r3, [r7, #20]
  return(result);
 800201e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002020:	2b00      	cmp	r3, #0
 8002022:	d17e      	bne.n	8002122 <osThreadNew+0x11a>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d07b      	beq.n	8002122 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800202a:	2380      	movs	r3, #128	@ 0x80
 800202c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800202e:	2318      	movs	r3, #24
 8002030:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002032:	2300      	movs	r3, #0
 8002034:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
 800203a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d045      	beq.n	80020ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <osThreadNew+0x48>
        name = attr->name;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d002      	beq.n	800205e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d008      	beq.n	8002076 <osThreadNew+0x6e>
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	2b38      	cmp	r3, #56	@ 0x38
 8002068:	d805      	bhi.n	8002076 <osThreadNew+0x6e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <osThreadNew+0x72>
        return (NULL);
 8002076:	2300      	movs	r3, #0
 8002078:	e054      	b.n	8002124 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00e      	beq.n	80020b0 <osThreadNew+0xa8>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	2b5b      	cmp	r3, #91	@ 0x5b
 8002098:	d90a      	bls.n	80020b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d006      	beq.n	80020b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <osThreadNew+0xa8>
        mem = 1;
 80020aa:	2301      	movs	r3, #1
 80020ac:	61bb      	str	r3, [r7, #24]
 80020ae:	e010      	b.n	80020d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10c      	bne.n	80020d2 <osThreadNew+0xca>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d108      	bne.n	80020d2 <osThreadNew+0xca>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d104      	bne.n	80020d2 <osThreadNew+0xca>
          mem = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61bb      	str	r3, [r7, #24]
 80020cc:	e001      	b.n	80020d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d110      	bne.n	80020fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80020e0:	9202      	str	r2, [sp, #8]
 80020e2:	9301      	str	r3, [sp, #4]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	6a3a      	ldr	r2, [r7, #32]
 80020ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 fe1a 	bl	8002d28 <xTaskCreateStatic>
 80020f4:	4603      	mov	r3, r0
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	e013      	b.n	8002122 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d110      	bne.n	8002122 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	b29a      	uxth	r2, r3
 8002104:	f107 0310 	add.w	r3, r7, #16
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 fe68 	bl	8002de8 <xTaskCreate>
 8002118:	4603      	mov	r3, r0
 800211a:	2b01      	cmp	r3, #1
 800211c:	d001      	beq.n	8002122 <osThreadNew+0x11a>
            hTask = NULL;
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002122:	693b      	ldr	r3, [r7, #16]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3728      	adds	r7, #40	@ 0x28
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002134:	f3ef 8305 	mrs	r3, IPSR
 8002138:	60bb      	str	r3, [r7, #8]
  return(result);
 800213a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <osDelay+0x1c>
    stat = osErrorISR;
 8002140:	f06f 0305 	mvn.w	r3, #5
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	e007      	b.n	8002158 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d002      	beq.n	8002158 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 ff8e 	bl	8003074 <vTaskDelay>
    }
  }

  return (stat);
 8002158:	68fb      	ldr	r3, [r7, #12]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4a07      	ldr	r2, [pc, #28]	@ (8002190 <vApplicationGetIdleTaskMemory+0x2c>)
 8002174:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	4a06      	ldr	r2, [pc, #24]	@ (8002194 <vApplicationGetIdleTaskMemory+0x30>)
 800217a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2280      	movs	r2, #128	@ 0x80
 8002180:	601a      	str	r2, [r3, #0]
}
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	200000e8 	.word	0x200000e8
 8002194:	20000144 	.word	0x20000144

08002198 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4a07      	ldr	r2, [pc, #28]	@ (80021c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80021a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	4a06      	ldr	r2, [pc, #24]	@ (80021c8 <vApplicationGetTimerTaskMemory+0x30>)
 80021ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021b6:	601a      	str	r2, [r3, #0]
}
 80021b8:	bf00      	nop
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	20000344 	.word	0x20000344
 80021c8:	200003a0 	.word	0x200003a0

080021cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f103 0208 	add.w	r2, r3, #8
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f04f 32ff 	mov.w	r2, #4294967295
 80021e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f103 0208 	add.w	r2, r3, #8
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f103 0208 	add.w	r2, r3, #8
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002226:	b480      	push	{r7}
 8002228:	b085      	sub	sp, #20
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	601a      	str	r2, [r3, #0]
}
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800226e:	b480      	push	{r7}
 8002270:	b085      	sub	sp, #20
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002284:	d103      	bne.n	800228e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	e00c      	b.n	80022a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3308      	adds	r3, #8
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	e002      	b.n	800229c <vListInsert+0x2e>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d2f6      	bcs.n	8002296 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	601a      	str	r2, [r3, #0]
}
 80022d4:	bf00      	nop
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6892      	ldr	r2, [r2, #8]
 80022f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6852      	ldr	r2, [r2, #4]
 8002300:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	429a      	cmp	r2, r3
 800230a:	d103      	bne.n	8002314 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	1e5a      	subs	r2, r3, #1
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10b      	bne.n	8002360 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800234c:	f383 8811 	msr	BASEPRI, r3
 8002350:	f3bf 8f6f 	isb	sy
 8002354:	f3bf 8f4f 	dsb	sy
 8002358:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800235a:	bf00      	nop
 800235c:	bf00      	nop
 800235e:	e7fd      	b.n	800235c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002360:	f002 f87a 	bl	8004458 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800236c:	68f9      	ldr	r1, [r7, #12]
 800236e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002370:	fb01 f303 	mul.w	r3, r1, r3
 8002374:	441a      	add	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002390:	3b01      	subs	r3, #1
 8002392:	68f9      	ldr	r1, [r7, #12]
 8002394:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002396:	fb01 f303 	mul.w	r3, r1, r3
 800239a:	441a      	add	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	22ff      	movs	r2, #255	@ 0xff
 80023a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	22ff      	movs	r2, #255	@ 0xff
 80023ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d114      	bne.n	80023e0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d01a      	beq.n	80023f4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	3310      	adds	r3, #16
 80023c2:	4618      	mov	r0, r3
 80023c4:	f001 f91a 	bl	80035fc <xTaskRemoveFromEventList>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d012      	beq.n	80023f4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80023ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002404 <xQueueGenericReset+0xd0>)
 80023d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	f3bf 8f4f 	dsb	sy
 80023da:	f3bf 8f6f 	isb	sy
 80023de:	e009      	b.n	80023f4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	3310      	adds	r3, #16
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fef1 	bl	80021cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	3324      	adds	r3, #36	@ 0x24
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff feec 	bl	80021cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80023f4:	f002 f862 	bl	80044bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80023f8:	2301      	movs	r3, #1
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	e000ed04 	.word	0xe000ed04

08002408 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08e      	sub	sp, #56	@ 0x38
 800240c:	af02      	add	r7, sp, #8
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
 8002414:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10b      	bne.n	8002434 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800241c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002420:	f383 8811 	msr	BASEPRI, r3
 8002424:	f3bf 8f6f 	isb	sy
 8002428:	f3bf 8f4f 	dsb	sy
 800242c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800242e:	bf00      	nop
 8002430:	bf00      	nop
 8002432:	e7fd      	b.n	8002430 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10b      	bne.n	8002452 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800243a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800243e:	f383 8811 	msr	BASEPRI, r3
 8002442:	f3bf 8f6f 	isb	sy
 8002446:	f3bf 8f4f 	dsb	sy
 800244a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800244c:	bf00      	nop
 800244e:	bf00      	nop
 8002450:	e7fd      	b.n	800244e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <xQueueGenericCreateStatic+0x56>
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <xQueueGenericCreateStatic+0x5a>
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <xQueueGenericCreateStatic+0x5c>
 8002462:	2300      	movs	r3, #0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10b      	bne.n	8002480 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800246c:	f383 8811 	msr	BASEPRI, r3
 8002470:	f3bf 8f6f 	isb	sy
 8002474:	f3bf 8f4f 	dsb	sy
 8002478:	623b      	str	r3, [r7, #32]
}
 800247a:	bf00      	nop
 800247c:	bf00      	nop
 800247e:	e7fd      	b.n	800247c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d102      	bne.n	800248c <xQueueGenericCreateStatic+0x84>
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <xQueueGenericCreateStatic+0x88>
 800248c:	2301      	movs	r3, #1
 800248e:	e000      	b.n	8002492 <xQueueGenericCreateStatic+0x8a>
 8002490:	2300      	movs	r3, #0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10b      	bne.n	80024ae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800249a:	f383 8811 	msr	BASEPRI, r3
 800249e:	f3bf 8f6f 	isb	sy
 80024a2:	f3bf 8f4f 	dsb	sy
 80024a6:	61fb      	str	r3, [r7, #28]
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	e7fd      	b.n	80024aa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80024ae:	2350      	movs	r3, #80	@ 0x50
 80024b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2b50      	cmp	r3, #80	@ 0x50
 80024b6:	d00b      	beq.n	80024d0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80024b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024bc:	f383 8811 	msr	BASEPRI, r3
 80024c0:	f3bf 8f6f 	isb	sy
 80024c4:	f3bf 8f4f 	dsb	sy
 80024c8:	61bb      	str	r3, [r7, #24]
}
 80024ca:	bf00      	nop
 80024cc:	bf00      	nop
 80024ce:	e7fd      	b.n	80024cc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80024d0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80024d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00d      	beq.n	80024f8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80024dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024e4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80024e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	4613      	mov	r3, r2
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	68b9      	ldr	r1, [r7, #8]
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 f805 	bl	8002502 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80024f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3730      	adds	r7, #48	@ 0x30
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b084      	sub	sp, #16
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d103      	bne.n	800251e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	e002      	b.n	8002524 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002530:	2101      	movs	r1, #1
 8002532:	69b8      	ldr	r0, [r7, #24]
 8002534:	f7ff fefe 	bl	8002334 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	78fa      	ldrb	r2, [r7, #3]
 800253c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002540:	bf00      	nop
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08e      	sub	sp, #56	@ 0x38
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002556:	2300      	movs	r3, #0
 8002558:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800255e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10b      	bne.n	800257c <xQueueGenericSend+0x34>
	__asm volatile
 8002564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002568:	f383 8811 	msr	BASEPRI, r3
 800256c:	f3bf 8f6f 	isb	sy
 8002570:	f3bf 8f4f 	dsb	sy
 8002574:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002576:	bf00      	nop
 8002578:	bf00      	nop
 800257a:	e7fd      	b.n	8002578 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d103      	bne.n	800258a <xQueueGenericSend+0x42>
 8002582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <xQueueGenericSend+0x46>
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <xQueueGenericSend+0x48>
 800258e:	2300      	movs	r3, #0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10b      	bne.n	80025ac <xQueueGenericSend+0x64>
	__asm volatile
 8002594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002598:	f383 8811 	msr	BASEPRI, r3
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	f3bf 8f4f 	dsb	sy
 80025a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80025a6:	bf00      	nop
 80025a8:	bf00      	nop
 80025aa:	e7fd      	b.n	80025a8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d103      	bne.n	80025ba <xQueueGenericSend+0x72>
 80025b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <xQueueGenericSend+0x76>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <xQueueGenericSend+0x78>
 80025be:	2300      	movs	r3, #0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10b      	bne.n	80025dc <xQueueGenericSend+0x94>
	__asm volatile
 80025c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025c8:	f383 8811 	msr	BASEPRI, r3
 80025cc:	f3bf 8f6f 	isb	sy
 80025d0:	f3bf 8f4f 	dsb	sy
 80025d4:	623b      	str	r3, [r7, #32]
}
 80025d6:	bf00      	nop
 80025d8:	bf00      	nop
 80025da:	e7fd      	b.n	80025d8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025dc:	f001 f9ce 	bl	800397c <xTaskGetSchedulerState>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d102      	bne.n	80025ec <xQueueGenericSend+0xa4>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <xQueueGenericSend+0xa8>
 80025ec:	2301      	movs	r3, #1
 80025ee:	e000      	b.n	80025f2 <xQueueGenericSend+0xaa>
 80025f0:	2300      	movs	r3, #0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10b      	bne.n	800260e <xQueueGenericSend+0xc6>
	__asm volatile
 80025f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025fa:	f383 8811 	msr	BASEPRI, r3
 80025fe:	f3bf 8f6f 	isb	sy
 8002602:	f3bf 8f4f 	dsb	sy
 8002606:	61fb      	str	r3, [r7, #28]
}
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	e7fd      	b.n	800260a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800260e:	f001 ff23 	bl	8004458 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002614:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800261a:	429a      	cmp	r2, r3
 800261c:	d302      	bcc.n	8002624 <xQueueGenericSend+0xdc>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d129      	bne.n	8002678 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	68b9      	ldr	r1, [r7, #8]
 8002628:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800262a:	f000 fa0f 	bl	8002a4c <prvCopyDataToQueue>
 800262e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002634:	2b00      	cmp	r3, #0
 8002636:	d010      	beq.n	800265a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800263a:	3324      	adds	r3, #36	@ 0x24
 800263c:	4618      	mov	r0, r3
 800263e:	f000 ffdd 	bl	80035fc <xTaskRemoveFromEventList>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d013      	beq.n	8002670 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002648:	4b3f      	ldr	r3, [pc, #252]	@ (8002748 <xQueueGenericSend+0x200>)
 800264a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	f3bf 8f4f 	dsb	sy
 8002654:	f3bf 8f6f 	isb	sy
 8002658:	e00a      	b.n	8002670 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800265a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800265c:	2b00      	cmp	r3, #0
 800265e:	d007      	beq.n	8002670 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002660:	4b39      	ldr	r3, [pc, #228]	@ (8002748 <xQueueGenericSend+0x200>)
 8002662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	f3bf 8f4f 	dsb	sy
 800266c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002670:	f001 ff24 	bl	80044bc <vPortExitCritical>
				return pdPASS;
 8002674:	2301      	movs	r3, #1
 8002676:	e063      	b.n	8002740 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d103      	bne.n	8002686 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800267e:	f001 ff1d 	bl	80044bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002682:	2300      	movs	r3, #0
 8002684:	e05c      	b.n	8002740 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002688:	2b00      	cmp	r3, #0
 800268a:	d106      	bne.n	800269a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	4618      	mov	r0, r3
 8002692:	f001 f817 	bl	80036c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002696:	2301      	movs	r3, #1
 8002698:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800269a:	f001 ff0f 	bl	80044bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800269e:	f000 fd87 	bl	80031b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80026a2:	f001 fed9 	bl	8004458 <vPortEnterCritical>
 80026a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026ac:	b25b      	sxtb	r3, r3
 80026ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b2:	d103      	bne.n	80026bc <xQueueGenericSend+0x174>
 80026b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c8:	d103      	bne.n	80026d2 <xQueueGenericSend+0x18a>
 80026ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80026d2:	f001 fef3 	bl	80044bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026d6:	1d3a      	adds	r2, r7, #4
 80026d8:	f107 0314 	add.w	r3, r7, #20
 80026dc:	4611      	mov	r1, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f001 f806 	bl	80036f0 <xTaskCheckForTimeOut>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d124      	bne.n	8002734 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80026ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026ec:	f000 faa6 	bl	8002c3c <prvIsQueueFull>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d018      	beq.n	8002728 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80026f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f8:	3310      	adds	r3, #16
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	4611      	mov	r1, r2
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 ff2a 	bl	8003558 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002704:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002706:	f000 fa31 	bl	8002b6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800270a:	f000 fd5f 	bl	80031cc <xTaskResumeAll>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	f47f af7c 	bne.w	800260e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002716:	4b0c      	ldr	r3, [pc, #48]	@ (8002748 <xQueueGenericSend+0x200>)
 8002718:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	f3bf 8f4f 	dsb	sy
 8002722:	f3bf 8f6f 	isb	sy
 8002726:	e772      	b.n	800260e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002728:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800272a:	f000 fa1f 	bl	8002b6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800272e:	f000 fd4d 	bl	80031cc <xTaskResumeAll>
 8002732:	e76c      	b.n	800260e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002734:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002736:	f000 fa19 	bl	8002b6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800273a:	f000 fd47 	bl	80031cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800273e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002740:	4618      	mov	r0, r3
 8002742:	3738      	adds	r7, #56	@ 0x38
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	e000ed04 	.word	0xe000ed04

0800274c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b090      	sub	sp, #64	@ 0x40
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
 8002758:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800275e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10b      	bne.n	800277c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002768:	f383 8811 	msr	BASEPRI, r3
 800276c:	f3bf 8f6f 	isb	sy
 8002770:	f3bf 8f4f 	dsb	sy
 8002774:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002776:	bf00      	nop
 8002778:	bf00      	nop
 800277a:	e7fd      	b.n	8002778 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d103      	bne.n	800278a <xQueueGenericSendFromISR+0x3e>
 8002782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <xQueueGenericSendFromISR+0x42>
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <xQueueGenericSendFromISR+0x44>
 800278e:	2300      	movs	r3, #0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10b      	bne.n	80027ac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002798:	f383 8811 	msr	BASEPRI, r3
 800279c:	f3bf 8f6f 	isb	sy
 80027a0:	f3bf 8f4f 	dsb	sy
 80027a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80027a6:	bf00      	nop
 80027a8:	bf00      	nop
 80027aa:	e7fd      	b.n	80027a8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d103      	bne.n	80027ba <xQueueGenericSendFromISR+0x6e>
 80027b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <xQueueGenericSendFromISR+0x72>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <xQueueGenericSendFromISR+0x74>
 80027be:	2300      	movs	r3, #0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10b      	bne.n	80027dc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80027c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027c8:	f383 8811 	msr	BASEPRI, r3
 80027cc:	f3bf 8f6f 	isb	sy
 80027d0:	f3bf 8f4f 	dsb	sy
 80027d4:	623b      	str	r3, [r7, #32]
}
 80027d6:	bf00      	nop
 80027d8:	bf00      	nop
 80027da:	e7fd      	b.n	80027d8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027dc:	f001 ff1c 	bl	8004618 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80027e0:	f3ef 8211 	mrs	r2, BASEPRI
 80027e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027e8:	f383 8811 	msr	BASEPRI, r3
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	f3bf 8f4f 	dsb	sy
 80027f4:	61fa      	str	r2, [r7, #28]
 80027f6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80027f8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80027fa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002804:	429a      	cmp	r2, r3
 8002806:	d302      	bcc.n	800280e <xQueueGenericSendFromISR+0xc2>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	2b02      	cmp	r3, #2
 800280c:	d12f      	bne.n	800286e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800280e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002810:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002814:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800281a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800281c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002824:	f000 f912 	bl	8002a4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002828:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002830:	d112      	bne.n	8002858 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002836:	2b00      	cmp	r3, #0
 8002838:	d016      	beq.n	8002868 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800283a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800283c:	3324      	adds	r3, #36	@ 0x24
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fedc 	bl	80035fc <xTaskRemoveFromEventList>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00e      	beq.n	8002868 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00b      	beq.n	8002868 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	e007      	b.n	8002868 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002858:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800285c:	3301      	adds	r3, #1
 800285e:	b2db      	uxtb	r3, r3
 8002860:	b25a      	sxtb	r2, r3
 8002862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002864:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002868:	2301      	movs	r3, #1
 800286a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800286c:	e001      	b.n	8002872 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800286e:	2300      	movs	r3, #0
 8002870:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002874:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800287c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800287e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002880:	4618      	mov	r0, r3
 8002882:	3740      	adds	r7, #64	@ 0x40
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08c      	sub	sp, #48	@ 0x30
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002894:	2300      	movs	r3, #0
 8002896:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800289c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10b      	bne.n	80028ba <xQueueReceive+0x32>
	__asm volatile
 80028a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028a6:	f383 8811 	msr	BASEPRI, r3
 80028aa:	f3bf 8f6f 	isb	sy
 80028ae:	f3bf 8f4f 	dsb	sy
 80028b2:	623b      	str	r3, [r7, #32]
}
 80028b4:	bf00      	nop
 80028b6:	bf00      	nop
 80028b8:	e7fd      	b.n	80028b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d103      	bne.n	80028c8 <xQueueReceive+0x40>
 80028c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <xQueueReceive+0x44>
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <xQueueReceive+0x46>
 80028cc:	2300      	movs	r3, #0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10b      	bne.n	80028ea <xQueueReceive+0x62>
	__asm volatile
 80028d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028d6:	f383 8811 	msr	BASEPRI, r3
 80028da:	f3bf 8f6f 	isb	sy
 80028de:	f3bf 8f4f 	dsb	sy
 80028e2:	61fb      	str	r3, [r7, #28]
}
 80028e4:	bf00      	nop
 80028e6:	bf00      	nop
 80028e8:	e7fd      	b.n	80028e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028ea:	f001 f847 	bl	800397c <xTaskGetSchedulerState>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d102      	bne.n	80028fa <xQueueReceive+0x72>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <xQueueReceive+0x76>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <xQueueReceive+0x78>
 80028fe:	2300      	movs	r3, #0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10b      	bne.n	800291c <xQueueReceive+0x94>
	__asm volatile
 8002904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002908:	f383 8811 	msr	BASEPRI, r3
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	f3bf 8f4f 	dsb	sy
 8002914:	61bb      	str	r3, [r7, #24]
}
 8002916:	bf00      	nop
 8002918:	bf00      	nop
 800291a:	e7fd      	b.n	8002918 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800291c:	f001 fd9c 	bl	8004458 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002924:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	2b00      	cmp	r3, #0
 800292a:	d01f      	beq.n	800296c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002930:	f000 f8f6 	bl	8002b20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002936:	1e5a      	subs	r2, r3, #1
 8002938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800293c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00f      	beq.n	8002964 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002946:	3310      	adds	r3, #16
 8002948:	4618      	mov	r0, r3
 800294a:	f000 fe57 	bl	80035fc <xTaskRemoveFromEventList>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d007      	beq.n	8002964 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002954:	4b3c      	ldr	r3, [pc, #240]	@ (8002a48 <xQueueReceive+0x1c0>)
 8002956:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	f3bf 8f4f 	dsb	sy
 8002960:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002964:	f001 fdaa 	bl	80044bc <vPortExitCritical>
				return pdPASS;
 8002968:	2301      	movs	r3, #1
 800296a:	e069      	b.n	8002a40 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d103      	bne.n	800297a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002972:	f001 fda3 	bl	80044bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002976:	2300      	movs	r3, #0
 8002978:	e062      	b.n	8002a40 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800297a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800297c:	2b00      	cmp	r3, #0
 800297e:	d106      	bne.n	800298e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002980:	f107 0310 	add.w	r3, r7, #16
 8002984:	4618      	mov	r0, r3
 8002986:	f000 fe9d 	bl	80036c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800298a:	2301      	movs	r3, #1
 800298c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800298e:	f001 fd95 	bl	80044bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002992:	f000 fc0d 	bl	80031b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002996:	f001 fd5f 	bl	8004458 <vPortEnterCritical>
 800299a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800299c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80029a0:	b25b      	sxtb	r3, r3
 80029a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a6:	d103      	bne.n	80029b0 <xQueueReceive+0x128>
 80029a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029b6:	b25b      	sxtb	r3, r3
 80029b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029bc:	d103      	bne.n	80029c6 <xQueueReceive+0x13e>
 80029be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029c6:	f001 fd79 	bl	80044bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029ca:	1d3a      	adds	r2, r7, #4
 80029cc:	f107 0310 	add.w	r3, r7, #16
 80029d0:	4611      	mov	r1, r2
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fe8c 	bl	80036f0 <xTaskCheckForTimeOut>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d123      	bne.n	8002a26 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029e0:	f000 f916 	bl	8002c10 <prvIsQueueEmpty>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d017      	beq.n	8002a1a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ec:	3324      	adds	r3, #36	@ 0x24
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	4611      	mov	r1, r2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 fdb0 	bl	8003558 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80029f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029fa:	f000 f8b7 	bl	8002b6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80029fe:	f000 fbe5 	bl	80031cc <xTaskResumeAll>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d189      	bne.n	800291c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002a08:	4b0f      	ldr	r3, [pc, #60]	@ (8002a48 <xQueueReceive+0x1c0>)
 8002a0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	e780      	b.n	800291c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002a1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a1c:	f000 f8a6 	bl	8002b6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a20:	f000 fbd4 	bl	80031cc <xTaskResumeAll>
 8002a24:	e77a      	b.n	800291c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002a26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a28:	f000 f8a0 	bl	8002b6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a2c:	f000 fbce 	bl	80031cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a32:	f000 f8ed 	bl	8002c10 <prvIsQueueEmpty>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f43f af6f 	beq.w	800291c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002a3e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3730      	adds	r7, #48	@ 0x30
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	e000ed04 	.word	0xe000ed04

08002a4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10d      	bne.n	8002a86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d14d      	bne.n	8002b0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 ff9e 	bl	80039b8 <xTaskPriorityDisinherit>
 8002a7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	e043      	b.n	8002b0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d119      	bne.n	8002ac0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6858      	ldr	r0, [r3, #4]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a94:	461a      	mov	r2, r3
 8002a96:	68b9      	ldr	r1, [r7, #8]
 8002a98:	f002 fa61 	bl	8004f5e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa4:	441a      	add	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d32b      	bcc.n	8002b0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	e026      	b.n	8002b0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	68d8      	ldr	r0, [r3, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac8:	461a      	mov	r2, r3
 8002aca:	68b9      	ldr	r1, [r7, #8]
 8002acc:	f002 fa47 	bl	8004f5e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad8:	425b      	negs	r3, r3
 8002ada:	441a      	add	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d207      	bcs.n	8002afc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af4:	425b      	negs	r3, r3
 8002af6:	441a      	add	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d105      	bne.n	8002b0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002b16:	697b      	ldr	r3, [r7, #20]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d018      	beq.n	8002b64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	441a      	add	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d303      	bcc.n	8002b54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68d9      	ldr	r1, [r3, #12]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	6838      	ldr	r0, [r7, #0]
 8002b60:	f002 f9fd 	bl	8004f5e <memcpy>
	}
}
 8002b64:	bf00      	nop
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002b74:	f001 fc70 	bl	8004458 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b80:	e011      	b.n	8002ba6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d012      	beq.n	8002bb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3324      	adds	r3, #36	@ 0x24
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fd34 	bl	80035fc <xTaskRemoveFromEventList>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002b9a:	f000 fe0d 	bl	80037b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	dce9      	bgt.n	8002b82 <prvUnlockQueue+0x16>
 8002bae:	e000      	b.n	8002bb2 <prvUnlockQueue+0x46>
					break;
 8002bb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	22ff      	movs	r2, #255	@ 0xff
 8002bb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002bba:	f001 fc7f 	bl	80044bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002bbe:	f001 fc4b 	bl	8004458 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002bc8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bca:	e011      	b.n	8002bf0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d012      	beq.n	8002bfa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3310      	adds	r3, #16
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 fd0f 	bl	80035fc <xTaskRemoveFromEventList>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002be4:	f000 fde8 	bl	80037b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002be8:	7bbb      	ldrb	r3, [r7, #14]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	dce9      	bgt.n	8002bcc <prvUnlockQueue+0x60>
 8002bf8:	e000      	b.n	8002bfc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002bfa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	22ff      	movs	r2, #255	@ 0xff
 8002c00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002c04:	f001 fc5a 	bl	80044bc <vPortExitCritical>
}
 8002c08:	bf00      	nop
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c18:	f001 fc1e 	bl	8004458 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d102      	bne.n	8002c2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002c24:	2301      	movs	r3, #1
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	e001      	b.n	8002c2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c2e:	f001 fc45 	bl	80044bc <vPortExitCritical>

	return xReturn;
 8002c32:	68fb      	ldr	r3, [r7, #12]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c44:	f001 fc08 	bl	8004458 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d102      	bne.n	8002c5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002c54:	2301      	movs	r3, #1
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	e001      	b.n	8002c5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c5e:	f001 fc2d 	bl	80044bc <vPortExitCritical>

	return xReturn;
 8002c62:	68fb      	ldr	r3, [r7, #12]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	e014      	b.n	8002ca6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c7c:	4a0f      	ldr	r2, [pc, #60]	@ (8002cbc <vQueueAddToRegistry+0x50>)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10b      	bne.n	8002ca0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002c88:	490c      	ldr	r1, [pc, #48]	@ (8002cbc <vQueueAddToRegistry+0x50>)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002c92:	4a0a      	ldr	r2, [pc, #40]	@ (8002cbc <vQueueAddToRegistry+0x50>)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4413      	add	r3, r2
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002c9e:	e006      	b.n	8002cae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b07      	cmp	r3, #7
 8002caa:	d9e7      	bls.n	8002c7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002cac:	bf00      	nop
 8002cae:	bf00      	nop
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	200007a0 	.word	0x200007a0

08002cc0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002cd0:	f001 fbc2 	bl	8004458 <vPortEnterCritical>
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002cda:	b25b      	sxtb	r3, r3
 8002cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce0:	d103      	bne.n	8002cea <vQueueWaitForMessageRestricted+0x2a>
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002cf0:	b25b      	sxtb	r3, r3
 8002cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf6:	d103      	bne.n	8002d00 <vQueueWaitForMessageRestricted+0x40>
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d00:	f001 fbdc 	bl	80044bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d106      	bne.n	8002d1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	3324      	adds	r3, #36	@ 0x24
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	68b9      	ldr	r1, [r7, #8]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 fc45 	bl	80035a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002d1a:	6978      	ldr	r0, [r7, #20]
 8002d1c:	f7ff ff26 	bl	8002b6c <prvUnlockQueue>
	}
 8002d20:	bf00      	nop
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08e      	sub	sp, #56	@ 0x38
 8002d2c:	af04      	add	r7, sp, #16
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10b      	bne.n	8002d54 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d40:	f383 8811 	msr	BASEPRI, r3
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	623b      	str	r3, [r7, #32]
}
 8002d4e:	bf00      	nop
 8002d50:	bf00      	nop
 8002d52:	e7fd      	b.n	8002d50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10b      	bne.n	8002d72 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d5e:	f383 8811 	msr	BASEPRI, r3
 8002d62:	f3bf 8f6f 	isb	sy
 8002d66:	f3bf 8f4f 	dsb	sy
 8002d6a:	61fb      	str	r3, [r7, #28]
}
 8002d6c:	bf00      	nop
 8002d6e:	bf00      	nop
 8002d70:	e7fd      	b.n	8002d6e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d72:	235c      	movs	r3, #92	@ 0x5c
 8002d74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	2b5c      	cmp	r3, #92	@ 0x5c
 8002d7a:	d00b      	beq.n	8002d94 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d80:	f383 8811 	msr	BASEPRI, r3
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	61bb      	str	r3, [r7, #24]
}
 8002d8e:	bf00      	nop
 8002d90:	bf00      	nop
 8002d92:	e7fd      	b.n	8002d90 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002d94:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d01e      	beq.n	8002dda <xTaskCreateStatic+0xb2>
 8002d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d01b      	beq.n	8002dda <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002daa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002db4:	2300      	movs	r3, #0
 8002db6:	9303      	str	r3, [sp, #12]
 8002db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dba:	9302      	str	r3, [sp, #8]
 8002dbc:	f107 0314 	add.w	r3, r7, #20
 8002dc0:	9301      	str	r3, [sp, #4]
 8002dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	68b9      	ldr	r1, [r7, #8]
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 f850 	bl	8002e72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002dd2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002dd4:	f000 f8de 	bl	8002f94 <prvAddNewTaskToReadyList>
 8002dd8:	e001      	b.n	8002dde <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002dde:	697b      	ldr	r3, [r7, #20]
	}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3728      	adds	r7, #40	@ 0x28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08c      	sub	sp, #48	@ 0x30
 8002dec:	af04      	add	r7, sp, #16
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	4613      	mov	r3, r2
 8002df6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002df8:	88fb      	ldrh	r3, [r7, #6]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f001 fc4d 	bl	800469c <pvPortMalloc>
 8002e02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00e      	beq.n	8002e28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e0a:	205c      	movs	r0, #92	@ 0x5c
 8002e0c:	f001 fc46 	bl	800469c <pvPortMalloc>
 8002e10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e1e:	e005      	b.n	8002e2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e20:	6978      	ldr	r0, [r7, #20]
 8002e22:	f001 fd09 	bl	8004838 <vPortFree>
 8002e26:	e001      	b.n	8002e2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d017      	beq.n	8002e62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e3a:	88fa      	ldrh	r2, [r7, #6]
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	9303      	str	r3, [sp, #12]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	9302      	str	r3, [sp, #8]
 8002e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e46:	9301      	str	r3, [sp, #4]
 8002e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	68b9      	ldr	r1, [r7, #8]
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 f80e 	bl	8002e72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e56:	69f8      	ldr	r0, [r7, #28]
 8002e58:	f000 f89c 	bl	8002f94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	61bb      	str	r3, [r7, #24]
 8002e60:	e002      	b.n	8002e68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e62:	f04f 33ff 	mov.w	r3, #4294967295
 8002e66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e68:	69bb      	ldr	r3, [r7, #24]
	}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3720      	adds	r7, #32
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b088      	sub	sp, #32
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	607a      	str	r2, [r7, #4]
 8002e7e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e82:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	461a      	mov	r2, r3
 8002e8a:	21a5      	movs	r1, #165	@ 0xa5
 8002e8c:	f001 ffec 	bl	8004e68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	f023 0307 	bic.w	r3, r3, #7
 8002ea8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00b      	beq.n	8002ecc <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb8:	f383 8811 	msr	BASEPRI, r3
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	617b      	str	r3, [r7, #20]
}
 8002ec6:	bf00      	nop
 8002ec8:	bf00      	nop
 8002eca:	e7fd      	b.n	8002ec8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d01f      	beq.n	8002f12 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61fb      	str	r3, [r7, #28]
 8002ed6:	e012      	b.n	8002efe <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	4413      	add	r3, r2
 8002ede:	7819      	ldrb	r1, [r3, #0]
 8002ee0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3334      	adds	r3, #52	@ 0x34
 8002ee8:	460a      	mov	r2, r1
 8002eea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d006      	beq.n	8002f06 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	3301      	adds	r3, #1
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	2b0f      	cmp	r3, #15
 8002f02:	d9e9      	bls.n	8002ed8 <prvInitialiseNewTask+0x66>
 8002f04:	e000      	b.n	8002f08 <prvInitialiseNewTask+0x96>
			{
				break;
 8002f06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f10:	e003      	b.n	8002f1a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1c:	2b37      	cmp	r3, #55	@ 0x37
 8002f1e:	d901      	bls.n	8002f24 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f20:	2337      	movs	r3, #55	@ 0x37
 8002f22:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f28:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f2e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f32:	2200      	movs	r2, #0
 8002f34:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f38:	3304      	adds	r3, #4
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff f966 	bl	800220c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f42:	3318      	adds	r3, #24
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff f961 	bl	800220c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f52:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f5e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f62:	2200      	movs	r2, #0
 8002f64:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	68f9      	ldr	r1, [r7, #12]
 8002f72:	69b8      	ldr	r0, [r7, #24]
 8002f74:	f001 f93e 	bl	80041f4 <pxPortInitialiseStack>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f8a:	bf00      	nop
 8002f8c:	3720      	adds	r7, #32
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f9c:	f001 fa5c 	bl	8004458 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8003058 <prvAddNewTaskToReadyList+0xc4>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	4a2c      	ldr	r2, [pc, #176]	@ (8003058 <prvAddNewTaskToReadyList+0xc4>)
 8002fa8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002faa:	4b2c      	ldr	r3, [pc, #176]	@ (800305c <prvAddNewTaskToReadyList+0xc8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d109      	bne.n	8002fc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002fb2:	4a2a      	ldr	r2, [pc, #168]	@ (800305c <prvAddNewTaskToReadyList+0xc8>)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002fb8:	4b27      	ldr	r3, [pc, #156]	@ (8003058 <prvAddNewTaskToReadyList+0xc4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d110      	bne.n	8002fe2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002fc0:	f000 fc1e 	bl	8003800 <prvInitialiseTaskLists>
 8002fc4:	e00d      	b.n	8002fe2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002fc6:	4b26      	ldr	r3, [pc, #152]	@ (8003060 <prvAddNewTaskToReadyList+0xcc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d109      	bne.n	8002fe2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002fce:	4b23      	ldr	r3, [pc, #140]	@ (800305c <prvAddNewTaskToReadyList+0xc8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d802      	bhi.n	8002fe2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002fdc:	4a1f      	ldr	r2, [pc, #124]	@ (800305c <prvAddNewTaskToReadyList+0xc8>)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002fe2:	4b20      	ldr	r3, [pc, #128]	@ (8003064 <prvAddNewTaskToReadyList+0xd0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8003064 <prvAddNewTaskToReadyList+0xd0>)
 8002fea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002fec:	4b1d      	ldr	r3, [pc, #116]	@ (8003064 <prvAddNewTaskToReadyList+0xd0>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8003068 <prvAddNewTaskToReadyList+0xd4>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d903      	bls.n	8003008 <prvAddNewTaskToReadyList+0x74>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003004:	4a18      	ldr	r2, [pc, #96]	@ (8003068 <prvAddNewTaskToReadyList+0xd4>)
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4a15      	ldr	r2, [pc, #84]	@ (800306c <prvAddNewTaskToReadyList+0xd8>)
 8003016:	441a      	add	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3304      	adds	r3, #4
 800301c:	4619      	mov	r1, r3
 800301e:	4610      	mov	r0, r2
 8003020:	f7ff f901 	bl	8002226 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003024:	f001 fa4a 	bl	80044bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003028:	4b0d      	ldr	r3, [pc, #52]	@ (8003060 <prvAddNewTaskToReadyList+0xcc>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00e      	beq.n	800304e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003030:	4b0a      	ldr	r3, [pc, #40]	@ (800305c <prvAddNewTaskToReadyList+0xc8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303a:	429a      	cmp	r2, r3
 800303c:	d207      	bcs.n	800304e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800303e:	4b0c      	ldr	r3, [pc, #48]	@ (8003070 <prvAddNewTaskToReadyList+0xdc>)
 8003040:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20000cb4 	.word	0x20000cb4
 800305c:	200007e0 	.word	0x200007e0
 8003060:	20000cc0 	.word	0x20000cc0
 8003064:	20000cd0 	.word	0x20000cd0
 8003068:	20000cbc 	.word	0x20000cbc
 800306c:	200007e4 	.word	0x200007e4
 8003070:	e000ed04 	.word	0xe000ed04

08003074 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d018      	beq.n	80030b8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003086:	4b14      	ldr	r3, [pc, #80]	@ (80030d8 <vTaskDelay+0x64>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00b      	beq.n	80030a6 <vTaskDelay+0x32>
	__asm volatile
 800308e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003092:	f383 8811 	msr	BASEPRI, r3
 8003096:	f3bf 8f6f 	isb	sy
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	60bb      	str	r3, [r7, #8]
}
 80030a0:	bf00      	nop
 80030a2:	bf00      	nop
 80030a4:	e7fd      	b.n	80030a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80030a6:	f000 f883 	bl	80031b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80030aa:	2100      	movs	r1, #0
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fcf3 	bl	8003a98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80030b2:	f000 f88b 	bl	80031cc <xTaskResumeAll>
 80030b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d107      	bne.n	80030ce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80030be:	4b07      	ldr	r3, [pc, #28]	@ (80030dc <vTaskDelay+0x68>)
 80030c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030ce:	bf00      	nop
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20000cdc 	.word	0x20000cdc
 80030dc:	e000ed04 	.word	0xe000ed04

080030e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08a      	sub	sp, #40	@ 0x28
 80030e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80030ee:	463a      	mov	r2, r7
 80030f0:	1d39      	adds	r1, r7, #4
 80030f2:	f107 0308 	add.w	r3, r7, #8
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff f834 	bl	8002164 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80030fc:	6839      	ldr	r1, [r7, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	9202      	str	r2, [sp, #8]
 8003104:	9301      	str	r3, [sp, #4]
 8003106:	2300      	movs	r3, #0
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	2300      	movs	r3, #0
 800310c:	460a      	mov	r2, r1
 800310e:	4922      	ldr	r1, [pc, #136]	@ (8003198 <vTaskStartScheduler+0xb8>)
 8003110:	4822      	ldr	r0, [pc, #136]	@ (800319c <vTaskStartScheduler+0xbc>)
 8003112:	f7ff fe09 	bl	8002d28 <xTaskCreateStatic>
 8003116:	4603      	mov	r3, r0
 8003118:	4a21      	ldr	r2, [pc, #132]	@ (80031a0 <vTaskStartScheduler+0xc0>)
 800311a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800311c:	4b20      	ldr	r3, [pc, #128]	@ (80031a0 <vTaskStartScheduler+0xc0>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003124:	2301      	movs	r3, #1
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	e001      	b.n	800312e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d102      	bne.n	800313a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003134:	f000 fd04 	bl	8003b40 <xTimerCreateTimerTask>
 8003138:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d116      	bne.n	800316e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	613b      	str	r3, [r7, #16]
}
 8003152:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003154:	4b13      	ldr	r3, [pc, #76]	@ (80031a4 <vTaskStartScheduler+0xc4>)
 8003156:	f04f 32ff 	mov.w	r2, #4294967295
 800315a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800315c:	4b12      	ldr	r3, [pc, #72]	@ (80031a8 <vTaskStartScheduler+0xc8>)
 800315e:	2201      	movs	r2, #1
 8003160:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003162:	4b12      	ldr	r3, [pc, #72]	@ (80031ac <vTaskStartScheduler+0xcc>)
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003168:	f001 f8d2 	bl	8004310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800316c:	e00f      	b.n	800318e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003174:	d10b      	bne.n	800318e <vTaskStartScheduler+0xae>
	__asm volatile
 8003176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800317a:	f383 8811 	msr	BASEPRI, r3
 800317e:	f3bf 8f6f 	isb	sy
 8003182:	f3bf 8f4f 	dsb	sy
 8003186:	60fb      	str	r3, [r7, #12]
}
 8003188:	bf00      	nop
 800318a:	bf00      	nop
 800318c:	e7fd      	b.n	800318a <vTaskStartScheduler+0xaa>
}
 800318e:	bf00      	nop
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	08005424 	.word	0x08005424
 800319c:	080037d1 	.word	0x080037d1
 80031a0:	20000cd8 	.word	0x20000cd8
 80031a4:	20000cd4 	.word	0x20000cd4
 80031a8:	20000cc0 	.word	0x20000cc0
 80031ac:	20000cb8 	.word	0x20000cb8

080031b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80031b4:	4b04      	ldr	r3, [pc, #16]	@ (80031c8 <vTaskSuspendAll+0x18>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	3301      	adds	r3, #1
 80031ba:	4a03      	ldr	r2, [pc, #12]	@ (80031c8 <vTaskSuspendAll+0x18>)
 80031bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80031be:	bf00      	nop
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	20000cdc 	.word	0x20000cdc

080031cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80031d6:	2300      	movs	r3, #0
 80031d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80031da:	4b42      	ldr	r3, [pc, #264]	@ (80032e4 <xTaskResumeAll+0x118>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10b      	bne.n	80031fa <xTaskResumeAll+0x2e>
	__asm volatile
 80031e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031e6:	f383 8811 	msr	BASEPRI, r3
 80031ea:	f3bf 8f6f 	isb	sy
 80031ee:	f3bf 8f4f 	dsb	sy
 80031f2:	603b      	str	r3, [r7, #0]
}
 80031f4:	bf00      	nop
 80031f6:	bf00      	nop
 80031f8:	e7fd      	b.n	80031f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80031fa:	f001 f92d 	bl	8004458 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80031fe:	4b39      	ldr	r3, [pc, #228]	@ (80032e4 <xTaskResumeAll+0x118>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	3b01      	subs	r3, #1
 8003204:	4a37      	ldr	r2, [pc, #220]	@ (80032e4 <xTaskResumeAll+0x118>)
 8003206:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003208:	4b36      	ldr	r3, [pc, #216]	@ (80032e4 <xTaskResumeAll+0x118>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d162      	bne.n	80032d6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003210:	4b35      	ldr	r3, [pc, #212]	@ (80032e8 <xTaskResumeAll+0x11c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d05e      	beq.n	80032d6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003218:	e02f      	b.n	800327a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800321a:	4b34      	ldr	r3, [pc, #208]	@ (80032ec <xTaskResumeAll+0x120>)
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	3318      	adds	r3, #24
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff f85a 	bl	80022e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	3304      	adds	r3, #4
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff f855 	bl	80022e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800323a:	4b2d      	ldr	r3, [pc, #180]	@ (80032f0 <xTaskResumeAll+0x124>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d903      	bls.n	800324a <xTaskResumeAll+0x7e>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003246:	4a2a      	ldr	r2, [pc, #168]	@ (80032f0 <xTaskResumeAll+0x124>)
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4a27      	ldr	r2, [pc, #156]	@ (80032f4 <xTaskResumeAll+0x128>)
 8003258:	441a      	add	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	3304      	adds	r3, #4
 800325e:	4619      	mov	r1, r3
 8003260:	4610      	mov	r0, r2
 8003262:	f7fe ffe0 	bl	8002226 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800326a:	4b23      	ldr	r3, [pc, #140]	@ (80032f8 <xTaskResumeAll+0x12c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003270:	429a      	cmp	r2, r3
 8003272:	d302      	bcc.n	800327a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003274:	4b21      	ldr	r3, [pc, #132]	@ (80032fc <xTaskResumeAll+0x130>)
 8003276:	2201      	movs	r2, #1
 8003278:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800327a:	4b1c      	ldr	r3, [pc, #112]	@ (80032ec <xTaskResumeAll+0x120>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1cb      	bne.n	800321a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003288:	f000 fb58 	bl	800393c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800328c:	4b1c      	ldr	r3, [pc, #112]	@ (8003300 <xTaskResumeAll+0x134>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d010      	beq.n	80032ba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003298:	f000 f846 	bl	8003328 <xTaskIncrementTick>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80032a2:	4b16      	ldr	r3, [pc, #88]	@ (80032fc <xTaskResumeAll+0x130>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1f1      	bne.n	8003298 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80032b4:	4b12      	ldr	r3, [pc, #72]	@ (8003300 <xTaskResumeAll+0x134>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80032ba:	4b10      	ldr	r3, [pc, #64]	@ (80032fc <xTaskResumeAll+0x130>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d009      	beq.n	80032d6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80032c2:	2301      	movs	r3, #1
 80032c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80032c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003304 <xTaskResumeAll+0x138>)
 80032c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80032d6:	f001 f8f1 	bl	80044bc <vPortExitCritical>

	return xAlreadyYielded;
 80032da:	68bb      	ldr	r3, [r7, #8]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20000cdc 	.word	0x20000cdc
 80032e8:	20000cb4 	.word	0x20000cb4
 80032ec:	20000c74 	.word	0x20000c74
 80032f0:	20000cbc 	.word	0x20000cbc
 80032f4:	200007e4 	.word	0x200007e4
 80032f8:	200007e0 	.word	0x200007e0
 80032fc:	20000cc8 	.word	0x20000cc8
 8003300:	20000cc4 	.word	0x20000cc4
 8003304:	e000ed04 	.word	0xe000ed04

08003308 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800330e:	4b05      	ldr	r3, [pc, #20]	@ (8003324 <xTaskGetTickCount+0x1c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003314:	687b      	ldr	r3, [r7, #4]
}
 8003316:	4618      	mov	r0, r3
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	20000cb8 	.word	0x20000cb8

08003328 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003332:	4b4f      	ldr	r3, [pc, #316]	@ (8003470 <xTaskIncrementTick+0x148>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	f040 8090 	bne.w	800345c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800333c:	4b4d      	ldr	r3, [pc, #308]	@ (8003474 <xTaskIncrementTick+0x14c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	3301      	adds	r3, #1
 8003342:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003344:	4a4b      	ldr	r2, [pc, #300]	@ (8003474 <xTaskIncrementTick+0x14c>)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d121      	bne.n	8003394 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003350:	4b49      	ldr	r3, [pc, #292]	@ (8003478 <xTaskIncrementTick+0x150>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00b      	beq.n	8003372 <xTaskIncrementTick+0x4a>
	__asm volatile
 800335a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800335e:	f383 8811 	msr	BASEPRI, r3
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	603b      	str	r3, [r7, #0]
}
 800336c:	bf00      	nop
 800336e:	bf00      	nop
 8003370:	e7fd      	b.n	800336e <xTaskIncrementTick+0x46>
 8003372:	4b41      	ldr	r3, [pc, #260]	@ (8003478 <xTaskIncrementTick+0x150>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	4b40      	ldr	r3, [pc, #256]	@ (800347c <xTaskIncrementTick+0x154>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a3e      	ldr	r2, [pc, #248]	@ (8003478 <xTaskIncrementTick+0x150>)
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	4a3e      	ldr	r2, [pc, #248]	@ (800347c <xTaskIncrementTick+0x154>)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	4b3e      	ldr	r3, [pc, #248]	@ (8003480 <xTaskIncrementTick+0x158>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	3301      	adds	r3, #1
 800338c:	4a3c      	ldr	r2, [pc, #240]	@ (8003480 <xTaskIncrementTick+0x158>)
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	f000 fad4 	bl	800393c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003394:	4b3b      	ldr	r3, [pc, #236]	@ (8003484 <xTaskIncrementTick+0x15c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	429a      	cmp	r2, r3
 800339c:	d349      	bcc.n	8003432 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800339e:	4b36      	ldr	r3, [pc, #216]	@ (8003478 <xTaskIncrementTick+0x150>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d104      	bne.n	80033b2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033a8:	4b36      	ldr	r3, [pc, #216]	@ (8003484 <xTaskIncrementTick+0x15c>)
 80033aa:	f04f 32ff 	mov.w	r2, #4294967295
 80033ae:	601a      	str	r2, [r3, #0]
					break;
 80033b0:	e03f      	b.n	8003432 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033b2:	4b31      	ldr	r3, [pc, #196]	@ (8003478 <xTaskIncrementTick+0x150>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d203      	bcs.n	80033d2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80033ca:	4a2e      	ldr	r2, [pc, #184]	@ (8003484 <xTaskIncrementTick+0x15c>)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80033d0:	e02f      	b.n	8003432 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	3304      	adds	r3, #4
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe ff82 	bl	80022e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d004      	beq.n	80033ee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	3318      	adds	r3, #24
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fe ff79 	bl	80022e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033f2:	4b25      	ldr	r3, [pc, #148]	@ (8003488 <xTaskIncrementTick+0x160>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d903      	bls.n	8003402 <xTaskIncrementTick+0xda>
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fe:	4a22      	ldr	r2, [pc, #136]	@ (8003488 <xTaskIncrementTick+0x160>)
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4a1f      	ldr	r2, [pc, #124]	@ (800348c <xTaskIncrementTick+0x164>)
 8003410:	441a      	add	r2, r3
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	3304      	adds	r3, #4
 8003416:	4619      	mov	r1, r3
 8003418:	4610      	mov	r0, r2
 800341a:	f7fe ff04 	bl	8002226 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003422:	4b1b      	ldr	r3, [pc, #108]	@ (8003490 <xTaskIncrementTick+0x168>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003428:	429a      	cmp	r2, r3
 800342a:	d3b8      	bcc.n	800339e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800342c:	2301      	movs	r3, #1
 800342e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003430:	e7b5      	b.n	800339e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003432:	4b17      	ldr	r3, [pc, #92]	@ (8003490 <xTaskIncrementTick+0x168>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003438:	4914      	ldr	r1, [pc, #80]	@ (800348c <xTaskIncrementTick+0x164>)
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d901      	bls.n	800344e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800344a:	2301      	movs	r3, #1
 800344c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800344e:	4b11      	ldr	r3, [pc, #68]	@ (8003494 <xTaskIncrementTick+0x16c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d007      	beq.n	8003466 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003456:	2301      	movs	r3, #1
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	e004      	b.n	8003466 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800345c:	4b0e      	ldr	r3, [pc, #56]	@ (8003498 <xTaskIncrementTick+0x170>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3301      	adds	r3, #1
 8003462:	4a0d      	ldr	r2, [pc, #52]	@ (8003498 <xTaskIncrementTick+0x170>)
 8003464:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003466:	697b      	ldr	r3, [r7, #20]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20000cdc 	.word	0x20000cdc
 8003474:	20000cb8 	.word	0x20000cb8
 8003478:	20000c6c 	.word	0x20000c6c
 800347c:	20000c70 	.word	0x20000c70
 8003480:	20000ccc 	.word	0x20000ccc
 8003484:	20000cd4 	.word	0x20000cd4
 8003488:	20000cbc 	.word	0x20000cbc
 800348c:	200007e4 	.word	0x200007e4
 8003490:	200007e0 	.word	0x200007e0
 8003494:	20000cc8 	.word	0x20000cc8
 8003498:	20000cc4 	.word	0x20000cc4

0800349c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80034a2:	4b28      	ldr	r3, [pc, #160]	@ (8003544 <vTaskSwitchContext+0xa8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80034aa:	4b27      	ldr	r3, [pc, #156]	@ (8003548 <vTaskSwitchContext+0xac>)
 80034ac:	2201      	movs	r2, #1
 80034ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80034b0:	e042      	b.n	8003538 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80034b2:	4b25      	ldr	r3, [pc, #148]	@ (8003548 <vTaskSwitchContext+0xac>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034b8:	4b24      	ldr	r3, [pc, #144]	@ (800354c <vTaskSwitchContext+0xb0>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	e011      	b.n	80034e4 <vTaskSwitchContext+0x48>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10b      	bne.n	80034de <vTaskSwitchContext+0x42>
	__asm volatile
 80034c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ca:	f383 8811 	msr	BASEPRI, r3
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	607b      	str	r3, [r7, #4]
}
 80034d8:	bf00      	nop
 80034da:	bf00      	nop
 80034dc:	e7fd      	b.n	80034da <vTaskSwitchContext+0x3e>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	3b01      	subs	r3, #1
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	491a      	ldr	r1, [pc, #104]	@ (8003550 <vTaskSwitchContext+0xb4>)
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0e3      	beq.n	80034c0 <vTaskSwitchContext+0x24>
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4a13      	ldr	r2, [pc, #76]	@ (8003550 <vTaskSwitchContext+0xb4>)
 8003504:	4413      	add	r3, r2
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	605a      	str	r2, [r3, #4]
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	3308      	adds	r3, #8
 800351a:	429a      	cmp	r2, r3
 800351c:	d104      	bne.n	8003528 <vTaskSwitchContext+0x8c>
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	605a      	str	r2, [r3, #4]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	4a09      	ldr	r2, [pc, #36]	@ (8003554 <vTaskSwitchContext+0xb8>)
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	4a06      	ldr	r2, [pc, #24]	@ (800354c <vTaskSwitchContext+0xb0>)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6013      	str	r3, [r2, #0]
}
 8003538:	bf00      	nop
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	20000cdc 	.word	0x20000cdc
 8003548:	20000cc8 	.word	0x20000cc8
 800354c:	20000cbc 	.word	0x20000cbc
 8003550:	200007e4 	.word	0x200007e4
 8003554:	200007e0 	.word	0x200007e0

08003558 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10b      	bne.n	8003580 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800356c:	f383 8811 	msr	BASEPRI, r3
 8003570:	f3bf 8f6f 	isb	sy
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	60fb      	str	r3, [r7, #12]
}
 800357a:	bf00      	nop
 800357c:	bf00      	nop
 800357e:	e7fd      	b.n	800357c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003580:	4b07      	ldr	r3, [pc, #28]	@ (80035a0 <vTaskPlaceOnEventList+0x48>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3318      	adds	r3, #24
 8003586:	4619      	mov	r1, r3
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7fe fe70 	bl	800226e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800358e:	2101      	movs	r1, #1
 8003590:	6838      	ldr	r0, [r7, #0]
 8003592:	f000 fa81 	bl	8003a98 <prvAddCurrentTaskToDelayedList>
}
 8003596:	bf00      	nop
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	200007e0 	.word	0x200007e0

080035a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10b      	bne.n	80035ce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80035b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ba:	f383 8811 	msr	BASEPRI, r3
 80035be:	f3bf 8f6f 	isb	sy
 80035c2:	f3bf 8f4f 	dsb	sy
 80035c6:	617b      	str	r3, [r7, #20]
}
 80035c8:	bf00      	nop
 80035ca:	bf00      	nop
 80035cc:	e7fd      	b.n	80035ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035ce:	4b0a      	ldr	r3, [pc, #40]	@ (80035f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3318      	adds	r3, #24
 80035d4:	4619      	mov	r1, r3
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f7fe fe25 	bl	8002226 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80035e2:	f04f 33ff 	mov.w	r3, #4294967295
 80035e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	68b8      	ldr	r0, [r7, #8]
 80035ec:	f000 fa54 	bl	8003a98 <prvAddCurrentTaskToDelayedList>
	}
 80035f0:	bf00      	nop
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	200007e0 	.word	0x200007e0

080035fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10b      	bne.n	800362a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003616:	f383 8811 	msr	BASEPRI, r3
 800361a:	f3bf 8f6f 	isb	sy
 800361e:	f3bf 8f4f 	dsb	sy
 8003622:	60fb      	str	r3, [r7, #12]
}
 8003624:	bf00      	nop
 8003626:	bf00      	nop
 8003628:	e7fd      	b.n	8003626 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	3318      	adds	r3, #24
 800362e:	4618      	mov	r0, r3
 8003630:	f7fe fe56 	bl	80022e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003634:	4b1d      	ldr	r3, [pc, #116]	@ (80036ac <xTaskRemoveFromEventList+0xb0>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d11d      	bne.n	8003678 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	3304      	adds	r3, #4
 8003640:	4618      	mov	r0, r3
 8003642:	f7fe fe4d 	bl	80022e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800364a:	4b19      	ldr	r3, [pc, #100]	@ (80036b0 <xTaskRemoveFromEventList+0xb4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d903      	bls.n	800365a <xTaskRemoveFromEventList+0x5e>
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003656:	4a16      	ldr	r2, [pc, #88]	@ (80036b0 <xTaskRemoveFromEventList+0xb4>)
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4a13      	ldr	r2, [pc, #76]	@ (80036b4 <xTaskRemoveFromEventList+0xb8>)
 8003668:	441a      	add	r2, r3
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	3304      	adds	r3, #4
 800366e:	4619      	mov	r1, r3
 8003670:	4610      	mov	r0, r2
 8003672:	f7fe fdd8 	bl	8002226 <vListInsertEnd>
 8003676:	e005      	b.n	8003684 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	3318      	adds	r3, #24
 800367c:	4619      	mov	r1, r3
 800367e:	480e      	ldr	r0, [pc, #56]	@ (80036b8 <xTaskRemoveFromEventList+0xbc>)
 8003680:	f7fe fdd1 	bl	8002226 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003688:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <xTaskRemoveFromEventList+0xc0>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368e:	429a      	cmp	r2, r3
 8003690:	d905      	bls.n	800369e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003692:	2301      	movs	r3, #1
 8003694:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003696:	4b0a      	ldr	r3, [pc, #40]	@ (80036c0 <xTaskRemoveFromEventList+0xc4>)
 8003698:	2201      	movs	r2, #1
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	e001      	b.n	80036a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80036a2:	697b      	ldr	r3, [r7, #20]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20000cdc 	.word	0x20000cdc
 80036b0:	20000cbc 	.word	0x20000cbc
 80036b4:	200007e4 	.word	0x200007e4
 80036b8:	20000c74 	.word	0x20000c74
 80036bc:	200007e0 	.word	0x200007e0
 80036c0:	20000cc8 	.word	0x20000cc8

080036c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80036cc:	4b06      	ldr	r3, [pc, #24]	@ (80036e8 <vTaskInternalSetTimeOutState+0x24>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80036d4:	4b05      	ldr	r3, [pc, #20]	@ (80036ec <vTaskInternalSetTimeOutState+0x28>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	605a      	str	r2, [r3, #4]
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	20000ccc 	.word	0x20000ccc
 80036ec:	20000cb8 	.word	0x20000cb8

080036f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b088      	sub	sp, #32
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10b      	bne.n	8003718 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003704:	f383 8811 	msr	BASEPRI, r3
 8003708:	f3bf 8f6f 	isb	sy
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	613b      	str	r3, [r7, #16]
}
 8003712:	bf00      	nop
 8003714:	bf00      	nop
 8003716:	e7fd      	b.n	8003714 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10b      	bne.n	8003736 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800371e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003722:	f383 8811 	msr	BASEPRI, r3
 8003726:	f3bf 8f6f 	isb	sy
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	60fb      	str	r3, [r7, #12]
}
 8003730:	bf00      	nop
 8003732:	bf00      	nop
 8003734:	e7fd      	b.n	8003732 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003736:	f000 fe8f 	bl	8004458 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800373a:	4b1d      	ldr	r3, [pc, #116]	@ (80037b0 <xTaskCheckForTimeOut+0xc0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003752:	d102      	bne.n	800375a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003754:	2300      	movs	r3, #0
 8003756:	61fb      	str	r3, [r7, #28]
 8003758:	e023      	b.n	80037a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	4b15      	ldr	r3, [pc, #84]	@ (80037b4 <xTaskCheckForTimeOut+0xc4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d007      	beq.n	8003776 <xTaskCheckForTimeOut+0x86>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	429a      	cmp	r2, r3
 800376e:	d302      	bcc.n	8003776 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003770:	2301      	movs	r3, #1
 8003772:	61fb      	str	r3, [r7, #28]
 8003774:	e015      	b.n	80037a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	429a      	cmp	r2, r3
 800377e:	d20b      	bcs.n	8003798 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	1ad2      	subs	r2, r2, r3
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7ff ff99 	bl	80036c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	e004      	b.n	80037a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800379e:	2301      	movs	r3, #1
 80037a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80037a2:	f000 fe8b 	bl	80044bc <vPortExitCritical>

	return xReturn;
 80037a6:	69fb      	ldr	r3, [r7, #28]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3720      	adds	r7, #32
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	20000cb8 	.word	0x20000cb8
 80037b4:	20000ccc 	.word	0x20000ccc

080037b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80037bc:	4b03      	ldr	r3, [pc, #12]	@ (80037cc <vTaskMissedYield+0x14>)
 80037be:	2201      	movs	r2, #1
 80037c0:	601a      	str	r2, [r3, #0]
}
 80037c2:	bf00      	nop
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	20000cc8 	.word	0x20000cc8

080037d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80037d8:	f000 f852 	bl	8003880 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037dc:	4b06      	ldr	r3, [pc, #24]	@ (80037f8 <prvIdleTask+0x28>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d9f9      	bls.n	80037d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80037e4:	4b05      	ldr	r3, [pc, #20]	@ (80037fc <prvIdleTask+0x2c>)
 80037e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80037f4:	e7f0      	b.n	80037d8 <prvIdleTask+0x8>
 80037f6:	bf00      	nop
 80037f8:	200007e4 	.word	0x200007e4
 80037fc:	e000ed04 	.word	0xe000ed04

08003800 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003806:	2300      	movs	r3, #0
 8003808:	607b      	str	r3, [r7, #4]
 800380a:	e00c      	b.n	8003826 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4a12      	ldr	r2, [pc, #72]	@ (8003860 <prvInitialiseTaskLists+0x60>)
 8003818:	4413      	add	r3, r2
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe fcd6 	bl	80021cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3301      	adds	r3, #1
 8003824:	607b      	str	r3, [r7, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b37      	cmp	r3, #55	@ 0x37
 800382a:	d9ef      	bls.n	800380c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800382c:	480d      	ldr	r0, [pc, #52]	@ (8003864 <prvInitialiseTaskLists+0x64>)
 800382e:	f7fe fccd 	bl	80021cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003832:	480d      	ldr	r0, [pc, #52]	@ (8003868 <prvInitialiseTaskLists+0x68>)
 8003834:	f7fe fcca 	bl	80021cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003838:	480c      	ldr	r0, [pc, #48]	@ (800386c <prvInitialiseTaskLists+0x6c>)
 800383a:	f7fe fcc7 	bl	80021cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800383e:	480c      	ldr	r0, [pc, #48]	@ (8003870 <prvInitialiseTaskLists+0x70>)
 8003840:	f7fe fcc4 	bl	80021cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003844:	480b      	ldr	r0, [pc, #44]	@ (8003874 <prvInitialiseTaskLists+0x74>)
 8003846:	f7fe fcc1 	bl	80021cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800384a:	4b0b      	ldr	r3, [pc, #44]	@ (8003878 <prvInitialiseTaskLists+0x78>)
 800384c:	4a05      	ldr	r2, [pc, #20]	@ (8003864 <prvInitialiseTaskLists+0x64>)
 800384e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003850:	4b0a      	ldr	r3, [pc, #40]	@ (800387c <prvInitialiseTaskLists+0x7c>)
 8003852:	4a05      	ldr	r2, [pc, #20]	@ (8003868 <prvInitialiseTaskLists+0x68>)
 8003854:	601a      	str	r2, [r3, #0]
}
 8003856:	bf00      	nop
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	200007e4 	.word	0x200007e4
 8003864:	20000c44 	.word	0x20000c44
 8003868:	20000c58 	.word	0x20000c58
 800386c:	20000c74 	.word	0x20000c74
 8003870:	20000c88 	.word	0x20000c88
 8003874:	20000ca0 	.word	0x20000ca0
 8003878:	20000c6c 	.word	0x20000c6c
 800387c:	20000c70 	.word	0x20000c70

08003880 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003886:	e019      	b.n	80038bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003888:	f000 fde6 	bl	8004458 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800388c:	4b10      	ldr	r3, [pc, #64]	@ (80038d0 <prvCheckTasksWaitingTermination+0x50>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3304      	adds	r3, #4
 8003898:	4618      	mov	r0, r3
 800389a:	f7fe fd21 	bl	80022e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800389e:	4b0d      	ldr	r3, [pc, #52]	@ (80038d4 <prvCheckTasksWaitingTermination+0x54>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	4a0b      	ldr	r2, [pc, #44]	@ (80038d4 <prvCheckTasksWaitingTermination+0x54>)
 80038a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80038a8:	4b0b      	ldr	r3, [pc, #44]	@ (80038d8 <prvCheckTasksWaitingTermination+0x58>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3b01      	subs	r3, #1
 80038ae:	4a0a      	ldr	r2, [pc, #40]	@ (80038d8 <prvCheckTasksWaitingTermination+0x58>)
 80038b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80038b2:	f000 fe03 	bl	80044bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f810 	bl	80038dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038bc:	4b06      	ldr	r3, [pc, #24]	@ (80038d8 <prvCheckTasksWaitingTermination+0x58>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1e1      	bne.n	8003888 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20000c88 	.word	0x20000c88
 80038d4:	20000cb4 	.word	0x20000cb4
 80038d8:	20000c9c 	.word	0x20000c9c

080038dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d108      	bne.n	8003900 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 ffa0 	bl	8004838 <vPortFree>
				vPortFree( pxTCB );
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 ff9d 	bl	8004838 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80038fe:	e019      	b.n	8003934 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003906:	2b01      	cmp	r3, #1
 8003908:	d103      	bne.n	8003912 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 ff94 	bl	8004838 <vPortFree>
	}
 8003910:	e010      	b.n	8003934 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003918:	2b02      	cmp	r3, #2
 800391a:	d00b      	beq.n	8003934 <prvDeleteTCB+0x58>
	__asm volatile
 800391c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003920:	f383 8811 	msr	BASEPRI, r3
 8003924:	f3bf 8f6f 	isb	sy
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	60fb      	str	r3, [r7, #12]
}
 800392e:	bf00      	nop
 8003930:	bf00      	nop
 8003932:	e7fd      	b.n	8003930 <prvDeleteTCB+0x54>
	}
 8003934:	bf00      	nop
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003942:	4b0c      	ldr	r3, [pc, #48]	@ (8003974 <prvResetNextTaskUnblockTime+0x38>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d104      	bne.n	8003956 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800394c:	4b0a      	ldr	r3, [pc, #40]	@ (8003978 <prvResetNextTaskUnblockTime+0x3c>)
 800394e:	f04f 32ff 	mov.w	r2, #4294967295
 8003952:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003954:	e008      	b.n	8003968 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003956:	4b07      	ldr	r3, [pc, #28]	@ (8003974 <prvResetNextTaskUnblockTime+0x38>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	4a04      	ldr	r2, [pc, #16]	@ (8003978 <prvResetNextTaskUnblockTime+0x3c>)
 8003966:	6013      	str	r3, [r2, #0]
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	20000c6c 	.word	0x20000c6c
 8003978:	20000cd4 	.word	0x20000cd4

0800397c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003982:	4b0b      	ldr	r3, [pc, #44]	@ (80039b0 <xTaskGetSchedulerState+0x34>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d102      	bne.n	8003990 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800398a:	2301      	movs	r3, #1
 800398c:	607b      	str	r3, [r7, #4]
 800398e:	e008      	b.n	80039a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003990:	4b08      	ldr	r3, [pc, #32]	@ (80039b4 <xTaskGetSchedulerState+0x38>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d102      	bne.n	800399e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003998:	2302      	movs	r3, #2
 800399a:	607b      	str	r3, [r7, #4]
 800399c:	e001      	b.n	80039a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800399e:	2300      	movs	r3, #0
 80039a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80039a2:	687b      	ldr	r3, [r7, #4]
	}
 80039a4:	4618      	mov	r0, r3
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	20000cc0 	.word	0x20000cc0
 80039b4:	20000cdc 	.word	0x20000cdc

080039b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d058      	beq.n	8003a80 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80039ce:	4b2f      	ldr	r3, [pc, #188]	@ (8003a8c <xTaskPriorityDisinherit+0xd4>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d00b      	beq.n	80039f0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80039d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	60fb      	str	r3, [r7, #12]
}
 80039ea:	bf00      	nop
 80039ec:	bf00      	nop
 80039ee:	e7fd      	b.n	80039ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10b      	bne.n	8003a10 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80039f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	60bb      	str	r3, [r7, #8]
}
 8003a0a:	bf00      	nop
 8003a0c:	bf00      	nop
 8003a0e:	e7fd      	b.n	8003a0c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a14:	1e5a      	subs	r2, r3, #1
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d02c      	beq.n	8003a80 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d128      	bne.n	8003a80 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	3304      	adds	r3, #4
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe fc54 	bl	80022e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a44:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a50:	4b0f      	ldr	r3, [pc, #60]	@ (8003a90 <xTaskPriorityDisinherit+0xd8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d903      	bls.n	8003a60 <xTaskPriorityDisinherit+0xa8>
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5c:	4a0c      	ldr	r2, [pc, #48]	@ (8003a90 <xTaskPriorityDisinherit+0xd8>)
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4a09      	ldr	r2, [pc, #36]	@ (8003a94 <xTaskPriorityDisinherit+0xdc>)
 8003a6e:	441a      	add	r2, r3
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	3304      	adds	r3, #4
 8003a74:	4619      	mov	r1, r3
 8003a76:	4610      	mov	r0, r2
 8003a78:	f7fe fbd5 	bl	8002226 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a80:	697b      	ldr	r3, [r7, #20]
	}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	200007e0 	.word	0x200007e0
 8003a90:	20000cbc 	.word	0x20000cbc
 8003a94:	200007e4 	.word	0x200007e4

08003a98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003aa2:	4b21      	ldr	r3, [pc, #132]	@ (8003b28 <prvAddCurrentTaskToDelayedList+0x90>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003aa8:	4b20      	ldr	r3, [pc, #128]	@ (8003b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3304      	adds	r3, #4
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fe fc16 	bl	80022e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aba:	d10a      	bne.n	8003ad2 <prvAddCurrentTaskToDelayedList+0x3a>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d007      	beq.n	8003ad2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8003b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4819      	ldr	r0, [pc, #100]	@ (8003b30 <prvAddCurrentTaskToDelayedList+0x98>)
 8003acc:	f7fe fbab 	bl	8002226 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003ad0:	e026      	b.n	8003b20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ada:	4b14      	ldr	r3, [pc, #80]	@ (8003b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d209      	bcs.n	8003afe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003aea:	4b12      	ldr	r3, [pc, #72]	@ (8003b34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	4b0f      	ldr	r3, [pc, #60]	@ (8003b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	3304      	adds	r3, #4
 8003af4:	4619      	mov	r1, r3
 8003af6:	4610      	mov	r0, r2
 8003af8:	f7fe fbb9 	bl	800226e <vListInsert>
}
 8003afc:	e010      	b.n	8003b20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003afe:	4b0e      	ldr	r3, [pc, #56]	@ (8003b38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	4b0a      	ldr	r3, [pc, #40]	@ (8003b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3304      	adds	r3, #4
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	f7fe fbaf 	bl	800226e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b10:	4b0a      	ldr	r3, [pc, #40]	@ (8003b3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d202      	bcs.n	8003b20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003b1a:	4a08      	ldr	r2, [pc, #32]	@ (8003b3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	6013      	str	r3, [r2, #0]
}
 8003b20:	bf00      	nop
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	20000cb8 	.word	0x20000cb8
 8003b2c:	200007e0 	.word	0x200007e0
 8003b30:	20000ca0 	.word	0x20000ca0
 8003b34:	20000c70 	.word	0x20000c70
 8003b38:	20000c6c 	.word	0x20000c6c
 8003b3c:	20000cd4 	.word	0x20000cd4

08003b40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08a      	sub	sp, #40	@ 0x28
 8003b44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003b4a:	f000 fb13 	bl	8004174 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8003bc4 <xTimerCreateTimerTask+0x84>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d021      	beq.n	8003b9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003b5e:	1d3a      	adds	r2, r7, #4
 8003b60:	f107 0108 	add.w	r1, r7, #8
 8003b64:	f107 030c 	add.w	r3, r7, #12
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fe fb15 	bl	8002198 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	9202      	str	r2, [sp, #8]
 8003b76:	9301      	str	r3, [sp, #4]
 8003b78:	2302      	movs	r3, #2
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	460a      	mov	r2, r1
 8003b80:	4911      	ldr	r1, [pc, #68]	@ (8003bc8 <xTimerCreateTimerTask+0x88>)
 8003b82:	4812      	ldr	r0, [pc, #72]	@ (8003bcc <xTimerCreateTimerTask+0x8c>)
 8003b84:	f7ff f8d0 	bl	8002d28 <xTaskCreateStatic>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	4a11      	ldr	r2, [pc, #68]	@ (8003bd0 <xTimerCreateTimerTask+0x90>)
 8003b8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003b8e:	4b10      	ldr	r3, [pc, #64]	@ (8003bd0 <xTimerCreateTimerTask+0x90>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003b96:	2301      	movs	r3, #1
 8003b98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10b      	bne.n	8003bb8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	613b      	str	r3, [r7, #16]
}
 8003bb2:	bf00      	nop
 8003bb4:	bf00      	nop
 8003bb6:	e7fd      	b.n	8003bb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003bb8:	697b      	ldr	r3, [r7, #20]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000d10 	.word	0x20000d10
 8003bc8:	0800542c 	.word	0x0800542c
 8003bcc:	08003d0d 	.word	0x08003d0d
 8003bd0:	20000d14 	.word	0x20000d14

08003bd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08a      	sub	sp, #40	@ 0x28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10b      	bne.n	8003c04 <xTimerGenericCommand+0x30>
	__asm volatile
 8003bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf0:	f383 8811 	msr	BASEPRI, r3
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	623b      	str	r3, [r7, #32]
}
 8003bfe:	bf00      	nop
 8003c00:	bf00      	nop
 8003c02:	e7fd      	b.n	8003c00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003c04:	4b19      	ldr	r3, [pc, #100]	@ (8003c6c <xTimerGenericCommand+0x98>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d02a      	beq.n	8003c62 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b05      	cmp	r3, #5
 8003c1c:	dc18      	bgt.n	8003c50 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003c1e:	f7ff fead 	bl	800397c <xTaskGetSchedulerState>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d109      	bne.n	8003c3c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003c28:	4b10      	ldr	r3, [pc, #64]	@ (8003c6c <xTimerGenericCommand+0x98>)
 8003c2a:	6818      	ldr	r0, [r3, #0]
 8003c2c:	f107 0110 	add.w	r1, r7, #16
 8003c30:	2300      	movs	r3, #0
 8003c32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c34:	f7fe fc88 	bl	8002548 <xQueueGenericSend>
 8003c38:	6278      	str	r0, [r7, #36]	@ 0x24
 8003c3a:	e012      	b.n	8003c62 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c6c <xTimerGenericCommand+0x98>)
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	f107 0110 	add.w	r1, r7, #16
 8003c44:	2300      	movs	r3, #0
 8003c46:	2200      	movs	r2, #0
 8003c48:	f7fe fc7e 	bl	8002548 <xQueueGenericSend>
 8003c4c:	6278      	str	r0, [r7, #36]	@ 0x24
 8003c4e:	e008      	b.n	8003c62 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c50:	4b06      	ldr	r3, [pc, #24]	@ (8003c6c <xTimerGenericCommand+0x98>)
 8003c52:	6818      	ldr	r0, [r3, #0]
 8003c54:	f107 0110 	add.w	r1, r7, #16
 8003c58:	2300      	movs	r3, #0
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	f7fe fd76 	bl	800274c <xQueueGenericSendFromISR>
 8003c60:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3728      	adds	r7, #40	@ 0x28
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	20000d10 	.word	0x20000d10

08003c70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c7a:	4b23      	ldr	r3, [pc, #140]	@ (8003d08 <prvProcessExpiredTimer+0x98>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	3304      	adds	r3, #4
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fe fb29 	bl	80022e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d023      	beq.n	8003ce4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	699a      	ldr	r2, [r3, #24]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	18d1      	adds	r1, r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	6978      	ldr	r0, [r7, #20]
 8003caa:	f000 f8d5 	bl	8003e58 <prvInsertTimerInActiveList>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d020      	beq.n	8003cf6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	2300      	movs	r3, #0
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	6978      	ldr	r0, [r7, #20]
 8003cc0:	f7ff ff88 	bl	8003bd4 <xTimerGenericCommand>
 8003cc4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d114      	bne.n	8003cf6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	60fb      	str	r3, [r7, #12]
}
 8003cde:	bf00      	nop
 8003ce0:	bf00      	nop
 8003ce2:	e7fd      	b.n	8003ce0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	6978      	ldr	r0, [r7, #20]
 8003cfc:	4798      	blx	r3
}
 8003cfe:	bf00      	nop
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	20000d08 	.word	0x20000d08

08003d0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d14:	f107 0308 	add.w	r3, r7, #8
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 f859 	bl	8003dd0 <prvGetNextExpireTime>
 8003d1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4619      	mov	r1, r3
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 f805 	bl	8003d34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003d2a:	f000 f8d7 	bl	8003edc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d2e:	bf00      	nop
 8003d30:	e7f0      	b.n	8003d14 <prvTimerTask+0x8>
	...

08003d34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003d3e:	f7ff fa37 	bl	80031b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d42:	f107 0308 	add.w	r3, r7, #8
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 f866 	bl	8003e18 <prvSampleTimeNow>
 8003d4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d130      	bne.n	8003db6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10a      	bne.n	8003d70 <prvProcessTimerOrBlockTask+0x3c>
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d806      	bhi.n	8003d70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003d62:	f7ff fa33 	bl	80031cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d66:	68f9      	ldr	r1, [r7, #12]
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff ff81 	bl	8003c70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003d6e:	e024      	b.n	8003dba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d008      	beq.n	8003d88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d76:	4b13      	ldr	r3, [pc, #76]	@ (8003dc4 <prvProcessTimerOrBlockTask+0x90>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <prvProcessTimerOrBlockTask+0x50>
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <prvProcessTimerOrBlockTask+0x52>
 8003d84:	2300      	movs	r3, #0
 8003d86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d88:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc8 <prvProcessTimerOrBlockTask+0x94>)
 8003d8a:	6818      	ldr	r0, [r3, #0]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	4619      	mov	r1, r3
 8003d96:	f7fe ff93 	bl	8002cc0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003d9a:	f7ff fa17 	bl	80031cc <xTaskResumeAll>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10a      	bne.n	8003dba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003da4:	4b09      	ldr	r3, [pc, #36]	@ (8003dcc <prvProcessTimerOrBlockTask+0x98>)
 8003da6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	f3bf 8f6f 	isb	sy
}
 8003db4:	e001      	b.n	8003dba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003db6:	f7ff fa09 	bl	80031cc <xTaskResumeAll>
}
 8003dba:	bf00      	nop
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20000d0c 	.word	0x20000d0c
 8003dc8:	20000d10 	.word	0x20000d10
 8003dcc:	e000ed04 	.word	0xe000ed04

08003dd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8003e14 <prvGetNextExpireTime+0x44>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <prvGetNextExpireTime+0x16>
 8003de2:	2201      	movs	r2, #1
 8003de4:	e000      	b.n	8003de8 <prvGetNextExpireTime+0x18>
 8003de6:	2200      	movs	r2, #0
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d105      	bne.n	8003e00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003df4:	4b07      	ldr	r3, [pc, #28]	@ (8003e14 <prvGetNextExpireTime+0x44>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	e001      	b.n	8003e04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003e04:	68fb      	ldr	r3, [r7, #12]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	20000d08 	.word	0x20000d08

08003e18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003e20:	f7ff fa72 	bl	8003308 <xTaskGetTickCount>
 8003e24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003e26:	4b0b      	ldr	r3, [pc, #44]	@ (8003e54 <prvSampleTimeNow+0x3c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d205      	bcs.n	8003e3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003e30:	f000 f93a 	bl	80040a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	e002      	b.n	8003e42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003e42:	4a04      	ldr	r2, [pc, #16]	@ (8003e54 <prvSampleTimeNow+0x3c>)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003e48:	68fb      	ldr	r3, [r7, #12]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20000d18 	.word	0x20000d18

08003e58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d812      	bhi.n	8003ea4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	1ad2      	subs	r2, r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d302      	bcc.n	8003e92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	e01b      	b.n	8003eca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e92:	4b10      	ldr	r3, [pc, #64]	@ (8003ed4 <prvInsertTimerInActiveList+0x7c>)
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	f7fe f9e6 	bl	800226e <vListInsert>
 8003ea2:	e012      	b.n	8003eca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d206      	bcs.n	8003eba <prvInsertTimerInActiveList+0x62>
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d302      	bcc.n	8003eba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	e007      	b.n	8003eca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003eba:	4b07      	ldr	r3, [pc, #28]	@ (8003ed8 <prvInsertTimerInActiveList+0x80>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	f7fe f9d2 	bl	800226e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003eca:	697b      	ldr	r3, [r7, #20]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	20000d0c 	.word	0x20000d0c
 8003ed8:	20000d08 	.word	0x20000d08

08003edc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b08e      	sub	sp, #56	@ 0x38
 8003ee0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ee2:	e0ce      	b.n	8004082 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	da19      	bge.n	8003f1e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003eea:	1d3b      	adds	r3, r7, #4
 8003eec:	3304      	adds	r3, #4
 8003eee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10b      	bne.n	8003f0e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003efa:	f383 8811 	msr	BASEPRI, r3
 8003efe:	f3bf 8f6f 	isb	sy
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	61fb      	str	r3, [r7, #28]
}
 8003f08:	bf00      	nop
 8003f0a:	bf00      	nop
 8003f0c:	e7fd      	b.n	8003f0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f14:	6850      	ldr	r0, [r2, #4]
 8003f16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f18:	6892      	ldr	r2, [r2, #8]
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f2c0 80ae 	blt.w	8004082 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d004      	beq.n	8003f3c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f34:	3304      	adds	r3, #4
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fe f9d2 	bl	80022e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f3c:	463b      	mov	r3, r7
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff ff6a 	bl	8003e18 <prvSampleTimeNow>
 8003f44:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b09      	cmp	r3, #9
 8003f4a:	f200 8097 	bhi.w	800407c <prvProcessReceivedCommands+0x1a0>
 8003f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f54 <prvProcessReceivedCommands+0x78>)
 8003f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f54:	08003f7d 	.word	0x08003f7d
 8003f58:	08003f7d 	.word	0x08003f7d
 8003f5c:	08003f7d 	.word	0x08003f7d
 8003f60:	08003ff3 	.word	0x08003ff3
 8003f64:	08004007 	.word	0x08004007
 8003f68:	08004053 	.word	0x08004053
 8003f6c:	08003f7d 	.word	0x08003f7d
 8003f70:	08003f7d 	.word	0x08003f7d
 8003f74:	08003ff3 	.word	0x08003ff3
 8003f78:	08004007 	.word	0x08004007
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f82:	f043 0301 	orr.w	r3, r3, #1
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	18d1      	adds	r1, r2, r3
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f9c:	f7ff ff5c 	bl	8003e58 <prvInsertTimerInActiveList>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d06c      	beq.n	8004080 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d061      	beq.n	8004080 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	441a      	add	r2, r3
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	2300      	movs	r3, #0
 8003fca:	2100      	movs	r1, #0
 8003fcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fce:	f7ff fe01 	bl	8003bd4 <xTimerGenericCommand>
 8003fd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d152      	bne.n	8004080 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8003fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	61bb      	str	r3, [r7, #24]
}
 8003fec:	bf00      	nop
 8003fee:	bf00      	nop
 8003ff0:	e7fd      	b.n	8003fee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ff8:	f023 0301 	bic.w	r3, r3, #1
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004000:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004004:	e03d      	b.n	8004082 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004008:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800400c:	f043 0301 	orr.w	r3, r3, #1
 8004010:	b2da      	uxtb	r2, r3
 8004012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004014:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800401c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800401e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10b      	bne.n	800403e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800402a:	f383 8811 	msr	BASEPRI, r3
 800402e:	f3bf 8f6f 	isb	sy
 8004032:	f3bf 8f4f 	dsb	sy
 8004036:	617b      	str	r3, [r7, #20]
}
 8004038:	bf00      	nop
 800403a:	bf00      	nop
 800403c:	e7fd      	b.n	800403a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800403e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004040:	699a      	ldr	r2, [r3, #24]
 8004042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004044:	18d1      	adds	r1, r2, r3
 8004046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800404a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800404c:	f7ff ff04 	bl	8003e58 <prvInsertTimerInActiveList>
					break;
 8004050:	e017      	b.n	8004082 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004054:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d103      	bne.n	8004068 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004060:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004062:	f000 fbe9 	bl	8004838 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004066:	e00c      	b.n	8004082 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800406e:	f023 0301 	bic.w	r3, r3, #1
 8004072:	b2da      	uxtb	r2, r3
 8004074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004076:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800407a:	e002      	b.n	8004082 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800407c:	bf00      	nop
 800407e:	e000      	b.n	8004082 <prvProcessReceivedCommands+0x1a6>
					break;
 8004080:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004082:	4b08      	ldr	r3, [pc, #32]	@ (80040a4 <prvProcessReceivedCommands+0x1c8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	1d39      	adds	r1, r7, #4
 8004088:	2200      	movs	r2, #0
 800408a:	4618      	mov	r0, r3
 800408c:	f7fe fbfc 	bl	8002888 <xQueueReceive>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	f47f af26 	bne.w	8003ee4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004098:	bf00      	nop
 800409a:	bf00      	nop
 800409c:	3730      	adds	r7, #48	@ 0x30
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	20000d10 	.word	0x20000d10

080040a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040ae:	e049      	b.n	8004144 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040b0:	4b2e      	ldr	r3, [pc, #184]	@ (800416c <prvSwitchTimerLists+0xc4>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ba:	4b2c      	ldr	r3, [pc, #176]	@ (800416c <prvSwitchTimerLists+0xc4>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	3304      	adds	r3, #4
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fe f909 	bl	80022e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d02f      	beq.n	8004144 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4413      	add	r3, r2
 80040ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d90e      	bls.n	8004114 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004102:	4b1a      	ldr	r3, [pc, #104]	@ (800416c <prvSwitchTimerLists+0xc4>)
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	3304      	adds	r3, #4
 800410a:	4619      	mov	r1, r3
 800410c:	4610      	mov	r0, r2
 800410e:	f7fe f8ae 	bl	800226e <vListInsert>
 8004112:	e017      	b.n	8004144 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004114:	2300      	movs	r3, #0
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	2300      	movs	r3, #0
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	2100      	movs	r1, #0
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f7ff fd58 	bl	8003bd4 <xTimerGenericCommand>
 8004124:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10b      	bne.n	8004144 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800412c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	603b      	str	r3, [r7, #0]
}
 800413e:	bf00      	nop
 8004140:	bf00      	nop
 8004142:	e7fd      	b.n	8004140 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004144:	4b09      	ldr	r3, [pc, #36]	@ (800416c <prvSwitchTimerLists+0xc4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1b0      	bne.n	80040b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800414e:	4b07      	ldr	r3, [pc, #28]	@ (800416c <prvSwitchTimerLists+0xc4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004154:	4b06      	ldr	r3, [pc, #24]	@ (8004170 <prvSwitchTimerLists+0xc8>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a04      	ldr	r2, [pc, #16]	@ (800416c <prvSwitchTimerLists+0xc4>)
 800415a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800415c:	4a04      	ldr	r2, [pc, #16]	@ (8004170 <prvSwitchTimerLists+0xc8>)
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	6013      	str	r3, [r2, #0]
}
 8004162:	bf00      	nop
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20000d08 	.word	0x20000d08
 8004170:	20000d0c 	.word	0x20000d0c

08004174 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800417a:	f000 f96d 	bl	8004458 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800417e:	4b15      	ldr	r3, [pc, #84]	@ (80041d4 <prvCheckForValidListAndQueue+0x60>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d120      	bne.n	80041c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004186:	4814      	ldr	r0, [pc, #80]	@ (80041d8 <prvCheckForValidListAndQueue+0x64>)
 8004188:	f7fe f820 	bl	80021cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800418c:	4813      	ldr	r0, [pc, #76]	@ (80041dc <prvCheckForValidListAndQueue+0x68>)
 800418e:	f7fe f81d 	bl	80021cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004192:	4b13      	ldr	r3, [pc, #76]	@ (80041e0 <prvCheckForValidListAndQueue+0x6c>)
 8004194:	4a10      	ldr	r2, [pc, #64]	@ (80041d8 <prvCheckForValidListAndQueue+0x64>)
 8004196:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004198:	4b12      	ldr	r3, [pc, #72]	@ (80041e4 <prvCheckForValidListAndQueue+0x70>)
 800419a:	4a10      	ldr	r2, [pc, #64]	@ (80041dc <prvCheckForValidListAndQueue+0x68>)
 800419c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800419e:	2300      	movs	r3, #0
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	4b11      	ldr	r3, [pc, #68]	@ (80041e8 <prvCheckForValidListAndQueue+0x74>)
 80041a4:	4a11      	ldr	r2, [pc, #68]	@ (80041ec <prvCheckForValidListAndQueue+0x78>)
 80041a6:	2110      	movs	r1, #16
 80041a8:	200a      	movs	r0, #10
 80041aa:	f7fe f92d 	bl	8002408 <xQueueGenericCreateStatic>
 80041ae:	4603      	mov	r3, r0
 80041b0:	4a08      	ldr	r2, [pc, #32]	@ (80041d4 <prvCheckForValidListAndQueue+0x60>)
 80041b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80041b4:	4b07      	ldr	r3, [pc, #28]	@ (80041d4 <prvCheckForValidListAndQueue+0x60>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d005      	beq.n	80041c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80041bc:	4b05      	ldr	r3, [pc, #20]	@ (80041d4 <prvCheckForValidListAndQueue+0x60>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	490b      	ldr	r1, [pc, #44]	@ (80041f0 <prvCheckForValidListAndQueue+0x7c>)
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fe fd52 	bl	8002c6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041c8:	f000 f978 	bl	80044bc <vPortExitCritical>
}
 80041cc:	bf00      	nop
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20000d10 	.word	0x20000d10
 80041d8:	20000ce0 	.word	0x20000ce0
 80041dc:	20000cf4 	.word	0x20000cf4
 80041e0:	20000d08 	.word	0x20000d08
 80041e4:	20000d0c 	.word	0x20000d0c
 80041e8:	20000dbc 	.word	0x20000dbc
 80041ec:	20000d1c 	.word	0x20000d1c
 80041f0:	08005434 	.word	0x08005434

080041f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	3b04      	subs	r3, #4
 8004204:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800420c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	3b04      	subs	r3, #4
 8004212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f023 0201 	bic.w	r2, r3, #1
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	3b04      	subs	r3, #4
 8004222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004224:	4a0c      	ldr	r2, [pc, #48]	@ (8004258 <pxPortInitialiseStack+0x64>)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	3b14      	subs	r3, #20
 800422e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	3b04      	subs	r3, #4
 800423a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f06f 0202 	mvn.w	r2, #2
 8004242:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	3b20      	subs	r3, #32
 8004248:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800424a:	68fb      	ldr	r3, [r7, #12]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	0800425d 	.word	0x0800425d

0800425c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004262:	2300      	movs	r3, #0
 8004264:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004266:	4b13      	ldr	r3, [pc, #76]	@ (80042b4 <prvTaskExitError+0x58>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426e:	d00b      	beq.n	8004288 <prvTaskExitError+0x2c>
	__asm volatile
 8004270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004274:	f383 8811 	msr	BASEPRI, r3
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	60fb      	str	r3, [r7, #12]
}
 8004282:	bf00      	nop
 8004284:	bf00      	nop
 8004286:	e7fd      	b.n	8004284 <prvTaskExitError+0x28>
	__asm volatile
 8004288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	60bb      	str	r3, [r7, #8]
}
 800429a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800429c:	bf00      	nop
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0fc      	beq.n	800429e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80042a4:	bf00      	nop
 80042a6:	bf00      	nop
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	2000000c 	.word	0x2000000c
	...

080042c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80042c0:	4b07      	ldr	r3, [pc, #28]	@ (80042e0 <pxCurrentTCBConst2>)
 80042c2:	6819      	ldr	r1, [r3, #0]
 80042c4:	6808      	ldr	r0, [r1, #0]
 80042c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ca:	f380 8809 	msr	PSP, r0
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f04f 0000 	mov.w	r0, #0
 80042d6:	f380 8811 	msr	BASEPRI, r0
 80042da:	4770      	bx	lr
 80042dc:	f3af 8000 	nop.w

080042e0 <pxCurrentTCBConst2>:
 80042e0:	200007e0 	.word	0x200007e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop

080042e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80042e8:	4808      	ldr	r0, [pc, #32]	@ (800430c <prvPortStartFirstTask+0x24>)
 80042ea:	6800      	ldr	r0, [r0, #0]
 80042ec:	6800      	ldr	r0, [r0, #0]
 80042ee:	f380 8808 	msr	MSP, r0
 80042f2:	f04f 0000 	mov.w	r0, #0
 80042f6:	f380 8814 	msr	CONTROL, r0
 80042fa:	b662      	cpsie	i
 80042fc:	b661      	cpsie	f
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	df00      	svc	0
 8004308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800430a:	bf00      	nop
 800430c:	e000ed08 	.word	0xe000ed08

08004310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004316:	4b47      	ldr	r3, [pc, #284]	@ (8004434 <xPortStartScheduler+0x124>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a47      	ldr	r2, [pc, #284]	@ (8004438 <xPortStartScheduler+0x128>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d10b      	bne.n	8004338 <xPortStartScheduler+0x28>
	__asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	60fb      	str	r3, [r7, #12]
}
 8004332:	bf00      	nop
 8004334:	bf00      	nop
 8004336:	e7fd      	b.n	8004334 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004338:	4b3e      	ldr	r3, [pc, #248]	@ (8004434 <xPortStartScheduler+0x124>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a3f      	ldr	r2, [pc, #252]	@ (800443c <xPortStartScheduler+0x12c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d10b      	bne.n	800435a <xPortStartScheduler+0x4a>
	__asm volatile
 8004342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	613b      	str	r3, [r7, #16]
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop
 8004358:	e7fd      	b.n	8004356 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800435a:	4b39      	ldr	r3, [pc, #228]	@ (8004440 <xPortStartScheduler+0x130>)
 800435c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	b2db      	uxtb	r3, r3
 8004364:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	22ff      	movs	r2, #255	@ 0xff
 800436a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800437c:	b2da      	uxtb	r2, r3
 800437e:	4b31      	ldr	r3, [pc, #196]	@ (8004444 <xPortStartScheduler+0x134>)
 8004380:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004382:	4b31      	ldr	r3, [pc, #196]	@ (8004448 <xPortStartScheduler+0x138>)
 8004384:	2207      	movs	r2, #7
 8004386:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004388:	e009      	b.n	800439e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800438a:	4b2f      	ldr	r3, [pc, #188]	@ (8004448 <xPortStartScheduler+0x138>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3b01      	subs	r3, #1
 8004390:	4a2d      	ldr	r2, [pc, #180]	@ (8004448 <xPortStartScheduler+0x138>)
 8004392:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	b2db      	uxtb	r3, r3
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	b2db      	uxtb	r3, r3
 800439c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800439e:	78fb      	ldrb	r3, [r7, #3]
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043a6:	2b80      	cmp	r3, #128	@ 0x80
 80043a8:	d0ef      	beq.n	800438a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043aa:	4b27      	ldr	r3, [pc, #156]	@ (8004448 <xPortStartScheduler+0x138>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f1c3 0307 	rsb	r3, r3, #7
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d00b      	beq.n	80043ce <xPortStartScheduler+0xbe>
	__asm volatile
 80043b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ba:	f383 8811 	msr	BASEPRI, r3
 80043be:	f3bf 8f6f 	isb	sy
 80043c2:	f3bf 8f4f 	dsb	sy
 80043c6:	60bb      	str	r3, [r7, #8]
}
 80043c8:	bf00      	nop
 80043ca:	bf00      	nop
 80043cc:	e7fd      	b.n	80043ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004448 <xPortStartScheduler+0x138>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	021b      	lsls	r3, r3, #8
 80043d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004448 <xPortStartScheduler+0x138>)
 80043d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004448 <xPortStartScheduler+0x138>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043e0:	4a19      	ldr	r2, [pc, #100]	@ (8004448 <xPortStartScheduler+0x138>)
 80043e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043ec:	4b17      	ldr	r3, [pc, #92]	@ (800444c <xPortStartScheduler+0x13c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a16      	ldr	r2, [pc, #88]	@ (800444c <xPortStartScheduler+0x13c>)
 80043f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80043f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80043f8:	4b14      	ldr	r3, [pc, #80]	@ (800444c <xPortStartScheduler+0x13c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a13      	ldr	r2, [pc, #76]	@ (800444c <xPortStartScheduler+0x13c>)
 80043fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004402:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004404:	f000 f8da 	bl	80045bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004408:	4b11      	ldr	r3, [pc, #68]	@ (8004450 <xPortStartScheduler+0x140>)
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800440e:	f000 f8f9 	bl	8004604 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004412:	4b10      	ldr	r3, [pc, #64]	@ (8004454 <xPortStartScheduler+0x144>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a0f      	ldr	r2, [pc, #60]	@ (8004454 <xPortStartScheduler+0x144>)
 8004418:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800441c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800441e:	f7ff ff63 	bl	80042e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004422:	f7ff f83b 	bl	800349c <vTaskSwitchContext>
	prvTaskExitError();
 8004426:	f7ff ff19 	bl	800425c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	e000ed00 	.word	0xe000ed00
 8004438:	410fc271 	.word	0x410fc271
 800443c:	410fc270 	.word	0x410fc270
 8004440:	e000e400 	.word	0xe000e400
 8004444:	20000e0c 	.word	0x20000e0c
 8004448:	20000e10 	.word	0x20000e10
 800444c:	e000ed20 	.word	0xe000ed20
 8004450:	2000000c 	.word	0x2000000c
 8004454:	e000ef34 	.word	0xe000ef34

08004458 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
	__asm volatile
 800445e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	607b      	str	r3, [r7, #4]
}
 8004470:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004472:	4b10      	ldr	r3, [pc, #64]	@ (80044b4 <vPortEnterCritical+0x5c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3301      	adds	r3, #1
 8004478:	4a0e      	ldr	r2, [pc, #56]	@ (80044b4 <vPortEnterCritical+0x5c>)
 800447a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800447c:	4b0d      	ldr	r3, [pc, #52]	@ (80044b4 <vPortEnterCritical+0x5c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d110      	bne.n	80044a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004484:	4b0c      	ldr	r3, [pc, #48]	@ (80044b8 <vPortEnterCritical+0x60>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00b      	beq.n	80044a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800448e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	603b      	str	r3, [r7, #0]
}
 80044a0:	bf00      	nop
 80044a2:	bf00      	nop
 80044a4:	e7fd      	b.n	80044a2 <vPortEnterCritical+0x4a>
	}
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	2000000c 	.word	0x2000000c
 80044b8:	e000ed04 	.word	0xe000ed04

080044bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80044c2:	4b12      	ldr	r3, [pc, #72]	@ (800450c <vPortExitCritical+0x50>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10b      	bne.n	80044e2 <vPortExitCritical+0x26>
	__asm volatile
 80044ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	607b      	str	r3, [r7, #4]
}
 80044dc:	bf00      	nop
 80044de:	bf00      	nop
 80044e0:	e7fd      	b.n	80044de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80044e2:	4b0a      	ldr	r3, [pc, #40]	@ (800450c <vPortExitCritical+0x50>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	4a08      	ldr	r2, [pc, #32]	@ (800450c <vPortExitCritical+0x50>)
 80044ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80044ec:	4b07      	ldr	r3, [pc, #28]	@ (800450c <vPortExitCritical+0x50>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d105      	bne.n	8004500 <vPortExitCritical+0x44>
 80044f4:	2300      	movs	r3, #0
 80044f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	f383 8811 	msr	BASEPRI, r3
}
 80044fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	2000000c 	.word	0x2000000c

08004510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004510:	f3ef 8009 	mrs	r0, PSP
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	4b15      	ldr	r3, [pc, #84]	@ (8004570 <pxCurrentTCBConst>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	f01e 0f10 	tst.w	lr, #16
 8004520:	bf08      	it	eq
 8004522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800452a:	6010      	str	r0, [r2, #0]
 800452c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004530:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004534:	f380 8811 	msr	BASEPRI, r0
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f7fe ffac 	bl	800349c <vTaskSwitchContext>
 8004544:	f04f 0000 	mov.w	r0, #0
 8004548:	f380 8811 	msr	BASEPRI, r0
 800454c:	bc09      	pop	{r0, r3}
 800454e:	6819      	ldr	r1, [r3, #0]
 8004550:	6808      	ldr	r0, [r1, #0]
 8004552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004556:	f01e 0f10 	tst.w	lr, #16
 800455a:	bf08      	it	eq
 800455c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004560:	f380 8809 	msr	PSP, r0
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	f3af 8000 	nop.w

08004570 <pxCurrentTCBConst>:
 8004570:	200007e0 	.word	0x200007e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004574:	bf00      	nop
 8004576:	bf00      	nop

08004578 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
	__asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	607b      	str	r3, [r7, #4]
}
 8004590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004592:	f7fe fec9 	bl	8003328 <xTaskIncrementTick>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800459c:	4b06      	ldr	r3, [pc, #24]	@ (80045b8 <xPortSysTickHandler+0x40>)
 800459e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	2300      	movs	r3, #0
 80045a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	f383 8811 	msr	BASEPRI, r3
}
 80045ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80045b0:	bf00      	nop
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	e000ed04 	.word	0xe000ed04

080045bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80045c0:	4b0b      	ldr	r3, [pc, #44]	@ (80045f0 <vPortSetupTimerInterrupt+0x34>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80045c6:	4b0b      	ldr	r3, [pc, #44]	@ (80045f4 <vPortSetupTimerInterrupt+0x38>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80045cc:	4b0a      	ldr	r3, [pc, #40]	@ (80045f8 <vPortSetupTimerInterrupt+0x3c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a0a      	ldr	r2, [pc, #40]	@ (80045fc <vPortSetupTimerInterrupt+0x40>)
 80045d2:	fba2 2303 	umull	r2, r3, r2, r3
 80045d6:	099b      	lsrs	r3, r3, #6
 80045d8:	4a09      	ldr	r2, [pc, #36]	@ (8004600 <vPortSetupTimerInterrupt+0x44>)
 80045da:	3b01      	subs	r3, #1
 80045dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80045de:	4b04      	ldr	r3, [pc, #16]	@ (80045f0 <vPortSetupTimerInterrupt+0x34>)
 80045e0:	2207      	movs	r2, #7
 80045e2:	601a      	str	r2, [r3, #0]
}
 80045e4:	bf00      	nop
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	e000e010 	.word	0xe000e010
 80045f4:	e000e018 	.word	0xe000e018
 80045f8:	20000000 	.word	0x20000000
 80045fc:	10624dd3 	.word	0x10624dd3
 8004600:	e000e014 	.word	0xe000e014

08004604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004604:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004614 <vPortEnableVFP+0x10>
 8004608:	6801      	ldr	r1, [r0, #0]
 800460a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800460e:	6001      	str	r1, [r0, #0]
 8004610:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004612:	bf00      	nop
 8004614:	e000ed88 	.word	0xe000ed88

08004618 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800461e:	f3ef 8305 	mrs	r3, IPSR
 8004622:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b0f      	cmp	r3, #15
 8004628:	d915      	bls.n	8004656 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800462a:	4a18      	ldr	r2, [pc, #96]	@ (800468c <vPortValidateInterruptPriority+0x74>)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4413      	add	r3, r2
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004634:	4b16      	ldr	r3, [pc, #88]	@ (8004690 <vPortValidateInterruptPriority+0x78>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	7afa      	ldrb	r2, [r7, #11]
 800463a:	429a      	cmp	r2, r3
 800463c:	d20b      	bcs.n	8004656 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	607b      	str	r3, [r7, #4]
}
 8004650:	bf00      	nop
 8004652:	bf00      	nop
 8004654:	e7fd      	b.n	8004652 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004656:	4b0f      	ldr	r3, [pc, #60]	@ (8004694 <vPortValidateInterruptPriority+0x7c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800465e:	4b0e      	ldr	r3, [pc, #56]	@ (8004698 <vPortValidateInterruptPriority+0x80>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	429a      	cmp	r2, r3
 8004664:	d90b      	bls.n	800467e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	603b      	str	r3, [r7, #0]
}
 8004678:	bf00      	nop
 800467a:	bf00      	nop
 800467c:	e7fd      	b.n	800467a <vPortValidateInterruptPriority+0x62>
	}
 800467e:	bf00      	nop
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	e000e3f0 	.word	0xe000e3f0
 8004690:	20000e0c 	.word	0x20000e0c
 8004694:	e000ed0c 	.word	0xe000ed0c
 8004698:	20000e10 	.word	0x20000e10

0800469c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b08a      	sub	sp, #40	@ 0x28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80046a8:	f7fe fd82 	bl	80031b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80046ac:	4b5c      	ldr	r3, [pc, #368]	@ (8004820 <pvPortMalloc+0x184>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80046b4:	f000 f924 	bl	8004900 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80046b8:	4b5a      	ldr	r3, [pc, #360]	@ (8004824 <pvPortMalloc+0x188>)
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4013      	ands	r3, r2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f040 8095 	bne.w	80047f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d01e      	beq.n	800470a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80046cc:	2208      	movs	r2, #8
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4413      	add	r3, r2
 80046d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d015      	beq.n	800470a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f023 0307 	bic.w	r3, r3, #7
 80046e4:	3308      	adds	r3, #8
 80046e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00b      	beq.n	800470a <pvPortMalloc+0x6e>
	__asm volatile
 80046f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f6:	f383 8811 	msr	BASEPRI, r3
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	617b      	str	r3, [r7, #20]
}
 8004704:	bf00      	nop
 8004706:	bf00      	nop
 8004708:	e7fd      	b.n	8004706 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d06f      	beq.n	80047f0 <pvPortMalloc+0x154>
 8004710:	4b45      	ldr	r3, [pc, #276]	@ (8004828 <pvPortMalloc+0x18c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	429a      	cmp	r2, r3
 8004718:	d86a      	bhi.n	80047f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800471a:	4b44      	ldr	r3, [pc, #272]	@ (800482c <pvPortMalloc+0x190>)
 800471c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800471e:	4b43      	ldr	r3, [pc, #268]	@ (800482c <pvPortMalloc+0x190>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004724:	e004      	b.n	8004730 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	429a      	cmp	r2, r3
 8004738:	d903      	bls.n	8004742 <pvPortMalloc+0xa6>
 800473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f1      	bne.n	8004726 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004742:	4b37      	ldr	r3, [pc, #220]	@ (8004820 <pvPortMalloc+0x184>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004748:	429a      	cmp	r2, r3
 800474a:	d051      	beq.n	80047f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2208      	movs	r2, #8
 8004752:	4413      	add	r3, r2
 8004754:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800475e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	1ad2      	subs	r2, r2, r3
 8004766:	2308      	movs	r3, #8
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	429a      	cmp	r2, r3
 800476c:	d920      	bls.n	80047b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800476e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4413      	add	r3, r2
 8004774:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00b      	beq.n	8004798 <pvPortMalloc+0xfc>
	__asm volatile
 8004780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	613b      	str	r3, [r7, #16]
}
 8004792:	bf00      	nop
 8004794:	bf00      	nop
 8004796:	e7fd      	b.n	8004794 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	1ad2      	subs	r2, r2, r3
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80047a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80047aa:	69b8      	ldr	r0, [r7, #24]
 80047ac:	f000 f90a 	bl	80049c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004828 <pvPortMalloc+0x18c>)
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	4a1b      	ldr	r2, [pc, #108]	@ (8004828 <pvPortMalloc+0x18c>)
 80047bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047be:	4b1a      	ldr	r3, [pc, #104]	@ (8004828 <pvPortMalloc+0x18c>)
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004830 <pvPortMalloc+0x194>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d203      	bcs.n	80047d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047ca:	4b17      	ldr	r3, [pc, #92]	@ (8004828 <pvPortMalloc+0x18c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a18      	ldr	r2, [pc, #96]	@ (8004830 <pvPortMalloc+0x194>)
 80047d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	4b13      	ldr	r3, [pc, #76]	@ (8004824 <pvPortMalloc+0x188>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	431a      	orrs	r2, r3
 80047dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80047e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80047e6:	4b13      	ldr	r3, [pc, #76]	@ (8004834 <pvPortMalloc+0x198>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3301      	adds	r3, #1
 80047ec:	4a11      	ldr	r2, [pc, #68]	@ (8004834 <pvPortMalloc+0x198>)
 80047ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80047f0:	f7fe fcec 	bl	80031cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00b      	beq.n	8004816 <pvPortMalloc+0x17a>
	__asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	60fb      	str	r3, [r7, #12]
}
 8004810:	bf00      	nop
 8004812:	bf00      	nop
 8004814:	e7fd      	b.n	8004812 <pvPortMalloc+0x176>
	return pvReturn;
 8004816:	69fb      	ldr	r3, [r7, #28]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3728      	adds	r7, #40	@ 0x28
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	200019d4 	.word	0x200019d4
 8004824:	200019e8 	.word	0x200019e8
 8004828:	200019d8 	.word	0x200019d8
 800482c:	200019cc 	.word	0x200019cc
 8004830:	200019dc 	.word	0x200019dc
 8004834:	200019e0 	.word	0x200019e0

08004838 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d04f      	beq.n	80048ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800484a:	2308      	movs	r3, #8
 800484c:	425b      	negs	r3, r3
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4413      	add	r3, r2
 8004852:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	4b25      	ldr	r3, [pc, #148]	@ (80048f4 <vPortFree+0xbc>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4013      	ands	r3, r2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10b      	bne.n	800487e <vPortFree+0x46>
	__asm volatile
 8004866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800486a:	f383 8811 	msr	BASEPRI, r3
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	60fb      	str	r3, [r7, #12]
}
 8004878:	bf00      	nop
 800487a:	bf00      	nop
 800487c:	e7fd      	b.n	800487a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00b      	beq.n	800489e <vPortFree+0x66>
	__asm volatile
 8004886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800488a:	f383 8811 	msr	BASEPRI, r3
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	60bb      	str	r3, [r7, #8]
}
 8004898:	bf00      	nop
 800489a:	bf00      	nop
 800489c:	e7fd      	b.n	800489a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	4b14      	ldr	r3, [pc, #80]	@ (80048f4 <vPortFree+0xbc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4013      	ands	r3, r2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d01e      	beq.n	80048ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d11a      	bne.n	80048ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	4b0e      	ldr	r3, [pc, #56]	@ (80048f4 <vPortFree+0xbc>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	43db      	mvns	r3, r3
 80048be:	401a      	ands	r2, r3
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80048c4:	f7fe fc74 	bl	80031b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	4b0a      	ldr	r3, [pc, #40]	@ (80048f8 <vPortFree+0xc0>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4413      	add	r3, r2
 80048d2:	4a09      	ldr	r2, [pc, #36]	@ (80048f8 <vPortFree+0xc0>)
 80048d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048d6:	6938      	ldr	r0, [r7, #16]
 80048d8:	f000 f874 	bl	80049c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80048dc:	4b07      	ldr	r3, [pc, #28]	@ (80048fc <vPortFree+0xc4>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3301      	adds	r3, #1
 80048e2:	4a06      	ldr	r2, [pc, #24]	@ (80048fc <vPortFree+0xc4>)
 80048e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80048e6:	f7fe fc71 	bl	80031cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80048ea:	bf00      	nop
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	200019e8 	.word	0x200019e8
 80048f8:	200019d8 	.word	0x200019d8
 80048fc:	200019e4 	.word	0x200019e4

08004900 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004906:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800490a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800490c:	4b27      	ldr	r3, [pc, #156]	@ (80049ac <prvHeapInit+0xac>)
 800490e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00c      	beq.n	8004934 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	3307      	adds	r3, #7
 800491e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0307 	bic.w	r3, r3, #7
 8004926:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	4a1f      	ldr	r2, [pc, #124]	@ (80049ac <prvHeapInit+0xac>)
 8004930:	4413      	add	r3, r2
 8004932:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004938:	4a1d      	ldr	r2, [pc, #116]	@ (80049b0 <prvHeapInit+0xb0>)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800493e:	4b1c      	ldr	r3, [pc, #112]	@ (80049b0 <prvHeapInit+0xb0>)
 8004940:	2200      	movs	r2, #0
 8004942:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	4413      	add	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800494c:	2208      	movs	r2, #8
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	1a9b      	subs	r3, r3, r2
 8004952:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0307 	bic.w	r3, r3, #7
 800495a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4a15      	ldr	r2, [pc, #84]	@ (80049b4 <prvHeapInit+0xb4>)
 8004960:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004962:	4b14      	ldr	r3, [pc, #80]	@ (80049b4 <prvHeapInit+0xb4>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2200      	movs	r2, #0
 8004968:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800496a:	4b12      	ldr	r3, [pc, #72]	@ (80049b4 <prvHeapInit+0xb4>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	1ad2      	subs	r2, r2, r3
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004980:	4b0c      	ldr	r3, [pc, #48]	@ (80049b4 <prvHeapInit+0xb4>)
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	4a0a      	ldr	r2, [pc, #40]	@ (80049b8 <prvHeapInit+0xb8>)
 800498e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	4a09      	ldr	r2, [pc, #36]	@ (80049bc <prvHeapInit+0xbc>)
 8004996:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004998:	4b09      	ldr	r3, [pc, #36]	@ (80049c0 <prvHeapInit+0xc0>)
 800499a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800499e:	601a      	str	r2, [r3, #0]
}
 80049a0:	bf00      	nop
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	20000e14 	.word	0x20000e14
 80049b0:	200019cc 	.word	0x200019cc
 80049b4:	200019d4 	.word	0x200019d4
 80049b8:	200019dc 	.word	0x200019dc
 80049bc:	200019d8 	.word	0x200019d8
 80049c0:	200019e8 	.word	0x200019e8

080049c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049cc:	4b28      	ldr	r3, [pc, #160]	@ (8004a70 <prvInsertBlockIntoFreeList+0xac>)
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	e002      	b.n	80049d8 <prvInsertBlockIntoFreeList+0x14>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d8f7      	bhi.n	80049d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	4413      	add	r3, r2
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d108      	bne.n	8004a06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	441a      	add	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	441a      	add	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d118      	bne.n	8004a4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	4b15      	ldr	r3, [pc, #84]	@ (8004a74 <prvInsertBlockIntoFreeList+0xb0>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d00d      	beq.n	8004a42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	441a      	add	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	e008      	b.n	8004a54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a42:	4b0c      	ldr	r3, [pc, #48]	@ (8004a74 <prvInsertBlockIntoFreeList+0xb0>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	e003      	b.n	8004a54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d002      	beq.n	8004a62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a62:	bf00      	nop
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	200019cc 	.word	0x200019cc
 8004a74:	200019d4 	.word	0x200019d4

08004a78 <std>:
 8004a78:	2300      	movs	r3, #0
 8004a7a:	b510      	push	{r4, lr}
 8004a7c:	4604      	mov	r4, r0
 8004a7e:	e9c0 3300 	strd	r3, r3, [r0]
 8004a82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a86:	6083      	str	r3, [r0, #8]
 8004a88:	8181      	strh	r1, [r0, #12]
 8004a8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004a8c:	81c2      	strh	r2, [r0, #14]
 8004a8e:	6183      	str	r3, [r0, #24]
 8004a90:	4619      	mov	r1, r3
 8004a92:	2208      	movs	r2, #8
 8004a94:	305c      	adds	r0, #92	@ 0x5c
 8004a96:	f000 f9e7 	bl	8004e68 <memset>
 8004a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad0 <std+0x58>)
 8004a9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad4 <std+0x5c>)
 8004aa0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad8 <std+0x60>)
 8004aa4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8004adc <std+0x64>)
 8004aa8:	6323      	str	r3, [r4, #48]	@ 0x30
 8004aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae0 <std+0x68>)
 8004aac:	6224      	str	r4, [r4, #32]
 8004aae:	429c      	cmp	r4, r3
 8004ab0:	d006      	beq.n	8004ac0 <std+0x48>
 8004ab2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004ab6:	4294      	cmp	r4, r2
 8004ab8:	d002      	beq.n	8004ac0 <std+0x48>
 8004aba:	33d0      	adds	r3, #208	@ 0xd0
 8004abc:	429c      	cmp	r4, r3
 8004abe:	d105      	bne.n	8004acc <std+0x54>
 8004ac0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ac8:	f000 ba46 	b.w	8004f58 <__retarget_lock_init_recursive>
 8004acc:	bd10      	pop	{r4, pc}
 8004ace:	bf00      	nop
 8004ad0:	08004cb9 	.word	0x08004cb9
 8004ad4:	08004cdb 	.word	0x08004cdb
 8004ad8:	08004d13 	.word	0x08004d13
 8004adc:	08004d37 	.word	0x08004d37
 8004ae0:	200019ec 	.word	0x200019ec

08004ae4 <stdio_exit_handler>:
 8004ae4:	4a02      	ldr	r2, [pc, #8]	@ (8004af0 <stdio_exit_handler+0xc>)
 8004ae6:	4903      	ldr	r1, [pc, #12]	@ (8004af4 <stdio_exit_handler+0x10>)
 8004ae8:	4803      	ldr	r0, [pc, #12]	@ (8004af8 <stdio_exit_handler+0x14>)
 8004aea:	f000 b869 	b.w	8004bc0 <_fwalk_sglue>
 8004aee:	bf00      	nop
 8004af0:	20000010 	.word	0x20000010
 8004af4:	08005275 	.word	0x08005275
 8004af8:	20000020 	.word	0x20000020

08004afc <cleanup_stdio>:
 8004afc:	6841      	ldr	r1, [r0, #4]
 8004afe:	4b0c      	ldr	r3, [pc, #48]	@ (8004b30 <cleanup_stdio+0x34>)
 8004b00:	4299      	cmp	r1, r3
 8004b02:	b510      	push	{r4, lr}
 8004b04:	4604      	mov	r4, r0
 8004b06:	d001      	beq.n	8004b0c <cleanup_stdio+0x10>
 8004b08:	f000 fbb4 	bl	8005274 <_fflush_r>
 8004b0c:	68a1      	ldr	r1, [r4, #8]
 8004b0e:	4b09      	ldr	r3, [pc, #36]	@ (8004b34 <cleanup_stdio+0x38>)
 8004b10:	4299      	cmp	r1, r3
 8004b12:	d002      	beq.n	8004b1a <cleanup_stdio+0x1e>
 8004b14:	4620      	mov	r0, r4
 8004b16:	f000 fbad 	bl	8005274 <_fflush_r>
 8004b1a:	68e1      	ldr	r1, [r4, #12]
 8004b1c:	4b06      	ldr	r3, [pc, #24]	@ (8004b38 <cleanup_stdio+0x3c>)
 8004b1e:	4299      	cmp	r1, r3
 8004b20:	d004      	beq.n	8004b2c <cleanup_stdio+0x30>
 8004b22:	4620      	mov	r0, r4
 8004b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b28:	f000 bba4 	b.w	8005274 <_fflush_r>
 8004b2c:	bd10      	pop	{r4, pc}
 8004b2e:	bf00      	nop
 8004b30:	200019ec 	.word	0x200019ec
 8004b34:	20001a54 	.word	0x20001a54
 8004b38:	20001abc 	.word	0x20001abc

08004b3c <global_stdio_init.part.0>:
 8004b3c:	b510      	push	{r4, lr}
 8004b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b6c <global_stdio_init.part.0+0x30>)
 8004b40:	4c0b      	ldr	r4, [pc, #44]	@ (8004b70 <global_stdio_init.part.0+0x34>)
 8004b42:	4a0c      	ldr	r2, [pc, #48]	@ (8004b74 <global_stdio_init.part.0+0x38>)
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	4620      	mov	r0, r4
 8004b48:	2200      	movs	r2, #0
 8004b4a:	2104      	movs	r1, #4
 8004b4c:	f7ff ff94 	bl	8004a78 <std>
 8004b50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b54:	2201      	movs	r2, #1
 8004b56:	2109      	movs	r1, #9
 8004b58:	f7ff ff8e 	bl	8004a78 <std>
 8004b5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004b60:	2202      	movs	r2, #2
 8004b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b66:	2112      	movs	r1, #18
 8004b68:	f7ff bf86 	b.w	8004a78 <std>
 8004b6c:	20001b24 	.word	0x20001b24
 8004b70:	200019ec 	.word	0x200019ec
 8004b74:	08004ae5 	.word	0x08004ae5

08004b78 <__sfp_lock_acquire>:
 8004b78:	4801      	ldr	r0, [pc, #4]	@ (8004b80 <__sfp_lock_acquire+0x8>)
 8004b7a:	f000 b9ee 	b.w	8004f5a <__retarget_lock_acquire_recursive>
 8004b7e:	bf00      	nop
 8004b80:	20001b2d 	.word	0x20001b2d

08004b84 <__sfp_lock_release>:
 8004b84:	4801      	ldr	r0, [pc, #4]	@ (8004b8c <__sfp_lock_release+0x8>)
 8004b86:	f000 b9e9 	b.w	8004f5c <__retarget_lock_release_recursive>
 8004b8a:	bf00      	nop
 8004b8c:	20001b2d 	.word	0x20001b2d

08004b90 <__sinit>:
 8004b90:	b510      	push	{r4, lr}
 8004b92:	4604      	mov	r4, r0
 8004b94:	f7ff fff0 	bl	8004b78 <__sfp_lock_acquire>
 8004b98:	6a23      	ldr	r3, [r4, #32]
 8004b9a:	b11b      	cbz	r3, 8004ba4 <__sinit+0x14>
 8004b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ba0:	f7ff bff0 	b.w	8004b84 <__sfp_lock_release>
 8004ba4:	4b04      	ldr	r3, [pc, #16]	@ (8004bb8 <__sinit+0x28>)
 8004ba6:	6223      	str	r3, [r4, #32]
 8004ba8:	4b04      	ldr	r3, [pc, #16]	@ (8004bbc <__sinit+0x2c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1f5      	bne.n	8004b9c <__sinit+0xc>
 8004bb0:	f7ff ffc4 	bl	8004b3c <global_stdio_init.part.0>
 8004bb4:	e7f2      	b.n	8004b9c <__sinit+0xc>
 8004bb6:	bf00      	nop
 8004bb8:	08004afd 	.word	0x08004afd
 8004bbc:	20001b24 	.word	0x20001b24

08004bc0 <_fwalk_sglue>:
 8004bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bc4:	4607      	mov	r7, r0
 8004bc6:	4688      	mov	r8, r1
 8004bc8:	4614      	mov	r4, r2
 8004bca:	2600      	movs	r6, #0
 8004bcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bd0:	f1b9 0901 	subs.w	r9, r9, #1
 8004bd4:	d505      	bpl.n	8004be2 <_fwalk_sglue+0x22>
 8004bd6:	6824      	ldr	r4, [r4, #0]
 8004bd8:	2c00      	cmp	r4, #0
 8004bda:	d1f7      	bne.n	8004bcc <_fwalk_sglue+0xc>
 8004bdc:	4630      	mov	r0, r6
 8004bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004be2:	89ab      	ldrh	r3, [r5, #12]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d907      	bls.n	8004bf8 <_fwalk_sglue+0x38>
 8004be8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bec:	3301      	adds	r3, #1
 8004bee:	d003      	beq.n	8004bf8 <_fwalk_sglue+0x38>
 8004bf0:	4629      	mov	r1, r5
 8004bf2:	4638      	mov	r0, r7
 8004bf4:	47c0      	blx	r8
 8004bf6:	4306      	orrs	r6, r0
 8004bf8:	3568      	adds	r5, #104	@ 0x68
 8004bfa:	e7e9      	b.n	8004bd0 <_fwalk_sglue+0x10>

08004bfc <_puts_r>:
 8004bfc:	6a03      	ldr	r3, [r0, #32]
 8004bfe:	b570      	push	{r4, r5, r6, lr}
 8004c00:	6884      	ldr	r4, [r0, #8]
 8004c02:	4605      	mov	r5, r0
 8004c04:	460e      	mov	r6, r1
 8004c06:	b90b      	cbnz	r3, 8004c0c <_puts_r+0x10>
 8004c08:	f7ff ffc2 	bl	8004b90 <__sinit>
 8004c0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c0e:	07db      	lsls	r3, r3, #31
 8004c10:	d405      	bmi.n	8004c1e <_puts_r+0x22>
 8004c12:	89a3      	ldrh	r3, [r4, #12]
 8004c14:	0598      	lsls	r0, r3, #22
 8004c16:	d402      	bmi.n	8004c1e <_puts_r+0x22>
 8004c18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c1a:	f000 f99e 	bl	8004f5a <__retarget_lock_acquire_recursive>
 8004c1e:	89a3      	ldrh	r3, [r4, #12]
 8004c20:	0719      	lsls	r1, r3, #28
 8004c22:	d502      	bpl.n	8004c2a <_puts_r+0x2e>
 8004c24:	6923      	ldr	r3, [r4, #16]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d135      	bne.n	8004c96 <_puts_r+0x9a>
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	f000 f8c5 	bl	8004dbc <__swsetup_r>
 8004c32:	b380      	cbz	r0, 8004c96 <_puts_r+0x9a>
 8004c34:	f04f 35ff 	mov.w	r5, #4294967295
 8004c38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c3a:	07da      	lsls	r2, r3, #31
 8004c3c:	d405      	bmi.n	8004c4a <_puts_r+0x4e>
 8004c3e:	89a3      	ldrh	r3, [r4, #12]
 8004c40:	059b      	lsls	r3, r3, #22
 8004c42:	d402      	bmi.n	8004c4a <_puts_r+0x4e>
 8004c44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c46:	f000 f989 	bl	8004f5c <__retarget_lock_release_recursive>
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	bd70      	pop	{r4, r5, r6, pc}
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	da04      	bge.n	8004c5c <_puts_r+0x60>
 8004c52:	69a2      	ldr	r2, [r4, #24]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	dc17      	bgt.n	8004c88 <_puts_r+0x8c>
 8004c58:	290a      	cmp	r1, #10
 8004c5a:	d015      	beq.n	8004c88 <_puts_r+0x8c>
 8004c5c:	6823      	ldr	r3, [r4, #0]
 8004c5e:	1c5a      	adds	r2, r3, #1
 8004c60:	6022      	str	r2, [r4, #0]
 8004c62:	7019      	strb	r1, [r3, #0]
 8004c64:	68a3      	ldr	r3, [r4, #8]
 8004c66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	60a3      	str	r3, [r4, #8]
 8004c6e:	2900      	cmp	r1, #0
 8004c70:	d1ed      	bne.n	8004c4e <_puts_r+0x52>
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	da11      	bge.n	8004c9a <_puts_r+0x9e>
 8004c76:	4622      	mov	r2, r4
 8004c78:	210a      	movs	r1, #10
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	f000 f85f 	bl	8004d3e <__swbuf_r>
 8004c80:	3001      	adds	r0, #1
 8004c82:	d0d7      	beq.n	8004c34 <_puts_r+0x38>
 8004c84:	250a      	movs	r5, #10
 8004c86:	e7d7      	b.n	8004c38 <_puts_r+0x3c>
 8004c88:	4622      	mov	r2, r4
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	f000 f857 	bl	8004d3e <__swbuf_r>
 8004c90:	3001      	adds	r0, #1
 8004c92:	d1e7      	bne.n	8004c64 <_puts_r+0x68>
 8004c94:	e7ce      	b.n	8004c34 <_puts_r+0x38>
 8004c96:	3e01      	subs	r6, #1
 8004c98:	e7e4      	b.n	8004c64 <_puts_r+0x68>
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	6022      	str	r2, [r4, #0]
 8004ca0:	220a      	movs	r2, #10
 8004ca2:	701a      	strb	r2, [r3, #0]
 8004ca4:	e7ee      	b.n	8004c84 <_puts_r+0x88>
	...

08004ca8 <puts>:
 8004ca8:	4b02      	ldr	r3, [pc, #8]	@ (8004cb4 <puts+0xc>)
 8004caa:	4601      	mov	r1, r0
 8004cac:	6818      	ldr	r0, [r3, #0]
 8004cae:	f7ff bfa5 	b.w	8004bfc <_puts_r>
 8004cb2:	bf00      	nop
 8004cb4:	2000001c 	.word	0x2000001c

08004cb8 <__sread>:
 8004cb8:	b510      	push	{r4, lr}
 8004cba:	460c      	mov	r4, r1
 8004cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cc0:	f000 f8fc 	bl	8004ebc <_read_r>
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	bfab      	itete	ge
 8004cc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004cca:	89a3      	ldrhlt	r3, [r4, #12]
 8004ccc:	181b      	addge	r3, r3, r0
 8004cce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004cd2:	bfac      	ite	ge
 8004cd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004cd6:	81a3      	strhlt	r3, [r4, #12]
 8004cd8:	bd10      	pop	{r4, pc}

08004cda <__swrite>:
 8004cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cde:	461f      	mov	r7, r3
 8004ce0:	898b      	ldrh	r3, [r1, #12]
 8004ce2:	05db      	lsls	r3, r3, #23
 8004ce4:	4605      	mov	r5, r0
 8004ce6:	460c      	mov	r4, r1
 8004ce8:	4616      	mov	r6, r2
 8004cea:	d505      	bpl.n	8004cf8 <__swrite+0x1e>
 8004cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f000 f8d0 	bl	8004e98 <_lseek_r>
 8004cf8:	89a3      	ldrh	r3, [r4, #12]
 8004cfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cfe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d02:	81a3      	strh	r3, [r4, #12]
 8004d04:	4632      	mov	r2, r6
 8004d06:	463b      	mov	r3, r7
 8004d08:	4628      	mov	r0, r5
 8004d0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d0e:	f000 b8e7 	b.w	8004ee0 <_write_r>

08004d12 <__sseek>:
 8004d12:	b510      	push	{r4, lr}
 8004d14:	460c      	mov	r4, r1
 8004d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d1a:	f000 f8bd 	bl	8004e98 <_lseek_r>
 8004d1e:	1c43      	adds	r3, r0, #1
 8004d20:	89a3      	ldrh	r3, [r4, #12]
 8004d22:	bf15      	itete	ne
 8004d24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d2e:	81a3      	strheq	r3, [r4, #12]
 8004d30:	bf18      	it	ne
 8004d32:	81a3      	strhne	r3, [r4, #12]
 8004d34:	bd10      	pop	{r4, pc}

08004d36 <__sclose>:
 8004d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d3a:	f000 b89d 	b.w	8004e78 <_close_r>

08004d3e <__swbuf_r>:
 8004d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d40:	460e      	mov	r6, r1
 8004d42:	4614      	mov	r4, r2
 8004d44:	4605      	mov	r5, r0
 8004d46:	b118      	cbz	r0, 8004d50 <__swbuf_r+0x12>
 8004d48:	6a03      	ldr	r3, [r0, #32]
 8004d4a:	b90b      	cbnz	r3, 8004d50 <__swbuf_r+0x12>
 8004d4c:	f7ff ff20 	bl	8004b90 <__sinit>
 8004d50:	69a3      	ldr	r3, [r4, #24]
 8004d52:	60a3      	str	r3, [r4, #8]
 8004d54:	89a3      	ldrh	r3, [r4, #12]
 8004d56:	071a      	lsls	r2, r3, #28
 8004d58:	d501      	bpl.n	8004d5e <__swbuf_r+0x20>
 8004d5a:	6923      	ldr	r3, [r4, #16]
 8004d5c:	b943      	cbnz	r3, 8004d70 <__swbuf_r+0x32>
 8004d5e:	4621      	mov	r1, r4
 8004d60:	4628      	mov	r0, r5
 8004d62:	f000 f82b 	bl	8004dbc <__swsetup_r>
 8004d66:	b118      	cbz	r0, 8004d70 <__swbuf_r+0x32>
 8004d68:	f04f 37ff 	mov.w	r7, #4294967295
 8004d6c:	4638      	mov	r0, r7
 8004d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	6922      	ldr	r2, [r4, #16]
 8004d74:	1a98      	subs	r0, r3, r2
 8004d76:	6963      	ldr	r3, [r4, #20]
 8004d78:	b2f6      	uxtb	r6, r6
 8004d7a:	4283      	cmp	r3, r0
 8004d7c:	4637      	mov	r7, r6
 8004d7e:	dc05      	bgt.n	8004d8c <__swbuf_r+0x4e>
 8004d80:	4621      	mov	r1, r4
 8004d82:	4628      	mov	r0, r5
 8004d84:	f000 fa76 	bl	8005274 <_fflush_r>
 8004d88:	2800      	cmp	r0, #0
 8004d8a:	d1ed      	bne.n	8004d68 <__swbuf_r+0x2a>
 8004d8c:	68a3      	ldr	r3, [r4, #8]
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	60a3      	str	r3, [r4, #8]
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	1c5a      	adds	r2, r3, #1
 8004d96:	6022      	str	r2, [r4, #0]
 8004d98:	701e      	strb	r6, [r3, #0]
 8004d9a:	6962      	ldr	r2, [r4, #20]
 8004d9c:	1c43      	adds	r3, r0, #1
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d004      	beq.n	8004dac <__swbuf_r+0x6e>
 8004da2:	89a3      	ldrh	r3, [r4, #12]
 8004da4:	07db      	lsls	r3, r3, #31
 8004da6:	d5e1      	bpl.n	8004d6c <__swbuf_r+0x2e>
 8004da8:	2e0a      	cmp	r6, #10
 8004daa:	d1df      	bne.n	8004d6c <__swbuf_r+0x2e>
 8004dac:	4621      	mov	r1, r4
 8004dae:	4628      	mov	r0, r5
 8004db0:	f000 fa60 	bl	8005274 <_fflush_r>
 8004db4:	2800      	cmp	r0, #0
 8004db6:	d0d9      	beq.n	8004d6c <__swbuf_r+0x2e>
 8004db8:	e7d6      	b.n	8004d68 <__swbuf_r+0x2a>
	...

08004dbc <__swsetup_r>:
 8004dbc:	b538      	push	{r3, r4, r5, lr}
 8004dbe:	4b29      	ldr	r3, [pc, #164]	@ (8004e64 <__swsetup_r+0xa8>)
 8004dc0:	4605      	mov	r5, r0
 8004dc2:	6818      	ldr	r0, [r3, #0]
 8004dc4:	460c      	mov	r4, r1
 8004dc6:	b118      	cbz	r0, 8004dd0 <__swsetup_r+0x14>
 8004dc8:	6a03      	ldr	r3, [r0, #32]
 8004dca:	b90b      	cbnz	r3, 8004dd0 <__swsetup_r+0x14>
 8004dcc:	f7ff fee0 	bl	8004b90 <__sinit>
 8004dd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dd4:	0719      	lsls	r1, r3, #28
 8004dd6:	d422      	bmi.n	8004e1e <__swsetup_r+0x62>
 8004dd8:	06da      	lsls	r2, r3, #27
 8004dda:	d407      	bmi.n	8004dec <__swsetup_r+0x30>
 8004ddc:	2209      	movs	r2, #9
 8004dde:	602a      	str	r2, [r5, #0]
 8004de0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004de4:	81a3      	strh	r3, [r4, #12]
 8004de6:	f04f 30ff 	mov.w	r0, #4294967295
 8004dea:	e033      	b.n	8004e54 <__swsetup_r+0x98>
 8004dec:	0758      	lsls	r0, r3, #29
 8004dee:	d512      	bpl.n	8004e16 <__swsetup_r+0x5a>
 8004df0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004df2:	b141      	cbz	r1, 8004e06 <__swsetup_r+0x4a>
 8004df4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004df8:	4299      	cmp	r1, r3
 8004dfa:	d002      	beq.n	8004e02 <__swsetup_r+0x46>
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	f000 f8bd 	bl	8004f7c <_free_r>
 8004e02:	2300      	movs	r3, #0
 8004e04:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e06:	89a3      	ldrh	r3, [r4, #12]
 8004e08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004e0c:	81a3      	strh	r3, [r4, #12]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	6063      	str	r3, [r4, #4]
 8004e12:	6923      	ldr	r3, [r4, #16]
 8004e14:	6023      	str	r3, [r4, #0]
 8004e16:	89a3      	ldrh	r3, [r4, #12]
 8004e18:	f043 0308 	orr.w	r3, r3, #8
 8004e1c:	81a3      	strh	r3, [r4, #12]
 8004e1e:	6923      	ldr	r3, [r4, #16]
 8004e20:	b94b      	cbnz	r3, 8004e36 <__swsetup_r+0x7a>
 8004e22:	89a3      	ldrh	r3, [r4, #12]
 8004e24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004e28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e2c:	d003      	beq.n	8004e36 <__swsetup_r+0x7a>
 8004e2e:	4621      	mov	r1, r4
 8004e30:	4628      	mov	r0, r5
 8004e32:	f000 fa6d 	bl	8005310 <__smakebuf_r>
 8004e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e3a:	f013 0201 	ands.w	r2, r3, #1
 8004e3e:	d00a      	beq.n	8004e56 <__swsetup_r+0x9a>
 8004e40:	2200      	movs	r2, #0
 8004e42:	60a2      	str	r2, [r4, #8]
 8004e44:	6962      	ldr	r2, [r4, #20]
 8004e46:	4252      	negs	r2, r2
 8004e48:	61a2      	str	r2, [r4, #24]
 8004e4a:	6922      	ldr	r2, [r4, #16]
 8004e4c:	b942      	cbnz	r2, 8004e60 <__swsetup_r+0xa4>
 8004e4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004e52:	d1c5      	bne.n	8004de0 <__swsetup_r+0x24>
 8004e54:	bd38      	pop	{r3, r4, r5, pc}
 8004e56:	0799      	lsls	r1, r3, #30
 8004e58:	bf58      	it	pl
 8004e5a:	6962      	ldrpl	r2, [r4, #20]
 8004e5c:	60a2      	str	r2, [r4, #8]
 8004e5e:	e7f4      	b.n	8004e4a <__swsetup_r+0x8e>
 8004e60:	2000      	movs	r0, #0
 8004e62:	e7f7      	b.n	8004e54 <__swsetup_r+0x98>
 8004e64:	2000001c 	.word	0x2000001c

08004e68 <memset>:
 8004e68:	4402      	add	r2, r0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d100      	bne.n	8004e72 <memset+0xa>
 8004e70:	4770      	bx	lr
 8004e72:	f803 1b01 	strb.w	r1, [r3], #1
 8004e76:	e7f9      	b.n	8004e6c <memset+0x4>

08004e78 <_close_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	4d06      	ldr	r5, [pc, #24]	@ (8004e94 <_close_r+0x1c>)
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4604      	mov	r4, r0
 8004e80:	4608      	mov	r0, r1
 8004e82:	602b      	str	r3, [r5, #0]
 8004e84:	f7fb fbb3 	bl	80005ee <_close>
 8004e88:	1c43      	adds	r3, r0, #1
 8004e8a:	d102      	bne.n	8004e92 <_close_r+0x1a>
 8004e8c:	682b      	ldr	r3, [r5, #0]
 8004e8e:	b103      	cbz	r3, 8004e92 <_close_r+0x1a>
 8004e90:	6023      	str	r3, [r4, #0]
 8004e92:	bd38      	pop	{r3, r4, r5, pc}
 8004e94:	20001b28 	.word	0x20001b28

08004e98 <_lseek_r>:
 8004e98:	b538      	push	{r3, r4, r5, lr}
 8004e9a:	4d07      	ldr	r5, [pc, #28]	@ (8004eb8 <_lseek_r+0x20>)
 8004e9c:	4604      	mov	r4, r0
 8004e9e:	4608      	mov	r0, r1
 8004ea0:	4611      	mov	r1, r2
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	602a      	str	r2, [r5, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f7fb fbc8 	bl	800063c <_lseek>
 8004eac:	1c43      	adds	r3, r0, #1
 8004eae:	d102      	bne.n	8004eb6 <_lseek_r+0x1e>
 8004eb0:	682b      	ldr	r3, [r5, #0]
 8004eb2:	b103      	cbz	r3, 8004eb6 <_lseek_r+0x1e>
 8004eb4:	6023      	str	r3, [r4, #0]
 8004eb6:	bd38      	pop	{r3, r4, r5, pc}
 8004eb8:	20001b28 	.word	0x20001b28

08004ebc <_read_r>:
 8004ebc:	b538      	push	{r3, r4, r5, lr}
 8004ebe:	4d07      	ldr	r5, [pc, #28]	@ (8004edc <_read_r+0x20>)
 8004ec0:	4604      	mov	r4, r0
 8004ec2:	4608      	mov	r0, r1
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	602a      	str	r2, [r5, #0]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	f7fb fb56 	bl	800057c <_read>
 8004ed0:	1c43      	adds	r3, r0, #1
 8004ed2:	d102      	bne.n	8004eda <_read_r+0x1e>
 8004ed4:	682b      	ldr	r3, [r5, #0]
 8004ed6:	b103      	cbz	r3, 8004eda <_read_r+0x1e>
 8004ed8:	6023      	str	r3, [r4, #0]
 8004eda:	bd38      	pop	{r3, r4, r5, pc}
 8004edc:	20001b28 	.word	0x20001b28

08004ee0 <_write_r>:
 8004ee0:	b538      	push	{r3, r4, r5, lr}
 8004ee2:	4d07      	ldr	r5, [pc, #28]	@ (8004f00 <_write_r+0x20>)
 8004ee4:	4604      	mov	r4, r0
 8004ee6:	4608      	mov	r0, r1
 8004ee8:	4611      	mov	r1, r2
 8004eea:	2200      	movs	r2, #0
 8004eec:	602a      	str	r2, [r5, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	f7fb fb61 	bl	80005b6 <_write>
 8004ef4:	1c43      	adds	r3, r0, #1
 8004ef6:	d102      	bne.n	8004efe <_write_r+0x1e>
 8004ef8:	682b      	ldr	r3, [r5, #0]
 8004efa:	b103      	cbz	r3, 8004efe <_write_r+0x1e>
 8004efc:	6023      	str	r3, [r4, #0]
 8004efe:	bd38      	pop	{r3, r4, r5, pc}
 8004f00:	20001b28 	.word	0x20001b28

08004f04 <__errno>:
 8004f04:	4b01      	ldr	r3, [pc, #4]	@ (8004f0c <__errno+0x8>)
 8004f06:	6818      	ldr	r0, [r3, #0]
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	2000001c 	.word	0x2000001c

08004f10 <__libc_init_array>:
 8004f10:	b570      	push	{r4, r5, r6, lr}
 8004f12:	4d0d      	ldr	r5, [pc, #52]	@ (8004f48 <__libc_init_array+0x38>)
 8004f14:	4c0d      	ldr	r4, [pc, #52]	@ (8004f4c <__libc_init_array+0x3c>)
 8004f16:	1b64      	subs	r4, r4, r5
 8004f18:	10a4      	asrs	r4, r4, #2
 8004f1a:	2600      	movs	r6, #0
 8004f1c:	42a6      	cmp	r6, r4
 8004f1e:	d109      	bne.n	8004f34 <__libc_init_array+0x24>
 8004f20:	4d0b      	ldr	r5, [pc, #44]	@ (8004f50 <__libc_init_array+0x40>)
 8004f22:	4c0c      	ldr	r4, [pc, #48]	@ (8004f54 <__libc_init_array+0x44>)
 8004f24:	f000 fa62 	bl	80053ec <_init>
 8004f28:	1b64      	subs	r4, r4, r5
 8004f2a:	10a4      	asrs	r4, r4, #2
 8004f2c:	2600      	movs	r6, #0
 8004f2e:	42a6      	cmp	r6, r4
 8004f30:	d105      	bne.n	8004f3e <__libc_init_array+0x2e>
 8004f32:	bd70      	pop	{r4, r5, r6, pc}
 8004f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f38:	4798      	blx	r3
 8004f3a:	3601      	adds	r6, #1
 8004f3c:	e7ee      	b.n	8004f1c <__libc_init_array+0xc>
 8004f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f42:	4798      	blx	r3
 8004f44:	3601      	adds	r6, #1
 8004f46:	e7f2      	b.n	8004f2e <__libc_init_array+0x1e>
 8004f48:	080054cc 	.word	0x080054cc
 8004f4c:	080054cc 	.word	0x080054cc
 8004f50:	080054cc 	.word	0x080054cc
 8004f54:	080054d0 	.word	0x080054d0

08004f58 <__retarget_lock_init_recursive>:
 8004f58:	4770      	bx	lr

08004f5a <__retarget_lock_acquire_recursive>:
 8004f5a:	4770      	bx	lr

08004f5c <__retarget_lock_release_recursive>:
 8004f5c:	4770      	bx	lr

08004f5e <memcpy>:
 8004f5e:	440a      	add	r2, r1
 8004f60:	4291      	cmp	r1, r2
 8004f62:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f66:	d100      	bne.n	8004f6a <memcpy+0xc>
 8004f68:	4770      	bx	lr
 8004f6a:	b510      	push	{r4, lr}
 8004f6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f74:	4291      	cmp	r1, r2
 8004f76:	d1f9      	bne.n	8004f6c <memcpy+0xe>
 8004f78:	bd10      	pop	{r4, pc}
	...

08004f7c <_free_r>:
 8004f7c:	b538      	push	{r3, r4, r5, lr}
 8004f7e:	4605      	mov	r5, r0
 8004f80:	2900      	cmp	r1, #0
 8004f82:	d041      	beq.n	8005008 <_free_r+0x8c>
 8004f84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f88:	1f0c      	subs	r4, r1, #4
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	bfb8      	it	lt
 8004f8e:	18e4      	addlt	r4, r4, r3
 8004f90:	f000 f8e0 	bl	8005154 <__malloc_lock>
 8004f94:	4a1d      	ldr	r2, [pc, #116]	@ (800500c <_free_r+0x90>)
 8004f96:	6813      	ldr	r3, [r2, #0]
 8004f98:	b933      	cbnz	r3, 8004fa8 <_free_r+0x2c>
 8004f9a:	6063      	str	r3, [r4, #4]
 8004f9c:	6014      	str	r4, [r2, #0]
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fa4:	f000 b8dc 	b.w	8005160 <__malloc_unlock>
 8004fa8:	42a3      	cmp	r3, r4
 8004faa:	d908      	bls.n	8004fbe <_free_r+0x42>
 8004fac:	6820      	ldr	r0, [r4, #0]
 8004fae:	1821      	adds	r1, r4, r0
 8004fb0:	428b      	cmp	r3, r1
 8004fb2:	bf01      	itttt	eq
 8004fb4:	6819      	ldreq	r1, [r3, #0]
 8004fb6:	685b      	ldreq	r3, [r3, #4]
 8004fb8:	1809      	addeq	r1, r1, r0
 8004fba:	6021      	streq	r1, [r4, #0]
 8004fbc:	e7ed      	b.n	8004f9a <_free_r+0x1e>
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	b10b      	cbz	r3, 8004fc8 <_free_r+0x4c>
 8004fc4:	42a3      	cmp	r3, r4
 8004fc6:	d9fa      	bls.n	8004fbe <_free_r+0x42>
 8004fc8:	6811      	ldr	r1, [r2, #0]
 8004fca:	1850      	adds	r0, r2, r1
 8004fcc:	42a0      	cmp	r0, r4
 8004fce:	d10b      	bne.n	8004fe8 <_free_r+0x6c>
 8004fd0:	6820      	ldr	r0, [r4, #0]
 8004fd2:	4401      	add	r1, r0
 8004fd4:	1850      	adds	r0, r2, r1
 8004fd6:	4283      	cmp	r3, r0
 8004fd8:	6011      	str	r1, [r2, #0]
 8004fda:	d1e0      	bne.n	8004f9e <_free_r+0x22>
 8004fdc:	6818      	ldr	r0, [r3, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	6053      	str	r3, [r2, #4]
 8004fe2:	4408      	add	r0, r1
 8004fe4:	6010      	str	r0, [r2, #0]
 8004fe6:	e7da      	b.n	8004f9e <_free_r+0x22>
 8004fe8:	d902      	bls.n	8004ff0 <_free_r+0x74>
 8004fea:	230c      	movs	r3, #12
 8004fec:	602b      	str	r3, [r5, #0]
 8004fee:	e7d6      	b.n	8004f9e <_free_r+0x22>
 8004ff0:	6820      	ldr	r0, [r4, #0]
 8004ff2:	1821      	adds	r1, r4, r0
 8004ff4:	428b      	cmp	r3, r1
 8004ff6:	bf04      	itt	eq
 8004ff8:	6819      	ldreq	r1, [r3, #0]
 8004ffa:	685b      	ldreq	r3, [r3, #4]
 8004ffc:	6063      	str	r3, [r4, #4]
 8004ffe:	bf04      	itt	eq
 8005000:	1809      	addeq	r1, r1, r0
 8005002:	6021      	streq	r1, [r4, #0]
 8005004:	6054      	str	r4, [r2, #4]
 8005006:	e7ca      	b.n	8004f9e <_free_r+0x22>
 8005008:	bd38      	pop	{r3, r4, r5, pc}
 800500a:	bf00      	nop
 800500c:	20001b34 	.word	0x20001b34

08005010 <sbrk_aligned>:
 8005010:	b570      	push	{r4, r5, r6, lr}
 8005012:	4e0f      	ldr	r6, [pc, #60]	@ (8005050 <sbrk_aligned+0x40>)
 8005014:	460c      	mov	r4, r1
 8005016:	6831      	ldr	r1, [r6, #0]
 8005018:	4605      	mov	r5, r0
 800501a:	b911      	cbnz	r1, 8005022 <sbrk_aligned+0x12>
 800501c:	f000 f9d6 	bl	80053cc <_sbrk_r>
 8005020:	6030      	str	r0, [r6, #0]
 8005022:	4621      	mov	r1, r4
 8005024:	4628      	mov	r0, r5
 8005026:	f000 f9d1 	bl	80053cc <_sbrk_r>
 800502a:	1c43      	adds	r3, r0, #1
 800502c:	d103      	bne.n	8005036 <sbrk_aligned+0x26>
 800502e:	f04f 34ff 	mov.w	r4, #4294967295
 8005032:	4620      	mov	r0, r4
 8005034:	bd70      	pop	{r4, r5, r6, pc}
 8005036:	1cc4      	adds	r4, r0, #3
 8005038:	f024 0403 	bic.w	r4, r4, #3
 800503c:	42a0      	cmp	r0, r4
 800503e:	d0f8      	beq.n	8005032 <sbrk_aligned+0x22>
 8005040:	1a21      	subs	r1, r4, r0
 8005042:	4628      	mov	r0, r5
 8005044:	f000 f9c2 	bl	80053cc <_sbrk_r>
 8005048:	3001      	adds	r0, #1
 800504a:	d1f2      	bne.n	8005032 <sbrk_aligned+0x22>
 800504c:	e7ef      	b.n	800502e <sbrk_aligned+0x1e>
 800504e:	bf00      	nop
 8005050:	20001b30 	.word	0x20001b30

08005054 <_malloc_r>:
 8005054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005058:	1ccd      	adds	r5, r1, #3
 800505a:	f025 0503 	bic.w	r5, r5, #3
 800505e:	3508      	adds	r5, #8
 8005060:	2d0c      	cmp	r5, #12
 8005062:	bf38      	it	cc
 8005064:	250c      	movcc	r5, #12
 8005066:	2d00      	cmp	r5, #0
 8005068:	4606      	mov	r6, r0
 800506a:	db01      	blt.n	8005070 <_malloc_r+0x1c>
 800506c:	42a9      	cmp	r1, r5
 800506e:	d904      	bls.n	800507a <_malloc_r+0x26>
 8005070:	230c      	movs	r3, #12
 8005072:	6033      	str	r3, [r6, #0]
 8005074:	2000      	movs	r0, #0
 8005076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800507a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005150 <_malloc_r+0xfc>
 800507e:	f000 f869 	bl	8005154 <__malloc_lock>
 8005082:	f8d8 3000 	ldr.w	r3, [r8]
 8005086:	461c      	mov	r4, r3
 8005088:	bb44      	cbnz	r4, 80050dc <_malloc_r+0x88>
 800508a:	4629      	mov	r1, r5
 800508c:	4630      	mov	r0, r6
 800508e:	f7ff ffbf 	bl	8005010 <sbrk_aligned>
 8005092:	1c43      	adds	r3, r0, #1
 8005094:	4604      	mov	r4, r0
 8005096:	d158      	bne.n	800514a <_malloc_r+0xf6>
 8005098:	f8d8 4000 	ldr.w	r4, [r8]
 800509c:	4627      	mov	r7, r4
 800509e:	2f00      	cmp	r7, #0
 80050a0:	d143      	bne.n	800512a <_malloc_r+0xd6>
 80050a2:	2c00      	cmp	r4, #0
 80050a4:	d04b      	beq.n	800513e <_malloc_r+0xea>
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	4639      	mov	r1, r7
 80050aa:	4630      	mov	r0, r6
 80050ac:	eb04 0903 	add.w	r9, r4, r3
 80050b0:	f000 f98c 	bl	80053cc <_sbrk_r>
 80050b4:	4581      	cmp	r9, r0
 80050b6:	d142      	bne.n	800513e <_malloc_r+0xea>
 80050b8:	6821      	ldr	r1, [r4, #0]
 80050ba:	1a6d      	subs	r5, r5, r1
 80050bc:	4629      	mov	r1, r5
 80050be:	4630      	mov	r0, r6
 80050c0:	f7ff ffa6 	bl	8005010 <sbrk_aligned>
 80050c4:	3001      	adds	r0, #1
 80050c6:	d03a      	beq.n	800513e <_malloc_r+0xea>
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	442b      	add	r3, r5
 80050cc:	6023      	str	r3, [r4, #0]
 80050ce:	f8d8 3000 	ldr.w	r3, [r8]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	bb62      	cbnz	r2, 8005130 <_malloc_r+0xdc>
 80050d6:	f8c8 7000 	str.w	r7, [r8]
 80050da:	e00f      	b.n	80050fc <_malloc_r+0xa8>
 80050dc:	6822      	ldr	r2, [r4, #0]
 80050de:	1b52      	subs	r2, r2, r5
 80050e0:	d420      	bmi.n	8005124 <_malloc_r+0xd0>
 80050e2:	2a0b      	cmp	r2, #11
 80050e4:	d917      	bls.n	8005116 <_malloc_r+0xc2>
 80050e6:	1961      	adds	r1, r4, r5
 80050e8:	42a3      	cmp	r3, r4
 80050ea:	6025      	str	r5, [r4, #0]
 80050ec:	bf18      	it	ne
 80050ee:	6059      	strne	r1, [r3, #4]
 80050f0:	6863      	ldr	r3, [r4, #4]
 80050f2:	bf08      	it	eq
 80050f4:	f8c8 1000 	streq.w	r1, [r8]
 80050f8:	5162      	str	r2, [r4, r5]
 80050fa:	604b      	str	r3, [r1, #4]
 80050fc:	4630      	mov	r0, r6
 80050fe:	f000 f82f 	bl	8005160 <__malloc_unlock>
 8005102:	f104 000b 	add.w	r0, r4, #11
 8005106:	1d23      	adds	r3, r4, #4
 8005108:	f020 0007 	bic.w	r0, r0, #7
 800510c:	1ac2      	subs	r2, r0, r3
 800510e:	bf1c      	itt	ne
 8005110:	1a1b      	subne	r3, r3, r0
 8005112:	50a3      	strne	r3, [r4, r2]
 8005114:	e7af      	b.n	8005076 <_malloc_r+0x22>
 8005116:	6862      	ldr	r2, [r4, #4]
 8005118:	42a3      	cmp	r3, r4
 800511a:	bf0c      	ite	eq
 800511c:	f8c8 2000 	streq.w	r2, [r8]
 8005120:	605a      	strne	r2, [r3, #4]
 8005122:	e7eb      	b.n	80050fc <_malloc_r+0xa8>
 8005124:	4623      	mov	r3, r4
 8005126:	6864      	ldr	r4, [r4, #4]
 8005128:	e7ae      	b.n	8005088 <_malloc_r+0x34>
 800512a:	463c      	mov	r4, r7
 800512c:	687f      	ldr	r7, [r7, #4]
 800512e:	e7b6      	b.n	800509e <_malloc_r+0x4a>
 8005130:	461a      	mov	r2, r3
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	42a3      	cmp	r3, r4
 8005136:	d1fb      	bne.n	8005130 <_malloc_r+0xdc>
 8005138:	2300      	movs	r3, #0
 800513a:	6053      	str	r3, [r2, #4]
 800513c:	e7de      	b.n	80050fc <_malloc_r+0xa8>
 800513e:	230c      	movs	r3, #12
 8005140:	6033      	str	r3, [r6, #0]
 8005142:	4630      	mov	r0, r6
 8005144:	f000 f80c 	bl	8005160 <__malloc_unlock>
 8005148:	e794      	b.n	8005074 <_malloc_r+0x20>
 800514a:	6005      	str	r5, [r0, #0]
 800514c:	e7d6      	b.n	80050fc <_malloc_r+0xa8>
 800514e:	bf00      	nop
 8005150:	20001b34 	.word	0x20001b34

08005154 <__malloc_lock>:
 8005154:	4801      	ldr	r0, [pc, #4]	@ (800515c <__malloc_lock+0x8>)
 8005156:	f7ff bf00 	b.w	8004f5a <__retarget_lock_acquire_recursive>
 800515a:	bf00      	nop
 800515c:	20001b2c 	.word	0x20001b2c

08005160 <__malloc_unlock>:
 8005160:	4801      	ldr	r0, [pc, #4]	@ (8005168 <__malloc_unlock+0x8>)
 8005162:	f7ff befb 	b.w	8004f5c <__retarget_lock_release_recursive>
 8005166:	bf00      	nop
 8005168:	20001b2c 	.word	0x20001b2c

0800516c <__sflush_r>:
 800516c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005174:	0716      	lsls	r6, r2, #28
 8005176:	4605      	mov	r5, r0
 8005178:	460c      	mov	r4, r1
 800517a:	d454      	bmi.n	8005226 <__sflush_r+0xba>
 800517c:	684b      	ldr	r3, [r1, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	dc02      	bgt.n	8005188 <__sflush_r+0x1c>
 8005182:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005184:	2b00      	cmp	r3, #0
 8005186:	dd48      	ble.n	800521a <__sflush_r+0xae>
 8005188:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800518a:	2e00      	cmp	r6, #0
 800518c:	d045      	beq.n	800521a <__sflush_r+0xae>
 800518e:	2300      	movs	r3, #0
 8005190:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005194:	682f      	ldr	r7, [r5, #0]
 8005196:	6a21      	ldr	r1, [r4, #32]
 8005198:	602b      	str	r3, [r5, #0]
 800519a:	d030      	beq.n	80051fe <__sflush_r+0x92>
 800519c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800519e:	89a3      	ldrh	r3, [r4, #12]
 80051a0:	0759      	lsls	r1, r3, #29
 80051a2:	d505      	bpl.n	80051b0 <__sflush_r+0x44>
 80051a4:	6863      	ldr	r3, [r4, #4]
 80051a6:	1ad2      	subs	r2, r2, r3
 80051a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80051aa:	b10b      	cbz	r3, 80051b0 <__sflush_r+0x44>
 80051ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80051ae:	1ad2      	subs	r2, r2, r3
 80051b0:	2300      	movs	r3, #0
 80051b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80051b4:	6a21      	ldr	r1, [r4, #32]
 80051b6:	4628      	mov	r0, r5
 80051b8:	47b0      	blx	r6
 80051ba:	1c43      	adds	r3, r0, #1
 80051bc:	89a3      	ldrh	r3, [r4, #12]
 80051be:	d106      	bne.n	80051ce <__sflush_r+0x62>
 80051c0:	6829      	ldr	r1, [r5, #0]
 80051c2:	291d      	cmp	r1, #29
 80051c4:	d82b      	bhi.n	800521e <__sflush_r+0xb2>
 80051c6:	4a2a      	ldr	r2, [pc, #168]	@ (8005270 <__sflush_r+0x104>)
 80051c8:	40ca      	lsrs	r2, r1
 80051ca:	07d6      	lsls	r6, r2, #31
 80051cc:	d527      	bpl.n	800521e <__sflush_r+0xb2>
 80051ce:	2200      	movs	r2, #0
 80051d0:	6062      	str	r2, [r4, #4]
 80051d2:	04d9      	lsls	r1, r3, #19
 80051d4:	6922      	ldr	r2, [r4, #16]
 80051d6:	6022      	str	r2, [r4, #0]
 80051d8:	d504      	bpl.n	80051e4 <__sflush_r+0x78>
 80051da:	1c42      	adds	r2, r0, #1
 80051dc:	d101      	bne.n	80051e2 <__sflush_r+0x76>
 80051de:	682b      	ldr	r3, [r5, #0]
 80051e0:	b903      	cbnz	r3, 80051e4 <__sflush_r+0x78>
 80051e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80051e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051e6:	602f      	str	r7, [r5, #0]
 80051e8:	b1b9      	cbz	r1, 800521a <__sflush_r+0xae>
 80051ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051ee:	4299      	cmp	r1, r3
 80051f0:	d002      	beq.n	80051f8 <__sflush_r+0x8c>
 80051f2:	4628      	mov	r0, r5
 80051f4:	f7ff fec2 	bl	8004f7c <_free_r>
 80051f8:	2300      	movs	r3, #0
 80051fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80051fc:	e00d      	b.n	800521a <__sflush_r+0xae>
 80051fe:	2301      	movs	r3, #1
 8005200:	4628      	mov	r0, r5
 8005202:	47b0      	blx	r6
 8005204:	4602      	mov	r2, r0
 8005206:	1c50      	adds	r0, r2, #1
 8005208:	d1c9      	bne.n	800519e <__sflush_r+0x32>
 800520a:	682b      	ldr	r3, [r5, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0c6      	beq.n	800519e <__sflush_r+0x32>
 8005210:	2b1d      	cmp	r3, #29
 8005212:	d001      	beq.n	8005218 <__sflush_r+0xac>
 8005214:	2b16      	cmp	r3, #22
 8005216:	d11e      	bne.n	8005256 <__sflush_r+0xea>
 8005218:	602f      	str	r7, [r5, #0]
 800521a:	2000      	movs	r0, #0
 800521c:	e022      	b.n	8005264 <__sflush_r+0xf8>
 800521e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005222:	b21b      	sxth	r3, r3
 8005224:	e01b      	b.n	800525e <__sflush_r+0xf2>
 8005226:	690f      	ldr	r7, [r1, #16]
 8005228:	2f00      	cmp	r7, #0
 800522a:	d0f6      	beq.n	800521a <__sflush_r+0xae>
 800522c:	0793      	lsls	r3, r2, #30
 800522e:	680e      	ldr	r6, [r1, #0]
 8005230:	bf08      	it	eq
 8005232:	694b      	ldreq	r3, [r1, #20]
 8005234:	600f      	str	r7, [r1, #0]
 8005236:	bf18      	it	ne
 8005238:	2300      	movne	r3, #0
 800523a:	eba6 0807 	sub.w	r8, r6, r7
 800523e:	608b      	str	r3, [r1, #8]
 8005240:	f1b8 0f00 	cmp.w	r8, #0
 8005244:	dde9      	ble.n	800521a <__sflush_r+0xae>
 8005246:	6a21      	ldr	r1, [r4, #32]
 8005248:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800524a:	4643      	mov	r3, r8
 800524c:	463a      	mov	r2, r7
 800524e:	4628      	mov	r0, r5
 8005250:	47b0      	blx	r6
 8005252:	2800      	cmp	r0, #0
 8005254:	dc08      	bgt.n	8005268 <__sflush_r+0xfc>
 8005256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800525a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800525e:	81a3      	strh	r3, [r4, #12]
 8005260:	f04f 30ff 	mov.w	r0, #4294967295
 8005264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005268:	4407      	add	r7, r0
 800526a:	eba8 0800 	sub.w	r8, r8, r0
 800526e:	e7e7      	b.n	8005240 <__sflush_r+0xd4>
 8005270:	20400001 	.word	0x20400001

08005274 <_fflush_r>:
 8005274:	b538      	push	{r3, r4, r5, lr}
 8005276:	690b      	ldr	r3, [r1, #16]
 8005278:	4605      	mov	r5, r0
 800527a:	460c      	mov	r4, r1
 800527c:	b913      	cbnz	r3, 8005284 <_fflush_r+0x10>
 800527e:	2500      	movs	r5, #0
 8005280:	4628      	mov	r0, r5
 8005282:	bd38      	pop	{r3, r4, r5, pc}
 8005284:	b118      	cbz	r0, 800528e <_fflush_r+0x1a>
 8005286:	6a03      	ldr	r3, [r0, #32]
 8005288:	b90b      	cbnz	r3, 800528e <_fflush_r+0x1a>
 800528a:	f7ff fc81 	bl	8004b90 <__sinit>
 800528e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0f3      	beq.n	800527e <_fflush_r+0xa>
 8005296:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005298:	07d0      	lsls	r0, r2, #31
 800529a:	d404      	bmi.n	80052a6 <_fflush_r+0x32>
 800529c:	0599      	lsls	r1, r3, #22
 800529e:	d402      	bmi.n	80052a6 <_fflush_r+0x32>
 80052a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052a2:	f7ff fe5a 	bl	8004f5a <__retarget_lock_acquire_recursive>
 80052a6:	4628      	mov	r0, r5
 80052a8:	4621      	mov	r1, r4
 80052aa:	f7ff ff5f 	bl	800516c <__sflush_r>
 80052ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052b0:	07da      	lsls	r2, r3, #31
 80052b2:	4605      	mov	r5, r0
 80052b4:	d4e4      	bmi.n	8005280 <_fflush_r+0xc>
 80052b6:	89a3      	ldrh	r3, [r4, #12]
 80052b8:	059b      	lsls	r3, r3, #22
 80052ba:	d4e1      	bmi.n	8005280 <_fflush_r+0xc>
 80052bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052be:	f7ff fe4d 	bl	8004f5c <__retarget_lock_release_recursive>
 80052c2:	e7dd      	b.n	8005280 <_fflush_r+0xc>

080052c4 <__swhatbuf_r>:
 80052c4:	b570      	push	{r4, r5, r6, lr}
 80052c6:	460c      	mov	r4, r1
 80052c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052cc:	2900      	cmp	r1, #0
 80052ce:	b096      	sub	sp, #88	@ 0x58
 80052d0:	4615      	mov	r5, r2
 80052d2:	461e      	mov	r6, r3
 80052d4:	da0d      	bge.n	80052f2 <__swhatbuf_r+0x2e>
 80052d6:	89a3      	ldrh	r3, [r4, #12]
 80052d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80052dc:	f04f 0100 	mov.w	r1, #0
 80052e0:	bf14      	ite	ne
 80052e2:	2340      	movne	r3, #64	@ 0x40
 80052e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80052e8:	2000      	movs	r0, #0
 80052ea:	6031      	str	r1, [r6, #0]
 80052ec:	602b      	str	r3, [r5, #0]
 80052ee:	b016      	add	sp, #88	@ 0x58
 80052f0:	bd70      	pop	{r4, r5, r6, pc}
 80052f2:	466a      	mov	r2, sp
 80052f4:	f000 f848 	bl	8005388 <_fstat_r>
 80052f8:	2800      	cmp	r0, #0
 80052fa:	dbec      	blt.n	80052d6 <__swhatbuf_r+0x12>
 80052fc:	9901      	ldr	r1, [sp, #4]
 80052fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005302:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005306:	4259      	negs	r1, r3
 8005308:	4159      	adcs	r1, r3
 800530a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800530e:	e7eb      	b.n	80052e8 <__swhatbuf_r+0x24>

08005310 <__smakebuf_r>:
 8005310:	898b      	ldrh	r3, [r1, #12]
 8005312:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005314:	079d      	lsls	r5, r3, #30
 8005316:	4606      	mov	r6, r0
 8005318:	460c      	mov	r4, r1
 800531a:	d507      	bpl.n	800532c <__smakebuf_r+0x1c>
 800531c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005320:	6023      	str	r3, [r4, #0]
 8005322:	6123      	str	r3, [r4, #16]
 8005324:	2301      	movs	r3, #1
 8005326:	6163      	str	r3, [r4, #20]
 8005328:	b003      	add	sp, #12
 800532a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800532c:	ab01      	add	r3, sp, #4
 800532e:	466a      	mov	r2, sp
 8005330:	f7ff ffc8 	bl	80052c4 <__swhatbuf_r>
 8005334:	9f00      	ldr	r7, [sp, #0]
 8005336:	4605      	mov	r5, r0
 8005338:	4639      	mov	r1, r7
 800533a:	4630      	mov	r0, r6
 800533c:	f7ff fe8a 	bl	8005054 <_malloc_r>
 8005340:	b948      	cbnz	r0, 8005356 <__smakebuf_r+0x46>
 8005342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005346:	059a      	lsls	r2, r3, #22
 8005348:	d4ee      	bmi.n	8005328 <__smakebuf_r+0x18>
 800534a:	f023 0303 	bic.w	r3, r3, #3
 800534e:	f043 0302 	orr.w	r3, r3, #2
 8005352:	81a3      	strh	r3, [r4, #12]
 8005354:	e7e2      	b.n	800531c <__smakebuf_r+0xc>
 8005356:	89a3      	ldrh	r3, [r4, #12]
 8005358:	6020      	str	r0, [r4, #0]
 800535a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800535e:	81a3      	strh	r3, [r4, #12]
 8005360:	9b01      	ldr	r3, [sp, #4]
 8005362:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005366:	b15b      	cbz	r3, 8005380 <__smakebuf_r+0x70>
 8005368:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800536c:	4630      	mov	r0, r6
 800536e:	f000 f81d 	bl	80053ac <_isatty_r>
 8005372:	b128      	cbz	r0, 8005380 <__smakebuf_r+0x70>
 8005374:	89a3      	ldrh	r3, [r4, #12]
 8005376:	f023 0303 	bic.w	r3, r3, #3
 800537a:	f043 0301 	orr.w	r3, r3, #1
 800537e:	81a3      	strh	r3, [r4, #12]
 8005380:	89a3      	ldrh	r3, [r4, #12]
 8005382:	431d      	orrs	r5, r3
 8005384:	81a5      	strh	r5, [r4, #12]
 8005386:	e7cf      	b.n	8005328 <__smakebuf_r+0x18>

08005388 <_fstat_r>:
 8005388:	b538      	push	{r3, r4, r5, lr}
 800538a:	4d07      	ldr	r5, [pc, #28]	@ (80053a8 <_fstat_r+0x20>)
 800538c:	2300      	movs	r3, #0
 800538e:	4604      	mov	r4, r0
 8005390:	4608      	mov	r0, r1
 8005392:	4611      	mov	r1, r2
 8005394:	602b      	str	r3, [r5, #0]
 8005396:	f7fb f936 	bl	8000606 <_fstat>
 800539a:	1c43      	adds	r3, r0, #1
 800539c:	d102      	bne.n	80053a4 <_fstat_r+0x1c>
 800539e:	682b      	ldr	r3, [r5, #0]
 80053a0:	b103      	cbz	r3, 80053a4 <_fstat_r+0x1c>
 80053a2:	6023      	str	r3, [r4, #0]
 80053a4:	bd38      	pop	{r3, r4, r5, pc}
 80053a6:	bf00      	nop
 80053a8:	20001b28 	.word	0x20001b28

080053ac <_isatty_r>:
 80053ac:	b538      	push	{r3, r4, r5, lr}
 80053ae:	4d06      	ldr	r5, [pc, #24]	@ (80053c8 <_isatty_r+0x1c>)
 80053b0:	2300      	movs	r3, #0
 80053b2:	4604      	mov	r4, r0
 80053b4:	4608      	mov	r0, r1
 80053b6:	602b      	str	r3, [r5, #0]
 80053b8:	f7fb f935 	bl	8000626 <_isatty>
 80053bc:	1c43      	adds	r3, r0, #1
 80053be:	d102      	bne.n	80053c6 <_isatty_r+0x1a>
 80053c0:	682b      	ldr	r3, [r5, #0]
 80053c2:	b103      	cbz	r3, 80053c6 <_isatty_r+0x1a>
 80053c4:	6023      	str	r3, [r4, #0]
 80053c6:	bd38      	pop	{r3, r4, r5, pc}
 80053c8:	20001b28 	.word	0x20001b28

080053cc <_sbrk_r>:
 80053cc:	b538      	push	{r3, r4, r5, lr}
 80053ce:	4d06      	ldr	r5, [pc, #24]	@ (80053e8 <_sbrk_r+0x1c>)
 80053d0:	2300      	movs	r3, #0
 80053d2:	4604      	mov	r4, r0
 80053d4:	4608      	mov	r0, r1
 80053d6:	602b      	str	r3, [r5, #0]
 80053d8:	f7fb f93e 	bl	8000658 <_sbrk>
 80053dc:	1c43      	adds	r3, r0, #1
 80053de:	d102      	bne.n	80053e6 <_sbrk_r+0x1a>
 80053e0:	682b      	ldr	r3, [r5, #0]
 80053e2:	b103      	cbz	r3, 80053e6 <_sbrk_r+0x1a>
 80053e4:	6023      	str	r3, [r4, #0]
 80053e6:	bd38      	pop	{r3, r4, r5, pc}
 80053e8:	20001b28 	.word	0x20001b28

080053ec <_init>:
 80053ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ee:	bf00      	nop
 80053f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053f2:	bc08      	pop	{r3}
 80053f4:	469e      	mov	lr, r3
 80053f6:	4770      	bx	lr

080053f8 <_fini>:
 80053f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fa:	bf00      	nop
 80053fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053fe:	bc08      	pop	{r3}
 8005400:	469e      	mov	lr, r3
 8005402:	4770      	bx	lr
