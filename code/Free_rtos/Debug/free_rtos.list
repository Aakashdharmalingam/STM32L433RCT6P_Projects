
free_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cd4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005e64  08005e64  00006e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f24  08005f24  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005f24  08005f24  00006f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f2c  08005f2c  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f2c  08005f2c  00006f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f30  08005f30  00006f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005f34  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a04  20000010  08005f44  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a14  08005f44  00007a14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000193e0  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034c0  00000000  00000000  00020420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  000238e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001160  00000000  00000000  00024f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003111  00000000  00000000  00026090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181e1  00000000  00000000  000291a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df042  00000000  00000000  00041382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001203c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e78  00000000  00000000  00120408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  00126280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e4c 	.word	0x08005e4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005e4c 	.word	0x08005e4c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fa9d 	bl	8000a3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f826 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f8a4 	bl	8000654 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050c:	f000 f872 	bl	80005f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000510:	f002 fee2 	bl	80032d8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000514:	4a09      	ldr	r2, [pc, #36]	@ (800053c <main+0x40>)
 8000516:	2100      	movs	r1, #0
 8000518:	4809      	ldr	r0, [pc, #36]	@ (8000540 <main+0x44>)
 800051a:	f002 ff27 	bl	800336c <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a08      	ldr	r2, [pc, #32]	@ (8000544 <main+0x48>)
 8000522:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000524:	4a08      	ldr	r2, [pc, #32]	@ (8000548 <main+0x4c>)
 8000526:	2100      	movs	r1, #0
 8000528:	4808      	ldr	r0, [pc, #32]	@ (800054c <main+0x50>)
 800052a:	f002 ff1f 	bl	800336c <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a07      	ldr	r2, [pc, #28]	@ (8000550 <main+0x54>)
 8000532:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000534:	f002 fef4 	bl	8003320 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <main+0x3c>
 800053c:	08005e94 	.word	0x08005e94
 8000540:	08000719 	.word	0x08000719
 8000544:	200000b4 	.word	0x200000b4
 8000548:	08005eb8 	.word	0x08005eb8
 800054c:	08000737 	.word	0x08000737
 8000550:	200000b8 	.word	0x200000b8

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b096      	sub	sp, #88	@ 0x58
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0314 	add.w	r3, r7, #20
 800055e:	2244      	movs	r2, #68	@ 0x44
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f005 fc38 	bl	8005dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	463b      	mov	r3, r7
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000576:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800057a:	f000 fd35 	bl	8000fe8 <HAL_PWREx_ControlVoltageScaling>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000584:	f000 f8f8 	bl	8000778 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000588:	2301      	movs	r3, #1
 800058a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000590:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000596:	2303      	movs	r3, #3
 8000598:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800059a:	2301      	movs	r3, #1
 800059c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800059e:	2314      	movs	r3, #20
 80005a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005a2:	2307      	movs	r3, #7
 80005a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 fd6e 	bl	8001094 <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005be:	f000 f8db 	bl	8000778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	230f      	movs	r3, #15
 80005c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	2303      	movs	r3, #3
 80005c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d6:	463b      	mov	r3, r7
 80005d8:	2104      	movs	r1, #4
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 f96e 	bl	80018bc <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005e6:	f000 f8c7 	bl	8000778 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3758      	adds	r7, #88	@ 0x58
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005f8:	4b14      	ldr	r3, [pc, #80]	@ (800064c <MX_USART2_UART_Init+0x58>)
 80005fa:	4a15      	ldr	r2, [pc, #84]	@ (8000650 <MX_USART2_UART_Init+0x5c>)
 80005fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005fe:	4b13      	ldr	r3, [pc, #76]	@ (800064c <MX_USART2_UART_Init+0x58>)
 8000600:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000604:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000606:	4b11      	ldr	r3, [pc, #68]	@ (800064c <MX_USART2_UART_Init+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800060c:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <MX_USART2_UART_Init+0x58>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000612:	4b0e      	ldr	r3, [pc, #56]	@ (800064c <MX_USART2_UART_Init+0x58>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000618:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <MX_USART2_UART_Init+0x58>)
 800061a:	220c      	movs	r2, #12
 800061c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061e:	4b0b      	ldr	r3, [pc, #44]	@ (800064c <MX_USART2_UART_Init+0x58>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000624:	4b09      	ldr	r3, [pc, #36]	@ (800064c <MX_USART2_UART_Init+0x58>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800062a:	4b08      	ldr	r3, [pc, #32]	@ (800064c <MX_USART2_UART_Init+0x58>)
 800062c:	2200      	movs	r2, #0
 800062e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000630:	4b06      	ldr	r3, [pc, #24]	@ (800064c <MX_USART2_UART_Init+0x58>)
 8000632:	2200      	movs	r2, #0
 8000634:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000636:	4805      	ldr	r0, [pc, #20]	@ (800064c <MX_USART2_UART_Init+0x58>)
 8000638:	f002 f946 	bl	80028c8 <HAL_UART_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000642:	f000 f899 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	2000002c 	.word	0x2000002c
 8000650:	40004400 	.word	0x40004400

08000654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066a:	4b29      	ldr	r3, [pc, #164]	@ (8000710 <MX_GPIO_Init+0xbc>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066e:	4a28      	ldr	r2, [pc, #160]	@ (8000710 <MX_GPIO_Init+0xbc>)
 8000670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000674:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000676:	4b26      	ldr	r3, [pc, #152]	@ (8000710 <MX_GPIO_Init+0xbc>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b23      	ldr	r3, [pc, #140]	@ (8000710 <MX_GPIO_Init+0xbc>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	4a22      	ldr	r2, [pc, #136]	@ (8000710 <MX_GPIO_Init+0xbc>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068e:	4b20      	ldr	r3, [pc, #128]	@ (8000710 <MX_GPIO_Init+0xbc>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	4b1d      	ldr	r3, [pc, #116]	@ (8000710 <MX_GPIO_Init+0xbc>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	4a1c      	ldr	r2, [pc, #112]	@ (8000710 <MX_GPIO_Init+0xbc>)
 80006a0:	f043 0302 	orr.w	r3, r3, #2
 80006a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000710 <MX_GPIO_Init+0xbc>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	21c0      	movs	r1, #192	@ 0xc0
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ba:	f000 fc55 	bl	8000f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006c4:	4813      	ldr	r0, [pc, #76]	@ (8000714 <MX_GPIO_Init+0xc0>)
 80006c6:	f000 fc4f 	bl	8000f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006ca:	23c0      	movs	r3, #192	@ 0xc0
 80006cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	4619      	mov	r1, r3
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e4:	f000 fac6 	bl	8000c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	4619      	mov	r1, r3
 8000700:	4804      	ldr	r0, [pc, #16]	@ (8000714 <MX_GPIO_Init+0xc0>)
 8000702:	f000 fab7 	bl	8000c74 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000706:	bf00      	nop
 8000708:	3720      	adds	r7, #32
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40021000 	.word	0x40021000
 8000714:	48000400 	.word	0x48000400

08000718 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000720:	2140      	movs	r1, #64	@ 0x40
 8000722:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000726:	f000 fc37 	bl	8000f98 <HAL_GPIO_TogglePin>
    osDelay(1000);
 800072a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800072e:	f002 feaf 	bl	8003490 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000732:	bf00      	nop
 8000734:	e7f4      	b.n	8000720 <StartDefaultTask+0x8>

08000736 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	b082      	sub	sp, #8
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 800073e:	2180      	movs	r1, #128	@ 0x80
 8000740:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000744:	f000 fc28 	bl	8000f98 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000748:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800074c:	f002 fea0 	bl	8003490 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000750:	bf00      	nop
 8000752:	e7f4      	b.n	800073e <StartTask02+0x8>

08000754 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a04      	ldr	r2, [pc, #16]	@ (8000774 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d101      	bne.n	800076a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000766:	f000 f983 	bl	8000a70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40001000 	.word	0x40001000

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <Error_Handler+0x8>

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <HAL_MspInit+0x4c>)
 800078c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800078e:	4a10      	ldr	r2, [pc, #64]	@ (80007d0 <HAL_MspInit+0x4c>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6613      	str	r3, [r2, #96]	@ 0x60
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <HAL_MspInit+0x4c>)
 8000798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <HAL_MspInit+0x4c>)
 80007a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007a6:	4a0a      	ldr	r2, [pc, #40]	@ (80007d0 <HAL_MspInit+0x4c>)
 80007a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <HAL_MspInit+0x4c>)
 80007b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	210f      	movs	r1, #15
 80007be:	f06f 0001 	mvn.w	r0, #1
 80007c2:	f000 fa2d 	bl	8000c20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000

080007d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b0a2      	sub	sp, #136	@ 0x88
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	2260      	movs	r2, #96	@ 0x60
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f005 faef 	bl	8005dd8 <memset>
  if(huart->Instance==USART2)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a20      	ldr	r2, [pc, #128]	@ (8000880 <HAL_UART_MspInit+0xac>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d138      	bne.n	8000876 <HAL_UART_MspInit+0xa2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000804:	2302      	movs	r3, #2
 8000806:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000808:	2300      	movs	r3, #0
 800080a:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4618      	mov	r0, r3
 8000812:	f001 faa9 	bl	8001d68 <HAL_RCCEx_PeriphCLKConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800081c:	f7ff ffac 	bl	8000778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000820:	4b18      	ldr	r3, [pc, #96]	@ (8000884 <HAL_UART_MspInit+0xb0>)
 8000822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000824:	4a17      	ldr	r2, [pc, #92]	@ (8000884 <HAL_UART_MspInit+0xb0>)
 8000826:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800082a:	6593      	str	r3, [r2, #88]	@ 0x58
 800082c:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <HAL_UART_MspInit+0xb0>)
 800082e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000838:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <HAL_UART_MspInit+0xb0>)
 800083a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083c:	4a11      	ldr	r2, [pc, #68]	@ (8000884 <HAL_UART_MspInit+0xb0>)
 800083e:	f043 0301 	orr.w	r3, r3, #1
 8000842:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <HAL_UART_MspInit+0xb0>)
 8000846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000850:	230c      	movs	r3, #12
 8000852:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085c:	2303      	movs	r3, #3
 800085e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000862:	2307      	movs	r3, #7
 8000864:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800086c:	4619      	mov	r1, r3
 800086e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000872:	f000 f9ff 	bl	8000c74 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000876:	bf00      	nop
 8000878:	3788      	adds	r7, #136	@ 0x88
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40004400 	.word	0x40004400
 8000884:	40021000 	.word	0x40021000

08000888 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08e      	sub	sp, #56	@ 0x38
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000890:	2300      	movs	r3, #0
 8000892:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000896:	4b34      	ldr	r3, [pc, #208]	@ (8000968 <HAL_InitTick+0xe0>)
 8000898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800089a:	4a33      	ldr	r2, [pc, #204]	@ (8000968 <HAL_InitTick+0xe0>)
 800089c:	f043 0310 	orr.w	r3, r3, #16
 80008a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80008a2:	4b31      	ldr	r3, [pc, #196]	@ (8000968 <HAL_InitTick+0xe0>)
 80008a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008a6:	f003 0310 	and.w	r3, r3, #16
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008ae:	f107 0210 	add.w	r2, r7, #16
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f001 f9c3 	bl	8001c44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008be:	6a3b      	ldr	r3, [r7, #32]
 80008c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d103      	bne.n	80008d0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008c8:	f001 f990 	bl	8001bec <HAL_RCC_GetPCLK1Freq>
 80008cc:	6378      	str	r0, [r7, #52]	@ 0x34
 80008ce:	e004      	b.n	80008da <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008d0:	f001 f98c 	bl	8001bec <HAL_RCC_GetPCLK1Freq>
 80008d4:	4603      	mov	r3, r0
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008dc:	4a23      	ldr	r2, [pc, #140]	@ (800096c <HAL_InitTick+0xe4>)
 80008de:	fba2 2303 	umull	r2, r3, r2, r3
 80008e2:	0c9b      	lsrs	r3, r3, #18
 80008e4:	3b01      	subs	r3, #1
 80008e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008e8:	4b21      	ldr	r3, [pc, #132]	@ (8000970 <HAL_InitTick+0xe8>)
 80008ea:	4a22      	ldr	r2, [pc, #136]	@ (8000974 <HAL_InitTick+0xec>)
 80008ec:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008ee:	4b20      	ldr	r3, [pc, #128]	@ (8000970 <HAL_InitTick+0xe8>)
 80008f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008f4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000970 <HAL_InitTick+0xe8>)
 80008f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008fa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000970 <HAL_InitTick+0xe8>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000902:	4b1b      	ldr	r3, [pc, #108]	@ (8000970 <HAL_InitTick+0xe8>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000908:	4b19      	ldr	r3, [pc, #100]	@ (8000970 <HAL_InitTick+0xe8>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800090e:	4818      	ldr	r0, [pc, #96]	@ (8000970 <HAL_InitTick+0xe8>)
 8000910:	f001 fd66 	bl	80023e0 <HAL_TIM_Base_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800091a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800091e:	2b00      	cmp	r3, #0
 8000920:	d11b      	bne.n	800095a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000922:	4813      	ldr	r0, [pc, #76]	@ (8000970 <HAL_InitTick+0xe8>)
 8000924:	f001 fdbe 	bl	80024a4 <HAL_TIM_Base_Start_IT>
 8000928:	4603      	mov	r3, r0
 800092a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800092e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000932:	2b00      	cmp	r3, #0
 8000934:	d111      	bne.n	800095a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000936:	2036      	movs	r0, #54	@ 0x36
 8000938:	f000 f98e 	bl	8000c58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b0f      	cmp	r3, #15
 8000940:	d808      	bhi.n	8000954 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000942:	2200      	movs	r2, #0
 8000944:	6879      	ldr	r1, [r7, #4]
 8000946:	2036      	movs	r0, #54	@ 0x36
 8000948:	f000 f96a 	bl	8000c20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800094c:	4a0a      	ldr	r2, [pc, #40]	@ (8000978 <HAL_InitTick+0xf0>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6013      	str	r3, [r2, #0]
 8000952:	e002      	b.n	800095a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000954:	2301      	movs	r3, #1
 8000956:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800095a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800095e:	4618      	mov	r0, r3
 8000960:	3738      	adds	r7, #56	@ 0x38
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000
 800096c:	431bde83 	.word	0x431bde83
 8000970:	200000bc 	.word	0x200000bc
 8000974:	40001000 	.word	0x40001000
 8000978:	20000004 	.word	0x20000004

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <NMI_Handler+0x4>

08000984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <MemManage_Handler+0x4>

08000994 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009b8:	4802      	ldr	r0, [pc, #8]	@ (80009c4 <TIM6_DAC_IRQHandler+0x10>)
 80009ba:	f001 fdc7 	bl	800254c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200000bc 	.word	0x200000bc

080009c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009cc:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <SystemInit+0x20>)
 80009ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009d2:	4a05      	ldr	r2, [pc, #20]	@ (80009e8 <SystemInit+0x20>)
 80009d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009f0:	f7ff ffea 	bl	80009c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f4:	480c      	ldr	r0, [pc, #48]	@ (8000a28 <LoopForever+0x6>)
  ldr r1, =_edata
 80009f6:	490d      	ldr	r1, [pc, #52]	@ (8000a2c <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a30 <LoopForever+0xe>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009fc:	e002      	b.n	8000a04 <LoopCopyDataInit>

080009fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a02:	3304      	adds	r3, #4

08000a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a08:	d3f9      	bcc.n	80009fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a38 <LoopForever+0x16>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a10:	e001      	b.n	8000a16 <LoopFillZerobss>

08000a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a14:	3204      	adds	r2, #4

08000a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a18:	d3fb      	bcc.n	8000a12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a1a:	f005 f9e5 	bl	8005de8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a1e:	f7ff fd6d 	bl	80004fc <main>

08000a22 <LoopForever>:

LoopForever:
    b LoopForever
 8000a22:	e7fe      	b.n	8000a22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a24:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a2c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a30:	08005f34 	.word	0x08005f34
  ldr r2, =_sbss
 8000a34:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a38:	20001a14 	.word	0x20001a14

08000a3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a3c:	e7fe      	b.n	8000a3c <ADC1_IRQHandler>

08000a3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a44:	2300      	movs	r3, #0
 8000a46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a48:	2003      	movs	r0, #3
 8000a4a:	f000 f8de 	bl	8000c0a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a4e:	200f      	movs	r0, #15
 8000a50:	f7ff ff1a 	bl	8000888 <HAL_InitTick>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d002      	beq.n	8000a60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	71fb      	strb	r3, [r7, #7]
 8000a5e:	e001      	b.n	8000a64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a60:	f7ff fe90 	bl	8000784 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a64:	79fb      	ldrb	r3, [r7, #7]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a74:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <HAL_IncTick+0x20>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <HAL_IncTick+0x24>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4413      	add	r3, r2
 8000a80:	4a04      	ldr	r2, [pc, #16]	@ (8000a94 <HAL_IncTick+0x24>)
 8000a82:	6013      	str	r3, [r2, #0]
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	20000008 	.word	0x20000008
 8000a94:	20000108 	.word	0x20000108

08000a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a9c:	4b03      	ldr	r3, [pc, #12]	@ (8000aac <HAL_GetTick+0x14>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000108 	.word	0x20000108

08000ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000acc:	4013      	ands	r3, r2
 8000ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae2:	4a04      	ldr	r2, [pc, #16]	@ (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	60d3      	str	r3, [r2, #12]
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000afc:	4b04      	ldr	r3, [pc, #16]	@ (8000b10 <__NVIC_GetPriorityGrouping+0x18>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	f003 0307 	and.w	r3, r3, #7
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	db0b      	blt.n	8000b3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	f003 021f 	and.w	r2, r3, #31
 8000b2c:	4907      	ldr	r1, [pc, #28]	@ (8000b4c <__NVIC_EnableIRQ+0x38>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	095b      	lsrs	r3, r3, #5
 8000b34:	2001      	movs	r0, #1
 8000b36:	fa00 f202 	lsl.w	r2, r0, r2
 8000b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000e100 	.word	0xe000e100

08000b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	6039      	str	r1, [r7, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	db0a      	blt.n	8000b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	490c      	ldr	r1, [pc, #48]	@ (8000b9c <__NVIC_SetPriority+0x4c>)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	0112      	lsls	r2, r2, #4
 8000b70:	b2d2      	uxtb	r2, r2
 8000b72:	440b      	add	r3, r1
 8000b74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b78:	e00a      	b.n	8000b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	4908      	ldr	r1, [pc, #32]	@ (8000ba0 <__NVIC_SetPriority+0x50>)
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	f003 030f 	and.w	r3, r3, #15
 8000b86:	3b04      	subs	r3, #4
 8000b88:	0112      	lsls	r2, r2, #4
 8000b8a:	b2d2      	uxtb	r2, r2
 8000b8c:	440b      	add	r3, r1
 8000b8e:	761a      	strb	r2, [r3, #24]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000e100 	.word	0xe000e100
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b089      	sub	sp, #36	@ 0x24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	f1c3 0307 	rsb	r3, r3, #7
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	bf28      	it	cs
 8000bc2:	2304      	movcs	r3, #4
 8000bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3304      	adds	r3, #4
 8000bca:	2b06      	cmp	r3, #6
 8000bcc:	d902      	bls.n	8000bd4 <NVIC_EncodePriority+0x30>
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	3b03      	subs	r3, #3
 8000bd2:	e000      	b.n	8000bd6 <NVIC_EncodePriority+0x32>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43da      	mvns	r2, r3
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	401a      	ands	r2, r3
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bec:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf6:	43d9      	mvns	r1, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	4313      	orrs	r3, r2
         );
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3724      	adds	r7, #36	@ 0x24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f7ff ff4c 	bl	8000ab0 <__NVIC_SetPriorityGrouping>
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
 8000c2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c32:	f7ff ff61 	bl	8000af8 <__NVIC_GetPriorityGrouping>
 8000c36:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	68b9      	ldr	r1, [r7, #8]
 8000c3c:	6978      	ldr	r0, [r7, #20]
 8000c3e:	f7ff ffb1 	bl	8000ba4 <NVIC_EncodePriority>
 8000c42:	4602      	mov	r2, r0
 8000c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c48:	4611      	mov	r1, r2
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff80 	bl	8000b50 <__NVIC_SetPriority>
}
 8000c50:	bf00      	nop
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff ff54 	bl	8000b14 <__NVIC_EnableIRQ>
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b087      	sub	sp, #28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c82:	e154      	b.n	8000f2e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	2101      	movs	r1, #1
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c90:	4013      	ands	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f000 8146 	beq.w	8000f28 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d005      	beq.n	8000cb4 <HAL_GPIO_Init+0x40>
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d130      	bne.n	8000d16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	68da      	ldr	r2, [r3, #12]
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cea:	2201      	movs	r2, #1
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	091b      	lsrs	r3, r3, #4
 8000d00:	f003 0201 	and.w	r2, r3, #1
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 0303 	and.w	r3, r3, #3
 8000d1e:	2b03      	cmp	r3, #3
 8000d20:	d017      	beq.n	8000d52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	689a      	ldr	r2, [r3, #8]
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 0303 	and.w	r3, r3, #3
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d123      	bne.n	8000da6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	08da      	lsrs	r2, r3, #3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3208      	adds	r2, #8
 8000d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	220f      	movs	r2, #15
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	691a      	ldr	r2, [r3, #16]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	f003 0307 	and.w	r3, r3, #7
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	08da      	lsrs	r2, r3, #3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3208      	adds	r2, #8
 8000da0:	6939      	ldr	r1, [r7, #16]
 8000da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	2203      	movs	r2, #3
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 0203 	and.w	r2, r3, #3
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f000 80a0 	beq.w	8000f28 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de8:	4b58      	ldr	r3, [pc, #352]	@ (8000f4c <HAL_GPIO_Init+0x2d8>)
 8000dea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dec:	4a57      	ldr	r2, [pc, #348]	@ (8000f4c <HAL_GPIO_Init+0x2d8>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000df4:	4b55      	ldr	r3, [pc, #340]	@ (8000f4c <HAL_GPIO_Init+0x2d8>)
 8000df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e00:	4a53      	ldr	r2, [pc, #332]	@ (8000f50 <HAL_GPIO_Init+0x2dc>)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	3302      	adds	r3, #2
 8000e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	220f      	movs	r2, #15
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e2a:	d019      	beq.n	8000e60 <HAL_GPIO_Init+0x1ec>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a49      	ldr	r2, [pc, #292]	@ (8000f54 <HAL_GPIO_Init+0x2e0>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d013      	beq.n	8000e5c <HAL_GPIO_Init+0x1e8>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a48      	ldr	r2, [pc, #288]	@ (8000f58 <HAL_GPIO_Init+0x2e4>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d00d      	beq.n	8000e58 <HAL_GPIO_Init+0x1e4>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a47      	ldr	r2, [pc, #284]	@ (8000f5c <HAL_GPIO_Init+0x2e8>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d007      	beq.n	8000e54 <HAL_GPIO_Init+0x1e0>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a46      	ldr	r2, [pc, #280]	@ (8000f60 <HAL_GPIO_Init+0x2ec>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d101      	bne.n	8000e50 <HAL_GPIO_Init+0x1dc>
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	e008      	b.n	8000e62 <HAL_GPIO_Init+0x1ee>
 8000e50:	2307      	movs	r3, #7
 8000e52:	e006      	b.n	8000e62 <HAL_GPIO_Init+0x1ee>
 8000e54:	2303      	movs	r3, #3
 8000e56:	e004      	b.n	8000e62 <HAL_GPIO_Init+0x1ee>
 8000e58:	2302      	movs	r3, #2
 8000e5a:	e002      	b.n	8000e62 <HAL_GPIO_Init+0x1ee>
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e000      	b.n	8000e62 <HAL_GPIO_Init+0x1ee>
 8000e60:	2300      	movs	r3, #0
 8000e62:	697a      	ldr	r2, [r7, #20]
 8000e64:	f002 0203 	and.w	r2, r2, #3
 8000e68:	0092      	lsls	r2, r2, #2
 8000e6a:	4093      	lsls	r3, r2
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e72:	4937      	ldr	r1, [pc, #220]	@ (8000f50 <HAL_GPIO_Init+0x2dc>)
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	089b      	lsrs	r3, r3, #2
 8000e78:	3302      	adds	r3, #2
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e80:	4b38      	ldr	r3, [pc, #224]	@ (8000f64 <HAL_GPIO_Init+0x2f0>)
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ea4:	4a2f      	ldr	r2, [pc, #188]	@ (8000f64 <HAL_GPIO_Init+0x2f0>)
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000eaa:	4b2e      	ldr	r3, [pc, #184]	@ (8000f64 <HAL_GPIO_Init+0x2f0>)
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ece:	4a25      	ldr	r2, [pc, #148]	@ (8000f64 <HAL_GPIO_Init+0x2f0>)
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ed4:	4b23      	ldr	r3, [pc, #140]	@ (8000f64 <HAL_GPIO_Init+0x2f0>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ef8:	4a1a      	ldr	r2, [pc, #104]	@ (8000f64 <HAL_GPIO_Init+0x2f0>)
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000efe:	4b19      	ldr	r3, [pc, #100]	@ (8000f64 <HAL_GPIO_Init+0x2f0>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f22:	4a10      	ldr	r2, [pc, #64]	@ (8000f64 <HAL_GPIO_Init+0x2f0>)
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	fa22 f303 	lsr.w	r3, r2, r3
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f47f aea3 	bne.w	8000c84 <HAL_GPIO_Init+0x10>
  }
}
 8000f3e:	bf00      	nop
 8000f40:	bf00      	nop
 8000f42:	371c      	adds	r7, #28
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40010000 	.word	0x40010000
 8000f54:	48000400 	.word	0x48000400
 8000f58:	48000800 	.word	0x48000800
 8000f5c:	48000c00 	.word	0x48000c00
 8000f60:	48001000 	.word	0x48001000
 8000f64:	40010400 	.word	0x40010400

08000f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	807b      	strh	r3, [r7, #2]
 8000f74:	4613      	mov	r3, r2
 8000f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f78:	787b      	ldrb	r3, [r7, #1]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f7e:	887a      	ldrh	r2, [r7, #2]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f84:	e002      	b.n	8000f8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f86:	887a      	ldrh	r2, [r7, #2]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000faa:	887a      	ldrh	r2, [r7, #2]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	041a      	lsls	r2, r3, #16
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	43d9      	mvns	r1, r3
 8000fb6:	887b      	ldrh	r3, [r7, #2]
 8000fb8:	400b      	ands	r3, r1
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	619a      	str	r2, [r3, #24]
}
 8000fc0:	bf00      	nop
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fd0:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40007000 	.word	0x40007000

08000fe8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ff6:	d130      	bne.n	800105a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ff8:	4b23      	ldr	r3, [pc, #140]	@ (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001004:	d038      	beq.n	8001078 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001006:	4b20      	ldr	r3, [pc, #128]	@ (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800100e:	4a1e      	ldr	r2, [pc, #120]	@ (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001010:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001014:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001016:	4b1d      	ldr	r3, [pc, #116]	@ (800108c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2232      	movs	r2, #50	@ 0x32
 800101c:	fb02 f303 	mul.w	r3, r2, r3
 8001020:	4a1b      	ldr	r2, [pc, #108]	@ (8001090 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001022:	fba2 2303 	umull	r2, r3, r2, r3
 8001026:	0c9b      	lsrs	r3, r3, #18
 8001028:	3301      	adds	r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800102c:	e002      	b.n	8001034 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	3b01      	subs	r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001034:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800103c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001040:	d102      	bne.n	8001048 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1f2      	bne.n	800102e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001048:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001054:	d110      	bne.n	8001078 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e00f      	b.n	800107a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800105a:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001066:	d007      	beq.n	8001078 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001068:	4b07      	ldr	r3, [pc, #28]	@ (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001070:	4a05      	ldr	r2, [pc, #20]	@ (8001088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001072:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001076:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40007000 	.word	0x40007000
 800108c:	20000000 	.word	0x20000000
 8001090:	431bde83 	.word	0x431bde83

08001094 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d102      	bne.n	80010a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	f000 bc02 	b.w	80018ac <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010a8:	4b96      	ldr	r3, [pc, #600]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f003 030c 	and.w	r3, r3, #12
 80010b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010b2:	4b94      	ldr	r3, [pc, #592]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0310 	and.w	r3, r3, #16
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 80e4 	beq.w	8001292 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d007      	beq.n	80010e0 <HAL_RCC_OscConfig+0x4c>
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	2b0c      	cmp	r3, #12
 80010d4:	f040 808b 	bne.w	80011ee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	f040 8087 	bne.w	80011ee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010e0:	4b88      	ldr	r3, [pc, #544]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d005      	beq.n	80010f8 <HAL_RCC_OscConfig+0x64>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d101      	bne.n	80010f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e3d9      	b.n	80018ac <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a1a      	ldr	r2, [r3, #32]
 80010fc:	4b81      	ldr	r3, [pc, #516]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0308 	and.w	r3, r3, #8
 8001104:	2b00      	cmp	r3, #0
 8001106:	d004      	beq.n	8001112 <HAL_RCC_OscConfig+0x7e>
 8001108:	4b7e      	ldr	r3, [pc, #504]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001110:	e005      	b.n	800111e <HAL_RCC_OscConfig+0x8a>
 8001112:	4b7c      	ldr	r3, [pc, #496]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001114:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001118:	091b      	lsrs	r3, r3, #4
 800111a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800111e:	4293      	cmp	r3, r2
 8001120:	d223      	bcs.n	800116a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a1b      	ldr	r3, [r3, #32]
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fdbe 	bl	8001ca8 <RCC_SetFlashLatencyFromMSIRange>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e3ba      	b.n	80018ac <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001136:	4b73      	ldr	r3, [pc, #460]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a72      	ldr	r2, [pc, #456]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	4b70      	ldr	r3, [pc, #448]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	496d      	ldr	r1, [pc, #436]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001150:	4313      	orrs	r3, r2
 8001152:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001154:	4b6b      	ldr	r3, [pc, #428]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	69db      	ldr	r3, [r3, #28]
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	4968      	ldr	r1, [pc, #416]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001164:	4313      	orrs	r3, r2
 8001166:	604b      	str	r3, [r1, #4]
 8001168:	e025      	b.n	80011b6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800116a:	4b66      	ldr	r3, [pc, #408]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a65      	ldr	r2, [pc, #404]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	4b63      	ldr	r3, [pc, #396]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a1b      	ldr	r3, [r3, #32]
 8001182:	4960      	ldr	r1, [pc, #384]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001184:	4313      	orrs	r3, r2
 8001186:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001188:	4b5e      	ldr	r3, [pc, #376]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	495b      	ldr	r1, [pc, #364]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001198:	4313      	orrs	r3, r2
 800119a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d109      	bne.n	80011b6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 fd7e 	bl	8001ca8 <RCC_SetFlashLatencyFromMSIRange>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e37a      	b.n	80018ac <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011b6:	f000 fc81 	bl	8001abc <HAL_RCC_GetSysClockFreq>
 80011ba:	4602      	mov	r2, r0
 80011bc:	4b51      	ldr	r3, [pc, #324]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	091b      	lsrs	r3, r3, #4
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	4950      	ldr	r1, [pc, #320]	@ (8001308 <HAL_RCC_OscConfig+0x274>)
 80011c8:	5ccb      	ldrb	r3, [r1, r3]
 80011ca:	f003 031f 	and.w	r3, r3, #31
 80011ce:	fa22 f303 	lsr.w	r3, r2, r3
 80011d2:	4a4e      	ldr	r2, [pc, #312]	@ (800130c <HAL_RCC_OscConfig+0x278>)
 80011d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011d6:	4b4e      	ldr	r3, [pc, #312]	@ (8001310 <HAL_RCC_OscConfig+0x27c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fb54 	bl	8000888 <HAL_InitTick>
 80011e0:	4603      	mov	r3, r0
 80011e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d052      	beq.n	8001290 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	e35e      	b.n	80018ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d032      	beq.n	800125c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011f6:	4b43      	ldr	r3, [pc, #268]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a42      	ldr	r2, [pc, #264]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001202:	f7ff fc49 	bl	8000a98 <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800120a:	f7ff fc45 	bl	8000a98 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e347      	b.n	80018ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800121c:	4b39      	ldr	r3, [pc, #228]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0f0      	beq.n	800120a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001228:	4b36      	ldr	r3, [pc, #216]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a35      	ldr	r2, [pc, #212]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 800122e:	f043 0308 	orr.w	r3, r3, #8
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	4b33      	ldr	r3, [pc, #204]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	4930      	ldr	r1, [pc, #192]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001242:	4313      	orrs	r3, r2
 8001244:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001246:	4b2f      	ldr	r3, [pc, #188]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	492b      	ldr	r1, [pc, #172]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001256:	4313      	orrs	r3, r2
 8001258:	604b      	str	r3, [r1, #4]
 800125a:	e01a      	b.n	8001292 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800125c:	4b29      	ldr	r3, [pc, #164]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a28      	ldr	r2, [pc, #160]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001262:	f023 0301 	bic.w	r3, r3, #1
 8001266:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001268:	f7ff fc16 	bl	8000a98 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001270:	f7ff fc12 	bl	8000a98 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e314      	b.n	80018ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001282:	4b20      	ldr	r3, [pc, #128]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0x1dc>
 800128e:	e000      	b.n	8001292 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001290:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	d073      	beq.n	8001386 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	2b08      	cmp	r3, #8
 80012a2:	d005      	beq.n	80012b0 <HAL_RCC_OscConfig+0x21c>
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	2b0c      	cmp	r3, #12
 80012a8:	d10e      	bne.n	80012c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	d10b      	bne.n	80012c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b0:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d063      	beq.n	8001384 <HAL_RCC_OscConfig+0x2f0>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d15f      	bne.n	8001384 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e2f1      	b.n	80018ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012d0:	d106      	bne.n	80012e0 <HAL_RCC_OscConfig+0x24c>
 80012d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80012d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	e025      	b.n	800132c <HAL_RCC_OscConfig+0x298>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012e8:	d114      	bne.n	8001314 <HAL_RCC_OscConfig+0x280>
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a05      	ldr	r2, [pc, #20]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80012f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	4b03      	ldr	r3, [pc, #12]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a02      	ldr	r2, [pc, #8]	@ (8001304 <HAL_RCC_OscConfig+0x270>)
 80012fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	e013      	b.n	800132c <HAL_RCC_OscConfig+0x298>
 8001304:	40021000 	.word	0x40021000
 8001308:	08005edc 	.word	0x08005edc
 800130c:	20000000 	.word	0x20000000
 8001310:	20000004 	.word	0x20000004
 8001314:	4ba0      	ldr	r3, [pc, #640]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a9f      	ldr	r2, [pc, #636]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 800131a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	4b9d      	ldr	r3, [pc, #628]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a9c      	ldr	r2, [pc, #624]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001326:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800132a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d013      	beq.n	800135c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001334:	f7ff fbb0 	bl	8000a98 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800133c:	f7ff fbac 	bl	8000a98 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b64      	cmp	r3, #100	@ 0x64
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e2ae      	b.n	80018ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800134e:	4b92      	ldr	r3, [pc, #584]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0f0      	beq.n	800133c <HAL_RCC_OscConfig+0x2a8>
 800135a:	e014      	b.n	8001386 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135c:	f7ff fb9c 	bl	8000a98 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001364:	f7ff fb98 	bl	8000a98 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b64      	cmp	r3, #100	@ 0x64
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e29a      	b.n	80018ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001376:	4b88      	ldr	r3, [pc, #544]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0x2d0>
 8001382:	e000      	b.n	8001386 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d060      	beq.n	8001454 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	2b04      	cmp	r3, #4
 8001396:	d005      	beq.n	80013a4 <HAL_RCC_OscConfig+0x310>
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	2b0c      	cmp	r3, #12
 800139c:	d119      	bne.n	80013d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d116      	bne.n	80013d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013a4:	4b7c      	ldr	r3, [pc, #496]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d005      	beq.n	80013bc <HAL_RCC_OscConfig+0x328>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e277      	b.n	80018ac <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013bc:	4b76      	ldr	r3, [pc, #472]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	061b      	lsls	r3, r3, #24
 80013ca:	4973      	ldr	r1, [pc, #460]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013d0:	e040      	b.n	8001454 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d023      	beq.n	8001422 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013da:	4b6f      	ldr	r3, [pc, #444]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a6e      	ldr	r2, [pc, #440]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80013e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e6:	f7ff fb57 	bl	8000a98 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ee:	f7ff fb53 	bl	8000a98 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e255      	b.n	80018ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001400:	4b65      	ldr	r3, [pc, #404]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0f0      	beq.n	80013ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140c:	4b62      	ldr	r3, [pc, #392]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	061b      	lsls	r3, r3, #24
 800141a:	495f      	ldr	r1, [pc, #380]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 800141c:	4313      	orrs	r3, r2
 800141e:	604b      	str	r3, [r1, #4]
 8001420:	e018      	b.n	8001454 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001422:	4b5d      	ldr	r3, [pc, #372]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a5c      	ldr	r2, [pc, #368]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800142c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142e:	f7ff fb33 	bl	8000a98 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001436:	f7ff fb2f 	bl	8000a98 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e231      	b.n	80018ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001448:	4b53      	ldr	r3, [pc, #332]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1f0      	bne.n	8001436 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	2b00      	cmp	r3, #0
 800145e:	d03c      	beq.n	80014da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d01c      	beq.n	80014a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001468:	4b4b      	ldr	r3, [pc, #300]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 800146a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800146e:	4a4a      	ldr	r2, [pc, #296]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001478:	f7ff fb0e 	bl	8000a98 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001480:	f7ff fb0a 	bl	8000a98 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e20c      	b.n	80018ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001492:	4b41      	ldr	r3, [pc, #260]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001494:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0ef      	beq.n	8001480 <HAL_RCC_OscConfig+0x3ec>
 80014a0:	e01b      	b.n	80014da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80014a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014a8:	4a3b      	ldr	r2, [pc, #236]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80014aa:	f023 0301 	bic.w	r3, r3, #1
 80014ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b2:	f7ff faf1 	bl	8000a98 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ba:	f7ff faed 	bl	8000a98 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e1ef      	b.n	80018ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014cc:	4b32      	ldr	r3, [pc, #200]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80014ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1ef      	bne.n	80014ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 80a6 	beq.w	8001634 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e8:	2300      	movs	r3, #0
 80014ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80014ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d10d      	bne.n	8001514 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f8:	4b27      	ldr	r3, [pc, #156]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80014fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fc:	4a26      	ldr	r2, [pc, #152]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 80014fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001502:	6593      	str	r3, [r2, #88]	@ 0x58
 8001504:	4b24      	ldr	r3, [pc, #144]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001510:	2301      	movs	r3, #1
 8001512:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001514:	4b21      	ldr	r3, [pc, #132]	@ (800159c <HAL_RCC_OscConfig+0x508>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800151c:	2b00      	cmp	r3, #0
 800151e:	d118      	bne.n	8001552 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001520:	4b1e      	ldr	r3, [pc, #120]	@ (800159c <HAL_RCC_OscConfig+0x508>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a1d      	ldr	r2, [pc, #116]	@ (800159c <HAL_RCC_OscConfig+0x508>)
 8001526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800152a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800152c:	f7ff fab4 	bl	8000a98 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001534:	f7ff fab0 	bl	8000a98 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e1b2      	b.n	80018ac <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001546:	4b15      	ldr	r3, [pc, #84]	@ (800159c <HAL_RCC_OscConfig+0x508>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d108      	bne.n	800156c <HAL_RCC_OscConfig+0x4d8>
 800155a:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 800155c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001560:	4a0d      	ldr	r2, [pc, #52]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800156a:	e029      	b.n	80015c0 <HAL_RCC_OscConfig+0x52c>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2b05      	cmp	r3, #5
 8001572:	d115      	bne.n	80015a0 <HAL_RCC_OscConfig+0x50c>
 8001574:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800157a:	4a07      	ldr	r2, [pc, #28]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001584:	4b04      	ldr	r3, [pc, #16]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 8001586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800158a:	4a03      	ldr	r2, [pc, #12]	@ (8001598 <HAL_RCC_OscConfig+0x504>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001594:	e014      	b.n	80015c0 <HAL_RCC_OscConfig+0x52c>
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000
 800159c:	40007000 	.word	0x40007000
 80015a0:	4b9a      	ldr	r3, [pc, #616]	@ (800180c <HAL_RCC_OscConfig+0x778>)
 80015a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015a6:	4a99      	ldr	r2, [pc, #612]	@ (800180c <HAL_RCC_OscConfig+0x778>)
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015b0:	4b96      	ldr	r3, [pc, #600]	@ (800180c <HAL_RCC_OscConfig+0x778>)
 80015b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015b6:	4a95      	ldr	r2, [pc, #596]	@ (800180c <HAL_RCC_OscConfig+0x778>)
 80015b8:	f023 0304 	bic.w	r3, r3, #4
 80015bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d016      	beq.n	80015f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c8:	f7ff fa66 	bl	8000a98 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015ce:	e00a      	b.n	80015e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015d0:	f7ff fa62 	bl	8000a98 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015de:	4293      	cmp	r3, r2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e162      	b.n	80018ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015e6:	4b89      	ldr	r3, [pc, #548]	@ (800180c <HAL_RCC_OscConfig+0x778>)
 80015e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0ed      	beq.n	80015d0 <HAL_RCC_OscConfig+0x53c>
 80015f4:	e015      	b.n	8001622 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f6:	f7ff fa4f 	bl	8000a98 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015fc:	e00a      	b.n	8001614 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015fe:	f7ff fa4b 	bl	8000a98 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800160c:	4293      	cmp	r3, r2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e14b      	b.n	80018ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001614:	4b7d      	ldr	r3, [pc, #500]	@ (800180c <HAL_RCC_OscConfig+0x778>)
 8001616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1ed      	bne.n	80015fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001622:	7ffb      	ldrb	r3, [r7, #31]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d105      	bne.n	8001634 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001628:	4b78      	ldr	r3, [pc, #480]	@ (800180c <HAL_RCC_OscConfig+0x778>)
 800162a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800162c:	4a77      	ldr	r2, [pc, #476]	@ (800180c <HAL_RCC_OscConfig+0x778>)
 800162e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001632:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0320 	and.w	r3, r3, #32
 800163c:	2b00      	cmp	r3, #0
 800163e:	d03c      	beq.n	80016ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001644:	2b00      	cmp	r3, #0
 8001646:	d01c      	beq.n	8001682 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001648:	4b70      	ldr	r3, [pc, #448]	@ (800180c <HAL_RCC_OscConfig+0x778>)
 800164a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800164e:	4a6f      	ldr	r2, [pc, #444]	@ (800180c <HAL_RCC_OscConfig+0x778>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001658:	f7ff fa1e 	bl	8000a98 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001660:	f7ff fa1a 	bl	8000a98 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e11c      	b.n	80018ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001672:	4b66      	ldr	r3, [pc, #408]	@ (800180c <HAL_RCC_OscConfig+0x778>)
 8001674:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0ef      	beq.n	8001660 <HAL_RCC_OscConfig+0x5cc>
 8001680:	e01b      	b.n	80016ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001682:	4b62      	ldr	r3, [pc, #392]	@ (800180c <HAL_RCC_OscConfig+0x778>)
 8001684:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001688:	4a60      	ldr	r2, [pc, #384]	@ (800180c <HAL_RCC_OscConfig+0x778>)
 800168a:	f023 0301 	bic.w	r3, r3, #1
 800168e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001692:	f7ff fa01 	bl	8000a98 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800169a:	f7ff f9fd 	bl	8000a98 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e0ff      	b.n	80018ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016ac:	4b57      	ldr	r3, [pc, #348]	@ (800180c <HAL_RCC_OscConfig+0x778>)
 80016ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1ef      	bne.n	800169a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 80f3 	beq.w	80018aa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	f040 80c9 	bne.w	8001860 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80016ce:	4b4f      	ldr	r3, [pc, #316]	@ (800180c <HAL_RCC_OscConfig+0x778>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f003 0203 	and.w	r2, r3, #3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016de:	429a      	cmp	r2, r3
 80016e0:	d12c      	bne.n	800173c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ec:	3b01      	subs	r3, #1
 80016ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d123      	bne.n	800173c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001700:	429a      	cmp	r2, r3
 8001702:	d11b      	bne.n	800173c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800170e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001710:	429a      	cmp	r2, r3
 8001712:	d113      	bne.n	800173c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800171e:	085b      	lsrs	r3, r3, #1
 8001720:	3b01      	subs	r3, #1
 8001722:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d109      	bne.n	800173c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	085b      	lsrs	r3, r3, #1
 8001734:	3b01      	subs	r3, #1
 8001736:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001738:	429a      	cmp	r2, r3
 800173a:	d06b      	beq.n	8001814 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2b0c      	cmp	r3, #12
 8001740:	d062      	beq.n	8001808 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001742:	4b32      	ldr	r3, [pc, #200]	@ (800180c <HAL_RCC_OscConfig+0x778>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e0ac      	b.n	80018ac <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001752:	4b2e      	ldr	r3, [pc, #184]	@ (800180c <HAL_RCC_OscConfig+0x778>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a2d      	ldr	r2, [pc, #180]	@ (800180c <HAL_RCC_OscConfig+0x778>)
 8001758:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800175c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800175e:	f7ff f99b 	bl	8000a98 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001766:	f7ff f997 	bl	8000a98 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e099      	b.n	80018ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001778:	4b24      	ldr	r3, [pc, #144]	@ (800180c <HAL_RCC_OscConfig+0x778>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1f0      	bne.n	8001766 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001784:	4b21      	ldr	r3, [pc, #132]	@ (800180c <HAL_RCC_OscConfig+0x778>)
 8001786:	68da      	ldr	r2, [r3, #12]
 8001788:	4b21      	ldr	r3, [pc, #132]	@ (8001810 <HAL_RCC_OscConfig+0x77c>)
 800178a:	4013      	ands	r3, r2
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001794:	3a01      	subs	r2, #1
 8001796:	0112      	lsls	r2, r2, #4
 8001798:	4311      	orrs	r1, r2
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800179e:	0212      	lsls	r2, r2, #8
 80017a0:	4311      	orrs	r1, r2
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80017a6:	0852      	lsrs	r2, r2, #1
 80017a8:	3a01      	subs	r2, #1
 80017aa:	0552      	lsls	r2, r2, #21
 80017ac:	4311      	orrs	r1, r2
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80017b2:	0852      	lsrs	r2, r2, #1
 80017b4:	3a01      	subs	r2, #1
 80017b6:	0652      	lsls	r2, r2, #25
 80017b8:	4311      	orrs	r1, r2
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80017be:	06d2      	lsls	r2, r2, #27
 80017c0:	430a      	orrs	r2, r1
 80017c2:	4912      	ldr	r1, [pc, #72]	@ (800180c <HAL_RCC_OscConfig+0x778>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80017c8:	4b10      	ldr	r3, [pc, #64]	@ (800180c <HAL_RCC_OscConfig+0x778>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0f      	ldr	r2, [pc, #60]	@ (800180c <HAL_RCC_OscConfig+0x778>)
 80017ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017d4:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <HAL_RCC_OscConfig+0x778>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	4a0c      	ldr	r2, [pc, #48]	@ (800180c <HAL_RCC_OscConfig+0x778>)
 80017da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017e0:	f7ff f95a 	bl	8000a98 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e8:	f7ff f956 	bl	8000a98 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e058      	b.n	80018ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017fa:	4b04      	ldr	r3, [pc, #16]	@ (800180c <HAL_RCC_OscConfig+0x778>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001806:	e050      	b.n	80018aa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e04f      	b.n	80018ac <HAL_RCC_OscConfig+0x818>
 800180c:	40021000 	.word	0x40021000
 8001810:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001814:	4b27      	ldr	r3, [pc, #156]	@ (80018b4 <HAL_RCC_OscConfig+0x820>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d144      	bne.n	80018aa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001820:	4b24      	ldr	r3, [pc, #144]	@ (80018b4 <HAL_RCC_OscConfig+0x820>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a23      	ldr	r2, [pc, #140]	@ (80018b4 <HAL_RCC_OscConfig+0x820>)
 8001826:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800182a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800182c:	4b21      	ldr	r3, [pc, #132]	@ (80018b4 <HAL_RCC_OscConfig+0x820>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	4a20      	ldr	r2, [pc, #128]	@ (80018b4 <HAL_RCC_OscConfig+0x820>)
 8001832:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001836:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001838:	f7ff f92e 	bl	8000a98 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001840:	f7ff f92a 	bl	8000a98 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e02c      	b.n	80018ac <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001852:	4b18      	ldr	r3, [pc, #96]	@ (80018b4 <HAL_RCC_OscConfig+0x820>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0x7ac>
 800185e:	e024      	b.n	80018aa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	2b0c      	cmp	r3, #12
 8001864:	d01f      	beq.n	80018a6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001866:	4b13      	ldr	r3, [pc, #76]	@ (80018b4 <HAL_RCC_OscConfig+0x820>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a12      	ldr	r2, [pc, #72]	@ (80018b4 <HAL_RCC_OscConfig+0x820>)
 800186c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001872:	f7ff f911 	bl	8000a98 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187a:	f7ff f90d 	bl	8000a98 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e00f      	b.n	80018ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800188c:	4b09      	ldr	r3, [pc, #36]	@ (80018b4 <HAL_RCC_OscConfig+0x820>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1f0      	bne.n	800187a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001898:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <HAL_RCC_OscConfig+0x820>)
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	4905      	ldr	r1, [pc, #20]	@ (80018b4 <HAL_RCC_OscConfig+0x820>)
 800189e:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <HAL_RCC_OscConfig+0x824>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	60cb      	str	r3, [r1, #12]
 80018a4:	e001      	b.n	80018aa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3720      	adds	r7, #32
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40021000 	.word	0x40021000
 80018b8:	feeefffc 	.word	0xfeeefffc

080018bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e0e7      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018d0:	4b75      	ldr	r3, [pc, #468]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d910      	bls.n	8001900 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018de:	4b72      	ldr	r3, [pc, #456]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 0207 	bic.w	r2, r3, #7
 80018e6:	4970      	ldr	r1, [pc, #448]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ee:	4b6e      	ldr	r3, [pc, #440]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e0cf      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d010      	beq.n	800192e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	4b66      	ldr	r3, [pc, #408]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001918:	429a      	cmp	r2, r3
 800191a:	d908      	bls.n	800192e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800191c:	4b63      	ldr	r3, [pc, #396]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	4960      	ldr	r1, [pc, #384]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d04c      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b03      	cmp	r3, #3
 8001940:	d107      	bne.n	8001952 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001942:	4b5a      	ldr	r3, [pc, #360]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d121      	bne.n	8001992 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e0a6      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d107      	bne.n	800196a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800195a:	4b54      	ldr	r3, [pc, #336]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d115      	bne.n	8001992 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e09a      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d107      	bne.n	8001982 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001972:	4b4e      	ldr	r3, [pc, #312]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d109      	bne.n	8001992 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e08e      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001982:	4b4a      	ldr	r3, [pc, #296]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e086      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001992:	4b46      	ldr	r3, [pc, #280]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f023 0203 	bic.w	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	4943      	ldr	r1, [pc, #268]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019a4:	f7ff f878 	bl	8000a98 <HAL_GetTick>
 80019a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019aa:	e00a      	b.n	80019c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ac:	f7ff f874 	bl	8000a98 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e06e      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c2:	4b3a      	ldr	r3, [pc, #232]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 020c 	and.w	r2, r3, #12
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d1eb      	bne.n	80019ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d010      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	4b31      	ldr	r3, [pc, #196]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d208      	bcs.n	8001a02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f0:	4b2e      	ldr	r3, [pc, #184]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	492b      	ldr	r1, [pc, #172]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a02:	4b29      	ldr	r3, [pc, #164]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d210      	bcs.n	8001a32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a10:	4b25      	ldr	r3, [pc, #148]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f023 0207 	bic.w	r2, r3, #7
 8001a18:	4923      	ldr	r1, [pc, #140]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a20:	4b21      	ldr	r3, [pc, #132]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d001      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e036      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d008      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	4918      	ldr	r1, [pc, #96]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d009      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a5c:	4b13      	ldr	r3, [pc, #76]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4910      	ldr	r1, [pc, #64]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a70:	f000 f824 	bl	8001abc <HAL_RCC_GetSysClockFreq>
 8001a74:	4602      	mov	r2, r0
 8001a76:	4b0d      	ldr	r3, [pc, #52]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	091b      	lsrs	r3, r3, #4
 8001a7c:	f003 030f 	and.w	r3, r3, #15
 8001a80:	490b      	ldr	r1, [pc, #44]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1f4>)
 8001a82:	5ccb      	ldrb	r3, [r1, r3]
 8001a84:	f003 031f 	and.w	r3, r3, #31
 8001a88:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8c:	4a09      	ldr	r2, [pc, #36]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1f8>)
 8001a8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a90:	4b09      	ldr	r3, [pc, #36]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1fc>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fef7 	bl	8000888 <HAL_InitTick>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a9e:	7afb      	ldrb	r3, [r7, #11]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40022000 	.word	0x40022000
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	08005edc 	.word	0x08005edc
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	20000004 	.word	0x20000004

08001abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b089      	sub	sp, #36	@ 0x24
 8001ac0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aca:	4b3e      	ldr	r3, [pc, #248]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ad4:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <HAL_RCC_GetSysClockFreq+0x34>
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	2b0c      	cmp	r3, #12
 8001ae8:	d121      	bne.n	8001b2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d11e      	bne.n	8001b2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001af0:	4b34      	ldr	r3, [pc, #208]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d107      	bne.n	8001b0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001afc:	4b31      	ldr	r3, [pc, #196]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b02:	0a1b      	lsrs	r3, r3, #8
 8001b04:	f003 030f 	and.w	r3, r3, #15
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	e005      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	091b      	lsrs	r3, r3, #4
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b18:	4a2b      	ldr	r2, [pc, #172]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10d      	bne.n	8001b44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b2c:	e00a      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d102      	bne.n	8001b3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b34:	4b25      	ldr	r3, [pc, #148]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x110>)
 8001b36:	61bb      	str	r3, [r7, #24]
 8001b38:	e004      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d101      	bne.n	8001b44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b40:	4b23      	ldr	r3, [pc, #140]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	2b0c      	cmp	r3, #12
 8001b48:	d134      	bne.n	8001bb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d003      	beq.n	8001b62 <HAL_RCC_GetSysClockFreq+0xa6>
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d003      	beq.n	8001b68 <HAL_RCC_GetSysClockFreq+0xac>
 8001b60:	e005      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b62:	4b1a      	ldr	r3, [pc, #104]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x110>)
 8001b64:	617b      	str	r3, [r7, #20]
      break;
 8001b66:	e005      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b68:	4b19      	ldr	r3, [pc, #100]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b6a:	617b      	str	r3, [r7, #20]
      break;
 8001b6c:	e002      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	617b      	str	r3, [r7, #20]
      break;
 8001b72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b74:	4b13      	ldr	r3, [pc, #76]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	3301      	adds	r3, #1
 8001b80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b82:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	0a1b      	lsrs	r3, r3, #8
 8001b88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	fb03 f202 	mul.w	r2, r3, r2
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	0e5b      	lsrs	r3, r3, #25
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001bb4:	69bb      	ldr	r3, [r7, #24]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3724      	adds	r7, #36	@ 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	08005ef4 	.word	0x08005ef4
 8001bcc:	00f42400 	.word	0x00f42400
 8001bd0:	007a1200 	.word	0x007a1200

08001bd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bd8:	4b03      	ldr	r3, [pc, #12]	@ (8001be8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bda:	681b      	ldr	r3, [r3, #0]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	20000000 	.word	0x20000000

08001bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001bf0:	f7ff fff0 	bl	8001bd4 <HAL_RCC_GetHCLKFreq>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	0a1b      	lsrs	r3, r3, #8
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	4904      	ldr	r1, [pc, #16]	@ (8001c14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c02:	5ccb      	ldrb	r3, [r1, r3]
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40021000 	.word	0x40021000
 8001c14:	08005eec 	.word	0x08005eec

08001c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c1c:	f7ff ffda 	bl	8001bd4 <HAL_RCC_GetHCLKFreq>
 8001c20:	4602      	mov	r2, r0
 8001c22:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	0adb      	lsrs	r3, r3, #11
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	4904      	ldr	r1, [pc, #16]	@ (8001c40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c2e:	5ccb      	ldrb	r3, [r1, r3]
 8001c30:	f003 031f 	and.w	r3, r3, #31
 8001c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	08005eec 	.word	0x08005eec

08001c44 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	220f      	movs	r2, #15
 8001c52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001c54:	4b12      	ldr	r3, [pc, #72]	@ (8001ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 0203 	and.w	r2, r3, #3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001c60:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001c78:	4b09      	ldr	r3, [pc, #36]	@ (8001ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	08db      	lsrs	r3, r3, #3
 8001c7e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001c86:	4b07      	ldr	r3, [pc, #28]	@ (8001ca4 <HAL_RCC_GetClockConfig+0x60>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0207 	and.w	r2, r3, #7
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	601a      	str	r2, [r3, #0]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40022000 	.word	0x40022000

08001ca8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cb4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cc0:	f7ff f984 	bl	8000fcc <HAL_PWREx_GetVoltageRange>
 8001cc4:	6178      	str	r0, [r7, #20]
 8001cc6:	e014      	b.n	8001cf2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cc8:	4b25      	ldr	r3, [pc, #148]	@ (8001d60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ccc:	4a24      	ldr	r2, [pc, #144]	@ (8001d60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cd4:	4b22      	ldr	r3, [pc, #136]	@ (8001d60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ce0:	f7ff f974 	bl	8000fcc <HAL_PWREx_GetVoltageRange>
 8001ce4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cea:	4a1d      	ldr	r2, [pc, #116]	@ (8001d60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cf0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cf8:	d10b      	bne.n	8001d12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b80      	cmp	r3, #128	@ 0x80
 8001cfe:	d919      	bls.n	8001d34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d04:	d902      	bls.n	8001d0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d06:	2302      	movs	r3, #2
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	e013      	b.n	8001d34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	e010      	b.n	8001d34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b80      	cmp	r3, #128	@ 0x80
 8001d16:	d902      	bls.n	8001d1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d18:	2303      	movs	r3, #3
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	e00a      	b.n	8001d34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b80      	cmp	r3, #128	@ 0x80
 8001d22:	d102      	bne.n	8001d2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d24:	2302      	movs	r3, #2
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	e004      	b.n	8001d34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b70      	cmp	r3, #112	@ 0x70
 8001d2e:	d101      	bne.n	8001d34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d30:	2301      	movs	r3, #1
 8001d32:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d34:	4b0b      	ldr	r3, [pc, #44]	@ (8001d64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 0207 	bic.w	r2, r3, #7
 8001d3c:	4909      	ldr	r1, [pc, #36]	@ (8001d64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d44:	4b07      	ldr	r3, [pc, #28]	@ (8001d64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d001      	beq.n	8001d56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40022000 	.word	0x40022000

08001d68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d70:	2300      	movs	r3, #0
 8001d72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d74:	2300      	movs	r3, #0
 8001d76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d031      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d88:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001d8c:	d01a      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001d8e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001d92:	d814      	bhi.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d009      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001d98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001d9c:	d10f      	bne.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001d9e:	4b5d      	ldr	r3, [pc, #372]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	4a5c      	ldr	r2, [pc, #368]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001da8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001daa:	e00c      	b.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3304      	adds	r3, #4
 8001db0:	2100      	movs	r1, #0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 fa22 	bl	80021fc <RCCEx_PLLSAI1_Config>
 8001db8:	4603      	mov	r3, r0
 8001dba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dbc:	e003      	b.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	74fb      	strb	r3, [r7, #19]
      break;
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001dc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001dc6:	7cfb      	ldrb	r3, [r7, #19]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10b      	bne.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dcc:	4b51      	ldr	r3, [pc, #324]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dd2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dda:	494e      	ldr	r1, [pc, #312]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001de2:	e001      	b.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001de4:	7cfb      	ldrb	r3, [r7, #19]
 8001de6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 809e 	beq.w	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dfa:	4b46      	ldr	r3, [pc, #280]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00d      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e10:	4b40      	ldr	r3, [pc, #256]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e14:	4a3f      	ldr	r2, [pc, #252]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e1c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e2c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a39      	ldr	r2, [pc, #228]	@ (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e38:	f7fe fe2e 	bl	8000a98 <HAL_GetTick>
 8001e3c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e3e:	e009      	b.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e40:	f7fe fe2a 	bl	8000a98 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d902      	bls.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	74fb      	strb	r3, [r7, #19]
        break;
 8001e52:	e005      	b.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e54:	4b30      	ldr	r3, [pc, #192]	@ (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0ef      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001e60:	7cfb      	ldrb	r3, [r7, #19]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d15a      	bne.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e66:	4b2b      	ldr	r3, [pc, #172]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e70:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d01e      	beq.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d019      	beq.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e82:	4b24      	ldr	r3, [pc, #144]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e8c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e8e:	4b21      	ldr	r3, [pc, #132]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e94:	4a1f      	ldr	r2, [pc, #124]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ea6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eaa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001eae:	4a19      	ldr	r2, [pc, #100]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d016      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7fe fdea 	bl	8000a98 <HAL_GetTick>
 8001ec4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ec6:	e00b      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec8:	f7fe fde6 	bl	8000a98 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d902      	bls.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	74fb      	strb	r3, [r7, #19]
            break;
 8001ede:	e006      	b.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0ec      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001eee:	7cfb      	ldrb	r3, [r7, #19]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10b      	bne.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ef4:	4b07      	ldr	r3, [pc, #28]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001efa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f02:	4904      	ldr	r1, [pc, #16]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001f0a:	e009      	b.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f0c:	7cfb      	ldrb	r3, [r7, #19]
 8001f0e:	74bb      	strb	r3, [r7, #18]
 8001f10:	e006      	b.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f1c:	7cfb      	ldrb	r3, [r7, #19]
 8001f1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f20:	7c7b      	ldrb	r3, [r7, #17]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d105      	bne.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f26:	4b8d      	ldr	r3, [pc, #564]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2a:	4a8c      	ldr	r2, [pc, #560]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f30:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00a      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f3e:	4b87      	ldr	r3, [pc, #540]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f44:	f023 0203 	bic.w	r2, r3, #3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	4983      	ldr	r1, [pc, #524]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00a      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f60:	4b7e      	ldr	r3, [pc, #504]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f66:	f023 020c 	bic.w	r2, r3, #12
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6e:	497b      	ldr	r1, [pc, #492]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00a      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f82:	4b76      	ldr	r3, [pc, #472]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f88:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f90:	4972      	ldr	r1, [pc, #456]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00a      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fa4:	4b6d      	ldr	r3, [pc, #436]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001faa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb2:	496a      	ldr	r1, [pc, #424]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00a      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fc6:	4b65      	ldr	r3, [pc, #404]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fcc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd4:	4961      	ldr	r1, [pc, #388]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00a      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001fe8:	4b5c      	ldr	r3, [pc, #368]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	4959      	ldr	r1, [pc, #356]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00a      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800200a:	4b54      	ldr	r3, [pc, #336]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800200c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002010:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002018:	4950      	ldr	r1, [pc, #320]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800201a:	4313      	orrs	r3, r2
 800201c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00a      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800202c:	4b4b      	ldr	r3, [pc, #300]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002032:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800203a:	4948      	ldr	r1, [pc, #288]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800203c:	4313      	orrs	r3, r2
 800203e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00a      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800204e:	4b43      	ldr	r3, [pc, #268]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002054:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800205c:	493f      	ldr	r1, [pc, #252]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800205e:	4313      	orrs	r3, r2
 8002060:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d028      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002070:	4b3a      	ldr	r3, [pc, #232]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002076:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800207e:	4937      	ldr	r1, [pc, #220]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002080:	4313      	orrs	r3, r2
 8002082:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800208a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800208e:	d106      	bne.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002090:	4b32      	ldr	r3, [pc, #200]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	4a31      	ldr	r2, [pc, #196]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002096:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800209a:	60d3      	str	r3, [r2, #12]
 800209c:	e011      	b.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80020a6:	d10c      	bne.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3304      	adds	r3, #4
 80020ac:	2101      	movs	r1, #1
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 f8a4 	bl	80021fc <RCCEx_PLLSAI1_Config>
 80020b4:	4603      	mov	r3, r0
 80020b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80020b8:	7cfb      	ldrb	r3, [r7, #19]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80020be:	7cfb      	ldrb	r3, [r7, #19]
 80020c0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d028      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020ce:	4b23      	ldr	r3, [pc, #140]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020dc:	491f      	ldr	r1, [pc, #124]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020ec:	d106      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020ee:	4b1b      	ldr	r3, [pc, #108]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	4a1a      	ldr	r2, [pc, #104]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020f8:	60d3      	str	r3, [r2, #12]
 80020fa:	e011      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002100:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002104:	d10c      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3304      	adds	r3, #4
 800210a:	2101      	movs	r1, #1
 800210c:	4618      	mov	r0, r3
 800210e:	f000 f875 	bl	80021fc <RCCEx_PLLSAI1_Config>
 8002112:	4603      	mov	r3, r0
 8002114:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002116:	7cfb      	ldrb	r3, [r7, #19]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800211c:	7cfb      	ldrb	r3, [r7, #19]
 800211e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d02b      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800212c:	4b0b      	ldr	r3, [pc, #44]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002132:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800213a:	4908      	ldr	r1, [pc, #32]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002146:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800214a:	d109      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800214c:	4b03      	ldr	r3, [pc, #12]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4a02      	ldr	r2, [pc, #8]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002152:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002156:	60d3      	str	r3, [r2, #12]
 8002158:	e014      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800215a:	bf00      	nop
 800215c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002164:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002168:	d10c      	bne.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3304      	adds	r3, #4
 800216e:	2101      	movs	r1, #1
 8002170:	4618      	mov	r0, r3
 8002172:	f000 f843 	bl	80021fc <RCCEx_PLLSAI1_Config>
 8002176:	4603      	mov	r3, r0
 8002178:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800217a:	7cfb      	ldrb	r3, [r7, #19]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8002180:	7cfb      	ldrb	r3, [r7, #19]
 8002182:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d01c      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002190:	4b19      	ldr	r3, [pc, #100]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002196:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219e:	4916      	ldr	r1, [pc, #88]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021ae:	d10c      	bne.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3304      	adds	r3, #4
 80021b4:	2102      	movs	r1, #2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f820 	bl	80021fc <RCCEx_PLLSAI1_Config>
 80021bc:	4603      	mov	r3, r0
 80021be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021c0:	7cfb      	ldrb	r3, [r7, #19]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80021c6:	7cfb      	ldrb	r3, [r7, #19]
 80021c8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00a      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80021d6:	4b08      	ldr	r3, [pc, #32]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021dc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e4:	4904      	ldr	r1, [pc, #16]	@ (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000

080021fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800220a:	4b74      	ldr	r3, [pc, #464]	@ (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d018      	beq.n	8002248 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002216:	4b71      	ldr	r3, [pc, #452]	@ (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f003 0203 	and.w	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d10d      	bne.n	8002242 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
       ||
 800222a:	2b00      	cmp	r3, #0
 800222c:	d009      	beq.n	8002242 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800222e:	4b6b      	ldr	r3, [pc, #428]	@ (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	091b      	lsrs	r3, r3, #4
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
       ||
 800223e:	429a      	cmp	r2, r3
 8002240:	d047      	beq.n	80022d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	73fb      	strb	r3, [r7, #15]
 8002246:	e044      	b.n	80022d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b03      	cmp	r3, #3
 800224e:	d018      	beq.n	8002282 <RCCEx_PLLSAI1_Config+0x86>
 8002250:	2b03      	cmp	r3, #3
 8002252:	d825      	bhi.n	80022a0 <RCCEx_PLLSAI1_Config+0xa4>
 8002254:	2b01      	cmp	r3, #1
 8002256:	d002      	beq.n	800225e <RCCEx_PLLSAI1_Config+0x62>
 8002258:	2b02      	cmp	r3, #2
 800225a:	d009      	beq.n	8002270 <RCCEx_PLLSAI1_Config+0x74>
 800225c:	e020      	b.n	80022a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800225e:	4b5f      	ldr	r3, [pc, #380]	@ (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d11d      	bne.n	80022a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800226e:	e01a      	b.n	80022a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002270:	4b5a      	ldr	r3, [pc, #360]	@ (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002278:	2b00      	cmp	r3, #0
 800227a:	d116      	bne.n	80022aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002280:	e013      	b.n	80022aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002282:	4b56      	ldr	r3, [pc, #344]	@ (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10f      	bne.n	80022ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800228e:	4b53      	ldr	r3, [pc, #332]	@ (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d109      	bne.n	80022ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800229e:	e006      	b.n	80022ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
      break;
 80022a4:	e004      	b.n	80022b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022a6:	bf00      	nop
 80022a8:	e002      	b.n	80022b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022aa:	bf00      	nop
 80022ac:	e000      	b.n	80022b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10d      	bne.n	80022d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022b6:	4b49      	ldr	r3, [pc, #292]	@ (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6819      	ldr	r1, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	430b      	orrs	r3, r1
 80022cc:	4943      	ldr	r1, [pc, #268]	@ (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d17c      	bne.n	80023d2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80022d8:	4b40      	ldr	r3, [pc, #256]	@ (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a3f      	ldr	r2, [pc, #252]	@ (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80022de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80022e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022e4:	f7fe fbd8 	bl	8000a98 <HAL_GetTick>
 80022e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022ea:	e009      	b.n	8002300 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022ec:	f7fe fbd4 	bl	8000a98 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d902      	bls.n	8002300 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	73fb      	strb	r3, [r7, #15]
        break;
 80022fe:	e005      	b.n	800230c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002300:	4b36      	ldr	r3, [pc, #216]	@ (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1ef      	bne.n	80022ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d15f      	bne.n	80023d2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d110      	bne.n	800233a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002318:	4b30      	ldr	r3, [pc, #192]	@ (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002320:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6892      	ldr	r2, [r2, #8]
 8002328:	0211      	lsls	r1, r2, #8
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68d2      	ldr	r2, [r2, #12]
 800232e:	06d2      	lsls	r2, r2, #27
 8002330:	430a      	orrs	r2, r1
 8002332:	492a      	ldr	r1, [pc, #168]	@ (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002334:	4313      	orrs	r3, r2
 8002336:	610b      	str	r3, [r1, #16]
 8002338:	e027      	b.n	800238a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d112      	bne.n	8002366 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002340:	4b26      	ldr	r3, [pc, #152]	@ (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002348:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6892      	ldr	r2, [r2, #8]
 8002350:	0211      	lsls	r1, r2, #8
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6912      	ldr	r2, [r2, #16]
 8002356:	0852      	lsrs	r2, r2, #1
 8002358:	3a01      	subs	r2, #1
 800235a:	0552      	lsls	r2, r2, #21
 800235c:	430a      	orrs	r2, r1
 800235e:	491f      	ldr	r1, [pc, #124]	@ (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002360:	4313      	orrs	r3, r2
 8002362:	610b      	str	r3, [r1, #16]
 8002364:	e011      	b.n	800238a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002366:	4b1d      	ldr	r3, [pc, #116]	@ (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800236e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6892      	ldr	r2, [r2, #8]
 8002376:	0211      	lsls	r1, r2, #8
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6952      	ldr	r2, [r2, #20]
 800237c:	0852      	lsrs	r2, r2, #1
 800237e:	3a01      	subs	r2, #1
 8002380:	0652      	lsls	r2, r2, #25
 8002382:	430a      	orrs	r2, r1
 8002384:	4915      	ldr	r1, [pc, #84]	@ (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002386:	4313      	orrs	r3, r2
 8002388:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800238a:	4b14      	ldr	r3, [pc, #80]	@ (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a13      	ldr	r2, [pc, #76]	@ (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002390:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002394:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002396:	f7fe fb7f 	bl	8000a98 <HAL_GetTick>
 800239a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800239c:	e009      	b.n	80023b2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800239e:	f7fe fb7b 	bl	8000a98 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d902      	bls.n	80023b2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	73fb      	strb	r3, [r7, #15]
          break;
 80023b0:	e005      	b.n	80023be <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023b2:	4b0a      	ldr	r3, [pc, #40]	@ (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0ef      	beq.n	800239e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d106      	bne.n	80023d2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80023c4:	4b05      	ldr	r3, [pc, #20]	@ (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	4903      	ldr	r1, [pc, #12]	@ (80023dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40021000 	.word	0x40021000

080023e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e049      	b.n	8002486 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d106      	bne.n	800240c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f841 	bl	800248e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2202      	movs	r2, #2
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3304      	adds	r3, #4
 800241c:	4619      	mov	r1, r3
 800241e:	4610      	mov	r0, r2
 8002420:	f000 f9c4 	bl	80027ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d001      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e03b      	b.n	8002534 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2202      	movs	r2, #2
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0201 	orr.w	r2, r2, #1
 80024d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a19      	ldr	r2, [pc, #100]	@ (8002540 <HAL_TIM_Base_Start_IT+0x9c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d009      	beq.n	80024f2 <HAL_TIM_Base_Start_IT+0x4e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024e6:	d004      	beq.n	80024f2 <HAL_TIM_Base_Start_IT+0x4e>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a15      	ldr	r2, [pc, #84]	@ (8002544 <HAL_TIM_Base_Start_IT+0xa0>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d115      	bne.n	800251e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	4b13      	ldr	r3, [pc, #76]	@ (8002548 <HAL_TIM_Base_Start_IT+0xa4>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2b06      	cmp	r3, #6
 8002502:	d015      	beq.n	8002530 <HAL_TIM_Base_Start_IT+0x8c>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800250a:	d011      	beq.n	8002530 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0201 	orr.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800251c:	e008      	b.n	8002530 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 0201 	orr.w	r2, r2, #1
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	e000      	b.n	8002532 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002530:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	40012c00 	.word	0x40012c00
 8002544:	40014000 	.word	0x40014000
 8002548:	00010007 	.word	0x00010007

0800254c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d020      	beq.n	80025b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01b      	beq.n	80025b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0202 	mvn.w	r2, #2
 8002580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f8e9 	bl	800276e <HAL_TIM_IC_CaptureCallback>
 800259c:	e005      	b.n	80025aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f8db 	bl	800275a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f8ec 	bl	8002782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d020      	beq.n	80025fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d01b      	beq.n	80025fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0204 	mvn.w	r2, #4
 80025cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2202      	movs	r2, #2
 80025d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f8c3 	bl	800276e <HAL_TIM_IC_CaptureCallback>
 80025e8:	e005      	b.n	80025f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f8b5 	bl	800275a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f8c6 	bl	8002782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d020      	beq.n	8002648 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	2b00      	cmp	r3, #0
 800260e:	d01b      	beq.n	8002648 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f06f 0208 	mvn.w	r2, #8
 8002618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2204      	movs	r2, #4
 800261e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f89d 	bl	800276e <HAL_TIM_IC_CaptureCallback>
 8002634:	e005      	b.n	8002642 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f88f 	bl	800275a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f8a0 	bl	8002782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	2b00      	cmp	r3, #0
 8002650:	d020      	beq.n	8002694 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f003 0310 	and.w	r3, r3, #16
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01b      	beq.n	8002694 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0210 	mvn.w	r2, #16
 8002664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2208      	movs	r2, #8
 800266a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f877 	bl	800276e <HAL_TIM_IC_CaptureCallback>
 8002680:	e005      	b.n	800268e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f869 	bl	800275a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f87a 	bl	8002782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00c      	beq.n	80026b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d007      	beq.n	80026b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0201 	mvn.w	r2, #1
 80026b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7fe f84e 	bl	8000754 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d104      	bne.n	80026cc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00c      	beq.n	80026e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d007      	beq.n	80026e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80026de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f8dd 	bl	80028a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00c      	beq.n	800270a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d007      	beq.n	800270a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f8d5 	bl	80028b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00c      	beq.n	800272e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800271a:	2b00      	cmp	r3, #0
 800271c:	d007      	beq.n	800272e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f834 	bl	8002796 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	f003 0320 	and.w	r3, r3, #32
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00c      	beq.n	8002752 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f003 0320 	and.w	r3, r3, #32
 800273e:	2b00      	cmp	r3, #0
 8002740:	d007      	beq.n	8002752 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f06f 0220 	mvn.w	r2, #32
 800274a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f89d 	bl	800288c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
	...

080027ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a30      	ldr	r2, [pc, #192]	@ (8002880 <TIM_Base_SetConfig+0xd4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d003      	beq.n	80027cc <TIM_Base_SetConfig+0x20>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027ca:	d108      	bne.n	80027de <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	4313      	orrs	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a27      	ldr	r2, [pc, #156]	@ (8002880 <TIM_Base_SetConfig+0xd4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00b      	beq.n	80027fe <TIM_Base_SetConfig+0x52>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027ec:	d007      	beq.n	80027fe <TIM_Base_SetConfig+0x52>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a24      	ldr	r2, [pc, #144]	@ (8002884 <TIM_Base_SetConfig+0xd8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d003      	beq.n	80027fe <TIM_Base_SetConfig+0x52>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a23      	ldr	r2, [pc, #140]	@ (8002888 <TIM_Base_SetConfig+0xdc>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d108      	bne.n	8002810 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4313      	orrs	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	4313      	orrs	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a12      	ldr	r2, [pc, #72]	@ (8002880 <TIM_Base_SetConfig+0xd4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d007      	beq.n	800284c <TIM_Base_SetConfig+0xa0>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a11      	ldr	r2, [pc, #68]	@ (8002884 <TIM_Base_SetConfig+0xd8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d003      	beq.n	800284c <TIM_Base_SetConfig+0xa0>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a10      	ldr	r2, [pc, #64]	@ (8002888 <TIM_Base_SetConfig+0xdc>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d103      	bne.n	8002854 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b01      	cmp	r3, #1
 8002864:	d105      	bne.n	8002872 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f023 0201 	bic.w	r2, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	611a      	str	r2, [r3, #16]
  }
}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40012c00 	.word	0x40012c00
 8002884:	40014000 	.word	0x40014000
 8002888:	40014400 	.word	0x40014400

0800288c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e040      	b.n	800295c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d106      	bne.n	80028f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7fd ff72 	bl	80007d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2224      	movs	r2, #36	@ 0x24
 80028f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0201 	bic.w	r2, r2, #1
 8002904:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 fa82 	bl	8002e18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f825 	bl	8002964 <UART_SetConfig>
 800291a:	4603      	mov	r3, r0
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e01b      	b.n	800295c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002932:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002942:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 fb01 	bl	8002f5c <UART_CheckIdleState>
 800295a:	4603      	mov	r3, r0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002968:	b08a      	sub	sp, #40	@ 0x28
 800296a:	af00      	add	r7, sp, #0
 800296c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	431a      	orrs	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	431a      	orrs	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	4313      	orrs	r3, r2
 800298a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	4b9e      	ldr	r3, [pc, #632]	@ (8002c0c <UART_SetConfig+0x2a8>)
 8002994:	4013      	ands	r3, r2
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	6812      	ldr	r2, [r2, #0]
 800299a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800299c:	430b      	orrs	r3, r1
 800299e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a93      	ldr	r2, [pc, #588]	@ (8002c10 <UART_SetConfig+0x2ac>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d004      	beq.n	80029d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029cc:	4313      	orrs	r3, r2
 80029ce:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e0:	430a      	orrs	r2, r1
 80029e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a8a      	ldr	r2, [pc, #552]	@ (8002c14 <UART_SetConfig+0x2b0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d126      	bne.n	8002a3c <UART_SetConfig+0xd8>
 80029ee:	4b8a      	ldr	r3, [pc, #552]	@ (8002c18 <UART_SetConfig+0x2b4>)
 80029f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d81b      	bhi.n	8002a34 <UART_SetConfig+0xd0>
 80029fc:	a201      	add	r2, pc, #4	@ (adr r2, 8002a04 <UART_SetConfig+0xa0>)
 80029fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a02:	bf00      	nop
 8002a04:	08002a15 	.word	0x08002a15
 8002a08:	08002a25 	.word	0x08002a25
 8002a0c:	08002a1d 	.word	0x08002a1d
 8002a10:	08002a2d 	.word	0x08002a2d
 8002a14:	2301      	movs	r3, #1
 8002a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a1a:	e0ab      	b.n	8002b74 <UART_SetConfig+0x210>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a22:	e0a7      	b.n	8002b74 <UART_SetConfig+0x210>
 8002a24:	2304      	movs	r3, #4
 8002a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a2a:	e0a3      	b.n	8002b74 <UART_SetConfig+0x210>
 8002a2c:	2308      	movs	r3, #8
 8002a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a32:	e09f      	b.n	8002b74 <UART_SetConfig+0x210>
 8002a34:	2310      	movs	r3, #16
 8002a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a3a:	e09b      	b.n	8002b74 <UART_SetConfig+0x210>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a76      	ldr	r2, [pc, #472]	@ (8002c1c <UART_SetConfig+0x2b8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d138      	bne.n	8002ab8 <UART_SetConfig+0x154>
 8002a46:	4b74      	ldr	r3, [pc, #464]	@ (8002c18 <UART_SetConfig+0x2b4>)
 8002a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4c:	f003 030c 	and.w	r3, r3, #12
 8002a50:	2b0c      	cmp	r3, #12
 8002a52:	d82d      	bhi.n	8002ab0 <UART_SetConfig+0x14c>
 8002a54:	a201      	add	r2, pc, #4	@ (adr r2, 8002a5c <UART_SetConfig+0xf8>)
 8002a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5a:	bf00      	nop
 8002a5c:	08002a91 	.word	0x08002a91
 8002a60:	08002ab1 	.word	0x08002ab1
 8002a64:	08002ab1 	.word	0x08002ab1
 8002a68:	08002ab1 	.word	0x08002ab1
 8002a6c:	08002aa1 	.word	0x08002aa1
 8002a70:	08002ab1 	.word	0x08002ab1
 8002a74:	08002ab1 	.word	0x08002ab1
 8002a78:	08002ab1 	.word	0x08002ab1
 8002a7c:	08002a99 	.word	0x08002a99
 8002a80:	08002ab1 	.word	0x08002ab1
 8002a84:	08002ab1 	.word	0x08002ab1
 8002a88:	08002ab1 	.word	0x08002ab1
 8002a8c:	08002aa9 	.word	0x08002aa9
 8002a90:	2300      	movs	r3, #0
 8002a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a96:	e06d      	b.n	8002b74 <UART_SetConfig+0x210>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a9e:	e069      	b.n	8002b74 <UART_SetConfig+0x210>
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aa6:	e065      	b.n	8002b74 <UART_SetConfig+0x210>
 8002aa8:	2308      	movs	r3, #8
 8002aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aae:	e061      	b.n	8002b74 <UART_SetConfig+0x210>
 8002ab0:	2310      	movs	r3, #16
 8002ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ab6:	e05d      	b.n	8002b74 <UART_SetConfig+0x210>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a58      	ldr	r2, [pc, #352]	@ (8002c20 <UART_SetConfig+0x2bc>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d125      	bne.n	8002b0e <UART_SetConfig+0x1aa>
 8002ac2:	4b55      	ldr	r3, [pc, #340]	@ (8002c18 <UART_SetConfig+0x2b4>)
 8002ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002acc:	2b30      	cmp	r3, #48	@ 0x30
 8002ace:	d016      	beq.n	8002afe <UART_SetConfig+0x19a>
 8002ad0:	2b30      	cmp	r3, #48	@ 0x30
 8002ad2:	d818      	bhi.n	8002b06 <UART_SetConfig+0x1a2>
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d00a      	beq.n	8002aee <UART_SetConfig+0x18a>
 8002ad8:	2b20      	cmp	r3, #32
 8002ada:	d814      	bhi.n	8002b06 <UART_SetConfig+0x1a2>
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <UART_SetConfig+0x182>
 8002ae0:	2b10      	cmp	r3, #16
 8002ae2:	d008      	beq.n	8002af6 <UART_SetConfig+0x192>
 8002ae4:	e00f      	b.n	8002b06 <UART_SetConfig+0x1a2>
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aec:	e042      	b.n	8002b74 <UART_SetConfig+0x210>
 8002aee:	2302      	movs	r3, #2
 8002af0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002af4:	e03e      	b.n	8002b74 <UART_SetConfig+0x210>
 8002af6:	2304      	movs	r3, #4
 8002af8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002afc:	e03a      	b.n	8002b74 <UART_SetConfig+0x210>
 8002afe:	2308      	movs	r3, #8
 8002b00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b04:	e036      	b.n	8002b74 <UART_SetConfig+0x210>
 8002b06:	2310      	movs	r3, #16
 8002b08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b0c:	e032      	b.n	8002b74 <UART_SetConfig+0x210>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a3f      	ldr	r2, [pc, #252]	@ (8002c10 <UART_SetConfig+0x2ac>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d12a      	bne.n	8002b6e <UART_SetConfig+0x20a>
 8002b18:	4b3f      	ldr	r3, [pc, #252]	@ (8002c18 <UART_SetConfig+0x2b4>)
 8002b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b1e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b26:	d01a      	beq.n	8002b5e <UART_SetConfig+0x1fa>
 8002b28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b2c:	d81b      	bhi.n	8002b66 <UART_SetConfig+0x202>
 8002b2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b32:	d00c      	beq.n	8002b4e <UART_SetConfig+0x1ea>
 8002b34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b38:	d815      	bhi.n	8002b66 <UART_SetConfig+0x202>
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <UART_SetConfig+0x1e2>
 8002b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b42:	d008      	beq.n	8002b56 <UART_SetConfig+0x1f2>
 8002b44:	e00f      	b.n	8002b66 <UART_SetConfig+0x202>
 8002b46:	2300      	movs	r3, #0
 8002b48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b4c:	e012      	b.n	8002b74 <UART_SetConfig+0x210>
 8002b4e:	2302      	movs	r3, #2
 8002b50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b54:	e00e      	b.n	8002b74 <UART_SetConfig+0x210>
 8002b56:	2304      	movs	r3, #4
 8002b58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b5c:	e00a      	b.n	8002b74 <UART_SetConfig+0x210>
 8002b5e:	2308      	movs	r3, #8
 8002b60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b64:	e006      	b.n	8002b74 <UART_SetConfig+0x210>
 8002b66:	2310      	movs	r3, #16
 8002b68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b6c:	e002      	b.n	8002b74 <UART_SetConfig+0x210>
 8002b6e:	2310      	movs	r3, #16
 8002b70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a25      	ldr	r2, [pc, #148]	@ (8002c10 <UART_SetConfig+0x2ac>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	f040 808a 	bne.w	8002c94 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d824      	bhi.n	8002bd2 <UART_SetConfig+0x26e>
 8002b88:	a201      	add	r2, pc, #4	@ (adr r2, 8002b90 <UART_SetConfig+0x22c>)
 8002b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8e:	bf00      	nop
 8002b90:	08002bb5 	.word	0x08002bb5
 8002b94:	08002bd3 	.word	0x08002bd3
 8002b98:	08002bbd 	.word	0x08002bbd
 8002b9c:	08002bd3 	.word	0x08002bd3
 8002ba0:	08002bc3 	.word	0x08002bc3
 8002ba4:	08002bd3 	.word	0x08002bd3
 8002ba8:	08002bd3 	.word	0x08002bd3
 8002bac:	08002bd3 	.word	0x08002bd3
 8002bb0:	08002bcb 	.word	0x08002bcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bb4:	f7ff f81a 	bl	8001bec <HAL_RCC_GetPCLK1Freq>
 8002bb8:	61f8      	str	r0, [r7, #28]
        break;
 8002bba:	e010      	b.n	8002bde <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bbc:	4b19      	ldr	r3, [pc, #100]	@ (8002c24 <UART_SetConfig+0x2c0>)
 8002bbe:	61fb      	str	r3, [r7, #28]
        break;
 8002bc0:	e00d      	b.n	8002bde <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bc2:	f7fe ff7b 	bl	8001abc <HAL_RCC_GetSysClockFreq>
 8002bc6:	61f8      	str	r0, [r7, #28]
        break;
 8002bc8:	e009      	b.n	8002bde <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bce:	61fb      	str	r3, [r7, #28]
        break;
 8002bd0:	e005      	b.n	8002bde <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002bdc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8109 	beq.w	8002df8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4413      	add	r3, r2
 8002bf0:	69fa      	ldr	r2, [r7, #28]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d305      	bcc.n	8002c02 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002bfc:	69fa      	ldr	r2, [r7, #28]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d912      	bls.n	8002c28 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c08:	e0f6      	b.n	8002df8 <UART_SetConfig+0x494>
 8002c0a:	bf00      	nop
 8002c0c:	efff69f3 	.word	0xefff69f3
 8002c10:	40008000 	.word	0x40008000
 8002c14:	40013800 	.word	0x40013800
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40004400 	.word	0x40004400
 8002c20:	40004800 	.word	0x40004800
 8002c24:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	461c      	mov	r4, r3
 8002c2e:	4615      	mov	r5, r2
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	022b      	lsls	r3, r5, #8
 8002c3a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002c3e:	0222      	lsls	r2, r4, #8
 8002c40:	68f9      	ldr	r1, [r7, #12]
 8002c42:	6849      	ldr	r1, [r1, #4]
 8002c44:	0849      	lsrs	r1, r1, #1
 8002c46:	2000      	movs	r0, #0
 8002c48:	4688      	mov	r8, r1
 8002c4a:	4681      	mov	r9, r0
 8002c4c:	eb12 0a08 	adds.w	sl, r2, r8
 8002c50:	eb43 0b09 	adc.w	fp, r3, r9
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	607a      	str	r2, [r7, #4]
 8002c5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c62:	4650      	mov	r0, sl
 8002c64:	4659      	mov	r1, fp
 8002c66:	f7fd fab3 	bl	80001d0 <__aeabi_uldivmod>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	4613      	mov	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c78:	d308      	bcc.n	8002c8c <UART_SetConfig+0x328>
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c80:	d204      	bcs.n	8002c8c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	e0b5      	b.n	8002df8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c92:	e0b1      	b.n	8002df8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c9c:	d15d      	bne.n	8002d5a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8002c9e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d827      	bhi.n	8002cf6 <UART_SetConfig+0x392>
 8002ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8002cac <UART_SetConfig+0x348>)
 8002ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cac:	08002cd1 	.word	0x08002cd1
 8002cb0:	08002cd9 	.word	0x08002cd9
 8002cb4:	08002ce1 	.word	0x08002ce1
 8002cb8:	08002cf7 	.word	0x08002cf7
 8002cbc:	08002ce7 	.word	0x08002ce7
 8002cc0:	08002cf7 	.word	0x08002cf7
 8002cc4:	08002cf7 	.word	0x08002cf7
 8002cc8:	08002cf7 	.word	0x08002cf7
 8002ccc:	08002cef 	.word	0x08002cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cd0:	f7fe ff8c 	bl	8001bec <HAL_RCC_GetPCLK1Freq>
 8002cd4:	61f8      	str	r0, [r7, #28]
        break;
 8002cd6:	e014      	b.n	8002d02 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cd8:	f7fe ff9e 	bl	8001c18 <HAL_RCC_GetPCLK2Freq>
 8002cdc:	61f8      	str	r0, [r7, #28]
        break;
 8002cde:	e010      	b.n	8002d02 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ce0:	4b4c      	ldr	r3, [pc, #304]	@ (8002e14 <UART_SetConfig+0x4b0>)
 8002ce2:	61fb      	str	r3, [r7, #28]
        break;
 8002ce4:	e00d      	b.n	8002d02 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ce6:	f7fe fee9 	bl	8001abc <HAL_RCC_GetSysClockFreq>
 8002cea:	61f8      	str	r0, [r7, #28]
        break;
 8002cec:	e009      	b.n	8002d02 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cf2:	61fb      	str	r3, [r7, #28]
        break;
 8002cf4:	e005      	b.n	8002d02 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002d00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d077      	beq.n	8002df8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	005a      	lsls	r2, r3, #1
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	085b      	lsrs	r3, r3, #1
 8002d12:	441a      	add	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	2b0f      	cmp	r3, #15
 8002d22:	d916      	bls.n	8002d52 <UART_SetConfig+0x3ee>
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d2a:	d212      	bcs.n	8002d52 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f023 030f 	bic.w	r3, r3, #15
 8002d34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	085b      	lsrs	r3, r3, #1
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	8afb      	ldrh	r3, [r7, #22]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	8afa      	ldrh	r2, [r7, #22]
 8002d4e:	60da      	str	r2, [r3, #12]
 8002d50:	e052      	b.n	8002df8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002d58:	e04e      	b.n	8002df8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d827      	bhi.n	8002db2 <UART_SetConfig+0x44e>
 8002d62:	a201      	add	r2, pc, #4	@ (adr r2, 8002d68 <UART_SetConfig+0x404>)
 8002d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d68:	08002d8d 	.word	0x08002d8d
 8002d6c:	08002d95 	.word	0x08002d95
 8002d70:	08002d9d 	.word	0x08002d9d
 8002d74:	08002db3 	.word	0x08002db3
 8002d78:	08002da3 	.word	0x08002da3
 8002d7c:	08002db3 	.word	0x08002db3
 8002d80:	08002db3 	.word	0x08002db3
 8002d84:	08002db3 	.word	0x08002db3
 8002d88:	08002dab 	.word	0x08002dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d8c:	f7fe ff2e 	bl	8001bec <HAL_RCC_GetPCLK1Freq>
 8002d90:	61f8      	str	r0, [r7, #28]
        break;
 8002d92:	e014      	b.n	8002dbe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d94:	f7fe ff40 	bl	8001c18 <HAL_RCC_GetPCLK2Freq>
 8002d98:	61f8      	str	r0, [r7, #28]
        break;
 8002d9a:	e010      	b.n	8002dbe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e14 <UART_SetConfig+0x4b0>)
 8002d9e:	61fb      	str	r3, [r7, #28]
        break;
 8002da0:	e00d      	b.n	8002dbe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002da2:	f7fe fe8b 	bl	8001abc <HAL_RCC_GetSysClockFreq>
 8002da6:	61f8      	str	r0, [r7, #28]
        break;
 8002da8:	e009      	b.n	8002dbe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002daa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dae:	61fb      	str	r3, [r7, #28]
        break;
 8002db0:	e005      	b.n	8002dbe <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002dbc:	bf00      	nop
    }

    if (pclk != 0U)
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d019      	beq.n	8002df8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	085a      	lsrs	r2, r3, #1
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	441a      	add	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	2b0f      	cmp	r3, #15
 8002ddc:	d909      	bls.n	8002df2 <UART_SetConfig+0x48e>
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002de4:	d205      	bcs.n	8002df2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	60da      	str	r2, [r3, #12]
 8002df0:	e002      	b.n	8002df8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002e04:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3728      	adds	r7, #40	@ 0x28
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e12:	bf00      	nop
 8002e14:	00f42400 	.word	0x00f42400

08002e18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00a      	beq.n	8002e86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00a      	beq.n	8002ea8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00a      	beq.n	8002eca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d01a      	beq.n	8002f2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f16:	d10a      	bne.n	8002f2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00a      	beq.n	8002f50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	605a      	str	r2, [r3, #4]
  }
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b098      	sub	sp, #96	@ 0x60
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f6c:	f7fd fd94 	bl	8000a98 <HAL_GetTick>
 8002f70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d12e      	bne.n	8002fde <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f88c 	bl	80030ac <UART_WaitOnFlagUntilTimeout>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d021      	beq.n	8002fde <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fa2:	e853 3f00 	ldrex	r3, [r3]
 8002fa6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002faa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fae:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002fbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fc0:	e841 2300 	strex	r3, r2, [r1]
 8002fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1e6      	bne.n	8002f9a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e062      	b.n	80030a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b04      	cmp	r3, #4
 8002fea:	d149      	bne.n	8003080 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f856 	bl	80030ac <UART_WaitOnFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d03c      	beq.n	8003080 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300e:	e853 3f00 	ldrex	r3, [r3]
 8003012:	623b      	str	r3, [r7, #32]
   return(result);
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800301a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003024:	633b      	str	r3, [r7, #48]	@ 0x30
 8003026:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003028:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800302a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800302c:	e841 2300 	strex	r3, r2, [r1]
 8003030:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1e6      	bne.n	8003006 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3308      	adds	r3, #8
 800303e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	e853 3f00 	ldrex	r3, [r3]
 8003046:	60fb      	str	r3, [r7, #12]
   return(result);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f023 0301 	bic.w	r3, r3, #1
 800304e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	3308      	adds	r3, #8
 8003056:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003058:	61fa      	str	r2, [r7, #28]
 800305a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305c:	69b9      	ldr	r1, [r7, #24]
 800305e:	69fa      	ldr	r2, [r7, #28]
 8003060:	e841 2300 	strex	r3, r2, [r1]
 8003064:	617b      	str	r3, [r7, #20]
   return(result);
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1e5      	bne.n	8003038 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2220      	movs	r2, #32
 8003070:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e011      	b.n	80030a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2220      	movs	r2, #32
 8003084:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2220      	movs	r2, #32
 800308a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3758      	adds	r7, #88	@ 0x58
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	4613      	mov	r3, r2
 80030ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030bc:	e04f      	b.n	800315e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c4:	d04b      	beq.n	800315e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c6:	f7fd fce7 	bl	8000a98 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d302      	bcc.n	80030dc <UART_WaitOnFlagUntilTimeout+0x30>
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e04e      	b.n	800317e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d037      	beq.n	800315e <UART_WaitOnFlagUntilTimeout+0xb2>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b80      	cmp	r3, #128	@ 0x80
 80030f2:	d034      	beq.n	800315e <UART_WaitOnFlagUntilTimeout+0xb2>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b40      	cmp	r3, #64	@ 0x40
 80030f8:	d031      	beq.n	800315e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b08      	cmp	r3, #8
 8003106:	d110      	bne.n	800312a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2208      	movs	r2, #8
 800310e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 f838 	bl	8003186 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2208      	movs	r2, #8
 800311a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e029      	b.n	800317e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003134:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003138:	d111      	bne.n	800315e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003142:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f81e 	bl	8003186 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2220      	movs	r2, #32
 800314e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e00f      	b.n	800317e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69da      	ldr	r2, [r3, #28]
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	4013      	ands	r3, r2
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	429a      	cmp	r2, r3
 800316c:	bf0c      	ite	eq
 800316e:	2301      	moveq	r3, #1
 8003170:	2300      	movne	r3, #0
 8003172:	b2db      	uxtb	r3, r3
 8003174:	461a      	mov	r2, r3
 8003176:	79fb      	ldrb	r3, [r7, #7]
 8003178:	429a      	cmp	r2, r3
 800317a:	d0a0      	beq.n	80030be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003186:	b480      	push	{r7}
 8003188:	b095      	sub	sp, #84	@ 0x54
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003196:	e853 3f00 	ldrex	r3, [r3]
 800319a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800319c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800319e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80031ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031b4:	e841 2300 	strex	r3, r2, [r1]
 80031b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1e6      	bne.n	800318e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	3308      	adds	r3, #8
 80031c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	e853 3f00 	ldrex	r3, [r3]
 80031ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f023 0301 	bic.w	r3, r3, #1
 80031d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3308      	adds	r3, #8
 80031de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031e8:	e841 2300 	strex	r3, r2, [r1]
 80031ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1e5      	bne.n	80031c0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d118      	bne.n	800322e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	e853 3f00 	ldrex	r3, [r3]
 8003208:	60bb      	str	r3, [r7, #8]
   return(result);
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	f023 0310 	bic.w	r3, r3, #16
 8003210:	647b      	str	r3, [r7, #68]	@ 0x44
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800321a:	61bb      	str	r3, [r7, #24]
 800321c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321e:	6979      	ldr	r1, [r7, #20]
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	e841 2300 	strex	r3, r2, [r1]
 8003226:	613b      	str	r3, [r7, #16]
   return(result);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1e6      	bne.n	80031fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2220      	movs	r2, #32
 8003232:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003242:	bf00      	nop
 8003244:	3754      	adds	r7, #84	@ 0x54
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
	...

08003250 <__NVIC_SetPriority>:
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	6039      	str	r1, [r7, #0]
 800325a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800325c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003260:	2b00      	cmp	r3, #0
 8003262:	db0a      	blt.n	800327a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	b2da      	uxtb	r2, r3
 8003268:	490c      	ldr	r1, [pc, #48]	@ (800329c <__NVIC_SetPriority+0x4c>)
 800326a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326e:	0112      	lsls	r2, r2, #4
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	440b      	add	r3, r1
 8003274:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003278:	e00a      	b.n	8003290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	b2da      	uxtb	r2, r3
 800327e:	4908      	ldr	r1, [pc, #32]	@ (80032a0 <__NVIC_SetPriority+0x50>)
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	3b04      	subs	r3, #4
 8003288:	0112      	lsls	r2, r2, #4
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	440b      	add	r3, r1
 800328e:	761a      	strb	r2, [r3, #24]
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	e000e100 	.word	0xe000e100
 80032a0:	e000ed00 	.word	0xe000ed00

080032a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80032a8:	4b05      	ldr	r3, [pc, #20]	@ (80032c0 <SysTick_Handler+0x1c>)
 80032aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80032ac:	f001 fd18 	bl	8004ce0 <xTaskGetSchedulerState>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d001      	beq.n	80032ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80032b6:	f002 fb0f 	bl	80058d8 <xPortSysTickHandler>
  }
}
 80032ba:	bf00      	nop
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	e000e010 	.word	0xe000e010

080032c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80032c8:	2100      	movs	r1, #0
 80032ca:	f06f 0004 	mvn.w	r0, #4
 80032ce:	f7ff ffbf 	bl	8003250 <__NVIC_SetPriority>
#endif
}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
	...

080032d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032de:	f3ef 8305 	mrs	r3, IPSR
 80032e2:	603b      	str	r3, [r7, #0]
  return(result);
 80032e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80032ea:	f06f 0305 	mvn.w	r3, #5
 80032ee:	607b      	str	r3, [r7, #4]
 80032f0:	e00c      	b.n	800330c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80032f2:	4b0a      	ldr	r3, [pc, #40]	@ (800331c <osKernelInitialize+0x44>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d105      	bne.n	8003306 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80032fa:	4b08      	ldr	r3, [pc, #32]	@ (800331c <osKernelInitialize+0x44>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003300:	2300      	movs	r3, #0
 8003302:	607b      	str	r3, [r7, #4]
 8003304:	e002      	b.n	800330c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003306:	f04f 33ff 	mov.w	r3, #4294967295
 800330a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800330c:	687b      	ldr	r3, [r7, #4]
}
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	2000010c 	.word	0x2000010c

08003320 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003326:	f3ef 8305 	mrs	r3, IPSR
 800332a:	603b      	str	r3, [r7, #0]
  return(result);
 800332c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003332:	f06f 0305 	mvn.w	r3, #5
 8003336:	607b      	str	r3, [r7, #4]
 8003338:	e010      	b.n	800335c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800333a:	4b0b      	ldr	r3, [pc, #44]	@ (8003368 <osKernelStart+0x48>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d109      	bne.n	8003356 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003342:	f7ff ffbf 	bl	80032c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003346:	4b08      	ldr	r3, [pc, #32]	@ (8003368 <osKernelStart+0x48>)
 8003348:	2202      	movs	r2, #2
 800334a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800334c:	f001 f87a 	bl	8004444 <vTaskStartScheduler>
      stat = osOK;
 8003350:	2300      	movs	r3, #0
 8003352:	607b      	str	r3, [r7, #4]
 8003354:	e002      	b.n	800335c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003356:	f04f 33ff 	mov.w	r3, #4294967295
 800335a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800335c:	687b      	ldr	r3, [r7, #4]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	2000010c 	.word	0x2000010c

0800336c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800336c:	b580      	push	{r7, lr}
 800336e:	b08e      	sub	sp, #56	@ 0x38
 8003370:	af04      	add	r7, sp, #16
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003378:	2300      	movs	r3, #0
 800337a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800337c:	f3ef 8305 	mrs	r3, IPSR
 8003380:	617b      	str	r3, [r7, #20]
  return(result);
 8003382:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003384:	2b00      	cmp	r3, #0
 8003386:	d17e      	bne.n	8003486 <osThreadNew+0x11a>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d07b      	beq.n	8003486 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800338e:	2380      	movs	r3, #128	@ 0x80
 8003390:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003392:	2318      	movs	r3, #24
 8003394:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003396:	2300      	movs	r3, #0
 8003398:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800339a:	f04f 33ff 	mov.w	r3, #4294967295
 800339e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d045      	beq.n	8003432 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <osThreadNew+0x48>
        name = attr->name;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <osThreadNew+0x6e>
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	2b38      	cmp	r3, #56	@ 0x38
 80033cc:	d805      	bhi.n	80033da <osThreadNew+0x6e>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <osThreadNew+0x72>
        return (NULL);
 80033da:	2300      	movs	r3, #0
 80033dc:	e054      	b.n	8003488 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	089b      	lsrs	r3, r3, #2
 80033ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00e      	beq.n	8003414 <osThreadNew+0xa8>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	2b5b      	cmp	r3, #91	@ 0x5b
 80033fc:	d90a      	bls.n	8003414 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003402:	2b00      	cmp	r3, #0
 8003404:	d006      	beq.n	8003414 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <osThreadNew+0xa8>
        mem = 1;
 800340e:	2301      	movs	r3, #1
 8003410:	61bb      	str	r3, [r7, #24]
 8003412:	e010      	b.n	8003436 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10c      	bne.n	8003436 <osThreadNew+0xca>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d108      	bne.n	8003436 <osThreadNew+0xca>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d104      	bne.n	8003436 <osThreadNew+0xca>
          mem = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	61bb      	str	r3, [r7, #24]
 8003430:	e001      	b.n	8003436 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003432:	2300      	movs	r3, #0
 8003434:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d110      	bne.n	800345e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003444:	9202      	str	r2, [sp, #8]
 8003446:	9301      	str	r3, [sp, #4]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	6a3a      	ldr	r2, [r7, #32]
 8003450:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 fe1a 	bl	800408c <xTaskCreateStatic>
 8003458:	4603      	mov	r3, r0
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	e013      	b.n	8003486 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d110      	bne.n	8003486 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	b29a      	uxth	r2, r3
 8003468:	f107 0310 	add.w	r3, r7, #16
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 fe68 	bl	800414c <xTaskCreate>
 800347c:	4603      	mov	r3, r0
 800347e:	2b01      	cmp	r3, #1
 8003480:	d001      	beq.n	8003486 <osThreadNew+0x11a>
            hTask = NULL;
 8003482:	2300      	movs	r3, #0
 8003484:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003486:	693b      	ldr	r3, [r7, #16]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3728      	adds	r7, #40	@ 0x28
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003498:	f3ef 8305 	mrs	r3, IPSR
 800349c:	60bb      	str	r3, [r7, #8]
  return(result);
 800349e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <osDelay+0x1c>
    stat = osErrorISR;
 80034a4:	f06f 0305 	mvn.w	r3, #5
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	e007      	b.n	80034bc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <osDelay+0x2c>
      vTaskDelay(ticks);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 ff8e 	bl	80043d8 <vTaskDelay>
    }
  }

  return (stat);
 80034bc:	68fb      	ldr	r3, [r7, #12]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4a07      	ldr	r2, [pc, #28]	@ (80034f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80034d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	4a06      	ldr	r2, [pc, #24]	@ (80034f8 <vApplicationGetIdleTaskMemory+0x30>)
 80034de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2280      	movs	r2, #128	@ 0x80
 80034e4:	601a      	str	r2, [r3, #0]
}
 80034e6:	bf00      	nop
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	20000110 	.word	0x20000110
 80034f8:	2000016c 	.word	0x2000016c

080034fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4a07      	ldr	r2, [pc, #28]	@ (8003528 <vApplicationGetTimerTaskMemory+0x2c>)
 800350c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4a06      	ldr	r2, [pc, #24]	@ (800352c <vApplicationGetTimerTaskMemory+0x30>)
 8003512:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800351a:	601a      	str	r2, [r3, #0]
}
 800351c:	bf00      	nop
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	2000036c 	.word	0x2000036c
 800352c:	200003c8 	.word	0x200003c8

08003530 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f103 0208 	add.w	r2, r3, #8
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f04f 32ff 	mov.w	r2, #4294967295
 8003548:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f103 0208 	add.w	r2, r3, #8
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f103 0208 	add.w	r2, r3, #8
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800358a:	b480      	push	{r7}
 800358c:	b085      	sub	sp, #20
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	601a      	str	r2, [r3, #0]
}
 80035c6:	bf00      	nop
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035d2:	b480      	push	{r7}
 80035d4:	b085      	sub	sp, #20
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e8:	d103      	bne.n	80035f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	e00c      	b.n	800360c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3308      	adds	r3, #8
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	e002      	b.n	8003600 <vListInsert+0x2e>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	429a      	cmp	r2, r3
 800360a:	d2f6      	bcs.n	80035fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	601a      	str	r2, [r3, #0]
}
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6892      	ldr	r2, [r2, #8]
 800365a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6852      	ldr	r2, [r2, #4]
 8003664:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	429a      	cmp	r2, r3
 800366e:	d103      	bne.n	8003678 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	1e5a      	subs	r2, r3, #1
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10b      	bne.n	80036c4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80036ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b0:	f383 8811 	msr	BASEPRI, r3
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80036be:	bf00      	nop
 80036c0:	bf00      	nop
 80036c2:	e7fd      	b.n	80036c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80036c4:	f002 f878 	bl	80057b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d0:	68f9      	ldr	r1, [r7, #12]
 80036d2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80036d4:	fb01 f303 	mul.w	r3, r1, r3
 80036d8:	441a      	add	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f4:	3b01      	subs	r3, #1
 80036f6:	68f9      	ldr	r1, [r7, #12]
 80036f8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80036fa:	fb01 f303 	mul.w	r3, r1, r3
 80036fe:	441a      	add	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	22ff      	movs	r2, #255	@ 0xff
 8003708:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	22ff      	movs	r2, #255	@ 0xff
 8003710:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d114      	bne.n	8003744 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d01a      	beq.n	8003758 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3310      	adds	r3, #16
 8003726:	4618      	mov	r0, r3
 8003728:	f001 f91a 	bl	8004960 <xTaskRemoveFromEventList>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d012      	beq.n	8003758 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003732:	4b0d      	ldr	r3, [pc, #52]	@ (8003768 <xQueueGenericReset+0xd0>)
 8003734:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	f3bf 8f4f 	dsb	sy
 800373e:	f3bf 8f6f 	isb	sy
 8003742:	e009      	b.n	8003758 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	3310      	adds	r3, #16
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff fef1 	bl	8003530 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	3324      	adds	r3, #36	@ 0x24
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff feec 	bl	8003530 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003758:	f002 f860 	bl	800581c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800375c:	2301      	movs	r3, #1
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	e000ed04 	.word	0xe000ed04

0800376c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800376c:	b580      	push	{r7, lr}
 800376e:	b08e      	sub	sp, #56	@ 0x38
 8003770:	af02      	add	r7, sp, #8
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
 8003778:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10b      	bne.n	8003798 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003792:	bf00      	nop
 8003794:	bf00      	nop
 8003796:	e7fd      	b.n	8003794 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10b      	bne.n	80037b6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800379e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a2:	f383 8811 	msr	BASEPRI, r3
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80037b0:	bf00      	nop
 80037b2:	bf00      	nop
 80037b4:	e7fd      	b.n	80037b2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <xQueueGenericCreateStatic+0x56>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <xQueueGenericCreateStatic+0x5a>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <xQueueGenericCreateStatic+0x5c>
 80037c6:	2300      	movs	r3, #0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10b      	bne.n	80037e4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80037cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d0:	f383 8811 	msr	BASEPRI, r3
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	623b      	str	r3, [r7, #32]
}
 80037de:	bf00      	nop
 80037e0:	bf00      	nop
 80037e2:	e7fd      	b.n	80037e0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d102      	bne.n	80037f0 <xQueueGenericCreateStatic+0x84>
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <xQueueGenericCreateStatic+0x88>
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <xQueueGenericCreateStatic+0x8a>
 80037f4:	2300      	movs	r3, #0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10b      	bne.n	8003812 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80037fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037fe:	f383 8811 	msr	BASEPRI, r3
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	61fb      	str	r3, [r7, #28]
}
 800380c:	bf00      	nop
 800380e:	bf00      	nop
 8003810:	e7fd      	b.n	800380e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003812:	2350      	movs	r3, #80	@ 0x50
 8003814:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2b50      	cmp	r3, #80	@ 0x50
 800381a:	d00b      	beq.n	8003834 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800381c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003820:	f383 8811 	msr	BASEPRI, r3
 8003824:	f3bf 8f6f 	isb	sy
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	61bb      	str	r3, [r7, #24]
}
 800382e:	bf00      	nop
 8003830:	bf00      	nop
 8003832:	e7fd      	b.n	8003830 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003834:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800383a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00d      	beq.n	800385c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003848:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800384c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	4613      	mov	r3, r2
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	68b9      	ldr	r1, [r7, #8]
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 f805 	bl	8003866 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800385c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800385e:	4618      	mov	r0, r3
 8003860:	3730      	adds	r7, #48	@ 0x30
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b084      	sub	sp, #16
 800386a:	af00      	add	r7, sp, #0
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	607a      	str	r2, [r7, #4]
 8003872:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d103      	bne.n	8003882 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	e002      	b.n	8003888 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003894:	2101      	movs	r1, #1
 8003896:	69b8      	ldr	r0, [r7, #24]
 8003898:	f7ff fefe 	bl	8003698 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	78fa      	ldrb	r2, [r7, #3]
 80038a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80038a4:	bf00      	nop
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08e      	sub	sp, #56	@ 0x38
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
 80038b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038ba:	2300      	movs	r3, #0
 80038bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80038c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10b      	bne.n	80038e0 <xQueueGenericSend+0x34>
	__asm volatile
 80038c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80038da:	bf00      	nop
 80038dc:	bf00      	nop
 80038de:	e7fd      	b.n	80038dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d103      	bne.n	80038ee <xQueueGenericSend+0x42>
 80038e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <xQueueGenericSend+0x46>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <xQueueGenericSend+0x48>
 80038f2:	2300      	movs	r3, #0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10b      	bne.n	8003910 <xQueueGenericSend+0x64>
	__asm volatile
 80038f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800390a:	bf00      	nop
 800390c:	bf00      	nop
 800390e:	e7fd      	b.n	800390c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d103      	bne.n	800391e <xQueueGenericSend+0x72>
 8003916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <xQueueGenericSend+0x76>
 800391e:	2301      	movs	r3, #1
 8003920:	e000      	b.n	8003924 <xQueueGenericSend+0x78>
 8003922:	2300      	movs	r3, #0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10b      	bne.n	8003940 <xQueueGenericSend+0x94>
	__asm volatile
 8003928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800392c:	f383 8811 	msr	BASEPRI, r3
 8003930:	f3bf 8f6f 	isb	sy
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	623b      	str	r3, [r7, #32]
}
 800393a:	bf00      	nop
 800393c:	bf00      	nop
 800393e:	e7fd      	b.n	800393c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003940:	f001 f9ce 	bl	8004ce0 <xTaskGetSchedulerState>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d102      	bne.n	8003950 <xQueueGenericSend+0xa4>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <xQueueGenericSend+0xa8>
 8003950:	2301      	movs	r3, #1
 8003952:	e000      	b.n	8003956 <xQueueGenericSend+0xaa>
 8003954:	2300      	movs	r3, #0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10b      	bne.n	8003972 <xQueueGenericSend+0xc6>
	__asm volatile
 800395a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800395e:	f383 8811 	msr	BASEPRI, r3
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	61fb      	str	r3, [r7, #28]
}
 800396c:	bf00      	nop
 800396e:	bf00      	nop
 8003970:	e7fd      	b.n	800396e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003972:	f001 ff21 	bl	80057b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003978:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800397a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800397e:	429a      	cmp	r2, r3
 8003980:	d302      	bcc.n	8003988 <xQueueGenericSend+0xdc>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b02      	cmp	r3, #2
 8003986:	d129      	bne.n	80039dc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	68b9      	ldr	r1, [r7, #8]
 800398c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800398e:	f000 fa0f 	bl	8003db0 <prvCopyDataToQueue>
 8003992:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003998:	2b00      	cmp	r3, #0
 800399a:	d010      	beq.n	80039be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800399c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399e:	3324      	adds	r3, #36	@ 0x24
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 ffdd 	bl	8004960 <xTaskRemoveFromEventList>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d013      	beq.n	80039d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039ac:	4b3f      	ldr	r3, [pc, #252]	@ (8003aac <xQueueGenericSend+0x200>)
 80039ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	e00a      	b.n	80039d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d007      	beq.n	80039d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039c4:	4b39      	ldr	r3, [pc, #228]	@ (8003aac <xQueueGenericSend+0x200>)
 80039c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80039d4:	f001 ff22 	bl	800581c <vPortExitCritical>
				return pdPASS;
 80039d8:	2301      	movs	r3, #1
 80039da:	e063      	b.n	8003aa4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d103      	bne.n	80039ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039e2:	f001 ff1b 	bl	800581c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	e05c      	b.n	8003aa4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d106      	bne.n	80039fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039f0:	f107 0314 	add.w	r3, r7, #20
 80039f4:	4618      	mov	r0, r3
 80039f6:	f001 f817 	bl	8004a28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039fa:	2301      	movs	r3, #1
 80039fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039fe:	f001 ff0d 	bl	800581c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a02:	f000 fd87 	bl	8004514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a06:	f001 fed7 	bl	80057b8 <vPortEnterCritical>
 8003a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a10:	b25b      	sxtb	r3, r3
 8003a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a16:	d103      	bne.n	8003a20 <xQueueGenericSend+0x174>
 8003a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a26:	b25b      	sxtb	r3, r3
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2c:	d103      	bne.n	8003a36 <xQueueGenericSend+0x18a>
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a36:	f001 fef1 	bl	800581c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a3a:	1d3a      	adds	r2, r7, #4
 8003a3c:	f107 0314 	add.w	r3, r7, #20
 8003a40:	4611      	mov	r1, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f001 f806 	bl	8004a54 <xTaskCheckForTimeOut>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d124      	bne.n	8003a98 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a4e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a50:	f000 faa6 	bl	8003fa0 <prvIsQueueFull>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d018      	beq.n	8003a8c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5c:	3310      	adds	r3, #16
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	4611      	mov	r1, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 ff2a 	bl	80048bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a6a:	f000 fa31 	bl	8003ed0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a6e:	f000 fd5f 	bl	8004530 <xTaskResumeAll>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f47f af7c 	bne.w	8003972 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003aac <xQueueGenericSend+0x200>)
 8003a7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	f3bf 8f6f 	isb	sy
 8003a8a:	e772      	b.n	8003972 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a8e:	f000 fa1f 	bl	8003ed0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a92:	f000 fd4d 	bl	8004530 <xTaskResumeAll>
 8003a96:	e76c      	b.n	8003972 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a9a:	f000 fa19 	bl	8003ed0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a9e:	f000 fd47 	bl	8004530 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003aa2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3738      	adds	r7, #56	@ 0x38
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	e000ed04 	.word	0xe000ed04

08003ab0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b090      	sub	sp, #64	@ 0x40
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10b      	bne.n	8003ae0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003ada:	bf00      	nop
 8003adc:	bf00      	nop
 8003ade:	e7fd      	b.n	8003adc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d103      	bne.n	8003aee <xQueueGenericSendFromISR+0x3e>
 8003ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <xQueueGenericSendFromISR+0x42>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <xQueueGenericSendFromISR+0x44>
 8003af2:	2300      	movs	r3, #0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10b      	bne.n	8003b10 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003afc:	f383 8811 	msr	BASEPRI, r3
 8003b00:	f3bf 8f6f 	isb	sy
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003b0a:	bf00      	nop
 8003b0c:	bf00      	nop
 8003b0e:	e7fd      	b.n	8003b0c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d103      	bne.n	8003b1e <xQueueGenericSendFromISR+0x6e>
 8003b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <xQueueGenericSendFromISR+0x72>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <xQueueGenericSendFromISR+0x74>
 8003b22:	2300      	movs	r3, #0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10b      	bne.n	8003b40 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	623b      	str	r3, [r7, #32]
}
 8003b3a:	bf00      	nop
 8003b3c:	bf00      	nop
 8003b3e:	e7fd      	b.n	8003b3c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b40:	f001 ff1a 	bl	8005978 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b44:	f3ef 8211 	mrs	r2, BASEPRI
 8003b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	61fa      	str	r2, [r7, #28]
 8003b5a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b5c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b5e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d302      	bcc.n	8003b72 <xQueueGenericSendFromISR+0xc2>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d12f      	bne.n	8003bd2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	68b9      	ldr	r1, [r7, #8]
 8003b86:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003b88:	f000 f912 	bl	8003db0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b8c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b94:	d112      	bne.n	8003bbc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d016      	beq.n	8003bcc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba0:	3324      	adds	r3, #36	@ 0x24
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 fedc 	bl	8004960 <xTaskRemoveFromEventList>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00e      	beq.n	8003bcc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00b      	beq.n	8003bcc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e007      	b.n	8003bcc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bbc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	b25a      	sxtb	r2, r3
 8003bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003bd0:	e001      	b.n	8003bd6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003be0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3740      	adds	r7, #64	@ 0x40
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08c      	sub	sp, #48	@ 0x30
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10b      	bne.n	8003c1e <xQueueReceive+0x32>
	__asm volatile
 8003c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c0a:	f383 8811 	msr	BASEPRI, r3
 8003c0e:	f3bf 8f6f 	isb	sy
 8003c12:	f3bf 8f4f 	dsb	sy
 8003c16:	623b      	str	r3, [r7, #32]
}
 8003c18:	bf00      	nop
 8003c1a:	bf00      	nop
 8003c1c:	e7fd      	b.n	8003c1a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d103      	bne.n	8003c2c <xQueueReceive+0x40>
 8003c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <xQueueReceive+0x44>
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e000      	b.n	8003c32 <xQueueReceive+0x46>
 8003c30:	2300      	movs	r3, #0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10b      	bne.n	8003c4e <xQueueReceive+0x62>
	__asm volatile
 8003c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c3a:	f383 8811 	msr	BASEPRI, r3
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	61fb      	str	r3, [r7, #28]
}
 8003c48:	bf00      	nop
 8003c4a:	bf00      	nop
 8003c4c:	e7fd      	b.n	8003c4a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c4e:	f001 f847 	bl	8004ce0 <xTaskGetSchedulerState>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d102      	bne.n	8003c5e <xQueueReceive+0x72>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <xQueueReceive+0x76>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <xQueueReceive+0x78>
 8003c62:	2300      	movs	r3, #0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10b      	bne.n	8003c80 <xQueueReceive+0x94>
	__asm volatile
 8003c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c6c:	f383 8811 	msr	BASEPRI, r3
 8003c70:	f3bf 8f6f 	isb	sy
 8003c74:	f3bf 8f4f 	dsb	sy
 8003c78:	61bb      	str	r3, [r7, #24]
}
 8003c7a:	bf00      	nop
 8003c7c:	bf00      	nop
 8003c7e:	e7fd      	b.n	8003c7c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c80:	f001 fd9a 	bl	80057b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c88:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d01f      	beq.n	8003cd0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c90:	68b9      	ldr	r1, [r7, #8]
 8003c92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c94:	f000 f8f6 	bl	8003e84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9a:	1e5a      	subs	r2, r3, #1
 8003c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00f      	beq.n	8003cc8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003caa:	3310      	adds	r3, #16
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 fe57 	bl	8004960 <xTaskRemoveFromEventList>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d007      	beq.n	8003cc8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003cb8:	4b3c      	ldr	r3, [pc, #240]	@ (8003dac <xQueueReceive+0x1c0>)
 8003cba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003cc8:	f001 fda8 	bl	800581c <vPortExitCritical>
				return pdPASS;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e069      	b.n	8003da4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d103      	bne.n	8003cde <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cd6:	f001 fda1 	bl	800581c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	e062      	b.n	8003da4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d106      	bne.n	8003cf2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ce4:	f107 0310 	add.w	r3, r7, #16
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 fe9d 	bl	8004a28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cf2:	f001 fd93 	bl	800581c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cf6:	f000 fc0d 	bl	8004514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cfa:	f001 fd5d 	bl	80057b8 <vPortEnterCritical>
 8003cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d04:	b25b      	sxtb	r3, r3
 8003d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0a:	d103      	bne.n	8003d14 <xQueueReceive+0x128>
 8003d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d1a:	b25b      	sxtb	r3, r3
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d20:	d103      	bne.n	8003d2a <xQueueReceive+0x13e>
 8003d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d2a:	f001 fd77 	bl	800581c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d2e:	1d3a      	adds	r2, r7, #4
 8003d30:	f107 0310 	add.w	r3, r7, #16
 8003d34:	4611      	mov	r1, r2
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fe8c 	bl	8004a54 <xTaskCheckForTimeOut>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d123      	bne.n	8003d8a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d44:	f000 f916 	bl	8003f74 <prvIsQueueEmpty>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d017      	beq.n	8003d7e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d50:	3324      	adds	r3, #36	@ 0x24
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	4611      	mov	r1, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fdb0 	bl	80048bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d5e:	f000 f8b7 	bl	8003ed0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d62:	f000 fbe5 	bl	8004530 <xTaskResumeAll>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d189      	bne.n	8003c80 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8003dac <xQueueReceive+0x1c0>)
 8003d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	e780      	b.n	8003c80 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d80:	f000 f8a6 	bl	8003ed0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d84:	f000 fbd4 	bl	8004530 <xTaskResumeAll>
 8003d88:	e77a      	b.n	8003c80 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d8c:	f000 f8a0 	bl	8003ed0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d90:	f000 fbce 	bl	8004530 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d96:	f000 f8ed 	bl	8003f74 <prvIsQueueEmpty>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f43f af6f 	beq.w	8003c80 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003da2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3730      	adds	r7, #48	@ 0x30
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	e000ed04 	.word	0xe000ed04

08003db0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10d      	bne.n	8003dea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d14d      	bne.n	8003e72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 ff9e 	bl	8004d1c <xTaskPriorityDisinherit>
 8003de0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	609a      	str	r2, [r3, #8]
 8003de8:	e043      	b.n	8003e72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d119      	bne.n	8003e24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6858      	ldr	r0, [r3, #4]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df8:	461a      	mov	r2, r3
 8003dfa:	68b9      	ldr	r1, [r7, #8]
 8003dfc:	f002 f818 	bl	8005e30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e08:	441a      	add	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d32b      	bcc.n	8003e72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	605a      	str	r2, [r3, #4]
 8003e22:	e026      	b.n	8003e72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	68d8      	ldr	r0, [r3, #12]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	68b9      	ldr	r1, [r7, #8]
 8003e30:	f001 fffe 	bl	8005e30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3c:	425b      	negs	r3, r3
 8003e3e:	441a      	add	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d207      	bcs.n	8003e60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e58:	425b      	negs	r3, r3
 8003e5a:	441a      	add	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d105      	bne.n	8003e72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003e7a:	697b      	ldr	r3, [r7, #20]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3718      	adds	r7, #24
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d018      	beq.n	8003ec8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9e:	441a      	add	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d303      	bcc.n	8003eb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68d9      	ldr	r1, [r3, #12]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	6838      	ldr	r0, [r7, #0]
 8003ec4:	f001 ffb4 	bl	8005e30 <memcpy>
	}
}
 8003ec8:	bf00      	nop
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ed8:	f001 fc6e 	bl	80057b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ee2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ee4:	e011      	b.n	8003f0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d012      	beq.n	8003f14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3324      	adds	r3, #36	@ 0x24
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fd34 	bl	8004960 <xTaskRemoveFromEventList>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003efe:	f000 fe0d 	bl	8004b1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	dce9      	bgt.n	8003ee6 <prvUnlockQueue+0x16>
 8003f12:	e000      	b.n	8003f16 <prvUnlockQueue+0x46>
					break;
 8003f14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	22ff      	movs	r2, #255	@ 0xff
 8003f1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003f1e:	f001 fc7d 	bl	800581c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f22:	f001 fc49 	bl	80057b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f2e:	e011      	b.n	8003f54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d012      	beq.n	8003f5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3310      	adds	r3, #16
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 fd0f 	bl	8004960 <xTaskRemoveFromEventList>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f48:	f000 fde8 	bl	8004b1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f4c:	7bbb      	ldrb	r3, [r7, #14]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	dce9      	bgt.n	8003f30 <prvUnlockQueue+0x60>
 8003f5c:	e000      	b.n	8003f60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	22ff      	movs	r2, #255	@ 0xff
 8003f64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003f68:	f001 fc58 	bl	800581c <vPortExitCritical>
}
 8003f6c:	bf00      	nop
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f7c:	f001 fc1c 	bl	80057b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d102      	bne.n	8003f8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	e001      	b.n	8003f92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f92:	f001 fc43 	bl	800581c <vPortExitCritical>

	return xReturn;
 8003f96:	68fb      	ldr	r3, [r7, #12]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fa8:	f001 fc06 	bl	80057b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d102      	bne.n	8003fbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	e001      	b.n	8003fc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fc2:	f001 fc2b 	bl	800581c <vPortExitCritical>

	return xReturn;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	e014      	b.n	800400a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003fe0:	4a0f      	ldr	r2, [pc, #60]	@ (8004020 <vQueueAddToRegistry+0x50>)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10b      	bne.n	8004004 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003fec:	490c      	ldr	r1, [pc, #48]	@ (8004020 <vQueueAddToRegistry+0x50>)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8004020 <vQueueAddToRegistry+0x50>)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004002:	e006      	b.n	8004012 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	3301      	adds	r3, #1
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b07      	cmp	r3, #7
 800400e:	d9e7      	bls.n	8003fe0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004010:	bf00      	nop
 8004012:	bf00      	nop
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	200007c8 	.word	0x200007c8

08004024 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004034:	f001 fbc0 	bl	80057b8 <vPortEnterCritical>
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800403e:	b25b      	sxtb	r3, r3
 8004040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004044:	d103      	bne.n	800404e <vQueueWaitForMessageRestricted+0x2a>
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004054:	b25b      	sxtb	r3, r3
 8004056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405a:	d103      	bne.n	8004064 <vQueueWaitForMessageRestricted+0x40>
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004064:	f001 fbda 	bl	800581c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406c:	2b00      	cmp	r3, #0
 800406e:	d106      	bne.n	800407e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	3324      	adds	r3, #36	@ 0x24
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	68b9      	ldr	r1, [r7, #8]
 8004078:	4618      	mov	r0, r3
 800407a:	f000 fc45 	bl	8004908 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800407e:	6978      	ldr	r0, [r7, #20]
 8004080:	f7ff ff26 	bl	8003ed0 <prvUnlockQueue>
	}
 8004084:	bf00      	nop
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800408c:	b580      	push	{r7, lr}
 800408e:	b08e      	sub	sp, #56	@ 0x38
 8004090:	af04      	add	r7, sp, #16
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800409a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10b      	bne.n	80040b8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80040a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	623b      	str	r3, [r7, #32]
}
 80040b2:	bf00      	nop
 80040b4:	bf00      	nop
 80040b6:	e7fd      	b.n	80040b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80040b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10b      	bne.n	80040d6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80040be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c2:	f383 8811 	msr	BASEPRI, r3
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	61fb      	str	r3, [r7, #28]
}
 80040d0:	bf00      	nop
 80040d2:	bf00      	nop
 80040d4:	e7fd      	b.n	80040d2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040d6:	235c      	movs	r3, #92	@ 0x5c
 80040d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	2b5c      	cmp	r3, #92	@ 0x5c
 80040de:	d00b      	beq.n	80040f8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80040e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	61bb      	str	r3, [r7, #24]
}
 80040f2:	bf00      	nop
 80040f4:	bf00      	nop
 80040f6:	e7fd      	b.n	80040f4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80040f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80040fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d01e      	beq.n	800413e <xTaskCreateStatic+0xb2>
 8004100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004102:	2b00      	cmp	r3, #0
 8004104:	d01b      	beq.n	800413e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004108:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800410e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004112:	2202      	movs	r2, #2
 8004114:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004118:	2300      	movs	r3, #0
 800411a:	9303      	str	r3, [sp, #12]
 800411c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411e:	9302      	str	r3, [sp, #8]
 8004120:	f107 0314 	add.w	r3, r7, #20
 8004124:	9301      	str	r3, [sp, #4]
 8004126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 f850 	bl	80041d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004136:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004138:	f000 f8de 	bl	80042f8 <prvAddNewTaskToReadyList>
 800413c:	e001      	b.n	8004142 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800413e:	2300      	movs	r3, #0
 8004140:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004142:	697b      	ldr	r3, [r7, #20]
	}
 8004144:	4618      	mov	r0, r3
 8004146:	3728      	adds	r7, #40	@ 0x28
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08c      	sub	sp, #48	@ 0x30
 8004150:	af04      	add	r7, sp, #16
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	603b      	str	r3, [r7, #0]
 8004158:	4613      	mov	r3, r2
 800415a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800415c:	88fb      	ldrh	r3, [r7, #6]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4618      	mov	r0, r3
 8004162:	f001 fc4b 	bl	80059fc <pvPortMalloc>
 8004166:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00e      	beq.n	800418c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800416e:	205c      	movs	r0, #92	@ 0x5c
 8004170:	f001 fc44 	bl	80059fc <pvPortMalloc>
 8004174:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	631a      	str	r2, [r3, #48]	@ 0x30
 8004182:	e005      	b.n	8004190 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004184:	6978      	ldr	r0, [r7, #20]
 8004186:	f001 fd07 	bl	8005b98 <vPortFree>
 800418a:	e001      	b.n	8004190 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800418c:	2300      	movs	r3, #0
 800418e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d017      	beq.n	80041c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800419e:	88fa      	ldrh	r2, [r7, #6]
 80041a0:	2300      	movs	r3, #0
 80041a2:	9303      	str	r3, [sp, #12]
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	9302      	str	r3, [sp, #8]
 80041a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041aa:	9301      	str	r3, [sp, #4]
 80041ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	68b9      	ldr	r1, [r7, #8]
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 f80e 	bl	80041d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041ba:	69f8      	ldr	r0, [r7, #28]
 80041bc:	f000 f89c 	bl	80042f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041c0:	2301      	movs	r3, #1
 80041c2:	61bb      	str	r3, [r7, #24]
 80041c4:	e002      	b.n	80041cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041c6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041cc:	69bb      	ldr	r3, [r7, #24]
	}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3720      	adds	r7, #32
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b088      	sub	sp, #32
 80041da:	af00      	add	r7, sp, #0
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	607a      	str	r2, [r7, #4]
 80041e2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80041e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	461a      	mov	r2, r3
 80041ee:	21a5      	movs	r1, #165	@ 0xa5
 80041f0:	f001 fdf2 	bl	8005dd8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80041f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041fe:	3b01      	subs	r3, #1
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4413      	add	r3, r2
 8004204:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	f023 0307 	bic.w	r3, r3, #7
 800420c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00b      	beq.n	8004230 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800421c:	f383 8811 	msr	BASEPRI, r3
 8004220:	f3bf 8f6f 	isb	sy
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	617b      	str	r3, [r7, #20]
}
 800422a:	bf00      	nop
 800422c:	bf00      	nop
 800422e:	e7fd      	b.n	800422c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d01f      	beq.n	8004276 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004236:	2300      	movs	r3, #0
 8004238:	61fb      	str	r3, [r7, #28]
 800423a:	e012      	b.n	8004262 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	4413      	add	r3, r2
 8004242:	7819      	ldrb	r1, [r3, #0]
 8004244:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	4413      	add	r3, r2
 800424a:	3334      	adds	r3, #52	@ 0x34
 800424c:	460a      	mov	r2, r1
 800424e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	4413      	add	r3, r2
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d006      	beq.n	800426a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	3301      	adds	r3, #1
 8004260:	61fb      	str	r3, [r7, #28]
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	2b0f      	cmp	r3, #15
 8004266:	d9e9      	bls.n	800423c <prvInitialiseNewTask+0x66>
 8004268:	e000      	b.n	800426c <prvInitialiseNewTask+0x96>
			{
				break;
 800426a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800426c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004274:	e003      	b.n	800427e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800427e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004280:	2b37      	cmp	r3, #55	@ 0x37
 8004282:	d901      	bls.n	8004288 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004284:	2337      	movs	r3, #55	@ 0x37
 8004286:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800428c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800428e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004290:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004292:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004296:	2200      	movs	r2, #0
 8004298:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800429a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429c:	3304      	adds	r3, #4
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff f966 	bl	8003570 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a6:	3318      	adds	r3, #24
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff f961 	bl	8003570 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80042ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042c2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c6:	2200      	movs	r2, #0
 80042c8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	68f9      	ldr	r1, [r7, #12]
 80042d6:	69b8      	ldr	r0, [r7, #24]
 80042d8:	f001 f93e 	bl	8005558 <pxPortInitialiseStack>
 80042dc:	4602      	mov	r2, r0
 80042de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80042e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042ee:	bf00      	nop
 80042f0:	3720      	adds	r7, #32
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
	...

080042f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004300:	f001 fa5a 	bl	80057b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004304:	4b2d      	ldr	r3, [pc, #180]	@ (80043bc <prvAddNewTaskToReadyList+0xc4>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3301      	adds	r3, #1
 800430a:	4a2c      	ldr	r2, [pc, #176]	@ (80043bc <prvAddNewTaskToReadyList+0xc4>)
 800430c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800430e:	4b2c      	ldr	r3, [pc, #176]	@ (80043c0 <prvAddNewTaskToReadyList+0xc8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d109      	bne.n	800432a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004316:	4a2a      	ldr	r2, [pc, #168]	@ (80043c0 <prvAddNewTaskToReadyList+0xc8>)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800431c:	4b27      	ldr	r3, [pc, #156]	@ (80043bc <prvAddNewTaskToReadyList+0xc4>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d110      	bne.n	8004346 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004324:	f000 fc1e 	bl	8004b64 <prvInitialiseTaskLists>
 8004328:	e00d      	b.n	8004346 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800432a:	4b26      	ldr	r3, [pc, #152]	@ (80043c4 <prvAddNewTaskToReadyList+0xcc>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d109      	bne.n	8004346 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004332:	4b23      	ldr	r3, [pc, #140]	@ (80043c0 <prvAddNewTaskToReadyList+0xc8>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800433c:	429a      	cmp	r2, r3
 800433e:	d802      	bhi.n	8004346 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004340:	4a1f      	ldr	r2, [pc, #124]	@ (80043c0 <prvAddNewTaskToReadyList+0xc8>)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004346:	4b20      	ldr	r3, [pc, #128]	@ (80043c8 <prvAddNewTaskToReadyList+0xd0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3301      	adds	r3, #1
 800434c:	4a1e      	ldr	r2, [pc, #120]	@ (80043c8 <prvAddNewTaskToReadyList+0xd0>)
 800434e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004350:	4b1d      	ldr	r3, [pc, #116]	@ (80043c8 <prvAddNewTaskToReadyList+0xd0>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800435c:	4b1b      	ldr	r3, [pc, #108]	@ (80043cc <prvAddNewTaskToReadyList+0xd4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d903      	bls.n	800436c <prvAddNewTaskToReadyList+0x74>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004368:	4a18      	ldr	r2, [pc, #96]	@ (80043cc <prvAddNewTaskToReadyList+0xd4>)
 800436a:	6013      	str	r3, [r2, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004370:	4613      	mov	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4a15      	ldr	r2, [pc, #84]	@ (80043d0 <prvAddNewTaskToReadyList+0xd8>)
 800437a:	441a      	add	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3304      	adds	r3, #4
 8004380:	4619      	mov	r1, r3
 8004382:	4610      	mov	r0, r2
 8004384:	f7ff f901 	bl	800358a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004388:	f001 fa48 	bl	800581c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800438c:	4b0d      	ldr	r3, [pc, #52]	@ (80043c4 <prvAddNewTaskToReadyList+0xcc>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00e      	beq.n	80043b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004394:	4b0a      	ldr	r3, [pc, #40]	@ (80043c0 <prvAddNewTaskToReadyList+0xc8>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439e:	429a      	cmp	r2, r3
 80043a0:	d207      	bcs.n	80043b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043a2:	4b0c      	ldr	r3, [pc, #48]	@ (80043d4 <prvAddNewTaskToReadyList+0xdc>)
 80043a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043b2:	bf00      	nop
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	20000cdc 	.word	0x20000cdc
 80043c0:	20000808 	.word	0x20000808
 80043c4:	20000ce8 	.word	0x20000ce8
 80043c8:	20000cf8 	.word	0x20000cf8
 80043cc:	20000ce4 	.word	0x20000ce4
 80043d0:	2000080c 	.word	0x2000080c
 80043d4:	e000ed04 	.word	0xe000ed04

080043d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d018      	beq.n	800441c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043ea:	4b14      	ldr	r3, [pc, #80]	@ (800443c <vTaskDelay+0x64>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00b      	beq.n	800440a <vTaskDelay+0x32>
	__asm volatile
 80043f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	60bb      	str	r3, [r7, #8]
}
 8004404:	bf00      	nop
 8004406:	bf00      	nop
 8004408:	e7fd      	b.n	8004406 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800440a:	f000 f883 	bl	8004514 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800440e:	2100      	movs	r1, #0
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 fcf3 	bl	8004dfc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004416:	f000 f88b 	bl	8004530 <xTaskResumeAll>
 800441a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d107      	bne.n	8004432 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004422:	4b07      	ldr	r3, [pc, #28]	@ (8004440 <vTaskDelay+0x68>)
 8004424:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004432:	bf00      	nop
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	20000d04 	.word	0x20000d04
 8004440:	e000ed04 	.word	0xe000ed04

08004444 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b08a      	sub	sp, #40	@ 0x28
 8004448:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800444a:	2300      	movs	r3, #0
 800444c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800444e:	2300      	movs	r3, #0
 8004450:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004452:	463a      	mov	r2, r7
 8004454:	1d39      	adds	r1, r7, #4
 8004456:	f107 0308 	add.w	r3, r7, #8
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff f834 	bl	80034c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004460:	6839      	ldr	r1, [r7, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	9202      	str	r2, [sp, #8]
 8004468:	9301      	str	r3, [sp, #4]
 800446a:	2300      	movs	r3, #0
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	2300      	movs	r3, #0
 8004470:	460a      	mov	r2, r1
 8004472:	4922      	ldr	r1, [pc, #136]	@ (80044fc <vTaskStartScheduler+0xb8>)
 8004474:	4822      	ldr	r0, [pc, #136]	@ (8004500 <vTaskStartScheduler+0xbc>)
 8004476:	f7ff fe09 	bl	800408c <xTaskCreateStatic>
 800447a:	4603      	mov	r3, r0
 800447c:	4a21      	ldr	r2, [pc, #132]	@ (8004504 <vTaskStartScheduler+0xc0>)
 800447e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004480:	4b20      	ldr	r3, [pc, #128]	@ (8004504 <vTaskStartScheduler+0xc0>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004488:	2301      	movs	r3, #1
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	e001      	b.n	8004492 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d102      	bne.n	800449e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004498:	f000 fd04 	bl	8004ea4 <xTimerCreateTimerTask>
 800449c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d116      	bne.n	80044d2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	613b      	str	r3, [r7, #16]
}
 80044b6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044b8:	4b13      	ldr	r3, [pc, #76]	@ (8004508 <vTaskStartScheduler+0xc4>)
 80044ba:	f04f 32ff 	mov.w	r2, #4294967295
 80044be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80044c0:	4b12      	ldr	r3, [pc, #72]	@ (800450c <vTaskStartScheduler+0xc8>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80044c6:	4b12      	ldr	r3, [pc, #72]	@ (8004510 <vTaskStartScheduler+0xcc>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044cc:	f001 f8d0 	bl	8005670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044d0:	e00f      	b.n	80044f2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d8:	d10b      	bne.n	80044f2 <vTaskStartScheduler+0xae>
	__asm volatile
 80044da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	60fb      	str	r3, [r7, #12]
}
 80044ec:	bf00      	nop
 80044ee:	bf00      	nop
 80044f0:	e7fd      	b.n	80044ee <vTaskStartScheduler+0xaa>
}
 80044f2:	bf00      	nop
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	08005e7c 	.word	0x08005e7c
 8004500:	08004b35 	.word	0x08004b35
 8004504:	20000d00 	.word	0x20000d00
 8004508:	20000cfc 	.word	0x20000cfc
 800450c:	20000ce8 	.word	0x20000ce8
 8004510:	20000ce0 	.word	0x20000ce0

08004514 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004518:	4b04      	ldr	r3, [pc, #16]	@ (800452c <vTaskSuspendAll+0x18>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3301      	adds	r3, #1
 800451e:	4a03      	ldr	r2, [pc, #12]	@ (800452c <vTaskSuspendAll+0x18>)
 8004520:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004522:	bf00      	nop
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	20000d04 	.word	0x20000d04

08004530 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004536:	2300      	movs	r3, #0
 8004538:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800453a:	2300      	movs	r3, #0
 800453c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800453e:	4b42      	ldr	r3, [pc, #264]	@ (8004648 <xTaskResumeAll+0x118>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10b      	bne.n	800455e <xTaskResumeAll+0x2e>
	__asm volatile
 8004546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800454a:	f383 8811 	msr	BASEPRI, r3
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	603b      	str	r3, [r7, #0]
}
 8004558:	bf00      	nop
 800455a:	bf00      	nop
 800455c:	e7fd      	b.n	800455a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800455e:	f001 f92b 	bl	80057b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004562:	4b39      	ldr	r3, [pc, #228]	@ (8004648 <xTaskResumeAll+0x118>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	3b01      	subs	r3, #1
 8004568:	4a37      	ldr	r2, [pc, #220]	@ (8004648 <xTaskResumeAll+0x118>)
 800456a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800456c:	4b36      	ldr	r3, [pc, #216]	@ (8004648 <xTaskResumeAll+0x118>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d162      	bne.n	800463a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004574:	4b35      	ldr	r3, [pc, #212]	@ (800464c <xTaskResumeAll+0x11c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d05e      	beq.n	800463a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800457c:	e02f      	b.n	80045de <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800457e:	4b34      	ldr	r3, [pc, #208]	@ (8004650 <xTaskResumeAll+0x120>)
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	3318      	adds	r3, #24
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff f85a 	bl	8003644 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	3304      	adds	r3, #4
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff f855 	bl	8003644 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800459e:	4b2d      	ldr	r3, [pc, #180]	@ (8004654 <xTaskResumeAll+0x124>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d903      	bls.n	80045ae <xTaskResumeAll+0x7e>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004654 <xTaskResumeAll+0x124>)
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045b2:	4613      	mov	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4a27      	ldr	r2, [pc, #156]	@ (8004658 <xTaskResumeAll+0x128>)
 80045bc:	441a      	add	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	3304      	adds	r3, #4
 80045c2:	4619      	mov	r1, r3
 80045c4:	4610      	mov	r0, r2
 80045c6:	f7fe ffe0 	bl	800358a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ce:	4b23      	ldr	r3, [pc, #140]	@ (800465c <xTaskResumeAll+0x12c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d302      	bcc.n	80045de <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80045d8:	4b21      	ldr	r3, [pc, #132]	@ (8004660 <xTaskResumeAll+0x130>)
 80045da:	2201      	movs	r2, #1
 80045dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045de:	4b1c      	ldr	r3, [pc, #112]	@ (8004650 <xTaskResumeAll+0x120>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1cb      	bne.n	800457e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045ec:	f000 fb58 	bl	8004ca0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80045f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004664 <xTaskResumeAll+0x134>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d010      	beq.n	800461e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045fc:	f000 f846 	bl	800468c <xTaskIncrementTick>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004606:	4b16      	ldr	r3, [pc, #88]	@ (8004660 <xTaskResumeAll+0x130>)
 8004608:	2201      	movs	r2, #1
 800460a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3b01      	subs	r3, #1
 8004610:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f1      	bne.n	80045fc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004618:	4b12      	ldr	r3, [pc, #72]	@ (8004664 <xTaskResumeAll+0x134>)
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800461e:	4b10      	ldr	r3, [pc, #64]	@ (8004660 <xTaskResumeAll+0x130>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d009      	beq.n	800463a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004626:	2301      	movs	r3, #1
 8004628:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800462a:	4b0f      	ldr	r3, [pc, #60]	@ (8004668 <xTaskResumeAll+0x138>)
 800462c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800463a:	f001 f8ef 	bl	800581c <vPortExitCritical>

	return xAlreadyYielded;
 800463e:	68bb      	ldr	r3, [r7, #8]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	20000d04 	.word	0x20000d04
 800464c:	20000cdc 	.word	0x20000cdc
 8004650:	20000c9c 	.word	0x20000c9c
 8004654:	20000ce4 	.word	0x20000ce4
 8004658:	2000080c 	.word	0x2000080c
 800465c:	20000808 	.word	0x20000808
 8004660:	20000cf0 	.word	0x20000cf0
 8004664:	20000cec 	.word	0x20000cec
 8004668:	e000ed04 	.word	0xe000ed04

0800466c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004672:	4b05      	ldr	r3, [pc, #20]	@ (8004688 <xTaskGetTickCount+0x1c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004678:	687b      	ldr	r3, [r7, #4]
}
 800467a:	4618      	mov	r0, r3
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	20000ce0 	.word	0x20000ce0

0800468c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004696:	4b4f      	ldr	r3, [pc, #316]	@ (80047d4 <xTaskIncrementTick+0x148>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	f040 8090 	bne.w	80047c0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046a0:	4b4d      	ldr	r3, [pc, #308]	@ (80047d8 <xTaskIncrementTick+0x14c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3301      	adds	r3, #1
 80046a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046a8:	4a4b      	ldr	r2, [pc, #300]	@ (80047d8 <xTaskIncrementTick+0x14c>)
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d121      	bne.n	80046f8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80046b4:	4b49      	ldr	r3, [pc, #292]	@ (80047dc <xTaskIncrementTick+0x150>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00b      	beq.n	80046d6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80046be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	603b      	str	r3, [r7, #0]
}
 80046d0:	bf00      	nop
 80046d2:	bf00      	nop
 80046d4:	e7fd      	b.n	80046d2 <xTaskIncrementTick+0x46>
 80046d6:	4b41      	ldr	r3, [pc, #260]	@ (80047dc <xTaskIncrementTick+0x150>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	4b40      	ldr	r3, [pc, #256]	@ (80047e0 <xTaskIncrementTick+0x154>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a3e      	ldr	r2, [pc, #248]	@ (80047dc <xTaskIncrementTick+0x150>)
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	4a3e      	ldr	r2, [pc, #248]	@ (80047e0 <xTaskIncrementTick+0x154>)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	4b3e      	ldr	r3, [pc, #248]	@ (80047e4 <xTaskIncrementTick+0x158>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3301      	adds	r3, #1
 80046f0:	4a3c      	ldr	r2, [pc, #240]	@ (80047e4 <xTaskIncrementTick+0x158>)
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	f000 fad4 	bl	8004ca0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046f8:	4b3b      	ldr	r3, [pc, #236]	@ (80047e8 <xTaskIncrementTick+0x15c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d349      	bcc.n	8004796 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004702:	4b36      	ldr	r3, [pc, #216]	@ (80047dc <xTaskIncrementTick+0x150>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d104      	bne.n	8004716 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800470c:	4b36      	ldr	r3, [pc, #216]	@ (80047e8 <xTaskIncrementTick+0x15c>)
 800470e:	f04f 32ff 	mov.w	r2, #4294967295
 8004712:	601a      	str	r2, [r3, #0]
					break;
 8004714:	e03f      	b.n	8004796 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004716:	4b31      	ldr	r3, [pc, #196]	@ (80047dc <xTaskIncrementTick+0x150>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	429a      	cmp	r2, r3
 800472c:	d203      	bcs.n	8004736 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800472e:	4a2e      	ldr	r2, [pc, #184]	@ (80047e8 <xTaskIncrementTick+0x15c>)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004734:	e02f      	b.n	8004796 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	3304      	adds	r3, #4
 800473a:	4618      	mov	r0, r3
 800473c:	f7fe ff82 	bl	8003644 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004744:	2b00      	cmp	r3, #0
 8004746:	d004      	beq.n	8004752 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	3318      	adds	r3, #24
 800474c:	4618      	mov	r0, r3
 800474e:	f7fe ff79 	bl	8003644 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004756:	4b25      	ldr	r3, [pc, #148]	@ (80047ec <xTaskIncrementTick+0x160>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	429a      	cmp	r2, r3
 800475c:	d903      	bls.n	8004766 <xTaskIncrementTick+0xda>
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004762:	4a22      	ldr	r2, [pc, #136]	@ (80047ec <xTaskIncrementTick+0x160>)
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4a1f      	ldr	r2, [pc, #124]	@ (80047f0 <xTaskIncrementTick+0x164>)
 8004774:	441a      	add	r2, r3
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	3304      	adds	r3, #4
 800477a:	4619      	mov	r1, r3
 800477c:	4610      	mov	r0, r2
 800477e:	f7fe ff04 	bl	800358a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004786:	4b1b      	ldr	r3, [pc, #108]	@ (80047f4 <xTaskIncrementTick+0x168>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478c:	429a      	cmp	r2, r3
 800478e:	d3b8      	bcc.n	8004702 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004790:	2301      	movs	r3, #1
 8004792:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004794:	e7b5      	b.n	8004702 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004796:	4b17      	ldr	r3, [pc, #92]	@ (80047f4 <xTaskIncrementTick+0x168>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800479c:	4914      	ldr	r1, [pc, #80]	@ (80047f0 <xTaskIncrementTick+0x164>)
 800479e:	4613      	mov	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	440b      	add	r3, r1
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d901      	bls.n	80047b2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80047ae:	2301      	movs	r3, #1
 80047b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80047b2:	4b11      	ldr	r3, [pc, #68]	@ (80047f8 <xTaskIncrementTick+0x16c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d007      	beq.n	80047ca <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80047ba:	2301      	movs	r3, #1
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	e004      	b.n	80047ca <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80047c0:	4b0e      	ldr	r3, [pc, #56]	@ (80047fc <xTaskIncrementTick+0x170>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	3301      	adds	r3, #1
 80047c6:	4a0d      	ldr	r2, [pc, #52]	@ (80047fc <xTaskIncrementTick+0x170>)
 80047c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80047ca:	697b      	ldr	r3, [r7, #20]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3718      	adds	r7, #24
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	20000d04 	.word	0x20000d04
 80047d8:	20000ce0 	.word	0x20000ce0
 80047dc:	20000c94 	.word	0x20000c94
 80047e0:	20000c98 	.word	0x20000c98
 80047e4:	20000cf4 	.word	0x20000cf4
 80047e8:	20000cfc 	.word	0x20000cfc
 80047ec:	20000ce4 	.word	0x20000ce4
 80047f0:	2000080c 	.word	0x2000080c
 80047f4:	20000808 	.word	0x20000808
 80047f8:	20000cf0 	.word	0x20000cf0
 80047fc:	20000cec 	.word	0x20000cec

08004800 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004806:	4b28      	ldr	r3, [pc, #160]	@ (80048a8 <vTaskSwitchContext+0xa8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800480e:	4b27      	ldr	r3, [pc, #156]	@ (80048ac <vTaskSwitchContext+0xac>)
 8004810:	2201      	movs	r2, #1
 8004812:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004814:	e042      	b.n	800489c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004816:	4b25      	ldr	r3, [pc, #148]	@ (80048ac <vTaskSwitchContext+0xac>)
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800481c:	4b24      	ldr	r3, [pc, #144]	@ (80048b0 <vTaskSwitchContext+0xb0>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	e011      	b.n	8004848 <vTaskSwitchContext+0x48>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10b      	bne.n	8004842 <vTaskSwitchContext+0x42>
	__asm volatile
 800482a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	607b      	str	r3, [r7, #4]
}
 800483c:	bf00      	nop
 800483e:	bf00      	nop
 8004840:	e7fd      	b.n	800483e <vTaskSwitchContext+0x3e>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	3b01      	subs	r3, #1
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	491a      	ldr	r1, [pc, #104]	@ (80048b4 <vTaskSwitchContext+0xb4>)
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4613      	mov	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0e3      	beq.n	8004824 <vTaskSwitchContext+0x24>
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4613      	mov	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4413      	add	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4a13      	ldr	r2, [pc, #76]	@ (80048b4 <vTaskSwitchContext+0xb4>)
 8004868:	4413      	add	r3, r2
 800486a:	60bb      	str	r3, [r7, #8]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	605a      	str	r2, [r3, #4]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	3308      	adds	r3, #8
 800487e:	429a      	cmp	r2, r3
 8004880:	d104      	bne.n	800488c <vTaskSwitchContext+0x8c>
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	605a      	str	r2, [r3, #4]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	4a09      	ldr	r2, [pc, #36]	@ (80048b8 <vTaskSwitchContext+0xb8>)
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	4a06      	ldr	r2, [pc, #24]	@ (80048b0 <vTaskSwitchContext+0xb0>)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6013      	str	r3, [r2, #0]
}
 800489c:	bf00      	nop
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	20000d04 	.word	0x20000d04
 80048ac:	20000cf0 	.word	0x20000cf0
 80048b0:	20000ce4 	.word	0x20000ce4
 80048b4:	2000080c 	.word	0x2000080c
 80048b8:	20000808 	.word	0x20000808

080048bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10b      	bne.n	80048e4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80048cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d0:	f383 8811 	msr	BASEPRI, r3
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	60fb      	str	r3, [r7, #12]
}
 80048de:	bf00      	nop
 80048e0:	bf00      	nop
 80048e2:	e7fd      	b.n	80048e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048e4:	4b07      	ldr	r3, [pc, #28]	@ (8004904 <vTaskPlaceOnEventList+0x48>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3318      	adds	r3, #24
 80048ea:	4619      	mov	r1, r3
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7fe fe70 	bl	80035d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048f2:	2101      	movs	r1, #1
 80048f4:	6838      	ldr	r0, [r7, #0]
 80048f6:	f000 fa81 	bl	8004dfc <prvAddCurrentTaskToDelayedList>
}
 80048fa:	bf00      	nop
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	20000808 	.word	0x20000808

08004908 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10b      	bne.n	8004932 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800491a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800491e:	f383 8811 	msr	BASEPRI, r3
 8004922:	f3bf 8f6f 	isb	sy
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	617b      	str	r3, [r7, #20]
}
 800492c:	bf00      	nop
 800492e:	bf00      	nop
 8004930:	e7fd      	b.n	800492e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004932:	4b0a      	ldr	r3, [pc, #40]	@ (800495c <vTaskPlaceOnEventListRestricted+0x54>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3318      	adds	r3, #24
 8004938:	4619      	mov	r1, r3
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f7fe fe25 	bl	800358a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004946:	f04f 33ff 	mov.w	r3, #4294967295
 800494a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	68b8      	ldr	r0, [r7, #8]
 8004950:	f000 fa54 	bl	8004dfc <prvAddCurrentTaskToDelayedList>
	}
 8004954:	bf00      	nop
 8004956:	3718      	adds	r7, #24
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	20000808 	.word	0x20000808

08004960 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10b      	bne.n	800498e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800497a:	f383 8811 	msr	BASEPRI, r3
 800497e:	f3bf 8f6f 	isb	sy
 8004982:	f3bf 8f4f 	dsb	sy
 8004986:	60fb      	str	r3, [r7, #12]
}
 8004988:	bf00      	nop
 800498a:	bf00      	nop
 800498c:	e7fd      	b.n	800498a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	3318      	adds	r3, #24
 8004992:	4618      	mov	r0, r3
 8004994:	f7fe fe56 	bl	8003644 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004998:	4b1d      	ldr	r3, [pc, #116]	@ (8004a10 <xTaskRemoveFromEventList+0xb0>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d11d      	bne.n	80049dc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	3304      	adds	r3, #4
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fe fe4d 	bl	8003644 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ae:	4b19      	ldr	r3, [pc, #100]	@ (8004a14 <xTaskRemoveFromEventList+0xb4>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d903      	bls.n	80049be <xTaskRemoveFromEventList+0x5e>
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ba:	4a16      	ldr	r2, [pc, #88]	@ (8004a14 <xTaskRemoveFromEventList+0xb4>)
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049c2:	4613      	mov	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4a13      	ldr	r2, [pc, #76]	@ (8004a18 <xTaskRemoveFromEventList+0xb8>)
 80049cc:	441a      	add	r2, r3
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	3304      	adds	r3, #4
 80049d2:	4619      	mov	r1, r3
 80049d4:	4610      	mov	r0, r2
 80049d6:	f7fe fdd8 	bl	800358a <vListInsertEnd>
 80049da:	e005      	b.n	80049e8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	3318      	adds	r3, #24
 80049e0:	4619      	mov	r1, r3
 80049e2:	480e      	ldr	r0, [pc, #56]	@ (8004a1c <xTaskRemoveFromEventList+0xbc>)
 80049e4:	f7fe fdd1 	bl	800358a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004a20 <xTaskRemoveFromEventList+0xc0>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d905      	bls.n	8004a02 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80049f6:	2301      	movs	r3, #1
 80049f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80049fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004a24 <xTaskRemoveFromEventList+0xc4>)
 80049fc:	2201      	movs	r2, #1
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	e001      	b.n	8004a06 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004a02:	2300      	movs	r3, #0
 8004a04:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a06:	697b      	ldr	r3, [r7, #20]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3718      	adds	r7, #24
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	20000d04 	.word	0x20000d04
 8004a14:	20000ce4 	.word	0x20000ce4
 8004a18:	2000080c 	.word	0x2000080c
 8004a1c:	20000c9c 	.word	0x20000c9c
 8004a20:	20000808 	.word	0x20000808
 8004a24:	20000cf0 	.word	0x20000cf0

08004a28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a30:	4b06      	ldr	r3, [pc, #24]	@ (8004a4c <vTaskInternalSetTimeOutState+0x24>)
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a38:	4b05      	ldr	r3, [pc, #20]	@ (8004a50 <vTaskInternalSetTimeOutState+0x28>)
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	605a      	str	r2, [r3, #4]
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	20000cf4 	.word	0x20000cf4
 8004a50:	20000ce0 	.word	0x20000ce0

08004a54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10b      	bne.n	8004a7c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a68:	f383 8811 	msr	BASEPRI, r3
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	613b      	str	r3, [r7, #16]
}
 8004a76:	bf00      	nop
 8004a78:	bf00      	nop
 8004a7a:	e7fd      	b.n	8004a78 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10b      	bne.n	8004a9a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	60fb      	str	r3, [r7, #12]
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop
 8004a98:	e7fd      	b.n	8004a96 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004a9a:	f000 fe8d 	bl	80057b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8004b14 <xTaskCheckForTimeOut+0xc0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab6:	d102      	bne.n	8004abe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	61fb      	str	r3, [r7, #28]
 8004abc:	e023      	b.n	8004b06 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	4b15      	ldr	r3, [pc, #84]	@ (8004b18 <xTaskCheckForTimeOut+0xc4>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d007      	beq.n	8004ada <xTaskCheckForTimeOut+0x86>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d302      	bcc.n	8004ada <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	61fb      	str	r3, [r7, #28]
 8004ad8:	e015      	b.n	8004b06 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d20b      	bcs.n	8004afc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	1ad2      	subs	r2, r2, r3
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7ff ff99 	bl	8004a28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004af6:	2300      	movs	r3, #0
 8004af8:	61fb      	str	r3, [r7, #28]
 8004afa:	e004      	b.n	8004b06 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2200      	movs	r2, #0
 8004b00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b02:	2301      	movs	r3, #1
 8004b04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b06:	f000 fe89 	bl	800581c <vPortExitCritical>

	return xReturn;
 8004b0a:	69fb      	ldr	r3, [r7, #28]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3720      	adds	r7, #32
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	20000ce0 	.word	0x20000ce0
 8004b18:	20000cf4 	.word	0x20000cf4

08004b1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b20:	4b03      	ldr	r3, [pc, #12]	@ (8004b30 <vTaskMissedYield+0x14>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	601a      	str	r2, [r3, #0]
}
 8004b26:	bf00      	nop
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	20000cf0 	.word	0x20000cf0

08004b34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b3c:	f000 f852 	bl	8004be4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b40:	4b06      	ldr	r3, [pc, #24]	@ (8004b5c <prvIdleTask+0x28>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d9f9      	bls.n	8004b3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b48:	4b05      	ldr	r3, [pc, #20]	@ (8004b60 <prvIdleTask+0x2c>)
 8004b4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b58:	e7f0      	b.n	8004b3c <prvIdleTask+0x8>
 8004b5a:	bf00      	nop
 8004b5c:	2000080c 	.word	0x2000080c
 8004b60:	e000ed04 	.word	0xe000ed04

08004b64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	607b      	str	r3, [r7, #4]
 8004b6e:	e00c      	b.n	8004b8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	4613      	mov	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4a12      	ldr	r2, [pc, #72]	@ (8004bc4 <prvInitialiseTaskLists+0x60>)
 8004b7c:	4413      	add	r3, r2
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fe fcd6 	bl	8003530 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3301      	adds	r3, #1
 8004b88:	607b      	str	r3, [r7, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b37      	cmp	r3, #55	@ 0x37
 8004b8e:	d9ef      	bls.n	8004b70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b90:	480d      	ldr	r0, [pc, #52]	@ (8004bc8 <prvInitialiseTaskLists+0x64>)
 8004b92:	f7fe fccd 	bl	8003530 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b96:	480d      	ldr	r0, [pc, #52]	@ (8004bcc <prvInitialiseTaskLists+0x68>)
 8004b98:	f7fe fcca 	bl	8003530 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b9c:	480c      	ldr	r0, [pc, #48]	@ (8004bd0 <prvInitialiseTaskLists+0x6c>)
 8004b9e:	f7fe fcc7 	bl	8003530 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ba2:	480c      	ldr	r0, [pc, #48]	@ (8004bd4 <prvInitialiseTaskLists+0x70>)
 8004ba4:	f7fe fcc4 	bl	8003530 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ba8:	480b      	ldr	r0, [pc, #44]	@ (8004bd8 <prvInitialiseTaskLists+0x74>)
 8004baa:	f7fe fcc1 	bl	8003530 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004bae:	4b0b      	ldr	r3, [pc, #44]	@ (8004bdc <prvInitialiseTaskLists+0x78>)
 8004bb0:	4a05      	ldr	r2, [pc, #20]	@ (8004bc8 <prvInitialiseTaskLists+0x64>)
 8004bb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8004be0 <prvInitialiseTaskLists+0x7c>)
 8004bb6:	4a05      	ldr	r2, [pc, #20]	@ (8004bcc <prvInitialiseTaskLists+0x68>)
 8004bb8:	601a      	str	r2, [r3, #0]
}
 8004bba:	bf00      	nop
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	2000080c 	.word	0x2000080c
 8004bc8:	20000c6c 	.word	0x20000c6c
 8004bcc:	20000c80 	.word	0x20000c80
 8004bd0:	20000c9c 	.word	0x20000c9c
 8004bd4:	20000cb0 	.word	0x20000cb0
 8004bd8:	20000cc8 	.word	0x20000cc8
 8004bdc:	20000c94 	.word	0x20000c94
 8004be0:	20000c98 	.word	0x20000c98

08004be4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bea:	e019      	b.n	8004c20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004bec:	f000 fde4 	bl	80057b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bf0:	4b10      	ldr	r3, [pc, #64]	@ (8004c34 <prvCheckTasksWaitingTermination+0x50>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7fe fd21 	bl	8003644 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c02:	4b0d      	ldr	r3, [pc, #52]	@ (8004c38 <prvCheckTasksWaitingTermination+0x54>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	4a0b      	ldr	r2, [pc, #44]	@ (8004c38 <prvCheckTasksWaitingTermination+0x54>)
 8004c0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c3c <prvCheckTasksWaitingTermination+0x58>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3b01      	subs	r3, #1
 8004c12:	4a0a      	ldr	r2, [pc, #40]	@ (8004c3c <prvCheckTasksWaitingTermination+0x58>)
 8004c14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c16:	f000 fe01 	bl	800581c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f810 	bl	8004c40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c20:	4b06      	ldr	r3, [pc, #24]	@ (8004c3c <prvCheckTasksWaitingTermination+0x58>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1e1      	bne.n	8004bec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c28:	bf00      	nop
 8004c2a:	bf00      	nop
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	20000cb0 	.word	0x20000cb0
 8004c38:	20000cdc 	.word	0x20000cdc
 8004c3c:	20000cc4 	.word	0x20000cc4

08004c40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d108      	bne.n	8004c64 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 ff9e 	bl	8005b98 <vPortFree>
				vPortFree( pxTCB );
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 ff9b 	bl	8005b98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c62:	e019      	b.n	8004c98 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d103      	bne.n	8004c76 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 ff92 	bl	8005b98 <vPortFree>
	}
 8004c74:	e010      	b.n	8004c98 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d00b      	beq.n	8004c98 <prvDeleteTCB+0x58>
	__asm volatile
 8004c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	60fb      	str	r3, [r7, #12]
}
 8004c92:	bf00      	nop
 8004c94:	bf00      	nop
 8004c96:	e7fd      	b.n	8004c94 <prvDeleteTCB+0x54>
	}
 8004c98:	bf00      	nop
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8004cd8 <prvResetNextTaskUnblockTime+0x38>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d104      	bne.n	8004cba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8004cdc <prvResetNextTaskUnblockTime+0x3c>)
 8004cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8004cb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004cb8:	e008      	b.n	8004ccc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cba:	4b07      	ldr	r3, [pc, #28]	@ (8004cd8 <prvResetNextTaskUnblockTime+0x38>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	4a04      	ldr	r2, [pc, #16]	@ (8004cdc <prvResetNextTaskUnblockTime+0x3c>)
 8004cca:	6013      	str	r3, [r2, #0]
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	20000c94 	.word	0x20000c94
 8004cdc:	20000cfc 	.word	0x20000cfc

08004ce0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8004d14 <xTaskGetSchedulerState+0x34>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d102      	bne.n	8004cf4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	607b      	str	r3, [r7, #4]
 8004cf2:	e008      	b.n	8004d06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cf4:	4b08      	ldr	r3, [pc, #32]	@ (8004d18 <xTaskGetSchedulerState+0x38>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d102      	bne.n	8004d02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	607b      	str	r3, [r7, #4]
 8004d00:	e001      	b.n	8004d06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d02:	2300      	movs	r3, #0
 8004d04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d06:	687b      	ldr	r3, [r7, #4]
	}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	20000ce8 	.word	0x20000ce8
 8004d18:	20000d04 	.word	0x20000d04

08004d1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d058      	beq.n	8004de4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d32:	4b2f      	ldr	r3, [pc, #188]	@ (8004df0 <xTaskPriorityDisinherit+0xd4>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d00b      	beq.n	8004d54 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d40:	f383 8811 	msr	BASEPRI, r3
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	60fb      	str	r3, [r7, #12]
}
 8004d4e:	bf00      	nop
 8004d50:	bf00      	nop
 8004d52:	e7fd      	b.n	8004d50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10b      	bne.n	8004d74 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	60bb      	str	r3, [r7, #8]
}
 8004d6e:	bf00      	nop
 8004d70:	bf00      	nop
 8004d72:	e7fd      	b.n	8004d70 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d78:	1e5a      	subs	r2, r3, #1
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d02c      	beq.n	8004de4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d128      	bne.n	8004de4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	3304      	adds	r3, #4
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fe fc54 	bl	8003644 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004db4:	4b0f      	ldr	r3, [pc, #60]	@ (8004df4 <xTaskPriorityDisinherit+0xd8>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d903      	bls.n	8004dc4 <xTaskPriorityDisinherit+0xa8>
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc0:	4a0c      	ldr	r2, [pc, #48]	@ (8004df4 <xTaskPriorityDisinherit+0xd8>)
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4a09      	ldr	r2, [pc, #36]	@ (8004df8 <xTaskPriorityDisinherit+0xdc>)
 8004dd2:	441a      	add	r2, r3
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	3304      	adds	r3, #4
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4610      	mov	r0, r2
 8004ddc:	f7fe fbd5 	bl	800358a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004de0:	2301      	movs	r3, #1
 8004de2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004de4:	697b      	ldr	r3, [r7, #20]
	}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3718      	adds	r7, #24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	20000808 	.word	0x20000808
 8004df4:	20000ce4 	.word	0x20000ce4
 8004df8:	2000080c 	.word	0x2000080c

08004dfc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e06:	4b21      	ldr	r3, [pc, #132]	@ (8004e8c <prvAddCurrentTaskToDelayedList+0x90>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e0c:	4b20      	ldr	r3, [pc, #128]	@ (8004e90 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	3304      	adds	r3, #4
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fe fc16 	bl	8003644 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1e:	d10a      	bne.n	8004e36 <prvAddCurrentTaskToDelayedList+0x3a>
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d007      	beq.n	8004e36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e26:	4b1a      	ldr	r3, [pc, #104]	@ (8004e90 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4819      	ldr	r0, [pc, #100]	@ (8004e94 <prvAddCurrentTaskToDelayedList+0x98>)
 8004e30:	f7fe fbab 	bl	800358a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e34:	e026      	b.n	8004e84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e3e:	4b14      	ldr	r3, [pc, #80]	@ (8004e90 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d209      	bcs.n	8004e62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e4e:	4b12      	ldr	r3, [pc, #72]	@ (8004e98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	4b0f      	ldr	r3, [pc, #60]	@ (8004e90 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3304      	adds	r3, #4
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	f7fe fbb9 	bl	80035d2 <vListInsert>
}
 8004e60:	e010      	b.n	8004e84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e62:	4b0e      	ldr	r3, [pc, #56]	@ (8004e9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	4b0a      	ldr	r3, [pc, #40]	@ (8004e90 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	4610      	mov	r0, r2
 8004e70:	f7fe fbaf 	bl	80035d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e74:	4b0a      	ldr	r3, [pc, #40]	@ (8004ea0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d202      	bcs.n	8004e84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004e7e:	4a08      	ldr	r2, [pc, #32]	@ (8004ea0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	6013      	str	r3, [r2, #0]
}
 8004e84:	bf00      	nop
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	20000ce0 	.word	0x20000ce0
 8004e90:	20000808 	.word	0x20000808
 8004e94:	20000cc8 	.word	0x20000cc8
 8004e98:	20000c98 	.word	0x20000c98
 8004e9c:	20000c94 	.word	0x20000c94
 8004ea0:	20000cfc 	.word	0x20000cfc

08004ea4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08a      	sub	sp, #40	@ 0x28
 8004ea8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004eae:	f000 fb13 	bl	80054d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8004f28 <xTimerCreateTimerTask+0x84>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d021      	beq.n	8004efe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004ec2:	1d3a      	adds	r2, r7, #4
 8004ec4:	f107 0108 	add.w	r1, r7, #8
 8004ec8:	f107 030c 	add.w	r3, r7, #12
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7fe fb15 	bl	80034fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004ed2:	6879      	ldr	r1, [r7, #4]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	9202      	str	r2, [sp, #8]
 8004eda:	9301      	str	r3, [sp, #4]
 8004edc:	2302      	movs	r3, #2
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	460a      	mov	r2, r1
 8004ee4:	4911      	ldr	r1, [pc, #68]	@ (8004f2c <xTimerCreateTimerTask+0x88>)
 8004ee6:	4812      	ldr	r0, [pc, #72]	@ (8004f30 <xTimerCreateTimerTask+0x8c>)
 8004ee8:	f7ff f8d0 	bl	800408c <xTaskCreateStatic>
 8004eec:	4603      	mov	r3, r0
 8004eee:	4a11      	ldr	r2, [pc, #68]	@ (8004f34 <xTimerCreateTimerTask+0x90>)
 8004ef0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004ef2:	4b10      	ldr	r3, [pc, #64]	@ (8004f34 <xTimerCreateTimerTask+0x90>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004efa:	2301      	movs	r3, #1
 8004efc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10b      	bne.n	8004f1c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	613b      	str	r3, [r7, #16]
}
 8004f16:	bf00      	nop
 8004f18:	bf00      	nop
 8004f1a:	e7fd      	b.n	8004f18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004f1c:	697b      	ldr	r3, [r7, #20]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	20000d38 	.word	0x20000d38
 8004f2c:	08005e84 	.word	0x08005e84
 8004f30:	08005071 	.word	0x08005071
 8004f34:	20000d3c 	.word	0x20000d3c

08004f38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08a      	sub	sp, #40	@ 0x28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004f46:	2300      	movs	r3, #0
 8004f48:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10b      	bne.n	8004f68 <xTimerGenericCommand+0x30>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	623b      	str	r3, [r7, #32]
}
 8004f62:	bf00      	nop
 8004f64:	bf00      	nop
 8004f66:	e7fd      	b.n	8004f64 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004f68:	4b19      	ldr	r3, [pc, #100]	@ (8004fd0 <xTimerGenericCommand+0x98>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d02a      	beq.n	8004fc6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b05      	cmp	r3, #5
 8004f80:	dc18      	bgt.n	8004fb4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004f82:	f7ff fead 	bl	8004ce0 <xTaskGetSchedulerState>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d109      	bne.n	8004fa0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004f8c:	4b10      	ldr	r3, [pc, #64]	@ (8004fd0 <xTimerGenericCommand+0x98>)
 8004f8e:	6818      	ldr	r0, [r3, #0]
 8004f90:	f107 0110 	add.w	r1, r7, #16
 8004f94:	2300      	movs	r3, #0
 8004f96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f98:	f7fe fc88 	bl	80038ac <xQueueGenericSend>
 8004f9c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004f9e:	e012      	b.n	8004fc6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd0 <xTimerGenericCommand+0x98>)
 8004fa2:	6818      	ldr	r0, [r3, #0]
 8004fa4:	f107 0110 	add.w	r1, r7, #16
 8004fa8:	2300      	movs	r3, #0
 8004faa:	2200      	movs	r2, #0
 8004fac:	f7fe fc7e 	bl	80038ac <xQueueGenericSend>
 8004fb0:	6278      	str	r0, [r7, #36]	@ 0x24
 8004fb2:	e008      	b.n	8004fc6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004fb4:	4b06      	ldr	r3, [pc, #24]	@ (8004fd0 <xTimerGenericCommand+0x98>)
 8004fb6:	6818      	ldr	r0, [r3, #0]
 8004fb8:	f107 0110 	add.w	r1, r7, #16
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	f7fe fd76 	bl	8003ab0 <xQueueGenericSendFromISR>
 8004fc4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3728      	adds	r7, #40	@ 0x28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	20000d38 	.word	0x20000d38

08004fd4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fde:	4b23      	ldr	r3, [pc, #140]	@ (800506c <prvProcessExpiredTimer+0x98>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	3304      	adds	r3, #4
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7fe fb29 	bl	8003644 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d023      	beq.n	8005048 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	699a      	ldr	r2, [r3, #24]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	18d1      	adds	r1, r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	6978      	ldr	r0, [r7, #20]
 800500e:	f000 f8d5 	bl	80051bc <prvInsertTimerInActiveList>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d020      	beq.n	800505a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005018:	2300      	movs	r3, #0
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	2300      	movs	r3, #0
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	2100      	movs	r1, #0
 8005022:	6978      	ldr	r0, [r7, #20]
 8005024:	f7ff ff88 	bl	8004f38 <xTimerGenericCommand>
 8005028:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d114      	bne.n	800505a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	60fb      	str	r3, [r7, #12]
}
 8005042:	bf00      	nop
 8005044:	bf00      	nop
 8005046:	e7fd      	b.n	8005044 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800504e:	f023 0301 	bic.w	r3, r3, #1
 8005052:	b2da      	uxtb	r2, r3
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	6978      	ldr	r0, [r7, #20]
 8005060:	4798      	blx	r3
}
 8005062:	bf00      	nop
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	20000d30 	.word	0x20000d30

08005070 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005078:	f107 0308 	add.w	r3, r7, #8
 800507c:	4618      	mov	r0, r3
 800507e:	f000 f859 	bl	8005134 <prvGetNextExpireTime>
 8005082:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	4619      	mov	r1, r3
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 f805 	bl	8005098 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800508e:	f000 f8d7 	bl	8005240 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005092:	bf00      	nop
 8005094:	e7f0      	b.n	8005078 <prvTimerTask+0x8>
	...

08005098 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80050a2:	f7ff fa37 	bl	8004514 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050a6:	f107 0308 	add.w	r3, r7, #8
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 f866 	bl	800517c <prvSampleTimeNow>
 80050b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d130      	bne.n	800511a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10a      	bne.n	80050d4 <prvProcessTimerOrBlockTask+0x3c>
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d806      	bhi.n	80050d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80050c6:	f7ff fa33 	bl	8004530 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80050ca:	68f9      	ldr	r1, [r7, #12]
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7ff ff81 	bl	8004fd4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80050d2:	e024      	b.n	800511e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d008      	beq.n	80050ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80050da:	4b13      	ldr	r3, [pc, #76]	@ (8005128 <prvProcessTimerOrBlockTask+0x90>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <prvProcessTimerOrBlockTask+0x50>
 80050e4:	2301      	movs	r3, #1
 80050e6:	e000      	b.n	80050ea <prvProcessTimerOrBlockTask+0x52>
 80050e8:	2300      	movs	r3, #0
 80050ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80050ec:	4b0f      	ldr	r3, [pc, #60]	@ (800512c <prvProcessTimerOrBlockTask+0x94>)
 80050ee:	6818      	ldr	r0, [r3, #0]
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	4619      	mov	r1, r3
 80050fa:	f7fe ff93 	bl	8004024 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80050fe:	f7ff fa17 	bl	8004530 <xTaskResumeAll>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10a      	bne.n	800511e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005108:	4b09      	ldr	r3, [pc, #36]	@ (8005130 <prvProcessTimerOrBlockTask+0x98>)
 800510a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	f3bf 8f6f 	isb	sy
}
 8005118:	e001      	b.n	800511e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800511a:	f7ff fa09 	bl	8004530 <xTaskResumeAll>
}
 800511e:	bf00      	nop
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	20000d34 	.word	0x20000d34
 800512c:	20000d38 	.word	0x20000d38
 8005130:	e000ed04 	.word	0xe000ed04

08005134 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800513c:	4b0e      	ldr	r3, [pc, #56]	@ (8005178 <prvGetNextExpireTime+0x44>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <prvGetNextExpireTime+0x16>
 8005146:	2201      	movs	r2, #1
 8005148:	e000      	b.n	800514c <prvGetNextExpireTime+0x18>
 800514a:	2200      	movs	r2, #0
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d105      	bne.n	8005164 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005158:	4b07      	ldr	r3, [pc, #28]	@ (8005178 <prvGetNextExpireTime+0x44>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	e001      	b.n	8005168 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005168:	68fb      	ldr	r3, [r7, #12]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	20000d30 	.word	0x20000d30

0800517c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005184:	f7ff fa72 	bl	800466c <xTaskGetTickCount>
 8005188:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800518a:	4b0b      	ldr	r3, [pc, #44]	@ (80051b8 <prvSampleTimeNow+0x3c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	429a      	cmp	r2, r3
 8005192:	d205      	bcs.n	80051a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005194:	f000 f93a 	bl	800540c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	e002      	b.n	80051a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80051a6:	4a04      	ldr	r2, [pc, #16]	@ (80051b8 <prvSampleTimeNow+0x3c>)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80051ac:	68fb      	ldr	r3, [r7, #12]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	20000d40 	.word	0x20000d40

080051bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80051ca:	2300      	movs	r3, #0
 80051cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d812      	bhi.n	8005208 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	1ad2      	subs	r2, r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d302      	bcc.n	80051f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80051f0:	2301      	movs	r3, #1
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	e01b      	b.n	800522e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80051f6:	4b10      	ldr	r3, [pc, #64]	@ (8005238 <prvInsertTimerInActiveList+0x7c>)
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3304      	adds	r3, #4
 80051fe:	4619      	mov	r1, r3
 8005200:	4610      	mov	r0, r2
 8005202:	f7fe f9e6 	bl	80035d2 <vListInsert>
 8005206:	e012      	b.n	800522e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	429a      	cmp	r2, r3
 800520e:	d206      	bcs.n	800521e <prvInsertTimerInActiveList+0x62>
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	429a      	cmp	r2, r3
 8005216:	d302      	bcc.n	800521e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005218:	2301      	movs	r3, #1
 800521a:	617b      	str	r3, [r7, #20]
 800521c:	e007      	b.n	800522e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800521e:	4b07      	ldr	r3, [pc, #28]	@ (800523c <prvInsertTimerInActiveList+0x80>)
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3304      	adds	r3, #4
 8005226:	4619      	mov	r1, r3
 8005228:	4610      	mov	r0, r2
 800522a:	f7fe f9d2 	bl	80035d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800522e:	697b      	ldr	r3, [r7, #20]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3718      	adds	r7, #24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	20000d34 	.word	0x20000d34
 800523c:	20000d30 	.word	0x20000d30

08005240 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08e      	sub	sp, #56	@ 0x38
 8005244:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005246:	e0ce      	b.n	80053e6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	da19      	bge.n	8005282 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800524e:	1d3b      	adds	r3, r7, #4
 8005250:	3304      	adds	r3, #4
 8005252:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10b      	bne.n	8005272 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800525a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	61fb      	str	r3, [r7, #28]
}
 800526c:	bf00      	nop
 800526e:	bf00      	nop
 8005270:	e7fd      	b.n	800526e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005278:	6850      	ldr	r0, [r2, #4]
 800527a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800527c:	6892      	ldr	r2, [r2, #8]
 800527e:	4611      	mov	r1, r2
 8005280:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	f2c0 80ae 	blt.w	80053e6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800528e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d004      	beq.n	80052a0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005298:	3304      	adds	r3, #4
 800529a:	4618      	mov	r0, r3
 800529c:	f7fe f9d2 	bl	8003644 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052a0:	463b      	mov	r3, r7
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7ff ff6a 	bl	800517c <prvSampleTimeNow>
 80052a8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b09      	cmp	r3, #9
 80052ae:	f200 8097 	bhi.w	80053e0 <prvProcessReceivedCommands+0x1a0>
 80052b2:	a201      	add	r2, pc, #4	@ (adr r2, 80052b8 <prvProcessReceivedCommands+0x78>)
 80052b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b8:	080052e1 	.word	0x080052e1
 80052bc:	080052e1 	.word	0x080052e1
 80052c0:	080052e1 	.word	0x080052e1
 80052c4:	08005357 	.word	0x08005357
 80052c8:	0800536b 	.word	0x0800536b
 80052cc:	080053b7 	.word	0x080053b7
 80052d0:	080052e1 	.word	0x080052e1
 80052d4:	080052e1 	.word	0x080052e1
 80052d8:	08005357 	.word	0x08005357
 80052dc:	0800536b 	.word	0x0800536b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80052e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052e6:	f043 0301 	orr.w	r3, r3, #1
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	18d1      	adds	r1, r2, r3
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005300:	f7ff ff5c 	bl	80051bc <prvInsertTimerInActiveList>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d06c      	beq.n	80053e4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800530a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005310:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005314:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b00      	cmp	r3, #0
 800531e:	d061      	beq.n	80053e4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	441a      	add	r2, r3
 8005328:	2300      	movs	r3, #0
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	2300      	movs	r3, #0
 800532e:	2100      	movs	r1, #0
 8005330:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005332:	f7ff fe01 	bl	8004f38 <xTimerGenericCommand>
 8005336:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005338:	6a3b      	ldr	r3, [r7, #32]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d152      	bne.n	80053e4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800533e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	61bb      	str	r3, [r7, #24]
}
 8005350:	bf00      	nop
 8005352:	bf00      	nop
 8005354:	e7fd      	b.n	8005352 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005358:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800535c:	f023 0301 	bic.w	r3, r3, #1
 8005360:	b2da      	uxtb	r2, r3
 8005362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005364:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005368:	e03d      	b.n	80053e6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800536a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800536c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005370:	f043 0301 	orr.w	r3, r3, #1
 8005374:	b2da      	uxtb	r2, r3
 8005376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005378:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005380:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10b      	bne.n	80053a2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	617b      	str	r3, [r7, #20]
}
 800539c:	bf00      	nop
 800539e:	bf00      	nop
 80053a0:	e7fd      	b.n	800539e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80053a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a4:	699a      	ldr	r2, [r3, #24]
 80053a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a8:	18d1      	adds	r1, r2, r3
 80053aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053b0:	f7ff ff04 	bl	80051bc <prvInsertTimerInActiveList>
					break;
 80053b4:	e017      	b.n	80053e6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80053b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d103      	bne.n	80053cc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80053c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053c6:	f000 fbe7 	bl	8005b98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80053ca:	e00c      	b.n	80053e6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053d2:	f023 0301 	bic.w	r3, r3, #1
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80053de:	e002      	b.n	80053e6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80053e0:	bf00      	nop
 80053e2:	e000      	b.n	80053e6 <prvProcessReceivedCommands+0x1a6>
					break;
 80053e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053e6:	4b08      	ldr	r3, [pc, #32]	@ (8005408 <prvProcessReceivedCommands+0x1c8>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	1d39      	adds	r1, r7, #4
 80053ec:	2200      	movs	r2, #0
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fe fbfc 	bl	8003bec <xQueueReceive>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f47f af26 	bne.w	8005248 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80053fc:	bf00      	nop
 80053fe:	bf00      	nop
 8005400:	3730      	adds	r7, #48	@ 0x30
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20000d38 	.word	0x20000d38

0800540c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005412:	e049      	b.n	80054a8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005414:	4b2e      	ldr	r3, [pc, #184]	@ (80054d0 <prvSwitchTimerLists+0xc4>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800541e:	4b2c      	ldr	r3, [pc, #176]	@ (80054d0 <prvSwitchTimerLists+0xc4>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	3304      	adds	r3, #4
 800542c:	4618      	mov	r0, r3
 800542e:	f7fe f909 	bl	8003644 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b00      	cmp	r3, #0
 8005446:	d02f      	beq.n	80054a8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	4413      	add	r3, r2
 8005450:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	429a      	cmp	r2, r3
 8005458:	d90e      	bls.n	8005478 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005466:	4b1a      	ldr	r3, [pc, #104]	@ (80054d0 <prvSwitchTimerLists+0xc4>)
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3304      	adds	r3, #4
 800546e:	4619      	mov	r1, r3
 8005470:	4610      	mov	r0, r2
 8005472:	f7fe f8ae 	bl	80035d2 <vListInsert>
 8005476:	e017      	b.n	80054a8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005478:	2300      	movs	r3, #0
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	2300      	movs	r3, #0
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	2100      	movs	r1, #0
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f7ff fd58 	bl	8004f38 <xTimerGenericCommand>
 8005488:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10b      	bne.n	80054a8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	603b      	str	r3, [r7, #0]
}
 80054a2:	bf00      	nop
 80054a4:	bf00      	nop
 80054a6:	e7fd      	b.n	80054a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054a8:	4b09      	ldr	r3, [pc, #36]	@ (80054d0 <prvSwitchTimerLists+0xc4>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1b0      	bne.n	8005414 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80054b2:	4b07      	ldr	r3, [pc, #28]	@ (80054d0 <prvSwitchTimerLists+0xc4>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80054b8:	4b06      	ldr	r3, [pc, #24]	@ (80054d4 <prvSwitchTimerLists+0xc8>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a04      	ldr	r2, [pc, #16]	@ (80054d0 <prvSwitchTimerLists+0xc4>)
 80054be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80054c0:	4a04      	ldr	r2, [pc, #16]	@ (80054d4 <prvSwitchTimerLists+0xc8>)
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	6013      	str	r3, [r2, #0]
}
 80054c6:	bf00      	nop
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	20000d30 	.word	0x20000d30
 80054d4:	20000d34 	.word	0x20000d34

080054d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80054de:	f000 f96b 	bl	80057b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80054e2:	4b15      	ldr	r3, [pc, #84]	@ (8005538 <prvCheckForValidListAndQueue+0x60>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d120      	bne.n	800552c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80054ea:	4814      	ldr	r0, [pc, #80]	@ (800553c <prvCheckForValidListAndQueue+0x64>)
 80054ec:	f7fe f820 	bl	8003530 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80054f0:	4813      	ldr	r0, [pc, #76]	@ (8005540 <prvCheckForValidListAndQueue+0x68>)
 80054f2:	f7fe f81d 	bl	8003530 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80054f6:	4b13      	ldr	r3, [pc, #76]	@ (8005544 <prvCheckForValidListAndQueue+0x6c>)
 80054f8:	4a10      	ldr	r2, [pc, #64]	@ (800553c <prvCheckForValidListAndQueue+0x64>)
 80054fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80054fc:	4b12      	ldr	r3, [pc, #72]	@ (8005548 <prvCheckForValidListAndQueue+0x70>)
 80054fe:	4a10      	ldr	r2, [pc, #64]	@ (8005540 <prvCheckForValidListAndQueue+0x68>)
 8005500:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005502:	2300      	movs	r3, #0
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	4b11      	ldr	r3, [pc, #68]	@ (800554c <prvCheckForValidListAndQueue+0x74>)
 8005508:	4a11      	ldr	r2, [pc, #68]	@ (8005550 <prvCheckForValidListAndQueue+0x78>)
 800550a:	2110      	movs	r1, #16
 800550c:	200a      	movs	r0, #10
 800550e:	f7fe f92d 	bl	800376c <xQueueGenericCreateStatic>
 8005512:	4603      	mov	r3, r0
 8005514:	4a08      	ldr	r2, [pc, #32]	@ (8005538 <prvCheckForValidListAndQueue+0x60>)
 8005516:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005518:	4b07      	ldr	r3, [pc, #28]	@ (8005538 <prvCheckForValidListAndQueue+0x60>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d005      	beq.n	800552c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005520:	4b05      	ldr	r3, [pc, #20]	@ (8005538 <prvCheckForValidListAndQueue+0x60>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	490b      	ldr	r1, [pc, #44]	@ (8005554 <prvCheckForValidListAndQueue+0x7c>)
 8005526:	4618      	mov	r0, r3
 8005528:	f7fe fd52 	bl	8003fd0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800552c:	f000 f976 	bl	800581c <vPortExitCritical>
}
 8005530:	bf00      	nop
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20000d38 	.word	0x20000d38
 800553c:	20000d08 	.word	0x20000d08
 8005540:	20000d1c 	.word	0x20000d1c
 8005544:	20000d30 	.word	0x20000d30
 8005548:	20000d34 	.word	0x20000d34
 800554c:	20000de4 	.word	0x20000de4
 8005550:	20000d44 	.word	0x20000d44
 8005554:	08005e8c 	.word	0x08005e8c

08005558 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	3b04      	subs	r3, #4
 8005568:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005570:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	3b04      	subs	r3, #4
 8005576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f023 0201 	bic.w	r2, r3, #1
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	3b04      	subs	r3, #4
 8005586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005588:	4a0c      	ldr	r2, [pc, #48]	@ (80055bc <pxPortInitialiseStack+0x64>)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3b14      	subs	r3, #20
 8005592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	3b04      	subs	r3, #4
 800559e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f06f 0202 	mvn.w	r2, #2
 80055a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	3b20      	subs	r3, #32
 80055ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80055ae:	68fb      	ldr	r3, [r7, #12]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	080055c1 	.word	0x080055c1

080055c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80055c6:	2300      	movs	r3, #0
 80055c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80055ca:	4b13      	ldr	r3, [pc, #76]	@ (8005618 <prvTaskExitError+0x58>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d2:	d00b      	beq.n	80055ec <prvTaskExitError+0x2c>
	__asm volatile
 80055d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d8:	f383 8811 	msr	BASEPRI, r3
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	60fb      	str	r3, [r7, #12]
}
 80055e6:	bf00      	nop
 80055e8:	bf00      	nop
 80055ea:	e7fd      	b.n	80055e8 <prvTaskExitError+0x28>
	__asm volatile
 80055ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	60bb      	str	r3, [r7, #8]
}
 80055fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005600:	bf00      	nop
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0fc      	beq.n	8005602 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005608:	bf00      	nop
 800560a:	bf00      	nop
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	2000000c 	.word	0x2000000c
 800561c:	00000000 	.word	0x00000000

08005620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005620:	4b07      	ldr	r3, [pc, #28]	@ (8005640 <pxCurrentTCBConst2>)
 8005622:	6819      	ldr	r1, [r3, #0]
 8005624:	6808      	ldr	r0, [r1, #0]
 8005626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800562a:	f380 8809 	msr	PSP, r0
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f04f 0000 	mov.w	r0, #0
 8005636:	f380 8811 	msr	BASEPRI, r0
 800563a:	4770      	bx	lr
 800563c:	f3af 8000 	nop.w

08005640 <pxCurrentTCBConst2>:
 8005640:	20000808 	.word	0x20000808
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005644:	bf00      	nop
 8005646:	bf00      	nop

08005648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005648:	4808      	ldr	r0, [pc, #32]	@ (800566c <prvPortStartFirstTask+0x24>)
 800564a:	6800      	ldr	r0, [r0, #0]
 800564c:	6800      	ldr	r0, [r0, #0]
 800564e:	f380 8808 	msr	MSP, r0
 8005652:	f04f 0000 	mov.w	r0, #0
 8005656:	f380 8814 	msr	CONTROL, r0
 800565a:	b662      	cpsie	i
 800565c:	b661      	cpsie	f
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	df00      	svc	0
 8005668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800566a:	bf00      	nop
 800566c:	e000ed08 	.word	0xe000ed08

08005670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005676:	4b47      	ldr	r3, [pc, #284]	@ (8005794 <xPortStartScheduler+0x124>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a47      	ldr	r2, [pc, #284]	@ (8005798 <xPortStartScheduler+0x128>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d10b      	bne.n	8005698 <xPortStartScheduler+0x28>
	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	60fb      	str	r3, [r7, #12]
}
 8005692:	bf00      	nop
 8005694:	bf00      	nop
 8005696:	e7fd      	b.n	8005694 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005698:	4b3e      	ldr	r3, [pc, #248]	@ (8005794 <xPortStartScheduler+0x124>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a3f      	ldr	r2, [pc, #252]	@ (800579c <xPortStartScheduler+0x12c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d10b      	bne.n	80056ba <xPortStartScheduler+0x4a>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	613b      	str	r3, [r7, #16]
}
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop
 80056b8:	e7fd      	b.n	80056b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80056ba:	4b39      	ldr	r3, [pc, #228]	@ (80057a0 <xPortStartScheduler+0x130>)
 80056bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	22ff      	movs	r2, #255	@ 0xff
 80056ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80056d4:	78fb      	ldrb	r3, [r7, #3]
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	4b31      	ldr	r3, [pc, #196]	@ (80057a4 <xPortStartScheduler+0x134>)
 80056e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80056e2:	4b31      	ldr	r3, [pc, #196]	@ (80057a8 <xPortStartScheduler+0x138>)
 80056e4:	2207      	movs	r2, #7
 80056e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056e8:	e009      	b.n	80056fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80056ea:	4b2f      	ldr	r3, [pc, #188]	@ (80057a8 <xPortStartScheduler+0x138>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	4a2d      	ldr	r2, [pc, #180]	@ (80057a8 <xPortStartScheduler+0x138>)
 80056f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80056f4:	78fb      	ldrb	r3, [r7, #3]
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056fe:	78fb      	ldrb	r3, [r7, #3]
 8005700:	b2db      	uxtb	r3, r3
 8005702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005706:	2b80      	cmp	r3, #128	@ 0x80
 8005708:	d0ef      	beq.n	80056ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800570a:	4b27      	ldr	r3, [pc, #156]	@ (80057a8 <xPortStartScheduler+0x138>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f1c3 0307 	rsb	r3, r3, #7
 8005712:	2b04      	cmp	r3, #4
 8005714:	d00b      	beq.n	800572e <xPortStartScheduler+0xbe>
	__asm volatile
 8005716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800571a:	f383 8811 	msr	BASEPRI, r3
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	60bb      	str	r3, [r7, #8]
}
 8005728:	bf00      	nop
 800572a:	bf00      	nop
 800572c:	e7fd      	b.n	800572a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800572e:	4b1e      	ldr	r3, [pc, #120]	@ (80057a8 <xPortStartScheduler+0x138>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	021b      	lsls	r3, r3, #8
 8005734:	4a1c      	ldr	r2, [pc, #112]	@ (80057a8 <xPortStartScheduler+0x138>)
 8005736:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005738:	4b1b      	ldr	r3, [pc, #108]	@ (80057a8 <xPortStartScheduler+0x138>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005740:	4a19      	ldr	r2, [pc, #100]	@ (80057a8 <xPortStartScheduler+0x138>)
 8005742:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	b2da      	uxtb	r2, r3
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800574c:	4b17      	ldr	r3, [pc, #92]	@ (80057ac <xPortStartScheduler+0x13c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a16      	ldr	r2, [pc, #88]	@ (80057ac <xPortStartScheduler+0x13c>)
 8005752:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005756:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005758:	4b14      	ldr	r3, [pc, #80]	@ (80057ac <xPortStartScheduler+0x13c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a13      	ldr	r2, [pc, #76]	@ (80057ac <xPortStartScheduler+0x13c>)
 800575e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005762:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005764:	f000 f8da 	bl	800591c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005768:	4b11      	ldr	r3, [pc, #68]	@ (80057b0 <xPortStartScheduler+0x140>)
 800576a:	2200      	movs	r2, #0
 800576c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800576e:	f000 f8f9 	bl	8005964 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005772:	4b10      	ldr	r3, [pc, #64]	@ (80057b4 <xPortStartScheduler+0x144>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a0f      	ldr	r2, [pc, #60]	@ (80057b4 <xPortStartScheduler+0x144>)
 8005778:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800577c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800577e:	f7ff ff63 	bl	8005648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005782:	f7ff f83d 	bl	8004800 <vTaskSwitchContext>
	prvTaskExitError();
 8005786:	f7ff ff1b 	bl	80055c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3718      	adds	r7, #24
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	e000ed00 	.word	0xe000ed00
 8005798:	410fc271 	.word	0x410fc271
 800579c:	410fc270 	.word	0x410fc270
 80057a0:	e000e400 	.word	0xe000e400
 80057a4:	20000e34 	.word	0x20000e34
 80057a8:	20000e38 	.word	0x20000e38
 80057ac:	e000ed20 	.word	0xe000ed20
 80057b0:	2000000c 	.word	0x2000000c
 80057b4:	e000ef34 	.word	0xe000ef34

080057b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
	__asm volatile
 80057be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	607b      	str	r3, [r7, #4]
}
 80057d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80057d2:	4b10      	ldr	r3, [pc, #64]	@ (8005814 <vPortEnterCritical+0x5c>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3301      	adds	r3, #1
 80057d8:	4a0e      	ldr	r2, [pc, #56]	@ (8005814 <vPortEnterCritical+0x5c>)
 80057da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80057dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005814 <vPortEnterCritical+0x5c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d110      	bne.n	8005806 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80057e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005818 <vPortEnterCritical+0x60>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00b      	beq.n	8005806 <vPortEnterCritical+0x4e>
	__asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	603b      	str	r3, [r7, #0]
}
 8005800:	bf00      	nop
 8005802:	bf00      	nop
 8005804:	e7fd      	b.n	8005802 <vPortEnterCritical+0x4a>
	}
}
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	2000000c 	.word	0x2000000c
 8005818:	e000ed04 	.word	0xe000ed04

0800581c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005822:	4b12      	ldr	r3, [pc, #72]	@ (800586c <vPortExitCritical+0x50>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10b      	bne.n	8005842 <vPortExitCritical+0x26>
	__asm volatile
 800582a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	607b      	str	r3, [r7, #4]
}
 800583c:	bf00      	nop
 800583e:	bf00      	nop
 8005840:	e7fd      	b.n	800583e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005842:	4b0a      	ldr	r3, [pc, #40]	@ (800586c <vPortExitCritical+0x50>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3b01      	subs	r3, #1
 8005848:	4a08      	ldr	r2, [pc, #32]	@ (800586c <vPortExitCritical+0x50>)
 800584a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800584c:	4b07      	ldr	r3, [pc, #28]	@ (800586c <vPortExitCritical+0x50>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d105      	bne.n	8005860 <vPortExitCritical+0x44>
 8005854:	2300      	movs	r3, #0
 8005856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	f383 8811 	msr	BASEPRI, r3
}
 800585e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr
 800586c:	2000000c 	.word	0x2000000c

08005870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005870:	f3ef 8009 	mrs	r0, PSP
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	4b15      	ldr	r3, [pc, #84]	@ (80058d0 <pxCurrentTCBConst>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	f01e 0f10 	tst.w	lr, #16
 8005880:	bf08      	it	eq
 8005882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588a:	6010      	str	r0, [r2, #0]
 800588c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005890:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005894:	f380 8811 	msr	BASEPRI, r0
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f7fe ffae 	bl	8004800 <vTaskSwitchContext>
 80058a4:	f04f 0000 	mov.w	r0, #0
 80058a8:	f380 8811 	msr	BASEPRI, r0
 80058ac:	bc09      	pop	{r0, r3}
 80058ae:	6819      	ldr	r1, [r3, #0]
 80058b0:	6808      	ldr	r0, [r1, #0]
 80058b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b6:	f01e 0f10 	tst.w	lr, #16
 80058ba:	bf08      	it	eq
 80058bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80058c0:	f380 8809 	msr	PSP, r0
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	f3af 8000 	nop.w

080058d0 <pxCurrentTCBConst>:
 80058d0:	20000808 	.word	0x20000808
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80058d4:	bf00      	nop
 80058d6:	bf00      	nop

080058d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
	__asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	607b      	str	r3, [r7, #4]
}
 80058f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80058f2:	f7fe fecb 	bl	800468c <xTaskIncrementTick>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80058fc:	4b06      	ldr	r3, [pc, #24]	@ (8005918 <xPortSysTickHandler+0x40>)
 80058fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005902:	601a      	str	r2, [r3, #0]
 8005904:	2300      	movs	r3, #0
 8005906:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	f383 8811 	msr	BASEPRI, r3
}
 800590e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005910:	bf00      	nop
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	e000ed04 	.word	0xe000ed04

0800591c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800591c:	b480      	push	{r7}
 800591e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005920:	4b0b      	ldr	r3, [pc, #44]	@ (8005950 <vPortSetupTimerInterrupt+0x34>)
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005926:	4b0b      	ldr	r3, [pc, #44]	@ (8005954 <vPortSetupTimerInterrupt+0x38>)
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800592c:	4b0a      	ldr	r3, [pc, #40]	@ (8005958 <vPortSetupTimerInterrupt+0x3c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a0a      	ldr	r2, [pc, #40]	@ (800595c <vPortSetupTimerInterrupt+0x40>)
 8005932:	fba2 2303 	umull	r2, r3, r2, r3
 8005936:	099b      	lsrs	r3, r3, #6
 8005938:	4a09      	ldr	r2, [pc, #36]	@ (8005960 <vPortSetupTimerInterrupt+0x44>)
 800593a:	3b01      	subs	r3, #1
 800593c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800593e:	4b04      	ldr	r3, [pc, #16]	@ (8005950 <vPortSetupTimerInterrupt+0x34>)
 8005940:	2207      	movs	r2, #7
 8005942:	601a      	str	r2, [r3, #0]
}
 8005944:	bf00      	nop
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	e000e010 	.word	0xe000e010
 8005954:	e000e018 	.word	0xe000e018
 8005958:	20000000 	.word	0x20000000
 800595c:	10624dd3 	.word	0x10624dd3
 8005960:	e000e014 	.word	0xe000e014

08005964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005964:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005974 <vPortEnableVFP+0x10>
 8005968:	6801      	ldr	r1, [r0, #0]
 800596a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800596e:	6001      	str	r1, [r0, #0]
 8005970:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005972:	bf00      	nop
 8005974:	e000ed88 	.word	0xe000ed88

08005978 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800597e:	f3ef 8305 	mrs	r3, IPSR
 8005982:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2b0f      	cmp	r3, #15
 8005988:	d915      	bls.n	80059b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800598a:	4a18      	ldr	r2, [pc, #96]	@ (80059ec <vPortValidateInterruptPriority+0x74>)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4413      	add	r3, r2
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005994:	4b16      	ldr	r3, [pc, #88]	@ (80059f0 <vPortValidateInterruptPriority+0x78>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	7afa      	ldrb	r2, [r7, #11]
 800599a:	429a      	cmp	r2, r3
 800599c:	d20b      	bcs.n	80059b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800599e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	607b      	str	r3, [r7, #4]
}
 80059b0:	bf00      	nop
 80059b2:	bf00      	nop
 80059b4:	e7fd      	b.n	80059b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80059b6:	4b0f      	ldr	r3, [pc, #60]	@ (80059f4 <vPortValidateInterruptPriority+0x7c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80059be:	4b0e      	ldr	r3, [pc, #56]	@ (80059f8 <vPortValidateInterruptPriority+0x80>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d90b      	bls.n	80059de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80059c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ca:	f383 8811 	msr	BASEPRI, r3
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	603b      	str	r3, [r7, #0]
}
 80059d8:	bf00      	nop
 80059da:	bf00      	nop
 80059dc:	e7fd      	b.n	80059da <vPortValidateInterruptPriority+0x62>
	}
 80059de:	bf00      	nop
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	e000e3f0 	.word	0xe000e3f0
 80059f0:	20000e34 	.word	0x20000e34
 80059f4:	e000ed0c 	.word	0xe000ed0c
 80059f8:	20000e38 	.word	0x20000e38

080059fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08a      	sub	sp, #40	@ 0x28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a04:	2300      	movs	r3, #0
 8005a06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a08:	f7fe fd84 	bl	8004514 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a0c:	4b5c      	ldr	r3, [pc, #368]	@ (8005b80 <pvPortMalloc+0x184>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a14:	f000 f924 	bl	8005c60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a18:	4b5a      	ldr	r3, [pc, #360]	@ (8005b84 <pvPortMalloc+0x188>)
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f040 8095 	bne.w	8005b50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d01e      	beq.n	8005a6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005a2c:	2208      	movs	r2, #8
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4413      	add	r3, r2
 8005a32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f003 0307 	and.w	r3, r3, #7
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d015      	beq.n	8005a6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f023 0307 	bic.w	r3, r3, #7
 8005a44:	3308      	adds	r3, #8
 8005a46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f003 0307 	and.w	r3, r3, #7
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00b      	beq.n	8005a6a <pvPortMalloc+0x6e>
	__asm volatile
 8005a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	617b      	str	r3, [r7, #20]
}
 8005a64:	bf00      	nop
 8005a66:	bf00      	nop
 8005a68:	e7fd      	b.n	8005a66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d06f      	beq.n	8005b50 <pvPortMalloc+0x154>
 8005a70:	4b45      	ldr	r3, [pc, #276]	@ (8005b88 <pvPortMalloc+0x18c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d86a      	bhi.n	8005b50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a7a:	4b44      	ldr	r3, [pc, #272]	@ (8005b8c <pvPortMalloc+0x190>)
 8005a7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005a7e:	4b43      	ldr	r3, [pc, #268]	@ (8005b8c <pvPortMalloc+0x190>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a84:	e004      	b.n	8005a90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d903      	bls.n	8005aa2 <pvPortMalloc+0xa6>
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1f1      	bne.n	8005a86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005aa2:	4b37      	ldr	r3, [pc, #220]	@ (8005b80 <pvPortMalloc+0x184>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d051      	beq.n	8005b50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2208      	movs	r2, #8
 8005ab2:	4413      	add	r3, r2
 8005ab4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	1ad2      	subs	r2, r2, r3
 8005ac6:	2308      	movs	r3, #8
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d920      	bls.n	8005b10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	f003 0307 	and.w	r3, r3, #7
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00b      	beq.n	8005af8 <pvPortMalloc+0xfc>
	__asm volatile
 8005ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	613b      	str	r3, [r7, #16]
}
 8005af2:	bf00      	nop
 8005af4:	bf00      	nop
 8005af6:	e7fd      	b.n	8005af4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	1ad2      	subs	r2, r2, r3
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b0a:	69b8      	ldr	r0, [r7, #24]
 8005b0c:	f000 f90a 	bl	8005d24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b10:	4b1d      	ldr	r3, [pc, #116]	@ (8005b88 <pvPortMalloc+0x18c>)
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	4a1b      	ldr	r2, [pc, #108]	@ (8005b88 <pvPortMalloc+0x18c>)
 8005b1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8005b88 <pvPortMalloc+0x18c>)
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	4b1b      	ldr	r3, [pc, #108]	@ (8005b90 <pvPortMalloc+0x194>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d203      	bcs.n	8005b32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b2a:	4b17      	ldr	r3, [pc, #92]	@ (8005b88 <pvPortMalloc+0x18c>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a18      	ldr	r2, [pc, #96]	@ (8005b90 <pvPortMalloc+0x194>)
 8005b30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	4b13      	ldr	r3, [pc, #76]	@ (8005b84 <pvPortMalloc+0x188>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005b46:	4b13      	ldr	r3, [pc, #76]	@ (8005b94 <pvPortMalloc+0x198>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	4a11      	ldr	r2, [pc, #68]	@ (8005b94 <pvPortMalloc+0x198>)
 8005b4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b50:	f7fe fcee 	bl	8004530 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	f003 0307 	and.w	r3, r3, #7
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00b      	beq.n	8005b76 <pvPortMalloc+0x17a>
	__asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	60fb      	str	r3, [r7, #12]
}
 8005b70:	bf00      	nop
 8005b72:	bf00      	nop
 8005b74:	e7fd      	b.n	8005b72 <pvPortMalloc+0x176>
	return pvReturn;
 8005b76:	69fb      	ldr	r3, [r7, #28]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3728      	adds	r7, #40	@ 0x28
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	200019fc 	.word	0x200019fc
 8005b84:	20001a10 	.word	0x20001a10
 8005b88:	20001a00 	.word	0x20001a00
 8005b8c:	200019f4 	.word	0x200019f4
 8005b90:	20001a04 	.word	0x20001a04
 8005b94:	20001a08 	.word	0x20001a08

08005b98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d04f      	beq.n	8005c4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005baa:	2308      	movs	r3, #8
 8005bac:	425b      	negs	r3, r3
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	4b25      	ldr	r3, [pc, #148]	@ (8005c54 <vPortFree+0xbc>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10b      	bne.n	8005bde <vPortFree+0x46>
	__asm volatile
 8005bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	60fb      	str	r3, [r7, #12]
}
 8005bd8:	bf00      	nop
 8005bda:	bf00      	nop
 8005bdc:	e7fd      	b.n	8005bda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00b      	beq.n	8005bfe <vPortFree+0x66>
	__asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	60bb      	str	r3, [r7, #8]
}
 8005bf8:	bf00      	nop
 8005bfa:	bf00      	nop
 8005bfc:	e7fd      	b.n	8005bfa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	4b14      	ldr	r3, [pc, #80]	@ (8005c54 <vPortFree+0xbc>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4013      	ands	r3, r2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d01e      	beq.n	8005c4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d11a      	bne.n	8005c4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	4b0e      	ldr	r3, [pc, #56]	@ (8005c54 <vPortFree+0xbc>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	43db      	mvns	r3, r3
 8005c1e:	401a      	ands	r2, r3
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c24:	f7fe fc76 	bl	8004514 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c58 <vPortFree+0xc0>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4413      	add	r3, r2
 8005c32:	4a09      	ldr	r2, [pc, #36]	@ (8005c58 <vPortFree+0xc0>)
 8005c34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c36:	6938      	ldr	r0, [r7, #16]
 8005c38:	f000 f874 	bl	8005d24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005c3c:	4b07      	ldr	r3, [pc, #28]	@ (8005c5c <vPortFree+0xc4>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3301      	adds	r3, #1
 8005c42:	4a06      	ldr	r2, [pc, #24]	@ (8005c5c <vPortFree+0xc4>)
 8005c44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005c46:	f7fe fc73 	bl	8004530 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c4a:	bf00      	nop
 8005c4c:	3718      	adds	r7, #24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	20001a10 	.word	0x20001a10
 8005c58:	20001a00 	.word	0x20001a00
 8005c5c:	20001a0c 	.word	0x20001a0c

08005c60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c66:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005c6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c6c:	4b27      	ldr	r3, [pc, #156]	@ (8005d0c <prvHeapInit+0xac>)
 8005c6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f003 0307 	and.w	r3, r3, #7
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00c      	beq.n	8005c94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	3307      	adds	r3, #7
 8005c7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0307 	bic.w	r3, r3, #7
 8005c86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	4a1f      	ldr	r2, [pc, #124]	@ (8005d0c <prvHeapInit+0xac>)
 8005c90:	4413      	add	r3, r2
 8005c92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c98:	4a1d      	ldr	r2, [pc, #116]	@ (8005d10 <prvHeapInit+0xb0>)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8005d10 <prvHeapInit+0xb0>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	4413      	add	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005cac:	2208      	movs	r2, #8
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	1a9b      	subs	r3, r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 0307 	bic.w	r3, r3, #7
 8005cba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4a15      	ldr	r2, [pc, #84]	@ (8005d14 <prvHeapInit+0xb4>)
 8005cc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005cc2:	4b14      	ldr	r3, [pc, #80]	@ (8005d14 <prvHeapInit+0xb4>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005cca:	4b12      	ldr	r3, [pc, #72]	@ (8005d14 <prvHeapInit+0xb4>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	1ad2      	subs	r2, r2, r3
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8005d14 <prvHeapInit+0xb4>)
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	4a0a      	ldr	r2, [pc, #40]	@ (8005d18 <prvHeapInit+0xb8>)
 8005cee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	4a09      	ldr	r2, [pc, #36]	@ (8005d1c <prvHeapInit+0xbc>)
 8005cf6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cf8:	4b09      	ldr	r3, [pc, #36]	@ (8005d20 <prvHeapInit+0xc0>)
 8005cfa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005cfe:	601a      	str	r2, [r3, #0]
}
 8005d00:	bf00      	nop
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	20000e3c 	.word	0x20000e3c
 8005d10:	200019f4 	.word	0x200019f4
 8005d14:	200019fc 	.word	0x200019fc
 8005d18:	20001a04 	.word	0x20001a04
 8005d1c:	20001a00 	.word	0x20001a00
 8005d20:	20001a10 	.word	0x20001a10

08005d24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d2c:	4b28      	ldr	r3, [pc, #160]	@ (8005dd0 <prvInsertBlockIntoFreeList+0xac>)
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	e002      	b.n	8005d38 <prvInsertBlockIntoFreeList+0x14>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d8f7      	bhi.n	8005d32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d108      	bne.n	8005d66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	441a      	add	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	441a      	add	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d118      	bne.n	8005dac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	4b15      	ldr	r3, [pc, #84]	@ (8005dd4 <prvInsertBlockIntoFreeList+0xb0>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d00d      	beq.n	8005da2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	441a      	add	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	e008      	b.n	8005db4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005da2:	4b0c      	ldr	r3, [pc, #48]	@ (8005dd4 <prvInsertBlockIntoFreeList+0xb0>)
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	e003      	b.n	8005db4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d002      	beq.n	8005dc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dc2:	bf00      	nop
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	200019f4 	.word	0x200019f4
 8005dd4:	200019fc 	.word	0x200019fc

08005dd8 <memset>:
 8005dd8:	4402      	add	r2, r0
 8005dda:	4603      	mov	r3, r0
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d100      	bne.n	8005de2 <memset+0xa>
 8005de0:	4770      	bx	lr
 8005de2:	f803 1b01 	strb.w	r1, [r3], #1
 8005de6:	e7f9      	b.n	8005ddc <memset+0x4>

08005de8 <__libc_init_array>:
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	4d0d      	ldr	r5, [pc, #52]	@ (8005e20 <__libc_init_array+0x38>)
 8005dec:	4c0d      	ldr	r4, [pc, #52]	@ (8005e24 <__libc_init_array+0x3c>)
 8005dee:	1b64      	subs	r4, r4, r5
 8005df0:	10a4      	asrs	r4, r4, #2
 8005df2:	2600      	movs	r6, #0
 8005df4:	42a6      	cmp	r6, r4
 8005df6:	d109      	bne.n	8005e0c <__libc_init_array+0x24>
 8005df8:	4d0b      	ldr	r5, [pc, #44]	@ (8005e28 <__libc_init_array+0x40>)
 8005dfa:	4c0c      	ldr	r4, [pc, #48]	@ (8005e2c <__libc_init_array+0x44>)
 8005dfc:	f000 f826 	bl	8005e4c <_init>
 8005e00:	1b64      	subs	r4, r4, r5
 8005e02:	10a4      	asrs	r4, r4, #2
 8005e04:	2600      	movs	r6, #0
 8005e06:	42a6      	cmp	r6, r4
 8005e08:	d105      	bne.n	8005e16 <__libc_init_array+0x2e>
 8005e0a:	bd70      	pop	{r4, r5, r6, pc}
 8005e0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e10:	4798      	blx	r3
 8005e12:	3601      	adds	r6, #1
 8005e14:	e7ee      	b.n	8005df4 <__libc_init_array+0xc>
 8005e16:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e1a:	4798      	blx	r3
 8005e1c:	3601      	adds	r6, #1
 8005e1e:	e7f2      	b.n	8005e06 <__libc_init_array+0x1e>
 8005e20:	08005f2c 	.word	0x08005f2c
 8005e24:	08005f2c 	.word	0x08005f2c
 8005e28:	08005f2c 	.word	0x08005f2c
 8005e2c:	08005f30 	.word	0x08005f30

08005e30 <memcpy>:
 8005e30:	440a      	add	r2, r1
 8005e32:	4291      	cmp	r1, r2
 8005e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e38:	d100      	bne.n	8005e3c <memcpy+0xc>
 8005e3a:	4770      	bx	lr
 8005e3c:	b510      	push	{r4, lr}
 8005e3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e46:	4291      	cmp	r1, r2
 8005e48:	d1f9      	bne.n	8005e3e <memcpy+0xe>
 8005e4a:	bd10      	pop	{r4, pc}

08005e4c <_init>:
 8005e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4e:	bf00      	nop
 8005e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e52:	bc08      	pop	{r3}
 8005e54:	469e      	mov	lr, r3
 8005e56:	4770      	bx	lr

08005e58 <_fini>:
 8005e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5a:	bf00      	nop
 8005e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e5e:	bc08      	pop	{r3}
 8005e60:	469e      	mov	lr, r3
 8005e62:	4770      	bx	lr
