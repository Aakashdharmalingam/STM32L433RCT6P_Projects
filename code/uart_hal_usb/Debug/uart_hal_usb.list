
uart_hal_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039d0  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003b5c  08003b5c  00004b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bac  08003bac  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003bac  08003bac  00004bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bb4  08003bb4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bb4  08003bb4  00004bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bb8  08003bb8  00004bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003bbc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08003bc8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08003bc8  000050bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bce2  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cfd  00000000  00000000  00010d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  00012a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000076b  00000000  00000000  000133d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000214b7  00000000  00000000  00013b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba72  00000000  00000000  00034ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca308  00000000  00000000  00040a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ad6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026ec  00000000  00000000  0010adb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0010d49c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003b44 	.word	0x08003b44

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003b44 	.word	0x08003b44

080001cc <strcmp>:
 80001cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d4:	2a01      	cmp	r2, #1
 80001d6:	bf28      	it	cs
 80001d8:	429a      	cmpcs	r2, r3
 80001da:	d0f7      	beq.n	80001cc <strcmp>
 80001dc:	1ad0      	subs	r0, r2, r3
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 f9f1 	bl	80008f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f80e 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f882 	bl	8000620 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800051c:	f000 f850 	bl	80005c0 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive_IT(&huart2, re_index, 6);
 8000520:	2206      	movs	r2, #6
 8000522:	4902      	ldr	r1, [pc, #8]	@ (800052c <main+0x20>)
 8000524:	4802      	ldr	r0, [pc, #8]	@ (8000530 <main+0x24>)
 8000526:	f002 f82d 	bl	8002584 <HAL_UART_Receive_IT>
 800052a:	e7f9      	b.n	8000520 <main+0x14>
 800052c:	200000b0 	.word	0x200000b0
 8000530:	20000028 	.word	0x20000028

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b096      	sub	sp, #88	@ 0x58
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0314 	add.w	r3, r7, #20
 800053e:	2244      	movs	r2, #68	@ 0x44
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f003 fad2 	bl	8003aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	463b      	mov	r3, r7
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000556:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800055a:	f000 fd71 	bl	8001040 <HAL_PWREx_ControlVoltageScaling>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000564:	f000 f8c6 	bl	80006f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000568:	2310      	movs	r3, #16
 800056a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800056c:	2301      	movs	r3, #1
 800056e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000574:	2360      	movs	r3, #96	@ 0x60
 8000576:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000578:	2300      	movs	r3, #0
 800057a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	4618      	mov	r0, r3
 8000582:	f000 fdb3 	bl	80010ec <HAL_RCC_OscConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800058c:	f000 f8b2 	bl	80006f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	230f      	movs	r3, #15
 8000592:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a4:	463b      	mov	r3, r7
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 f9b3 	bl	8001914 <HAL_RCC_ClockConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005b4:	f000 f89e 	bl	80006f4 <Error_Handler>
  }
}
 80005b8:	bf00      	nop
 80005ba:	3758      	adds	r7, #88	@ 0x58
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c4:	4b14      	ldr	r3, [pc, #80]	@ (8000618 <MX_USART2_UART_Init+0x58>)
 80005c6:	4a15      	ldr	r2, [pc, #84]	@ (800061c <MX_USART2_UART_Init+0x5c>)
 80005c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ca:	4b13      	ldr	r3, [pc, #76]	@ (8000618 <MX_USART2_UART_Init+0x58>)
 80005cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005d2:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <MX_USART2_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <MX_USART2_UART_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005de:	4b0e      	ldr	r3, [pc, #56]	@ (8000618 <MX_USART2_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <MX_USART2_UART_Init+0x58>)
 80005e6:	220c      	movs	r2, #12
 80005e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000618 <MX_USART2_UART_Init+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f0:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <MX_USART2_UART_Init+0x58>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005f6:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <MX_USART2_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005fc:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <MX_USART2_UART_Init+0x58>)
 80005fe:	2200      	movs	r2, #0
 8000600:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000602:	4805      	ldr	r0, [pc, #20]	@ (8000618 <MX_USART2_UART_Init+0x58>)
 8000604:	f001 fee6 	bl	80023d4 <HAL_UART_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800060e:	f000 f871 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000028 	.word	0x20000028
 800061c:	40004400 	.word	0x40004400

08000620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000634:	4b11      	ldr	r3, [pc, #68]	@ (800067c <MX_GPIO_Init+0x5c>)
 8000636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000638:	4a10      	ldr	r2, [pc, #64]	@ (800067c <MX_GPIO_Init+0x5c>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000640:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <MX_GPIO_Init+0x5c>)
 8000642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000644:	f003 0301 	and.w	r3, r3, #1
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2120      	movs	r1, #32
 8000650:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000654:	f000 fcce 	bl	8000ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000658:	2320      	movs	r3, #32
 800065a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	4619      	mov	r1, r3
 800066c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000670:	f000 fb46 	bl	8000d00 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000674:	bf00      	nop
 8000676:	3718      	adds	r7, #24
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40021000 	.word	0x40021000

08000680 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a17      	ldr	r2, [pc, #92]	@ (80006e8 <HAL_UART_RxCpltCallback+0x68>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d127      	bne.n	80006e0 <HAL_UART_RxCpltCallback+0x60>
	{
		if(!strcmp(re_index , "led_on"))
 8000690:	4916      	ldr	r1, [pc, #88]	@ (80006ec <HAL_UART_RxCpltCallback+0x6c>)
 8000692:	4817      	ldr	r0, [pc, #92]	@ (80006f0 <HAL_UART_RxCpltCallback+0x70>)
 8000694:	f7ff fd9a 	bl	80001cc <strcmp>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d106      	bne.n	80006ac <HAL_UART_RxCpltCallback+0x2c>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800069e:	2201      	movs	r2, #1
 80006a0:	2120      	movs	r1, #32
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a6:	f000 fca5 	bl	8000ff4 <HAL_GPIO_WritePin>
 80006aa:	e005      	b.n	80006b8 <HAL_UART_RxCpltCallback+0x38>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2120      	movs	r1, #32
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b4:	f000 fc9e 	bl	8000ff4 <HAL_GPIO_WritePin>
		}
		HAL_UART_Transmit(&huart2, re_index, 6, 10);
 80006b8:	230a      	movs	r3, #10
 80006ba:	2206      	movs	r2, #6
 80006bc:	490c      	ldr	r1, [pc, #48]	@ (80006f0 <HAL_UART_RxCpltCallback+0x70>)
 80006be:	480a      	ldr	r0, [pc, #40]	@ (80006e8 <HAL_UART_RxCpltCallback+0x68>)
 80006c0:	f001 fed6 	bl	8002470 <HAL_UART_Transmit>
		for(int i=0;i<6;i++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	e007      	b.n	80006da <HAL_UART_RxCpltCallback+0x5a>
		{
			re_index[i]=0;
 80006ca:	4a09      	ldr	r2, [pc, #36]	@ (80006f0 <HAL_UART_RxCpltCallback+0x70>)
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	4413      	add	r3, r2
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<6;i++)
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	3301      	adds	r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	2b05      	cmp	r3, #5
 80006de:	ddf4      	ble.n	80006ca <HAL_UART_RxCpltCallback+0x4a>
		}
	}
}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000028 	.word	0x20000028
 80006ec:	08003b5c 	.word	0x08003b5c
 80006f0:	200000b0 	.word	0x200000b0

080006f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <Error_Handler+0x8>

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000706:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <HAL_MspInit+0x44>)
 8000708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800070a:	4a0e      	ldr	r2, [pc, #56]	@ (8000744 <HAL_MspInit+0x44>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6613      	str	r3, [r2, #96]	@ 0x60
 8000712:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <HAL_MspInit+0x44>)
 8000714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071e:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <HAL_MspInit+0x44>)
 8000720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000722:	4a08      	ldr	r2, [pc, #32]	@ (8000744 <HAL_MspInit+0x44>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000728:	6593      	str	r3, [r2, #88]	@ 0x58
 800072a:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <HAL_MspInit+0x44>)
 800072c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800072e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000

08000748 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b0a2      	sub	sp, #136	@ 0x88
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2260      	movs	r2, #96	@ 0x60
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f003 f9bf 	bl	8003aec <memset>
  if(huart->Instance==USART2)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a24      	ldr	r2, [pc, #144]	@ (8000804 <HAL_UART_MspInit+0xbc>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d140      	bne.n	80007fa <HAL_UART_MspInit+0xb2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000778:	2302      	movs	r3, #2
 800077a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800077c:	2300      	movs	r3, #0
 800077e:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4618      	mov	r0, r3
 8000786:	f001 fae9 	bl	8001d5c <HAL_RCCEx_PeriphCLKConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000790:	f7ff ffb0 	bl	80006f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000794:	4b1c      	ldr	r3, [pc, #112]	@ (8000808 <HAL_UART_MspInit+0xc0>)
 8000796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000798:	4a1b      	ldr	r2, [pc, #108]	@ (8000808 <HAL_UART_MspInit+0xc0>)
 800079a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800079e:	6593      	str	r3, [r2, #88]	@ 0x58
 80007a0:	4b19      	ldr	r3, [pc, #100]	@ (8000808 <HAL_UART_MspInit+0xc0>)
 80007a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ac:	4b16      	ldr	r3, [pc, #88]	@ (8000808 <HAL_UART_MspInit+0xc0>)
 80007ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b0:	4a15      	ldr	r2, [pc, #84]	@ (8000808 <HAL_UART_MspInit+0xc0>)
 80007b2:	f043 0301 	orr.w	r3, r3, #1
 80007b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007b8:	4b13      	ldr	r3, [pc, #76]	@ (8000808 <HAL_UART_MspInit+0xc0>)
 80007ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007c4:	230c      	movs	r3, #12
 80007c6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d0:	2303      	movs	r3, #3
 80007d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007d6:	2307      	movs	r3, #7
 80007d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80007e0:	4619      	mov	r1, r3
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e6:	f000 fa8b 	bl	8000d00 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	2026      	movs	r0, #38	@ 0x26
 80007f0:	f000 f9d1 	bl	8000b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007f4:	2026      	movs	r0, #38	@ 0x26
 80007f6:	f000 f9ea 	bl	8000bce <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80007fa:	bf00      	nop
 80007fc:	3788      	adds	r7, #136	@ 0x88
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40004400 	.word	0x40004400
 8000808:	40021000 	.word	0x40021000

0800080c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <NMI_Handler+0x4>

08000814 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <HardFault_Handler+0x4>

0800081c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <MemManage_Handler+0x4>

08000824 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <BusFault_Handler+0x4>

0800082c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <UsageFault_Handler+0x4>

08000834 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000862:	f000 f89d 	bl	80009a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000870:	4802      	ldr	r0, [pc, #8]	@ (800087c <USART2_IRQHandler+0x10>)
 8000872:	f001 fed3 	bl	800261c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000028 	.word	0x20000028

08000880 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000884:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <SystemInit+0x20>)
 8000886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800088a:	4a05      	ldr	r2, [pc, #20]	@ (80008a0 <SystemInit+0x20>)
 800088c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000890:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008a8:	f7ff ffea 	bl	8000880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008ac:	480c      	ldr	r0, [pc, #48]	@ (80008e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80008ae:	490d      	ldr	r1, [pc, #52]	@ (80008e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b0:	4a0d      	ldr	r2, [pc, #52]	@ (80008e8 <LoopForever+0xe>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b4:	e002      	b.n	80008bc <LoopCopyDataInit>

080008b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ba:	3304      	adds	r3, #4

080008bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c0:	d3f9      	bcc.n	80008b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c2:	4a0a      	ldr	r2, [pc, #40]	@ (80008ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c4:	4c0a      	ldr	r4, [pc, #40]	@ (80008f0 <LoopForever+0x16>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c8:	e001      	b.n	80008ce <LoopFillZerobss>

080008ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008cc:	3204      	adds	r2, #4

080008ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d0:	d3fb      	bcc.n	80008ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008d2:	f003 f913 	bl	8003afc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008d6:	f7ff fe19 	bl	800050c <main>

080008da <LoopForever>:

LoopForever:
    b LoopForever
 80008da:	e7fe      	b.n	80008da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008dc:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80008e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008e8:	08003bbc 	.word	0x08003bbc
  ldr r2, =_sbss
 80008ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008f0:	200000bc 	.word	0x200000bc

080008f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC1_IRQHandler>

080008f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008fc:	2300      	movs	r3, #0
 80008fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000900:	2003      	movs	r0, #3
 8000902:	f000 f93d 	bl	8000b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000906:	200f      	movs	r0, #15
 8000908:	f000 f80e 	bl	8000928 <HAL_InitTick>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d002      	beq.n	8000918 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	71fb      	strb	r3, [r7, #7]
 8000916:	e001      	b.n	800091c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000918:	f7ff fef2 	bl	8000700 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800091c:	79fb      	ldrb	r3, [r7, #7]
}
 800091e:	4618      	mov	r0, r3
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000930:	2300      	movs	r3, #0
 8000932:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000934:	4b17      	ldr	r3, [pc, #92]	@ (8000994 <HAL_InitTick+0x6c>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d023      	beq.n	8000984 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800093c:	4b16      	ldr	r3, [pc, #88]	@ (8000998 <HAL_InitTick+0x70>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b14      	ldr	r3, [pc, #80]	@ (8000994 <HAL_InitTick+0x6c>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800094a:	fbb3 f3f1 	udiv	r3, r3, r1
 800094e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f949 	bl	8000bea <HAL_SYSTICK_Config>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d10f      	bne.n	800097e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2b0f      	cmp	r3, #15
 8000962:	d809      	bhi.n	8000978 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000964:	2200      	movs	r2, #0
 8000966:	6879      	ldr	r1, [r7, #4]
 8000968:	f04f 30ff 	mov.w	r0, #4294967295
 800096c:	f000 f913 	bl	8000b96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000970:	4a0a      	ldr	r2, [pc, #40]	@ (800099c <HAL_InitTick+0x74>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6013      	str	r3, [r2, #0]
 8000976:	e007      	b.n	8000988 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000978:	2301      	movs	r3, #1
 800097a:	73fb      	strb	r3, [r7, #15]
 800097c:	e004      	b.n	8000988 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	73fb      	strb	r3, [r7, #15]
 8000982:	e001      	b.n	8000988 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000984:	2301      	movs	r3, #1
 8000986:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000988:	7bfb      	ldrb	r3, [r7, #15]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000008 	.word	0x20000008
 8000998:	20000000 	.word	0x20000000
 800099c:	20000004 	.word	0x20000004

080009a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <HAL_IncTick+0x20>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <HAL_IncTick+0x24>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4413      	add	r3, r2
 80009b0:	4a04      	ldr	r2, [pc, #16]	@ (80009c4 <HAL_IncTick+0x24>)
 80009b2:	6013      	str	r3, [r2, #0]
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000008 	.word	0x20000008
 80009c4:	200000b8 	.word	0x200000b8

080009c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return uwTick;
 80009cc:	4b03      	ldr	r3, [pc, #12]	@ (80009dc <HAL_GetTick+0x14>)
 80009ce:	681b      	ldr	r3, [r3, #0]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	200000b8 	.word	0x200000b8

080009e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009fc:	4013      	ands	r3, r2
 80009fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a12:	4a04      	ldr	r2, [pc, #16]	@ (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	60d3      	str	r3, [r2, #12]
}
 8000a18:	bf00      	nop
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a2c:	4b04      	ldr	r3, [pc, #16]	@ (8000a40 <__NVIC_GetPriorityGrouping+0x18>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	0a1b      	lsrs	r3, r3, #8
 8000a32:	f003 0307 	and.w	r3, r3, #7
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	db0b      	blt.n	8000a6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	f003 021f 	and.w	r2, r3, #31
 8000a5c:	4907      	ldr	r1, [pc, #28]	@ (8000a7c <__NVIC_EnableIRQ+0x38>)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	095b      	lsrs	r3, r3, #5
 8000a64:	2001      	movs	r0, #1
 8000a66:	fa00 f202 	lsl.w	r2, r0, r2
 8000a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000e100 	.word	0xe000e100

08000a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	6039      	str	r1, [r7, #0]
 8000a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	db0a      	blt.n	8000aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	490c      	ldr	r1, [pc, #48]	@ (8000acc <__NVIC_SetPriority+0x4c>)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	0112      	lsls	r2, r2, #4
 8000aa0:	b2d2      	uxtb	r2, r2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa8:	e00a      	b.n	8000ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4908      	ldr	r1, [pc, #32]	@ (8000ad0 <__NVIC_SetPriority+0x50>)
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	3b04      	subs	r3, #4
 8000ab8:	0112      	lsls	r2, r2, #4
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	440b      	add	r3, r1
 8000abe:	761a      	strb	r2, [r3, #24]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000e100 	.word	0xe000e100
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b089      	sub	sp, #36	@ 0x24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	f1c3 0307 	rsb	r3, r3, #7
 8000aee:	2b04      	cmp	r3, #4
 8000af0:	bf28      	it	cs
 8000af2:	2304      	movcs	r3, #4
 8000af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3304      	adds	r3, #4
 8000afa:	2b06      	cmp	r3, #6
 8000afc:	d902      	bls.n	8000b04 <NVIC_EncodePriority+0x30>
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3b03      	subs	r3, #3
 8000b02:	e000      	b.n	8000b06 <NVIC_EncodePriority+0x32>
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43da      	mvns	r2, r3
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	401a      	ands	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	43d9      	mvns	r1, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	4313      	orrs	r3, r2
         );
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3724      	adds	r7, #36	@ 0x24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b4c:	d301      	bcc.n	8000b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00f      	b.n	8000b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b52:	4a0a      	ldr	r2, [pc, #40]	@ (8000b7c <SysTick_Config+0x40>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f7ff ff8e 	bl	8000a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b64:	4b05      	ldr	r3, [pc, #20]	@ (8000b7c <SysTick_Config+0x40>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6a:	4b04      	ldr	r3, [pc, #16]	@ (8000b7c <SysTick_Config+0x40>)
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	e000e010 	.word	0xe000e010

08000b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff ff29 	bl	80009e0 <__NVIC_SetPriorityGrouping>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b086      	sub	sp, #24
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
 8000ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba8:	f7ff ff3e 	bl	8000a28 <__NVIC_GetPriorityGrouping>
 8000bac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	68b9      	ldr	r1, [r7, #8]
 8000bb2:	6978      	ldr	r0, [r7, #20]
 8000bb4:	f7ff ff8e 	bl	8000ad4 <NVIC_EncodePriority>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff5d 	bl	8000a80 <__NVIC_SetPriority>
}
 8000bc6:	bf00      	nop
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff31 	bl	8000a44 <__NVIC_EnableIRQ>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff ffa2 	bl	8000b3c <SysTick_Config>
 8000bf8:	4603      	mov	r3, r0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b085      	sub	sp, #20
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d008      	beq.n	8000c2c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2204      	movs	r2, #4
 8000c1e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e022      	b.n	8000c72 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f022 020e 	bic.w	r2, r2, #14
 8000c3a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f022 0201 	bic.w	r2, r2, #1
 8000c4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c50:	f003 021c 	and.w	r2, r3, #28
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c58:	2101      	movs	r1, #1
 8000c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2201      	movs	r2, #1
 8000c64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b084      	sub	sp, #16
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c86:	2300      	movs	r3, #0
 8000c88:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d005      	beq.n	8000ca2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2204      	movs	r2, #4
 8000c9a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	e029      	b.n	8000cf6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f022 020e 	bic.w	r2, r2, #14
 8000cb0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f022 0201 	bic.w	r2, r2, #1
 8000cc0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc6:	f003 021c 	and.w	r2, r3, #28
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	2101      	movs	r1, #1
 8000cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cd4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	4798      	blx	r3
    }
  }
  return status;
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b087      	sub	sp, #28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d0e:	e154      	b.n	8000fba <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	2101      	movs	r1, #1
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f000 8146 	beq.w	8000fb4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d005      	beq.n	8000d40 <HAL_GPIO_Init+0x40>
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d130      	bne.n	8000da2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	68da      	ldr	r2, [r3, #12]
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d76:	2201      	movs	r2, #1
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	091b      	lsrs	r3, r3, #4
 8000d8c:	f003 0201 	and.w	r2, r3, #1
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f003 0303 	and.w	r3, r3, #3
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	d017      	beq.n	8000dde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	2203      	movs	r2, #3
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	689a      	ldr	r2, [r3, #8]
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 0303 	and.w	r3, r3, #3
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d123      	bne.n	8000e32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	08da      	lsrs	r2, r3, #3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	3208      	adds	r2, #8
 8000df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	220f      	movs	r2, #15
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43db      	mvns	r3, r3
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	691a      	ldr	r2, [r3, #16]
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	f003 0307 	and.w	r3, r3, #7
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	08da      	lsrs	r2, r3, #3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3208      	adds	r2, #8
 8000e2c:	6939      	ldr	r1, [r7, #16]
 8000e2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f003 0203 	and.w	r2, r3, #3
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 80a0 	beq.w	8000fb4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e74:	4b58      	ldr	r3, [pc, #352]	@ (8000fd8 <HAL_GPIO_Init+0x2d8>)
 8000e76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e78:	4a57      	ldr	r2, [pc, #348]	@ (8000fd8 <HAL_GPIO_Init+0x2d8>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e80:	4b55      	ldr	r3, [pc, #340]	@ (8000fd8 <HAL_GPIO_Init+0x2d8>)
 8000e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e8c:	4a53      	ldr	r2, [pc, #332]	@ (8000fdc <HAL_GPIO_Init+0x2dc>)
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	089b      	lsrs	r3, r3, #2
 8000e92:	3302      	adds	r3, #2
 8000e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	f003 0303 	and.w	r3, r3, #3
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	220f      	movs	r2, #15
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000eb6:	d019      	beq.n	8000eec <HAL_GPIO_Init+0x1ec>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a49      	ldr	r2, [pc, #292]	@ (8000fe0 <HAL_GPIO_Init+0x2e0>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d013      	beq.n	8000ee8 <HAL_GPIO_Init+0x1e8>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a48      	ldr	r2, [pc, #288]	@ (8000fe4 <HAL_GPIO_Init+0x2e4>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d00d      	beq.n	8000ee4 <HAL_GPIO_Init+0x1e4>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a47      	ldr	r2, [pc, #284]	@ (8000fe8 <HAL_GPIO_Init+0x2e8>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d007      	beq.n	8000ee0 <HAL_GPIO_Init+0x1e0>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a46      	ldr	r2, [pc, #280]	@ (8000fec <HAL_GPIO_Init+0x2ec>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d101      	bne.n	8000edc <HAL_GPIO_Init+0x1dc>
 8000ed8:	2304      	movs	r3, #4
 8000eda:	e008      	b.n	8000eee <HAL_GPIO_Init+0x1ee>
 8000edc:	2307      	movs	r3, #7
 8000ede:	e006      	b.n	8000eee <HAL_GPIO_Init+0x1ee>
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e004      	b.n	8000eee <HAL_GPIO_Init+0x1ee>
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	e002      	b.n	8000eee <HAL_GPIO_Init+0x1ee>
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e000      	b.n	8000eee <HAL_GPIO_Init+0x1ee>
 8000eec:	2300      	movs	r3, #0
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	f002 0203 	and.w	r2, r2, #3
 8000ef4:	0092      	lsls	r2, r2, #2
 8000ef6:	4093      	lsls	r3, r2
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000efe:	4937      	ldr	r1, [pc, #220]	@ (8000fdc <HAL_GPIO_Init+0x2dc>)
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	089b      	lsrs	r3, r3, #2
 8000f04:	3302      	adds	r3, #2
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f0c:	4b38      	ldr	r3, [pc, #224]	@ (8000ff0 <HAL_GPIO_Init+0x2f0>)
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f30:	4a2f      	ldr	r2, [pc, #188]	@ (8000ff0 <HAL_GPIO_Init+0x2f0>)
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f36:	4b2e      	ldr	r3, [pc, #184]	@ (8000ff0 <HAL_GPIO_Init+0x2f0>)
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f5a:	4a25      	ldr	r2, [pc, #148]	@ (8000ff0 <HAL_GPIO_Init+0x2f0>)
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f60:	4b23      	ldr	r3, [pc, #140]	@ (8000ff0 <HAL_GPIO_Init+0x2f0>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f84:	4a1a      	ldr	r2, [pc, #104]	@ (8000ff0 <HAL_GPIO_Init+0x2f0>)
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f8a:	4b19      	ldr	r3, [pc, #100]	@ (8000ff0 <HAL_GPIO_Init+0x2f0>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fae:	4a10      	ldr	r2, [pc, #64]	@ (8000ff0 <HAL_GPIO_Init+0x2f0>)
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f47f aea3 	bne.w	8000d10 <HAL_GPIO_Init+0x10>
  }
}
 8000fca:	bf00      	nop
 8000fcc:	bf00      	nop
 8000fce:	371c      	adds	r7, #28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40010000 	.word	0x40010000
 8000fe0:	48000400 	.word	0x48000400
 8000fe4:	48000800 	.word	0x48000800
 8000fe8:	48000c00 	.word	0x48000c00
 8000fec:	48001000 	.word	0x48001000
 8000ff0:	40010400 	.word	0x40010400

08000ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]
 8001000:	4613      	mov	r3, r2
 8001002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001004:	787b      	ldrb	r3, [r7, #1]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800100a:	887a      	ldrh	r2, [r7, #2]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001010:	e002      	b.n	8001018 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001012:	887a      	ldrh	r2, [r7, #2]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001028:	4b04      	ldr	r3, [pc, #16]	@ (800103c <HAL_PWREx_GetVoltageRange+0x18>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40007000 	.word	0x40007000

08001040 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800104e:	d130      	bne.n	80010b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001050:	4b23      	ldr	r3, [pc, #140]	@ (80010e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800105c:	d038      	beq.n	80010d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800105e:	4b20      	ldr	r3, [pc, #128]	@ (80010e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001066:	4a1e      	ldr	r2, [pc, #120]	@ (80010e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001068:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800106c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800106e:	4b1d      	ldr	r3, [pc, #116]	@ (80010e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2232      	movs	r2, #50	@ 0x32
 8001074:	fb02 f303 	mul.w	r3, r2, r3
 8001078:	4a1b      	ldr	r2, [pc, #108]	@ (80010e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800107a:	fba2 2303 	umull	r2, r3, r2, r3
 800107e:	0c9b      	lsrs	r3, r3, #18
 8001080:	3301      	adds	r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001084:	e002      	b.n	800108c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	3b01      	subs	r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800108c:	4b14      	ldr	r3, [pc, #80]	@ (80010e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001094:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001098:	d102      	bne.n	80010a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1f2      	bne.n	8001086 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010a0:	4b0f      	ldr	r3, [pc, #60]	@ (80010e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010ac:	d110      	bne.n	80010d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e00f      	b.n	80010d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80010b2:	4b0b      	ldr	r3, [pc, #44]	@ (80010e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010be:	d007      	beq.n	80010d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010c0:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010c8:	4a05      	ldr	r2, [pc, #20]	@ (80010e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40007000 	.word	0x40007000
 80010e4:	20000000 	.word	0x20000000
 80010e8:	431bde83 	.word	0x431bde83

080010ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d102      	bne.n	8001100 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	f000 bc02 	b.w	8001904 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001100:	4b96      	ldr	r3, [pc, #600]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 030c 	and.w	r3, r3, #12
 8001108:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800110a:	4b94      	ldr	r3, [pc, #592]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0310 	and.w	r3, r3, #16
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 80e4 	beq.w	80012ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d007      	beq.n	8001138 <HAL_RCC_OscConfig+0x4c>
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	2b0c      	cmp	r3, #12
 800112c:	f040 808b 	bne.w	8001246 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	2b01      	cmp	r3, #1
 8001134:	f040 8087 	bne.w	8001246 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001138:	4b88      	ldr	r3, [pc, #544]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d005      	beq.n	8001150 <HAL_RCC_OscConfig+0x64>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d101      	bne.n	8001150 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e3d9      	b.n	8001904 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a1a      	ldr	r2, [r3, #32]
 8001154:	4b81      	ldr	r3, [pc, #516]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0308 	and.w	r3, r3, #8
 800115c:	2b00      	cmp	r3, #0
 800115e:	d004      	beq.n	800116a <HAL_RCC_OscConfig+0x7e>
 8001160:	4b7e      	ldr	r3, [pc, #504]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001168:	e005      	b.n	8001176 <HAL_RCC_OscConfig+0x8a>
 800116a:	4b7c      	ldr	r3, [pc, #496]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 800116c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001170:	091b      	lsrs	r3, r3, #4
 8001172:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001176:	4293      	cmp	r3, r2
 8001178:	d223      	bcs.n	80011c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	4618      	mov	r0, r3
 8001180:	f000 fd8c 	bl	8001c9c <RCC_SetFlashLatencyFromMSIRange>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e3ba      	b.n	8001904 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800118e:	4b73      	ldr	r3, [pc, #460]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a72      	ldr	r2, [pc, #456]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 8001194:	f043 0308 	orr.w	r3, r3, #8
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	4b70      	ldr	r3, [pc, #448]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	496d      	ldr	r1, [pc, #436]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 80011a8:	4313      	orrs	r3, r2
 80011aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011ac:	4b6b      	ldr	r3, [pc, #428]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	021b      	lsls	r3, r3, #8
 80011ba:	4968      	ldr	r1, [pc, #416]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 80011bc:	4313      	orrs	r3, r2
 80011be:	604b      	str	r3, [r1, #4]
 80011c0:	e025      	b.n	800120e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011c2:	4b66      	ldr	r3, [pc, #408]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a65      	ldr	r2, [pc, #404]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 80011c8:	f043 0308 	orr.w	r3, r3, #8
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	4b63      	ldr	r3, [pc, #396]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	4960      	ldr	r1, [pc, #384]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 80011dc:	4313      	orrs	r3, r2
 80011de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011e0:	4b5e      	ldr	r3, [pc, #376]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69db      	ldr	r3, [r3, #28]
 80011ec:	021b      	lsls	r3, r3, #8
 80011ee:	495b      	ldr	r1, [pc, #364]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 80011f0:	4313      	orrs	r3, r2
 80011f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d109      	bne.n	800120e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a1b      	ldr	r3, [r3, #32]
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 fd4c 	bl	8001c9c <RCC_SetFlashLatencyFromMSIRange>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e37a      	b.n	8001904 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800120e:	f000 fc81 	bl	8001b14 <HAL_RCC_GetSysClockFreq>
 8001212:	4602      	mov	r2, r0
 8001214:	4b51      	ldr	r3, [pc, #324]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	091b      	lsrs	r3, r3, #4
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	4950      	ldr	r1, [pc, #320]	@ (8001360 <HAL_RCC_OscConfig+0x274>)
 8001220:	5ccb      	ldrb	r3, [r1, r3]
 8001222:	f003 031f 	and.w	r3, r3, #31
 8001226:	fa22 f303 	lsr.w	r3, r2, r3
 800122a:	4a4e      	ldr	r2, [pc, #312]	@ (8001364 <HAL_RCC_OscConfig+0x278>)
 800122c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800122e:	4b4e      	ldr	r3, [pc, #312]	@ (8001368 <HAL_RCC_OscConfig+0x27c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fb78 	bl	8000928 <HAL_InitTick>
 8001238:	4603      	mov	r3, r0
 800123a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d052      	beq.n	80012e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	e35e      	b.n	8001904 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d032      	beq.n	80012b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800124e:	4b43      	ldr	r3, [pc, #268]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a42      	ldr	r2, [pc, #264]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800125a:	f7ff fbb5 	bl	80009c8 <HAL_GetTick>
 800125e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001262:	f7ff fbb1 	bl	80009c8 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e347      	b.n	8001904 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001274:	4b39      	ldr	r3, [pc, #228]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d0f0      	beq.n	8001262 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001280:	4b36      	ldr	r3, [pc, #216]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a35      	ldr	r2, [pc, #212]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 8001286:	f043 0308 	orr.w	r3, r3, #8
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b33      	ldr	r3, [pc, #204]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	4930      	ldr	r1, [pc, #192]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 800129a:	4313      	orrs	r3, r2
 800129c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800129e:	4b2f      	ldr	r3, [pc, #188]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	021b      	lsls	r3, r3, #8
 80012ac:	492b      	ldr	r1, [pc, #172]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	604b      	str	r3, [r1, #4]
 80012b2:	e01a      	b.n	80012ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012b4:	4b29      	ldr	r3, [pc, #164]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a28      	ldr	r2, [pc, #160]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 80012ba:	f023 0301 	bic.w	r3, r3, #1
 80012be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fb82 	bl	80009c8 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012c8:	f7ff fb7e 	bl	80009c8 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e314      	b.n	8001904 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012da:	4b20      	ldr	r3, [pc, #128]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f0      	bne.n	80012c8 <HAL_RCC_OscConfig+0x1dc>
 80012e6:	e000      	b.n	80012ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d073      	beq.n	80013de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	2b08      	cmp	r3, #8
 80012fa:	d005      	beq.n	8001308 <HAL_RCC_OscConfig+0x21c>
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	2b0c      	cmp	r3, #12
 8001300:	d10e      	bne.n	8001320 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	2b03      	cmp	r3, #3
 8001306:	d10b      	bne.n	8001320 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001308:	4b14      	ldr	r3, [pc, #80]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d063      	beq.n	80013dc <HAL_RCC_OscConfig+0x2f0>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d15f      	bne.n	80013dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e2f1      	b.n	8001904 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001328:	d106      	bne.n	8001338 <HAL_RCC_OscConfig+0x24c>
 800132a:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a0b      	ldr	r2, [pc, #44]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 8001330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e025      	b.n	8001384 <HAL_RCC_OscConfig+0x298>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001340:	d114      	bne.n	800136c <HAL_RCC_OscConfig+0x280>
 8001342:	4b06      	ldr	r3, [pc, #24]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a05      	ldr	r2, [pc, #20]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 8001348:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b03      	ldr	r3, [pc, #12]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a02      	ldr	r2, [pc, #8]	@ (800135c <HAL_RCC_OscConfig+0x270>)
 8001354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e013      	b.n	8001384 <HAL_RCC_OscConfig+0x298>
 800135c:	40021000 	.word	0x40021000
 8001360:	08003b64 	.word	0x08003b64
 8001364:	20000000 	.word	0x20000000
 8001368:	20000004 	.word	0x20000004
 800136c:	4ba0      	ldr	r3, [pc, #640]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a9f      	ldr	r2, [pc, #636]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 8001372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	4b9d      	ldr	r3, [pc, #628]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a9c      	ldr	r2, [pc, #624]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 800137e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d013      	beq.n	80013b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138c:	f7ff fb1c 	bl	80009c8 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001394:	f7ff fb18 	bl	80009c8 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b64      	cmp	r3, #100	@ 0x64
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e2ae      	b.n	8001904 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013a6:	4b92      	ldr	r3, [pc, #584]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0x2a8>
 80013b2:	e014      	b.n	80013de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b4:	f7ff fb08 	bl	80009c8 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013bc:	f7ff fb04 	bl	80009c8 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	@ 0x64
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e29a      	b.n	8001904 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ce:	4b88      	ldr	r3, [pc, #544]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0x2d0>
 80013da:	e000      	b.n	80013de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d060      	beq.n	80014ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	2b04      	cmp	r3, #4
 80013ee:	d005      	beq.n	80013fc <HAL_RCC_OscConfig+0x310>
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	2b0c      	cmp	r3, #12
 80013f4:	d119      	bne.n	800142a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d116      	bne.n	800142a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013fc:	4b7c      	ldr	r3, [pc, #496]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <HAL_RCC_OscConfig+0x328>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e277      	b.n	8001904 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001414:	4b76      	ldr	r3, [pc, #472]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	061b      	lsls	r3, r3, #24
 8001422:	4973      	ldr	r1, [pc, #460]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 8001424:	4313      	orrs	r3, r2
 8001426:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001428:	e040      	b.n	80014ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d023      	beq.n	800147a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001432:	4b6f      	ldr	r3, [pc, #444]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a6e      	ldr	r2, [pc, #440]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 8001438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800143c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143e:	f7ff fac3 	bl	80009c8 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001446:	f7ff fabf 	bl	80009c8 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e255      	b.n	8001904 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001458:	4b65      	ldr	r3, [pc, #404]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f0      	beq.n	8001446 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001464:	4b62      	ldr	r3, [pc, #392]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	061b      	lsls	r3, r3, #24
 8001472:	495f      	ldr	r1, [pc, #380]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 8001474:	4313      	orrs	r3, r2
 8001476:	604b      	str	r3, [r1, #4]
 8001478:	e018      	b.n	80014ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800147a:	4b5d      	ldr	r3, [pc, #372]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a5c      	ldr	r2, [pc, #368]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 8001480:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001486:	f7ff fa9f 	bl	80009c8 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800148e:	f7ff fa9b 	bl	80009c8 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e231      	b.n	8001904 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014a0:	4b53      	ldr	r3, [pc, #332]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f0      	bne.n	800148e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d03c      	beq.n	8001532 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d01c      	beq.n	80014fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c0:	4b4b      	ldr	r3, [pc, #300]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 80014c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014c6:	4a4a      	ldr	r2, [pc, #296]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d0:	f7ff fa7a 	bl	80009c8 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d8:	f7ff fa76 	bl	80009c8 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e20c      	b.n	8001904 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014ea:	4b41      	ldr	r3, [pc, #260]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 80014ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0ef      	beq.n	80014d8 <HAL_RCC_OscConfig+0x3ec>
 80014f8:	e01b      	b.n	8001532 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014fa:	4b3d      	ldr	r3, [pc, #244]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 80014fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001500:	4a3b      	ldr	r2, [pc, #236]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 8001502:	f023 0301 	bic.w	r3, r3, #1
 8001506:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150a:	f7ff fa5d 	bl	80009c8 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001512:	f7ff fa59 	bl	80009c8 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e1ef      	b.n	8001904 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001524:	4b32      	ldr	r3, [pc, #200]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 8001526:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1ef      	bne.n	8001512 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 80a6 	beq.w	800168c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001544:	4b2a      	ldr	r3, [pc, #168]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 8001546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d10d      	bne.n	800156c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001550:	4b27      	ldr	r3, [pc, #156]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 8001552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001554:	4a26      	ldr	r2, [pc, #152]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 8001556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800155a:	6593      	str	r3, [r2, #88]	@ 0x58
 800155c:	4b24      	ldr	r3, [pc, #144]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 800155e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001568:	2301      	movs	r3, #1
 800156a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800156c:	4b21      	ldr	r3, [pc, #132]	@ (80015f4 <HAL_RCC_OscConfig+0x508>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001574:	2b00      	cmp	r3, #0
 8001576:	d118      	bne.n	80015aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001578:	4b1e      	ldr	r3, [pc, #120]	@ (80015f4 <HAL_RCC_OscConfig+0x508>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a1d      	ldr	r2, [pc, #116]	@ (80015f4 <HAL_RCC_OscConfig+0x508>)
 800157e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001582:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001584:	f7ff fa20 	bl	80009c8 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800158c:	f7ff fa1c 	bl	80009c8 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e1b2      	b.n	8001904 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800159e:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <HAL_RCC_OscConfig+0x508>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d108      	bne.n	80015c4 <HAL_RCC_OscConfig+0x4d8>
 80015b2:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 80015b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015b8:	4a0d      	ldr	r2, [pc, #52]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015c2:	e029      	b.n	8001618 <HAL_RCC_OscConfig+0x52c>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b05      	cmp	r3, #5
 80015ca:	d115      	bne.n	80015f8 <HAL_RCC_OscConfig+0x50c>
 80015cc:	4b08      	ldr	r3, [pc, #32]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 80015ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015d2:	4a07      	ldr	r2, [pc, #28]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 80015d4:	f043 0304 	orr.w	r3, r3, #4
 80015d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015dc:	4b04      	ldr	r3, [pc, #16]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 80015de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015e2:	4a03      	ldr	r2, [pc, #12]	@ (80015f0 <HAL_RCC_OscConfig+0x504>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015ec:	e014      	b.n	8001618 <HAL_RCC_OscConfig+0x52c>
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40007000 	.word	0x40007000
 80015f8:	4b9a      	ldr	r3, [pc, #616]	@ (8001864 <HAL_RCC_OscConfig+0x778>)
 80015fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015fe:	4a99      	ldr	r2, [pc, #612]	@ (8001864 <HAL_RCC_OscConfig+0x778>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001608:	4b96      	ldr	r3, [pc, #600]	@ (8001864 <HAL_RCC_OscConfig+0x778>)
 800160a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800160e:	4a95      	ldr	r2, [pc, #596]	@ (8001864 <HAL_RCC_OscConfig+0x778>)
 8001610:	f023 0304 	bic.w	r3, r3, #4
 8001614:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d016      	beq.n	800164e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001620:	f7ff f9d2 	bl	80009c8 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001626:	e00a      	b.n	800163e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001628:	f7ff f9ce 	bl	80009c8 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e162      	b.n	8001904 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800163e:	4b89      	ldr	r3, [pc, #548]	@ (8001864 <HAL_RCC_OscConfig+0x778>)
 8001640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0ed      	beq.n	8001628 <HAL_RCC_OscConfig+0x53c>
 800164c:	e015      	b.n	800167a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164e:	f7ff f9bb 	bl	80009c8 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001654:	e00a      	b.n	800166c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001656:	f7ff f9b7 	bl	80009c8 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001664:	4293      	cmp	r3, r2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e14b      	b.n	8001904 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800166c:	4b7d      	ldr	r3, [pc, #500]	@ (8001864 <HAL_RCC_OscConfig+0x778>)
 800166e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1ed      	bne.n	8001656 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800167a:	7ffb      	ldrb	r3, [r7, #31]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d105      	bne.n	800168c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001680:	4b78      	ldr	r3, [pc, #480]	@ (8001864 <HAL_RCC_OscConfig+0x778>)
 8001682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001684:	4a77      	ldr	r2, [pc, #476]	@ (8001864 <HAL_RCC_OscConfig+0x778>)
 8001686:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800168a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0320 	and.w	r3, r3, #32
 8001694:	2b00      	cmp	r3, #0
 8001696:	d03c      	beq.n	8001712 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169c:	2b00      	cmp	r3, #0
 800169e:	d01c      	beq.n	80016da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016a0:	4b70      	ldr	r3, [pc, #448]	@ (8001864 <HAL_RCC_OscConfig+0x778>)
 80016a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016a6:	4a6f      	ldr	r2, [pc, #444]	@ (8001864 <HAL_RCC_OscConfig+0x778>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b0:	f7ff f98a 	bl	80009c8 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016b8:	f7ff f986 	bl	80009c8 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e11c      	b.n	8001904 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016ca:	4b66      	ldr	r3, [pc, #408]	@ (8001864 <HAL_RCC_OscConfig+0x778>)
 80016cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0ef      	beq.n	80016b8 <HAL_RCC_OscConfig+0x5cc>
 80016d8:	e01b      	b.n	8001712 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016da:	4b62      	ldr	r3, [pc, #392]	@ (8001864 <HAL_RCC_OscConfig+0x778>)
 80016dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016e0:	4a60      	ldr	r2, [pc, #384]	@ (8001864 <HAL_RCC_OscConfig+0x778>)
 80016e2:	f023 0301 	bic.w	r3, r3, #1
 80016e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ea:	f7ff f96d 	bl	80009c8 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016f2:	f7ff f969 	bl	80009c8 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e0ff      	b.n	8001904 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001704:	4b57      	ldr	r3, [pc, #348]	@ (8001864 <HAL_RCC_OscConfig+0x778>)
 8001706:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1ef      	bne.n	80016f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 80f3 	beq.w	8001902 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001720:	2b02      	cmp	r3, #2
 8001722:	f040 80c9 	bne.w	80018b8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001726:	4b4f      	ldr	r3, [pc, #316]	@ (8001864 <HAL_RCC_OscConfig+0x778>)
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	f003 0203 	and.w	r2, r3, #3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001736:	429a      	cmp	r2, r3
 8001738:	d12c      	bne.n	8001794 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001744:	3b01      	subs	r3, #1
 8001746:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001748:	429a      	cmp	r2, r3
 800174a:	d123      	bne.n	8001794 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001756:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d11b      	bne.n	8001794 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001766:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001768:	429a      	cmp	r2, r3
 800176a:	d113      	bne.n	8001794 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001776:	085b      	lsrs	r3, r3, #1
 8001778:	3b01      	subs	r3, #1
 800177a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d109      	bne.n	8001794 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	085b      	lsrs	r3, r3, #1
 800178c:	3b01      	subs	r3, #1
 800178e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001790:	429a      	cmp	r2, r3
 8001792:	d06b      	beq.n	800186c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	2b0c      	cmp	r3, #12
 8001798:	d062      	beq.n	8001860 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800179a:	4b32      	ldr	r3, [pc, #200]	@ (8001864 <HAL_RCC_OscConfig+0x778>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e0ac      	b.n	8001904 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001864 <HAL_RCC_OscConfig+0x778>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a2d      	ldr	r2, [pc, #180]	@ (8001864 <HAL_RCC_OscConfig+0x778>)
 80017b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017b6:	f7ff f907 	bl	80009c8 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017be:	f7ff f903 	bl	80009c8 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e099      	b.n	8001904 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d0:	4b24      	ldr	r3, [pc, #144]	@ (8001864 <HAL_RCC_OscConfig+0x778>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f0      	bne.n	80017be <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017dc:	4b21      	ldr	r3, [pc, #132]	@ (8001864 <HAL_RCC_OscConfig+0x778>)
 80017de:	68da      	ldr	r2, [r3, #12]
 80017e0:	4b21      	ldr	r3, [pc, #132]	@ (8001868 <HAL_RCC_OscConfig+0x77c>)
 80017e2:	4013      	ands	r3, r2
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80017ec:	3a01      	subs	r2, #1
 80017ee:	0112      	lsls	r2, r2, #4
 80017f0:	4311      	orrs	r1, r2
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80017f6:	0212      	lsls	r2, r2, #8
 80017f8:	4311      	orrs	r1, r2
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80017fe:	0852      	lsrs	r2, r2, #1
 8001800:	3a01      	subs	r2, #1
 8001802:	0552      	lsls	r2, r2, #21
 8001804:	4311      	orrs	r1, r2
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800180a:	0852      	lsrs	r2, r2, #1
 800180c:	3a01      	subs	r2, #1
 800180e:	0652      	lsls	r2, r2, #25
 8001810:	4311      	orrs	r1, r2
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001816:	06d2      	lsls	r2, r2, #27
 8001818:	430a      	orrs	r2, r1
 800181a:	4912      	ldr	r1, [pc, #72]	@ (8001864 <HAL_RCC_OscConfig+0x778>)
 800181c:	4313      	orrs	r3, r2
 800181e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001820:	4b10      	ldr	r3, [pc, #64]	@ (8001864 <HAL_RCC_OscConfig+0x778>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0f      	ldr	r2, [pc, #60]	@ (8001864 <HAL_RCC_OscConfig+0x778>)
 8001826:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800182a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800182c:	4b0d      	ldr	r3, [pc, #52]	@ (8001864 <HAL_RCC_OscConfig+0x778>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	4a0c      	ldr	r2, [pc, #48]	@ (8001864 <HAL_RCC_OscConfig+0x778>)
 8001832:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001836:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001838:	f7ff f8c6 	bl	80009c8 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001840:	f7ff f8c2 	bl	80009c8 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e058      	b.n	8001904 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001852:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <HAL_RCC_OscConfig+0x778>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800185e:	e050      	b.n	8001902 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e04f      	b.n	8001904 <HAL_RCC_OscConfig+0x818>
 8001864:	40021000 	.word	0x40021000
 8001868:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186c:	4b27      	ldr	r3, [pc, #156]	@ (800190c <HAL_RCC_OscConfig+0x820>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d144      	bne.n	8001902 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001878:	4b24      	ldr	r3, [pc, #144]	@ (800190c <HAL_RCC_OscConfig+0x820>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a23      	ldr	r2, [pc, #140]	@ (800190c <HAL_RCC_OscConfig+0x820>)
 800187e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001882:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001884:	4b21      	ldr	r3, [pc, #132]	@ (800190c <HAL_RCC_OscConfig+0x820>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4a20      	ldr	r2, [pc, #128]	@ (800190c <HAL_RCC_OscConfig+0x820>)
 800188a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800188e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001890:	f7ff f89a 	bl	80009c8 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001898:	f7ff f896 	bl	80009c8 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e02c      	b.n	8001904 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018aa:	4b18      	ldr	r3, [pc, #96]	@ (800190c <HAL_RCC_OscConfig+0x820>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x7ac>
 80018b6:	e024      	b.n	8001902 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	2b0c      	cmp	r3, #12
 80018bc:	d01f      	beq.n	80018fe <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018be:	4b13      	ldr	r3, [pc, #76]	@ (800190c <HAL_RCC_OscConfig+0x820>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a12      	ldr	r2, [pc, #72]	@ (800190c <HAL_RCC_OscConfig+0x820>)
 80018c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ca:	f7ff f87d 	bl	80009c8 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d2:	f7ff f879 	bl	80009c8 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e00f      	b.n	8001904 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e4:	4b09      	ldr	r3, [pc, #36]	@ (800190c <HAL_RCC_OscConfig+0x820>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f0      	bne.n	80018d2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80018f0:	4b06      	ldr	r3, [pc, #24]	@ (800190c <HAL_RCC_OscConfig+0x820>)
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	4905      	ldr	r1, [pc, #20]	@ (800190c <HAL_RCC_OscConfig+0x820>)
 80018f6:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <HAL_RCC_OscConfig+0x824>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	60cb      	str	r3, [r1, #12]
 80018fc:	e001      	b.n	8001902 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3720      	adds	r7, #32
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40021000 	.word	0x40021000
 8001910:	feeefffc 	.word	0xfeeefffc

08001914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e0e7      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001928:	4b75      	ldr	r3, [pc, #468]	@ (8001b00 <HAL_RCC_ClockConfig+0x1ec>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d910      	bls.n	8001958 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001936:	4b72      	ldr	r3, [pc, #456]	@ (8001b00 <HAL_RCC_ClockConfig+0x1ec>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 0207 	bic.w	r2, r3, #7
 800193e:	4970      	ldr	r1, [pc, #448]	@ (8001b00 <HAL_RCC_ClockConfig+0x1ec>)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001946:	4b6e      	ldr	r3, [pc, #440]	@ (8001b00 <HAL_RCC_ClockConfig+0x1ec>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d001      	beq.n	8001958 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0cf      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d010      	beq.n	8001986 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	4b66      	ldr	r3, [pc, #408]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001970:	429a      	cmp	r2, r3
 8001972:	d908      	bls.n	8001986 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001974:	4b63      	ldr	r3, [pc, #396]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	4960      	ldr	r1, [pc, #384]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001982:	4313      	orrs	r3, r2
 8001984:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d04c      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b03      	cmp	r3, #3
 8001998:	d107      	bne.n	80019aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199a:	4b5a      	ldr	r3, [pc, #360]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d121      	bne.n	80019ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e0a6      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019b2:	4b54      	ldr	r3, [pc, #336]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d115      	bne.n	80019ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e09a      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d109      	bne.n	80019ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e08e      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019da:	4b4a      	ldr	r3, [pc, #296]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e086      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019ea:	4b46      	ldr	r3, [pc, #280]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f023 0203 	bic.w	r2, r3, #3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	4943      	ldr	r1, [pc, #268]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019fc:	f7fe ffe4 	bl	80009c8 <HAL_GetTick>
 8001a00:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a02:	e00a      	b.n	8001a1a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a04:	f7fe ffe0 	bl	80009c8 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e06e      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 020c 	and.w	r2, r3, #12
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d1eb      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d010      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	4b31      	ldr	r3, [pc, #196]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d208      	bcs.n	8001a5a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a48:	4b2e      	ldr	r3, [pc, #184]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	492b      	ldr	r1, [pc, #172]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a5a:	4b29      	ldr	r3, [pc, #164]	@ (8001b00 <HAL_RCC_ClockConfig+0x1ec>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d210      	bcs.n	8001a8a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a68:	4b25      	ldr	r3, [pc, #148]	@ (8001b00 <HAL_RCC_ClockConfig+0x1ec>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f023 0207 	bic.w	r2, r3, #7
 8001a70:	4923      	ldr	r1, [pc, #140]	@ (8001b00 <HAL_RCC_ClockConfig+0x1ec>)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a78:	4b21      	ldr	r3, [pc, #132]	@ (8001b00 <HAL_RCC_ClockConfig+0x1ec>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d001      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e036      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d008      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a96:	4b1b      	ldr	r3, [pc, #108]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	4918      	ldr	r1, [pc, #96]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d009      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ab4:	4b13      	ldr	r3, [pc, #76]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4910      	ldr	r1, [pc, #64]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ac8:	f000 f824 	bl	8001b14 <HAL_RCC_GetSysClockFreq>
 8001acc:	4602      	mov	r2, r0
 8001ace:	4b0d      	ldr	r3, [pc, #52]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	091b      	lsrs	r3, r3, #4
 8001ad4:	f003 030f 	and.w	r3, r3, #15
 8001ad8:	490b      	ldr	r1, [pc, #44]	@ (8001b08 <HAL_RCC_ClockConfig+0x1f4>)
 8001ada:	5ccb      	ldrb	r3, [r1, r3]
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae4:	4a09      	ldr	r2, [pc, #36]	@ (8001b0c <HAL_RCC_ClockConfig+0x1f8>)
 8001ae6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ae8:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <HAL_RCC_ClockConfig+0x1fc>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe ff1b 	bl	8000928 <HAL_InitTick>
 8001af2:	4603      	mov	r3, r0
 8001af4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001af6:	7afb      	ldrb	r3, [r7, #11]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40022000 	.word	0x40022000
 8001b04:	40021000 	.word	0x40021000
 8001b08:	08003b64 	.word	0x08003b64
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	20000004 	.word	0x20000004

08001b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	@ 0x24
 8001b18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b22:	4b3e      	ldr	r3, [pc, #248]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b2c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0x34>
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	2b0c      	cmp	r3, #12
 8001b40:	d121      	bne.n	8001b86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d11e      	bne.n	8001b86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b48:	4b34      	ldr	r3, [pc, #208]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d107      	bne.n	8001b64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b54:	4b31      	ldr	r3, [pc, #196]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b5a:	0a1b      	lsrs	r3, r3, #8
 8001b5c:	f003 030f 	and.w	r3, r3, #15
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	e005      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b64:	4b2d      	ldr	r3, [pc, #180]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	091b      	lsrs	r3, r3, #4
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b70:	4a2b      	ldr	r2, [pc, #172]	@ (8001c20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10d      	bne.n	8001b9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b84:	e00a      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d102      	bne.n	8001b92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b8c:	4b25      	ldr	r3, [pc, #148]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b8e:	61bb      	str	r3, [r7, #24]
 8001b90:	e004      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b98:	4b23      	ldr	r3, [pc, #140]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	2b0c      	cmp	r3, #12
 8001ba0:	d134      	bne.n	8001c0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d003      	beq.n	8001bba <HAL_RCC_GetSysClockFreq+0xa6>
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d003      	beq.n	8001bc0 <HAL_RCC_GetSysClockFreq+0xac>
 8001bb8:	e005      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bba:	4b1a      	ldr	r3, [pc, #104]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bbc:	617b      	str	r3, [r7, #20]
      break;
 8001bbe:	e005      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bc0:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bc2:	617b      	str	r3, [r7, #20]
      break;
 8001bc4:	e002      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	617b      	str	r3, [r7, #20]
      break;
 8001bca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bcc:	4b13      	ldr	r3, [pc, #76]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bda:	4b10      	ldr	r3, [pc, #64]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	0a1b      	lsrs	r3, r3, #8
 8001be0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	fb03 f202 	mul.w	r2, r3, r2
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	0e5b      	lsrs	r3, r3, #25
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c0c:	69bb      	ldr	r3, [r7, #24]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3724      	adds	r7, #36	@ 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	08003b7c 	.word	0x08003b7c
 8001c24:	00f42400 	.word	0x00f42400
 8001c28:	007a1200 	.word	0x007a1200

08001c2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c30:	4b03      	ldr	r3, [pc, #12]	@ (8001c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000000 	.word	0x20000000

08001c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c48:	f7ff fff0 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	0a1b      	lsrs	r3, r3, #8
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	4904      	ldr	r1, [pc, #16]	@ (8001c6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c5a:	5ccb      	ldrb	r3, [r1, r3]
 8001c5c:	f003 031f 	and.w	r3, r3, #31
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	08003b74 	.word	0x08003b74

08001c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c74:	f7ff ffda 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	0adb      	lsrs	r3, r3, #11
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	4904      	ldr	r1, [pc, #16]	@ (8001c98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c86:	5ccb      	ldrb	r3, [r1, r3]
 8001c88:	f003 031f 	and.w	r3, r3, #31
 8001c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40021000 	.word	0x40021000
 8001c98:	08003b74 	.word	0x08003b74

08001c9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8001d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cb4:	f7ff f9b6 	bl	8001024 <HAL_PWREx_GetVoltageRange>
 8001cb8:	6178      	str	r0, [r7, #20]
 8001cba:	e014      	b.n	8001ce6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cbc:	4b25      	ldr	r3, [pc, #148]	@ (8001d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc0:	4a24      	ldr	r2, [pc, #144]	@ (8001d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cc8:	4b22      	ldr	r3, [pc, #136]	@ (8001d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cd4:	f7ff f9a6 	bl	8001024 <HAL_PWREx_GetVoltageRange>
 8001cd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cda:	4b1e      	ldr	r3, [pc, #120]	@ (8001d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cde:	4a1d      	ldr	r2, [pc, #116]	@ (8001d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ce4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cec:	d10b      	bne.n	8001d06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b80      	cmp	r3, #128	@ 0x80
 8001cf2:	d919      	bls.n	8001d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2ba0      	cmp	r3, #160	@ 0xa0
 8001cf8:	d902      	bls.n	8001d00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	e013      	b.n	8001d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d00:	2301      	movs	r3, #1
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	e010      	b.n	8001d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b80      	cmp	r3, #128	@ 0x80
 8001d0a:	d902      	bls.n	8001d12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	e00a      	b.n	8001d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b80      	cmp	r3, #128	@ 0x80
 8001d16:	d102      	bne.n	8001d1e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d18:	2302      	movs	r3, #2
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	e004      	b.n	8001d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b70      	cmp	r3, #112	@ 0x70
 8001d22:	d101      	bne.n	8001d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d24:	2301      	movs	r3, #1
 8001d26:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d28:	4b0b      	ldr	r3, [pc, #44]	@ (8001d58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f023 0207 	bic.w	r2, r3, #7
 8001d30:	4909      	ldr	r1, [pc, #36]	@ (8001d58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d38:	4b07      	ldr	r3, [pc, #28]	@ (8001d58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d001      	beq.n	8001d4a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40022000 	.word	0x40022000

08001d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d64:	2300      	movs	r3, #0
 8001d66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d68:	2300      	movs	r3, #0
 8001d6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d031      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001d80:	d01a      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001d82:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001d86:	d814      	bhi.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d009      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001d8c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001d90:	d10f      	bne.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001d92:	4b5d      	ldr	r3, [pc, #372]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	4a5c      	ldr	r2, [pc, #368]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d9c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d9e:	e00c      	b.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3304      	adds	r3, #4
 8001da4:	2100      	movs	r1, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 fa22 	bl	80021f0 <RCCEx_PLLSAI1_Config>
 8001dac:	4603      	mov	r3, r0
 8001dae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001db0:	e003      	b.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	74fb      	strb	r3, [r7, #19]
      break;
 8001db6:	e000      	b.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001db8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001dba:	7cfb      	ldrb	r3, [r7, #19]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10b      	bne.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dc0:	4b51      	ldr	r3, [pc, #324]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dc6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dce:	494e      	ldr	r1, [pc, #312]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001dd6:	e001      	b.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dd8:	7cfb      	ldrb	r3, [r7, #19]
 8001dda:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 809e 	beq.w	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dee:	4b46      	ldr	r3, [pc, #280]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00d      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e04:	4b40      	ldr	r3, [pc, #256]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e08:	4a3f      	ldr	r2, [pc, #252]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e10:	4b3d      	ldr	r3, [pc, #244]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e20:	4b3a      	ldr	r3, [pc, #232]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a39      	ldr	r2, [pc, #228]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e2c:	f7fe fdcc 	bl	80009c8 <HAL_GetTick>
 8001e30:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e32:	e009      	b.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e34:	f7fe fdc8 	bl	80009c8 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d902      	bls.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	74fb      	strb	r3, [r7, #19]
        break;
 8001e46:	e005      	b.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e48:	4b30      	ldr	r3, [pc, #192]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0ef      	beq.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001e54:	7cfb      	ldrb	r3, [r7, #19]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d15a      	bne.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e5a:	4b2b      	ldr	r3, [pc, #172]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e64:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d01e      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d019      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e76:	4b24      	ldr	r3, [pc, #144]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e80:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e82:	4b21      	ldr	r3, [pc, #132]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e88:	4a1f      	ldr	r2, [pc, #124]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e92:	4b1d      	ldr	r3, [pc, #116]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e98:	4a1b      	ldr	r2, [pc, #108]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ea2:	4a19      	ldr	r2, [pc, #100]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d016      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7fe fd88 	bl	80009c8 <HAL_GetTick>
 8001eb8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eba:	e00b      	b.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ebc:	f7fe fd84 	bl	80009c8 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d902      	bls.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	74fb      	strb	r3, [r7, #19]
            break;
 8001ed2:	e006      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0ec      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001ee2:	7cfb      	ldrb	r3, [r7, #19]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10b      	bne.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ee8:	4b07      	ldr	r3, [pc, #28]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef6:	4904      	ldr	r1, [pc, #16]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001efe:	e009      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f00:	7cfb      	ldrb	r3, [r7, #19]
 8001f02:	74bb      	strb	r3, [r7, #18]
 8001f04:	e006      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f10:	7cfb      	ldrb	r3, [r7, #19]
 8001f12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f14:	7c7b      	ldrb	r3, [r7, #17]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d105      	bne.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f1a:	4b8d      	ldr	r3, [pc, #564]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1e:	4a8c      	ldr	r2, [pc, #560]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f24:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00a      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f32:	4b87      	ldr	r3, [pc, #540]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f38:	f023 0203 	bic.w	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	4983      	ldr	r1, [pc, #524]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00a      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f54:	4b7e      	ldr	r3, [pc, #504]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f5a:	f023 020c 	bic.w	r2, r3, #12
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f62:	497b      	ldr	r1, [pc, #492]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00a      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f76:	4b76      	ldr	r3, [pc, #472]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f7c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f84:	4972      	ldr	r1, [pc, #456]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0320 	and.w	r3, r3, #32
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00a      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f98:	4b6d      	ldr	r3, [pc, #436]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f9e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa6:	496a      	ldr	r1, [pc, #424]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00a      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fba:	4b65      	ldr	r3, [pc, #404]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fc8:	4961      	ldr	r1, [pc, #388]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00a      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001fdc:	4b5c      	ldr	r3, [pc, #368]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	4959      	ldr	r1, [pc, #356]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00a      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ffe:	4b54      	ldr	r3, [pc, #336]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002004:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200c:	4950      	ldr	r1, [pc, #320]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800200e:	4313      	orrs	r3, r2
 8002010:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00a      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002020:	4b4b      	ldr	r3, [pc, #300]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002026:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800202e:	4948      	ldr	r1, [pc, #288]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00a      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002042:	4b43      	ldr	r3, [pc, #268]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002048:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002050:	493f      	ldr	r1, [pc, #252]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002052:	4313      	orrs	r3, r2
 8002054:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d028      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002064:	4b3a      	ldr	r3, [pc, #232]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800206a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002072:	4937      	ldr	r1, [pc, #220]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002074:	4313      	orrs	r3, r2
 8002076:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800207e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002082:	d106      	bne.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002084:	4b32      	ldr	r3, [pc, #200]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4a31      	ldr	r2, [pc, #196]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800208a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800208e:	60d3      	str	r3, [r2, #12]
 8002090:	e011      	b.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002096:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800209a:	d10c      	bne.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3304      	adds	r3, #4
 80020a0:	2101      	movs	r1, #1
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 f8a4 	bl	80021f0 <RCCEx_PLLSAI1_Config>
 80020a8:	4603      	mov	r3, r0
 80020aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80020ac:	7cfb      	ldrb	r3, [r7, #19]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80020b2:	7cfb      	ldrb	r3, [r7, #19]
 80020b4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d028      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020c2:	4b23      	ldr	r3, [pc, #140]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d0:	491f      	ldr	r1, [pc, #124]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020e0:	d106      	bne.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80020e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020ec:	60d3      	str	r3, [r2, #12]
 80020ee:	e011      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80020f8:	d10c      	bne.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2101      	movs	r1, #1
 8002100:	4618      	mov	r0, r3
 8002102:	f000 f875 	bl	80021f0 <RCCEx_PLLSAI1_Config>
 8002106:	4603      	mov	r3, r0
 8002108:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800210a:	7cfb      	ldrb	r3, [r7, #19]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002110:	7cfb      	ldrb	r3, [r7, #19]
 8002112:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d02b      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002120:	4b0b      	ldr	r3, [pc, #44]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002126:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800212e:	4908      	ldr	r1, [pc, #32]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002130:	4313      	orrs	r3, r2
 8002132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800213a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800213e:	d109      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002140:	4b03      	ldr	r3, [pc, #12]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4a02      	ldr	r2, [pc, #8]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002146:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800214a:	60d3      	str	r3, [r2, #12]
 800214c:	e014      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800214e:	bf00      	nop
 8002150:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002158:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800215c:	d10c      	bne.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3304      	adds	r3, #4
 8002162:	2101      	movs	r1, #1
 8002164:	4618      	mov	r0, r3
 8002166:	f000 f843 	bl	80021f0 <RCCEx_PLLSAI1_Config>
 800216a:	4603      	mov	r3, r0
 800216c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800216e:	7cfb      	ldrb	r3, [r7, #19]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8002174:	7cfb      	ldrb	r3, [r7, #19]
 8002176:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d01c      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002184:	4b19      	ldr	r3, [pc, #100]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800218a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002192:	4916      	ldr	r1, [pc, #88]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021a2:	d10c      	bne.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3304      	adds	r3, #4
 80021a8:	2102      	movs	r1, #2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 f820 	bl	80021f0 <RCCEx_PLLSAI1_Config>
 80021b0:	4603      	mov	r3, r0
 80021b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021b4:	7cfb      	ldrb	r3, [r7, #19]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80021ba:	7cfb      	ldrb	r3, [r7, #19]
 80021bc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80021ca:	4b08      	ldr	r3, [pc, #32]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d8:	4904      	ldr	r1, [pc, #16]	@ (80021ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000

080021f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80021fe:	4b74      	ldr	r3, [pc, #464]	@ (80023d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d018      	beq.n	800223c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800220a:	4b71      	ldr	r3, [pc, #452]	@ (80023d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f003 0203 	and.w	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d10d      	bne.n	8002236 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
       ||
 800221e:	2b00      	cmp	r3, #0
 8002220:	d009      	beq.n	8002236 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002222:	4b6b      	ldr	r3, [pc, #428]	@ (80023d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	091b      	lsrs	r3, r3, #4
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
       ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d047      	beq.n	80022c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	73fb      	strb	r3, [r7, #15]
 800223a:	e044      	b.n	80022c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b03      	cmp	r3, #3
 8002242:	d018      	beq.n	8002276 <RCCEx_PLLSAI1_Config+0x86>
 8002244:	2b03      	cmp	r3, #3
 8002246:	d825      	bhi.n	8002294 <RCCEx_PLLSAI1_Config+0xa4>
 8002248:	2b01      	cmp	r3, #1
 800224a:	d002      	beq.n	8002252 <RCCEx_PLLSAI1_Config+0x62>
 800224c:	2b02      	cmp	r3, #2
 800224e:	d009      	beq.n	8002264 <RCCEx_PLLSAI1_Config+0x74>
 8002250:	e020      	b.n	8002294 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002252:	4b5f      	ldr	r3, [pc, #380]	@ (80023d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d11d      	bne.n	800229a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002262:	e01a      	b.n	800229a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002264:	4b5a      	ldr	r3, [pc, #360]	@ (80023d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800226c:	2b00      	cmp	r3, #0
 800226e:	d116      	bne.n	800229e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002274:	e013      	b.n	800229e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002276:	4b56      	ldr	r3, [pc, #344]	@ (80023d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10f      	bne.n	80022a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002282:	4b53      	ldr	r3, [pc, #332]	@ (80023d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d109      	bne.n	80022a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002292:	e006      	b.n	80022a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	73fb      	strb	r3, [r7, #15]
      break;
 8002298:	e004      	b.n	80022a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800229a:	bf00      	nop
 800229c:	e002      	b.n	80022a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800229e:	bf00      	nop
 80022a0:	e000      	b.n	80022a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10d      	bne.n	80022c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022aa:	4b49      	ldr	r3, [pc, #292]	@ (80023d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6819      	ldr	r1, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	430b      	orrs	r3, r1
 80022c0:	4943      	ldr	r1, [pc, #268]	@ (80023d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d17c      	bne.n	80023c6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80022cc:	4b40      	ldr	r3, [pc, #256]	@ (80023d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a3f      	ldr	r2, [pc, #252]	@ (80023d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80022d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022d8:	f7fe fb76 	bl	80009c8 <HAL_GetTick>
 80022dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022de:	e009      	b.n	80022f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022e0:	f7fe fb72 	bl	80009c8 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d902      	bls.n	80022f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	73fb      	strb	r3, [r7, #15]
        break;
 80022f2:	e005      	b.n	8002300 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022f4:	4b36      	ldr	r3, [pc, #216]	@ (80023d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1ef      	bne.n	80022e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d15f      	bne.n	80023c6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d110      	bne.n	800232e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800230c:	4b30      	ldr	r3, [pc, #192]	@ (80023d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002314:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6892      	ldr	r2, [r2, #8]
 800231c:	0211      	lsls	r1, r2, #8
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68d2      	ldr	r2, [r2, #12]
 8002322:	06d2      	lsls	r2, r2, #27
 8002324:	430a      	orrs	r2, r1
 8002326:	492a      	ldr	r1, [pc, #168]	@ (80023d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002328:	4313      	orrs	r3, r2
 800232a:	610b      	str	r3, [r1, #16]
 800232c:	e027      	b.n	800237e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d112      	bne.n	800235a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002334:	4b26      	ldr	r3, [pc, #152]	@ (80023d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800233c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6892      	ldr	r2, [r2, #8]
 8002344:	0211      	lsls	r1, r2, #8
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6912      	ldr	r2, [r2, #16]
 800234a:	0852      	lsrs	r2, r2, #1
 800234c:	3a01      	subs	r2, #1
 800234e:	0552      	lsls	r2, r2, #21
 8002350:	430a      	orrs	r2, r1
 8002352:	491f      	ldr	r1, [pc, #124]	@ (80023d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002354:	4313      	orrs	r3, r2
 8002356:	610b      	str	r3, [r1, #16]
 8002358:	e011      	b.n	800237e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800235a:	4b1d      	ldr	r3, [pc, #116]	@ (80023d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002362:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6892      	ldr	r2, [r2, #8]
 800236a:	0211      	lsls	r1, r2, #8
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6952      	ldr	r2, [r2, #20]
 8002370:	0852      	lsrs	r2, r2, #1
 8002372:	3a01      	subs	r2, #1
 8002374:	0652      	lsls	r2, r2, #25
 8002376:	430a      	orrs	r2, r1
 8002378:	4915      	ldr	r1, [pc, #84]	@ (80023d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800237a:	4313      	orrs	r3, r2
 800237c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800237e:	4b14      	ldr	r3, [pc, #80]	@ (80023d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a13      	ldr	r2, [pc, #76]	@ (80023d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002384:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002388:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238a:	f7fe fb1d 	bl	80009c8 <HAL_GetTick>
 800238e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002390:	e009      	b.n	80023a6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002392:	f7fe fb19 	bl	80009c8 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d902      	bls.n	80023a6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	73fb      	strb	r3, [r7, #15]
          break;
 80023a4:	e005      	b.n	80023b2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023a6:	4b0a      	ldr	r3, [pc, #40]	@ (80023d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0ef      	beq.n	8002392 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d106      	bne.n	80023c6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80023b8:	4b05      	ldr	r3, [pc, #20]	@ (80023d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	4903      	ldr	r1, [pc, #12]	@ (80023d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000

080023d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e040      	b.n	8002468 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d106      	bne.n	80023fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7fe f9a6 	bl	8000748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2224      	movs	r2, #36	@ 0x24
 8002400:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0201 	bic.w	r2, r2, #1
 8002410:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	2b00      	cmp	r3, #0
 8002418:	d002      	beq.n	8002420 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fe7e 	bl	800311c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 fc21 	bl	8002c68 <UART_SetConfig>
 8002426:	4603      	mov	r3, r0
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e01b      	b.n	8002468 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800243e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800244e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0201 	orr.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fefd 	bl	8003260 <UART_CheckIdleState>
 8002466:	4603      	mov	r3, r0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	@ 0x28
 8002474:	af02      	add	r7, sp, #8
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	4613      	mov	r3, r2
 800247e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002484:	2b20      	cmp	r3, #32
 8002486:	d177      	bne.n	8002578 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d002      	beq.n	8002494 <HAL_UART_Transmit+0x24>
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e070      	b.n	800257a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2221      	movs	r2, #33	@ 0x21
 80024a4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024a6:	f7fe fa8f 	bl	80009c8 <HAL_GetTick>
 80024aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	88fa      	ldrh	r2, [r7, #6]
 80024b0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	88fa      	ldrh	r2, [r7, #6]
 80024b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024c4:	d108      	bne.n	80024d8 <HAL_UART_Transmit+0x68>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d104      	bne.n	80024d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	61bb      	str	r3, [r7, #24]
 80024d6:	e003      	b.n	80024e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024e0:	e02f      	b.n	8002542 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2200      	movs	r2, #0
 80024ea:	2180      	movs	r1, #128	@ 0x80
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 ff5f 	bl	80033b0 <UART_WaitOnFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d004      	beq.n	8002502 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2220      	movs	r2, #32
 80024fc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e03b      	b.n	800257a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10b      	bne.n	8002520 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	881a      	ldrh	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002514:	b292      	uxth	r2, r2
 8002516:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	3302      	adds	r3, #2
 800251c:	61bb      	str	r3, [r7, #24]
 800251e:	e007      	b.n	8002530 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	781a      	ldrb	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	3301      	adds	r3, #1
 800252e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002548:	b29b      	uxth	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1c9      	bne.n	80024e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2200      	movs	r2, #0
 8002556:	2140      	movs	r1, #64	@ 0x40
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 ff29 	bl	80033b0 <UART_WaitOnFlagUntilTimeout>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d004      	beq.n	800256e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2220      	movs	r2, #32
 8002568:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e005      	b.n	800257a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2220      	movs	r2, #32
 8002572:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	e000      	b.n	800257a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002578:	2302      	movs	r3, #2
  }
}
 800257a:	4618      	mov	r0, r3
 800257c:	3720      	adds	r7, #32
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08a      	sub	sp, #40	@ 0x28
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	4613      	mov	r3, r2
 8002590:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002598:	2b20      	cmp	r3, #32
 800259a:	d137      	bne.n	800260c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <HAL_UART_Receive_IT+0x24>
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e030      	b.n	800260e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a18      	ldr	r2, [pc, #96]	@ (8002618 <HAL_UART_Receive_IT+0x94>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d01f      	beq.n	80025fc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d018      	beq.n	80025fc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	e853 3f00 	ldrex	r3, [r3]
 80025d6:	613b      	str	r3, [r7, #16]
   return(result);
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025de:	627b      	str	r3, [r7, #36]	@ 0x24
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	623b      	str	r3, [r7, #32]
 80025ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ec:	69f9      	ldr	r1, [r7, #28]
 80025ee:	6a3a      	ldr	r2, [r7, #32]
 80025f0:	e841 2300 	strex	r3, r2, [r1]
 80025f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1e6      	bne.n	80025ca <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80025fc:	88fb      	ldrh	r3, [r7, #6]
 80025fe:	461a      	mov	r2, r3
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 ff42 	bl	800348c <UART_Start_Receive_IT>
 8002608:	4603      	mov	r3, r0
 800260a:	e000      	b.n	800260e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800260c:	2302      	movs	r3, #2
  }
}
 800260e:	4618      	mov	r0, r3
 8002610:	3728      	adds	r7, #40	@ 0x28
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40008000 	.word	0x40008000

0800261c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b0ba      	sub	sp, #232	@ 0xe8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002642:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002646:	f640 030f 	movw	r3, #2063	@ 0x80f
 800264a:	4013      	ands	r3, r2
 800264c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002650:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d115      	bne.n	8002684 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00f      	beq.n	8002684 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b00      	cmp	r3, #0
 800266e:	d009      	beq.n	8002684 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 82ca 	beq.w	8002c0e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	4798      	blx	r3
      }
      return;
 8002682:	e2c4      	b.n	8002c0e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002684:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 8117 	beq.w	80028bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800268e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d106      	bne.n	80026a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800269a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800269e:	4b85      	ldr	r3, [pc, #532]	@ (80028b4 <HAL_UART_IRQHandler+0x298>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 810a 	beq.w	80028bc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80026a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d011      	beq.n	80026d8 <HAL_UART_IRQHandler+0xbc>
 80026b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00b      	beq.n	80026d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2201      	movs	r2, #1
 80026c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026ce:	f043 0201 	orr.w	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d011      	beq.n	8002708 <HAL_UART_IRQHandler+0xec>
 80026e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00b      	beq.n	8002708 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2202      	movs	r2, #2
 80026f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026fe:	f043 0204 	orr.w	r2, r3, #4
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	d011      	beq.n	8002738 <HAL_UART_IRQHandler+0x11c>
 8002714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00b      	beq.n	8002738 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2204      	movs	r2, #4
 8002726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800272e:	f043 0202 	orr.w	r2, r3, #2
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d017      	beq.n	8002774 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002748:	f003 0320 	and.w	r3, r3, #32
 800274c:	2b00      	cmp	r3, #0
 800274e:	d105      	bne.n	800275c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002754:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00b      	beq.n	8002774 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2208      	movs	r2, #8
 8002762:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800276a:	f043 0208 	orr.w	r2, r3, #8
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002778:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800277c:	2b00      	cmp	r3, #0
 800277e:	d012      	beq.n	80027a6 <HAL_UART_IRQHandler+0x18a>
 8002780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002784:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00c      	beq.n	80027a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002794:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800279c:	f043 0220 	orr.w	r2, r3, #32
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 8230 	beq.w	8002c12 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80027b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027b6:	f003 0320 	and.w	r3, r3, #32
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00d      	beq.n	80027da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027c2:	f003 0320 	and.w	r3, r3, #32
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d007      	beq.n	80027da <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ee:	2b40      	cmp	r3, #64	@ 0x40
 80027f0:	d005      	beq.n	80027fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80027f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80027f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d04f      	beq.n	800289e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 ff0a 	bl	8003618 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800280e:	2b40      	cmp	r3, #64	@ 0x40
 8002810:	d141      	bne.n	8002896 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	3308      	adds	r3, #8
 8002818:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002820:	e853 3f00 	ldrex	r3, [r3]
 8002824:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002828:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800282c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002830:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	3308      	adds	r3, #8
 800283a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800283e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002842:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002846:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800284a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800284e:	e841 2300 	strex	r3, r2, [r1]
 8002852:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002856:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1d9      	bne.n	8002812 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002862:	2b00      	cmp	r3, #0
 8002864:	d013      	beq.n	800288e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800286a:	4a13      	ldr	r2, [pc, #76]	@ (80028b8 <HAL_UART_IRQHandler+0x29c>)
 800286c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe fa03 	bl	8000c7e <HAL_DMA_Abort_IT>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d017      	beq.n	80028ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002888:	4610      	mov	r0, r2
 800288a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800288c:	e00f      	b.n	80028ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f9d4 	bl	8002c3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002894:	e00b      	b.n	80028ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f9d0 	bl	8002c3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800289c:	e007      	b.n	80028ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f9cc 	bl	8002c3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80028ac:	e1b1      	b.n	8002c12 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ae:	bf00      	nop
    return;
 80028b0:	e1af      	b.n	8002c12 <HAL_UART_IRQHandler+0x5f6>
 80028b2:	bf00      	nop
 80028b4:	04000120 	.word	0x04000120
 80028b8:	080036e1 	.word	0x080036e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	f040 816a 	bne.w	8002b9a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80028c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ca:	f003 0310 	and.w	r3, r3, #16
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 8163 	beq.w	8002b9a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80028d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 815c 	beq.w	8002b9a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2210      	movs	r2, #16
 80028e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f4:	2b40      	cmp	r3, #64	@ 0x40
 80028f6:	f040 80d4 	bne.w	8002aa2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002906:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 80ad 	beq.w	8002a6a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002916:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800291a:	429a      	cmp	r2, r3
 800291c:	f080 80a5 	bcs.w	8002a6a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002926:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0320 	and.w	r3, r3, #32
 8002936:	2b00      	cmp	r3, #0
 8002938:	f040 8086 	bne.w	8002a48 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002944:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002948:	e853 3f00 	ldrex	r3, [r3]
 800294c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002950:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002954:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002958:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	461a      	mov	r2, r3
 8002962:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002966:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800296a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002972:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002976:	e841 2300 	strex	r3, r2, [r1]
 800297a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800297e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1da      	bne.n	800293c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	3308      	adds	r3, #8
 800298c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002990:	e853 3f00 	ldrex	r3, [r3]
 8002994:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002996:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002998:	f023 0301 	bic.w	r3, r3, #1
 800299c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	3308      	adds	r3, #8
 80029a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80029aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80029ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80029b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80029b6:	e841 2300 	strex	r3, r2, [r1]
 80029ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80029bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1e1      	bne.n	8002986 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	3308      	adds	r3, #8
 80029c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029cc:	e853 3f00 	ldrex	r3, [r3]
 80029d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80029d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	3308      	adds	r3, #8
 80029e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80029e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80029e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80029ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80029ee:	e841 2300 	strex	r3, r2, [r1]
 80029f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80029f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1e3      	bne.n	80029c2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a10:	e853 3f00 	ldrex	r3, [r3]
 8002a14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002a16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a18:	f023 0310 	bic.w	r3, r3, #16
 8002a1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a2c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a32:	e841 2300 	strex	r3, r2, [r1]
 8002a36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002a38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1e4      	bne.n	8002a08 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe f8dd 	bl	8000c02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	4619      	mov	r1, r3
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f8f4 	bl	8002c50 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002a68:	e0d5      	b.n	8002c16 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002a70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a74:	429a      	cmp	r2, r3
 8002a76:	f040 80ce 	bne.w	8002c16 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0320 	and.w	r3, r3, #32
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	f040 80c5 	bne.w	8002c16 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002a98:	4619      	mov	r1, r3
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f8d8 	bl	8002c50 <HAL_UARTEx_RxEventCallback>
      return;
 8002aa0:	e0b9      	b.n	8002c16 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 80ab 	beq.w	8002c1a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8002ac4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80a6 	beq.w	8002c1a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad6:	e853 3f00 	ldrex	r3, [r3]
 8002ada:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ade:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ae2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002af0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002af2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002af6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002af8:	e841 2300 	strex	r3, r2, [r1]
 8002afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1e4      	bne.n	8002ace <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	3308      	adds	r3, #8
 8002b0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0e:	e853 3f00 	ldrex	r3, [r3]
 8002b12:	623b      	str	r3, [r7, #32]
   return(result);
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	f023 0301 	bic.w	r3, r3, #1
 8002b1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	3308      	adds	r3, #8
 8002b24:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002b28:	633a      	str	r2, [r7, #48]	@ 0x30
 8002b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b30:	e841 2300 	strex	r3, r2, [r1]
 8002b34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1e3      	bne.n	8002b04 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	e853 3f00 	ldrex	r3, [r3]
 8002b5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f023 0310 	bic.w	r3, r3, #16
 8002b64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b72:	61fb      	str	r3, [r7, #28]
 8002b74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b76:	69b9      	ldr	r1, [r7, #24]
 8002b78:	69fa      	ldr	r2, [r7, #28]
 8002b7a:	e841 2300 	strex	r3, r2, [r1]
 8002b7e:	617b      	str	r3, [r7, #20]
   return(result);
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1e4      	bne.n	8002b50 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2202      	movs	r2, #2
 8002b8a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b90:	4619      	mov	r1, r3
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f85c 	bl	8002c50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b98:	e03f      	b.n	8002c1a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00e      	beq.n	8002bc4 <HAL_UART_IRQHandler+0x5a8>
 8002ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d008      	beq.n	8002bc4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002bba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 ff8b 	bl	8003ad8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002bc2:	e02d      	b.n	8002c20 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00e      	beq.n	8002bee <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d01c      	beq.n	8002c1e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	4798      	blx	r3
    }
    return;
 8002bec:	e017      	b.n	8002c1e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d012      	beq.n	8002c20 <HAL_UART_IRQHandler+0x604>
 8002bfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00c      	beq.n	8002c20 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fd80 	bl	800370c <UART_EndTransmit_IT>
    return;
 8002c0c:	e008      	b.n	8002c20 <HAL_UART_IRQHandler+0x604>
      return;
 8002c0e:	bf00      	nop
 8002c10:	e006      	b.n	8002c20 <HAL_UART_IRQHandler+0x604>
    return;
 8002c12:	bf00      	nop
 8002c14:	e004      	b.n	8002c20 <HAL_UART_IRQHandler+0x604>
      return;
 8002c16:	bf00      	nop
 8002c18:	e002      	b.n	8002c20 <HAL_UART_IRQHandler+0x604>
      return;
 8002c1a:	bf00      	nop
 8002c1c:	e000      	b.n	8002c20 <HAL_UART_IRQHandler+0x604>
    return;
 8002c1e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002c20:	37e8      	adds	r7, #232	@ 0xe8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop

08002c28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c6c:	b08a      	sub	sp, #40	@ 0x28
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	431a      	orrs	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	431a      	orrs	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	4b9e      	ldr	r3, [pc, #632]	@ (8002f10 <UART_SetConfig+0x2a8>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	6812      	ldr	r2, [r2, #0]
 8002c9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ca0:	430b      	orrs	r3, r1
 8002ca2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a93      	ldr	r2, [pc, #588]	@ (8002f14 <UART_SetConfig+0x2ac>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d004      	beq.n	8002cd4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a8a      	ldr	r2, [pc, #552]	@ (8002f18 <UART_SetConfig+0x2b0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d126      	bne.n	8002d40 <UART_SetConfig+0xd8>
 8002cf2:	4b8a      	ldr	r3, [pc, #552]	@ (8002f1c <UART_SetConfig+0x2b4>)
 8002cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d81b      	bhi.n	8002d38 <UART_SetConfig+0xd0>
 8002d00:	a201      	add	r2, pc, #4	@ (adr r2, 8002d08 <UART_SetConfig+0xa0>)
 8002d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d06:	bf00      	nop
 8002d08:	08002d19 	.word	0x08002d19
 8002d0c:	08002d29 	.word	0x08002d29
 8002d10:	08002d21 	.word	0x08002d21
 8002d14:	08002d31 	.word	0x08002d31
 8002d18:	2301      	movs	r3, #1
 8002d1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d1e:	e0ab      	b.n	8002e78 <UART_SetConfig+0x210>
 8002d20:	2302      	movs	r3, #2
 8002d22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d26:	e0a7      	b.n	8002e78 <UART_SetConfig+0x210>
 8002d28:	2304      	movs	r3, #4
 8002d2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d2e:	e0a3      	b.n	8002e78 <UART_SetConfig+0x210>
 8002d30:	2308      	movs	r3, #8
 8002d32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d36:	e09f      	b.n	8002e78 <UART_SetConfig+0x210>
 8002d38:	2310      	movs	r3, #16
 8002d3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d3e:	e09b      	b.n	8002e78 <UART_SetConfig+0x210>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a76      	ldr	r2, [pc, #472]	@ (8002f20 <UART_SetConfig+0x2b8>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d138      	bne.n	8002dbc <UART_SetConfig+0x154>
 8002d4a:	4b74      	ldr	r3, [pc, #464]	@ (8002f1c <UART_SetConfig+0x2b4>)
 8002d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d50:	f003 030c 	and.w	r3, r3, #12
 8002d54:	2b0c      	cmp	r3, #12
 8002d56:	d82d      	bhi.n	8002db4 <UART_SetConfig+0x14c>
 8002d58:	a201      	add	r2, pc, #4	@ (adr r2, 8002d60 <UART_SetConfig+0xf8>)
 8002d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5e:	bf00      	nop
 8002d60:	08002d95 	.word	0x08002d95
 8002d64:	08002db5 	.word	0x08002db5
 8002d68:	08002db5 	.word	0x08002db5
 8002d6c:	08002db5 	.word	0x08002db5
 8002d70:	08002da5 	.word	0x08002da5
 8002d74:	08002db5 	.word	0x08002db5
 8002d78:	08002db5 	.word	0x08002db5
 8002d7c:	08002db5 	.word	0x08002db5
 8002d80:	08002d9d 	.word	0x08002d9d
 8002d84:	08002db5 	.word	0x08002db5
 8002d88:	08002db5 	.word	0x08002db5
 8002d8c:	08002db5 	.word	0x08002db5
 8002d90:	08002dad 	.word	0x08002dad
 8002d94:	2300      	movs	r3, #0
 8002d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d9a:	e06d      	b.n	8002e78 <UART_SetConfig+0x210>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002da2:	e069      	b.n	8002e78 <UART_SetConfig+0x210>
 8002da4:	2304      	movs	r3, #4
 8002da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002daa:	e065      	b.n	8002e78 <UART_SetConfig+0x210>
 8002dac:	2308      	movs	r3, #8
 8002dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002db2:	e061      	b.n	8002e78 <UART_SetConfig+0x210>
 8002db4:	2310      	movs	r3, #16
 8002db6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dba:	e05d      	b.n	8002e78 <UART_SetConfig+0x210>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a58      	ldr	r2, [pc, #352]	@ (8002f24 <UART_SetConfig+0x2bc>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d125      	bne.n	8002e12 <UART_SetConfig+0x1aa>
 8002dc6:	4b55      	ldr	r3, [pc, #340]	@ (8002f1c <UART_SetConfig+0x2b4>)
 8002dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dcc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002dd0:	2b30      	cmp	r3, #48	@ 0x30
 8002dd2:	d016      	beq.n	8002e02 <UART_SetConfig+0x19a>
 8002dd4:	2b30      	cmp	r3, #48	@ 0x30
 8002dd6:	d818      	bhi.n	8002e0a <UART_SetConfig+0x1a2>
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	d00a      	beq.n	8002df2 <UART_SetConfig+0x18a>
 8002ddc:	2b20      	cmp	r3, #32
 8002dde:	d814      	bhi.n	8002e0a <UART_SetConfig+0x1a2>
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <UART_SetConfig+0x182>
 8002de4:	2b10      	cmp	r3, #16
 8002de6:	d008      	beq.n	8002dfa <UART_SetConfig+0x192>
 8002de8:	e00f      	b.n	8002e0a <UART_SetConfig+0x1a2>
 8002dea:	2300      	movs	r3, #0
 8002dec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002df0:	e042      	b.n	8002e78 <UART_SetConfig+0x210>
 8002df2:	2302      	movs	r3, #2
 8002df4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002df8:	e03e      	b.n	8002e78 <UART_SetConfig+0x210>
 8002dfa:	2304      	movs	r3, #4
 8002dfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e00:	e03a      	b.n	8002e78 <UART_SetConfig+0x210>
 8002e02:	2308      	movs	r3, #8
 8002e04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e08:	e036      	b.n	8002e78 <UART_SetConfig+0x210>
 8002e0a:	2310      	movs	r3, #16
 8002e0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e10:	e032      	b.n	8002e78 <UART_SetConfig+0x210>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a3f      	ldr	r2, [pc, #252]	@ (8002f14 <UART_SetConfig+0x2ac>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d12a      	bne.n	8002e72 <UART_SetConfig+0x20a>
 8002e1c:	4b3f      	ldr	r3, [pc, #252]	@ (8002f1c <UART_SetConfig+0x2b4>)
 8002e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e22:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002e26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e2a:	d01a      	beq.n	8002e62 <UART_SetConfig+0x1fa>
 8002e2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e30:	d81b      	bhi.n	8002e6a <UART_SetConfig+0x202>
 8002e32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e36:	d00c      	beq.n	8002e52 <UART_SetConfig+0x1ea>
 8002e38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e3c:	d815      	bhi.n	8002e6a <UART_SetConfig+0x202>
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <UART_SetConfig+0x1e2>
 8002e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e46:	d008      	beq.n	8002e5a <UART_SetConfig+0x1f2>
 8002e48:	e00f      	b.n	8002e6a <UART_SetConfig+0x202>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e50:	e012      	b.n	8002e78 <UART_SetConfig+0x210>
 8002e52:	2302      	movs	r3, #2
 8002e54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e58:	e00e      	b.n	8002e78 <UART_SetConfig+0x210>
 8002e5a:	2304      	movs	r3, #4
 8002e5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e60:	e00a      	b.n	8002e78 <UART_SetConfig+0x210>
 8002e62:	2308      	movs	r3, #8
 8002e64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e68:	e006      	b.n	8002e78 <UART_SetConfig+0x210>
 8002e6a:	2310      	movs	r3, #16
 8002e6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e70:	e002      	b.n	8002e78 <UART_SetConfig+0x210>
 8002e72:	2310      	movs	r3, #16
 8002e74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a25      	ldr	r2, [pc, #148]	@ (8002f14 <UART_SetConfig+0x2ac>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	f040 808a 	bne.w	8002f98 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d824      	bhi.n	8002ed6 <UART_SetConfig+0x26e>
 8002e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e94 <UART_SetConfig+0x22c>)
 8002e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e92:	bf00      	nop
 8002e94:	08002eb9 	.word	0x08002eb9
 8002e98:	08002ed7 	.word	0x08002ed7
 8002e9c:	08002ec1 	.word	0x08002ec1
 8002ea0:	08002ed7 	.word	0x08002ed7
 8002ea4:	08002ec7 	.word	0x08002ec7
 8002ea8:	08002ed7 	.word	0x08002ed7
 8002eac:	08002ed7 	.word	0x08002ed7
 8002eb0:	08002ed7 	.word	0x08002ed7
 8002eb4:	08002ecf 	.word	0x08002ecf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002eb8:	f7fe fec4 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 8002ebc:	61f8      	str	r0, [r7, #28]
        break;
 8002ebe:	e010      	b.n	8002ee2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ec0:	4b19      	ldr	r3, [pc, #100]	@ (8002f28 <UART_SetConfig+0x2c0>)
 8002ec2:	61fb      	str	r3, [r7, #28]
        break;
 8002ec4:	e00d      	b.n	8002ee2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ec6:	f7fe fe25 	bl	8001b14 <HAL_RCC_GetSysClockFreq>
 8002eca:	61f8      	str	r0, [r7, #28]
        break;
 8002ecc:	e009      	b.n	8002ee2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ece:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ed2:	61fb      	str	r3, [r7, #28]
        break;
 8002ed4:	e005      	b.n	8002ee2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002ee0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 8109 	beq.w	80030fc <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	4413      	add	r3, r2
 8002ef4:	69fa      	ldr	r2, [r7, #28]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d305      	bcc.n	8002f06 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f00:	69fa      	ldr	r2, [r7, #28]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d912      	bls.n	8002f2c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002f0c:	e0f6      	b.n	80030fc <UART_SetConfig+0x494>
 8002f0e:	bf00      	nop
 8002f10:	efff69f3 	.word	0xefff69f3
 8002f14:	40008000 	.word	0x40008000
 8002f18:	40013800 	.word	0x40013800
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40004400 	.word	0x40004400
 8002f24:	40004800 	.word	0x40004800
 8002f28:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	461c      	mov	r4, r3
 8002f32:	4615      	mov	r5, r2
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	022b      	lsls	r3, r5, #8
 8002f3e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002f42:	0222      	lsls	r2, r4, #8
 8002f44:	68f9      	ldr	r1, [r7, #12]
 8002f46:	6849      	ldr	r1, [r1, #4]
 8002f48:	0849      	lsrs	r1, r1, #1
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	4688      	mov	r8, r1
 8002f4e:	4681      	mov	r9, r0
 8002f50:	eb12 0a08 	adds.w	sl, r2, r8
 8002f54:	eb43 0b09 	adc.w	fp, r3, r9
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	607a      	str	r2, [r7, #4]
 8002f62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f66:	4650      	mov	r0, sl
 8002f68:	4659      	mov	r1, fp
 8002f6a:	f7fd f939 	bl	80001e0 <__aeabi_uldivmod>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4613      	mov	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f7c:	d308      	bcc.n	8002f90 <UART_SetConfig+0x328>
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f84:	d204      	bcs.n	8002f90 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	60da      	str	r2, [r3, #12]
 8002f8e:	e0b5      	b.n	80030fc <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002f96:	e0b1      	b.n	80030fc <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fa0:	d15d      	bne.n	800305e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8002fa2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d827      	bhi.n	8002ffa <UART_SetConfig+0x392>
 8002faa:	a201      	add	r2, pc, #4	@ (adr r2, 8002fb0 <UART_SetConfig+0x348>)
 8002fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb0:	08002fd5 	.word	0x08002fd5
 8002fb4:	08002fdd 	.word	0x08002fdd
 8002fb8:	08002fe5 	.word	0x08002fe5
 8002fbc:	08002ffb 	.word	0x08002ffb
 8002fc0:	08002feb 	.word	0x08002feb
 8002fc4:	08002ffb 	.word	0x08002ffb
 8002fc8:	08002ffb 	.word	0x08002ffb
 8002fcc:	08002ffb 	.word	0x08002ffb
 8002fd0:	08002ff3 	.word	0x08002ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fd4:	f7fe fe36 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 8002fd8:	61f8      	str	r0, [r7, #28]
        break;
 8002fda:	e014      	b.n	8003006 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fdc:	f7fe fe48 	bl	8001c70 <HAL_RCC_GetPCLK2Freq>
 8002fe0:	61f8      	str	r0, [r7, #28]
        break;
 8002fe2:	e010      	b.n	8003006 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fe4:	4b4c      	ldr	r3, [pc, #304]	@ (8003118 <UART_SetConfig+0x4b0>)
 8002fe6:	61fb      	str	r3, [r7, #28]
        break;
 8002fe8:	e00d      	b.n	8003006 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fea:	f7fe fd93 	bl	8001b14 <HAL_RCC_GetSysClockFreq>
 8002fee:	61f8      	str	r0, [r7, #28]
        break;
 8002ff0:	e009      	b.n	8003006 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ff2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ff6:	61fb      	str	r3, [r7, #28]
        break;
 8002ff8:	e005      	b.n	8003006 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003004:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d077      	beq.n	80030fc <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	005a      	lsls	r2, r3, #1
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	085b      	lsrs	r3, r3, #1
 8003016:	441a      	add	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003020:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	2b0f      	cmp	r3, #15
 8003026:	d916      	bls.n	8003056 <UART_SetConfig+0x3ee>
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800302e:	d212      	bcs.n	8003056 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	b29b      	uxth	r3, r3
 8003034:	f023 030f 	bic.w	r3, r3, #15
 8003038:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	085b      	lsrs	r3, r3, #1
 800303e:	b29b      	uxth	r3, r3
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	b29a      	uxth	r2, r3
 8003046:	8afb      	ldrh	r3, [r7, #22]
 8003048:	4313      	orrs	r3, r2
 800304a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	8afa      	ldrh	r2, [r7, #22]
 8003052:	60da      	str	r2, [r3, #12]
 8003054:	e052      	b.n	80030fc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800305c:	e04e      	b.n	80030fc <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800305e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003062:	2b08      	cmp	r3, #8
 8003064:	d827      	bhi.n	80030b6 <UART_SetConfig+0x44e>
 8003066:	a201      	add	r2, pc, #4	@ (adr r2, 800306c <UART_SetConfig+0x404>)
 8003068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306c:	08003091 	.word	0x08003091
 8003070:	08003099 	.word	0x08003099
 8003074:	080030a1 	.word	0x080030a1
 8003078:	080030b7 	.word	0x080030b7
 800307c:	080030a7 	.word	0x080030a7
 8003080:	080030b7 	.word	0x080030b7
 8003084:	080030b7 	.word	0x080030b7
 8003088:	080030b7 	.word	0x080030b7
 800308c:	080030af 	.word	0x080030af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003090:	f7fe fdd8 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 8003094:	61f8      	str	r0, [r7, #28]
        break;
 8003096:	e014      	b.n	80030c2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003098:	f7fe fdea 	bl	8001c70 <HAL_RCC_GetPCLK2Freq>
 800309c:	61f8      	str	r0, [r7, #28]
        break;
 800309e:	e010      	b.n	80030c2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003118 <UART_SetConfig+0x4b0>)
 80030a2:	61fb      	str	r3, [r7, #28]
        break;
 80030a4:	e00d      	b.n	80030c2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030a6:	f7fe fd35 	bl	8001b14 <HAL_RCC_GetSysClockFreq>
 80030aa:	61f8      	str	r0, [r7, #28]
        break;
 80030ac:	e009      	b.n	80030c2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030b2:	61fb      	str	r3, [r7, #28]
        break;
 80030b4:	e005      	b.n	80030c2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80030c0:	bf00      	nop
    }

    if (pclk != 0U)
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d019      	beq.n	80030fc <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	085a      	lsrs	r2, r3, #1
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	441a      	add	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	2b0f      	cmp	r3, #15
 80030e0:	d909      	bls.n	80030f6 <UART_SetConfig+0x48e>
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030e8:	d205      	bcs.n	80030f6 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	60da      	str	r2, [r3, #12]
 80030f4:	e002      	b.n	80030fc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003108:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800310c:	4618      	mov	r0, r3
 800310e:	3728      	adds	r7, #40	@ 0x28
 8003110:	46bd      	mov	sp, r7
 8003112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003116:	bf00      	nop
 8003118:	00f42400 	.word	0x00f42400

0800311c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b0:	f003 0310 	and.w	r3, r3, #16
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d2:	f003 0320 	and.w	r3, r3, #32
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d01a      	beq.n	8003232 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800321a:	d10a      	bne.n	8003232 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	605a      	str	r2, [r3, #4]
  }
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b098      	sub	sp, #96	@ 0x60
 8003264:	af02      	add	r7, sp, #8
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003270:	f7fd fbaa 	bl	80009c8 <HAL_GetTick>
 8003274:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b08      	cmp	r3, #8
 8003282:	d12e      	bne.n	80032e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003284:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800328c:	2200      	movs	r2, #0
 800328e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f88c 	bl	80033b0 <UART_WaitOnFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d021      	beq.n	80032e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a6:	e853 3f00 	ldrex	r3, [r3]
 80032aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80032ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	461a      	mov	r2, r3
 80032ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80032be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80032c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032c4:	e841 2300 	strex	r3, r2, [r1]
 80032c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80032ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1e6      	bne.n	800329e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e062      	b.n	80033a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d149      	bne.n	8003384 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032f8:	2200      	movs	r2, #0
 80032fa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f856 	bl	80033b0 <UART_WaitOnFlagUntilTimeout>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d03c      	beq.n	8003384 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003312:	e853 3f00 	ldrex	r3, [r3]
 8003316:	623b      	str	r3, [r7, #32]
   return(result);
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800331e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	461a      	mov	r2, r3
 8003326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003328:	633b      	str	r3, [r7, #48]	@ 0x30
 800332a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800332e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003330:	e841 2300 	strex	r3, r2, [r1]
 8003334:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1e6      	bne.n	800330a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	3308      	adds	r3, #8
 8003342:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	e853 3f00 	ldrex	r3, [r3]
 800334a:	60fb      	str	r3, [r7, #12]
   return(result);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f023 0301 	bic.w	r3, r3, #1
 8003352:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3308      	adds	r3, #8
 800335a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800335c:	61fa      	str	r2, [r7, #28]
 800335e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003360:	69b9      	ldr	r1, [r7, #24]
 8003362:	69fa      	ldr	r2, [r7, #28]
 8003364:	e841 2300 	strex	r3, r2, [r1]
 8003368:	617b      	str	r3, [r7, #20]
   return(result);
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1e5      	bne.n	800333c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2220      	movs	r2, #32
 8003374:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e011      	b.n	80033a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2220      	movs	r2, #32
 8003388:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2220      	movs	r2, #32
 800338e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3758      	adds	r7, #88	@ 0x58
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	603b      	str	r3, [r7, #0]
 80033bc:	4613      	mov	r3, r2
 80033be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c0:	e04f      	b.n	8003462 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c8:	d04b      	beq.n	8003462 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ca:	f7fd fafd 	bl	80009c8 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d302      	bcc.n	80033e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e04e      	b.n	8003482 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0304 	and.w	r3, r3, #4
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d037      	beq.n	8003462 <UART_WaitOnFlagUntilTimeout+0xb2>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b80      	cmp	r3, #128	@ 0x80
 80033f6:	d034      	beq.n	8003462 <UART_WaitOnFlagUntilTimeout+0xb2>
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b40      	cmp	r3, #64	@ 0x40
 80033fc:	d031      	beq.n	8003462 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	2b08      	cmp	r3, #8
 800340a:	d110      	bne.n	800342e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2208      	movs	r2, #8
 8003412:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 f8ff 	bl	8003618 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2208      	movs	r2, #8
 800341e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e029      	b.n	8003482 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003438:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800343c:	d111      	bne.n	8003462 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003446:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 f8e5 	bl	8003618 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2220      	movs	r2, #32
 8003452:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e00f      	b.n	8003482 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	69da      	ldr	r2, [r3, #28]
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	4013      	ands	r3, r2
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	429a      	cmp	r2, r3
 8003470:	bf0c      	ite	eq
 8003472:	2301      	moveq	r3, #1
 8003474:	2300      	movne	r3, #0
 8003476:	b2db      	uxtb	r3, r3
 8003478:	461a      	mov	r2, r3
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	429a      	cmp	r2, r3
 800347e:	d0a0      	beq.n	80033c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800348c:	b480      	push	{r7}
 800348e:	b097      	sub	sp, #92	@ 0x5c
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	4613      	mov	r3, r2
 8003498:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	88fa      	ldrh	r2, [r7, #6]
 80034a4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	88fa      	ldrh	r2, [r7, #6]
 80034ac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034be:	d10e      	bne.n	80034de <UART_Start_Receive_IT+0x52>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d105      	bne.n	80034d4 <UART_Start_Receive_IT+0x48>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80034ce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80034d2:	e02d      	b.n	8003530 <UART_Start_Receive_IT+0xa4>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	22ff      	movs	r2, #255	@ 0xff
 80034d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80034dc:	e028      	b.n	8003530 <UART_Start_Receive_IT+0xa4>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10d      	bne.n	8003502 <UART_Start_Receive_IT+0x76>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d104      	bne.n	80034f8 <UART_Start_Receive_IT+0x6c>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	22ff      	movs	r2, #255	@ 0xff
 80034f2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80034f6:	e01b      	b.n	8003530 <UART_Start_Receive_IT+0xa4>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	227f      	movs	r2, #127	@ 0x7f
 80034fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003500:	e016      	b.n	8003530 <UART_Start_Receive_IT+0xa4>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800350a:	d10d      	bne.n	8003528 <UART_Start_Receive_IT+0x9c>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d104      	bne.n	800351e <UART_Start_Receive_IT+0x92>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	227f      	movs	r2, #127	@ 0x7f
 8003518:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800351c:	e008      	b.n	8003530 <UART_Start_Receive_IT+0xa4>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	223f      	movs	r2, #63	@ 0x3f
 8003522:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003526:	e003      	b.n	8003530 <UART_Start_Receive_IT+0xa4>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2222      	movs	r2, #34	@ 0x22
 800353c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	3308      	adds	r3, #8
 8003546:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800354a:	e853 3f00 	ldrex	r3, [r3]
 800354e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	657b      	str	r3, [r7, #84]	@ 0x54
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	3308      	adds	r3, #8
 800355e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003560:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003562:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003564:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003566:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003568:	e841 2300 	strex	r3, r2, [r1]
 800356c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800356e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1e5      	bne.n	8003540 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800357c:	d107      	bne.n	800358e <UART_Start_Receive_IT+0x102>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d103      	bne.n	800358e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4a21      	ldr	r2, [pc, #132]	@ (8003610 <UART_Start_Receive_IT+0x184>)
 800358a:	669a      	str	r2, [r3, #104]	@ 0x68
 800358c:	e002      	b.n	8003594 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4a20      	ldr	r2, [pc, #128]	@ (8003614 <UART_Start_Receive_IT+0x188>)
 8003592:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d019      	beq.n	80035d0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a4:	e853 3f00 	ldrex	r3, [r3]
 80035a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ac:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80035b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	461a      	mov	r2, r3
 80035b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80035bc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80035c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035c2:	e841 2300 	strex	r3, r2, [r1]
 80035c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80035c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1e6      	bne.n	800359c <UART_Start_Receive_IT+0x110>
 80035ce:	e018      	b.n	8003602 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	e853 3f00 	ldrex	r3, [r3]
 80035dc:	613b      	str	r3, [r7, #16]
   return(result);
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f043 0320 	orr.w	r3, r3, #32
 80035e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035ee:	623b      	str	r3, [r7, #32]
 80035f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f2:	69f9      	ldr	r1, [r7, #28]
 80035f4:	6a3a      	ldr	r2, [r7, #32]
 80035f6:	e841 2300 	strex	r3, r2, [r1]
 80035fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1e6      	bne.n	80035d0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	375c      	adds	r7, #92	@ 0x5c
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	0800391d 	.word	0x0800391d
 8003614:	08003761 	.word	0x08003761

08003618 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003618:	b480      	push	{r7}
 800361a:	b095      	sub	sp, #84	@ 0x54
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003628:	e853 3f00 	ldrex	r3, [r3]
 800362c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800362e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003630:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003634:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	461a      	mov	r2, r3
 800363c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800363e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003640:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003642:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003644:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003646:	e841 2300 	strex	r3, r2, [r1]
 800364a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800364c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1e6      	bne.n	8003620 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3308      	adds	r3, #8
 8003658:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	e853 3f00 	ldrex	r3, [r3]
 8003660:	61fb      	str	r3, [r7, #28]
   return(result);
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	64bb      	str	r3, [r7, #72]	@ 0x48
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3308      	adds	r3, #8
 8003670:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003672:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003674:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003676:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003678:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800367a:	e841 2300 	strex	r3, r2, [r1]
 800367e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1e5      	bne.n	8003652 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800368a:	2b01      	cmp	r3, #1
 800368c:	d118      	bne.n	80036c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	e853 3f00 	ldrex	r3, [r3]
 800369a:	60bb      	str	r3, [r7, #8]
   return(result);
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f023 0310 	bic.w	r3, r3, #16
 80036a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	461a      	mov	r2, r3
 80036aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036ac:	61bb      	str	r3, [r7, #24]
 80036ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b0:	6979      	ldr	r1, [r7, #20]
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	e841 2300 	strex	r3, r2, [r1]
 80036b8:	613b      	str	r3, [r7, #16]
   return(result);
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1e6      	bne.n	800368e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80036d4:	bf00      	nop
 80036d6:	3754      	adds	r7, #84	@ 0x54
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f7ff fa9c 	bl	8002c3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003704:	bf00      	nop
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	e853 3f00 	ldrex	r3, [r3]
 8003720:	60bb      	str	r3, [r7, #8]
   return(result);
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003728:	61fb      	str	r3, [r7, #28]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	61bb      	str	r3, [r7, #24]
 8003734:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003736:	6979      	ldr	r1, [r7, #20]
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	e841 2300 	strex	r3, r2, [r1]
 800373e:	613b      	str	r3, [r7, #16]
   return(result);
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1e6      	bne.n	8003714 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2220      	movs	r2, #32
 800374a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff fa68 	bl	8002c28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003758:	bf00      	nop
 800375a:	3720      	adds	r7, #32
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b09c      	sub	sp, #112	@ 0x70
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800376e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003778:	2b22      	cmp	r3, #34	@ 0x22
 800377a:	f040 80be 	bne.w	80038fa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003784:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003788:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800378c:	b2d9      	uxtb	r1, r3
 800378e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003792:	b2da      	uxtb	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003798:	400a      	ands	r2, r1
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f040 80a3 	bne.w	800390e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037d0:	e853 3f00 	ldrex	r3, [r3]
 80037d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80037d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037e8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037ee:	e841 2300 	strex	r3, r2, [r1]
 80037f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80037f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1e6      	bne.n	80037c8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	3308      	adds	r3, #8
 8003800:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003804:	e853 3f00 	ldrex	r3, [r3]
 8003808:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800380a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800380c:	f023 0301 	bic.w	r3, r3, #1
 8003810:	667b      	str	r3, [r7, #100]	@ 0x64
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3308      	adds	r3, #8
 8003818:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800381a:	647a      	str	r2, [r7, #68]	@ 0x44
 800381c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003820:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003822:	e841 2300 	strex	r3, r2, [r1]
 8003826:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1e5      	bne.n	80037fa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a34      	ldr	r2, [pc, #208]	@ (8003918 <UART_RxISR_8BIT+0x1b8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d01f      	beq.n	800388c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d018      	beq.n	800388c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003862:	e853 3f00 	ldrex	r3, [r3]
 8003866:	623b      	str	r3, [r7, #32]
   return(result);
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800386e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	461a      	mov	r2, r3
 8003876:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003878:	633b      	str	r3, [r7, #48]	@ 0x30
 800387a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800387e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003880:	e841 2300 	strex	r3, r2, [r1]
 8003884:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1e6      	bne.n	800385a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003890:	2b01      	cmp	r3, #1
 8003892:	d12e      	bne.n	80038f2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	e853 3f00 	ldrex	r3, [r3]
 80038a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f023 0310 	bic.w	r3, r3, #16
 80038ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038bc:	69b9      	ldr	r1, [r7, #24]
 80038be:	69fa      	ldr	r2, [r7, #28]
 80038c0:	e841 2300 	strex	r3, r2, [r1]
 80038c4:	617b      	str	r3, [r7, #20]
   return(result);
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1e6      	bne.n	800389a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	f003 0310 	and.w	r3, r3, #16
 80038d6:	2b10      	cmp	r3, #16
 80038d8:	d103      	bne.n	80038e2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2210      	movs	r2, #16
 80038e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80038e8:	4619      	mov	r1, r3
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7ff f9b0 	bl	8002c50 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80038f0:	e00d      	b.n	800390e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fc fec4 	bl	8000680 <HAL_UART_RxCpltCallback>
}
 80038f8:	e009      	b.n	800390e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	8b1b      	ldrh	r3, [r3, #24]
 8003900:	b29a      	uxth	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0208 	orr.w	r2, r2, #8
 800390a:	b292      	uxth	r2, r2
 800390c:	831a      	strh	r2, [r3, #24]
}
 800390e:	bf00      	nop
 8003910:	3770      	adds	r7, #112	@ 0x70
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40008000 	.word	0x40008000

0800391c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b09c      	sub	sp, #112	@ 0x70
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800392a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003934:	2b22      	cmp	r3, #34	@ 0x22
 8003936:	f040 80be 	bne.w	8003ab6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003940:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003948:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800394a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800394e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003952:	4013      	ands	r3, r2
 8003954:	b29a      	uxth	r2, r3
 8003956:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003958:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800395e:	1c9a      	adds	r2, r3, #2
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	f040 80a3 	bne.w	8003aca <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800398c:	e853 3f00 	ldrex	r3, [r3]
 8003990:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003992:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003994:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003998:	667b      	str	r3, [r7, #100]	@ 0x64
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80039a4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80039a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80039aa:	e841 2300 	strex	r3, r2, [r1]
 80039ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80039b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1e6      	bne.n	8003984 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3308      	adds	r3, #8
 80039bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039c0:	e853 3f00 	ldrex	r3, [r3]
 80039c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c8:	f023 0301 	bic.w	r3, r3, #1
 80039cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3308      	adds	r3, #8
 80039d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80039d6:	643a      	str	r2, [r7, #64]	@ 0x40
 80039d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039de:	e841 2300 	strex	r3, r2, [r1]
 80039e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1e5      	bne.n	80039b6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2220      	movs	r2, #32
 80039ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a34      	ldr	r2, [pc, #208]	@ (8003ad4 <UART_RxISR_16BIT+0x1b8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d01f      	beq.n	8003a48 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d018      	beq.n	8003a48 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	e853 3f00 	ldrex	r3, [r3]
 8003a22:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	461a      	mov	r2, r3
 8003a32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a36:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a3c:	e841 2300 	strex	r3, r2, [r1]
 8003a40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e6      	bne.n	8003a16 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d12e      	bne.n	8003aae <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
 8003a62:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f023 0310 	bic.w	r3, r3, #16
 8003a6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	461a      	mov	r2, r3
 8003a72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a78:	6979      	ldr	r1, [r7, #20]
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	e841 2300 	strex	r3, r2, [r1]
 8003a80:	613b      	str	r3, [r7, #16]
   return(result);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e6      	bne.n	8003a56 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f003 0310 	and.w	r3, r3, #16
 8003a92:	2b10      	cmp	r3, #16
 8003a94:	d103      	bne.n	8003a9e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2210      	movs	r2, #16
 8003a9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7ff f8d2 	bl	8002c50 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003aac:	e00d      	b.n	8003aca <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fc fde6 	bl	8000680 <HAL_UART_RxCpltCallback>
}
 8003ab4:	e009      	b.n	8003aca <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	8b1b      	ldrh	r3, [r3, #24]
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0208 	orr.w	r2, r2, #8
 8003ac6:	b292      	uxth	r2, r2
 8003ac8:	831a      	strh	r2, [r3, #24]
}
 8003aca:	bf00      	nop
 8003acc:	3770      	adds	r7, #112	@ 0x70
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40008000 	.word	0x40008000

08003ad8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <memset>:
 8003aec:	4402      	add	r2, r0
 8003aee:	4603      	mov	r3, r0
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d100      	bne.n	8003af6 <memset+0xa>
 8003af4:	4770      	bx	lr
 8003af6:	f803 1b01 	strb.w	r1, [r3], #1
 8003afa:	e7f9      	b.n	8003af0 <memset+0x4>

08003afc <__libc_init_array>:
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	4d0d      	ldr	r5, [pc, #52]	@ (8003b34 <__libc_init_array+0x38>)
 8003b00:	4c0d      	ldr	r4, [pc, #52]	@ (8003b38 <__libc_init_array+0x3c>)
 8003b02:	1b64      	subs	r4, r4, r5
 8003b04:	10a4      	asrs	r4, r4, #2
 8003b06:	2600      	movs	r6, #0
 8003b08:	42a6      	cmp	r6, r4
 8003b0a:	d109      	bne.n	8003b20 <__libc_init_array+0x24>
 8003b0c:	4d0b      	ldr	r5, [pc, #44]	@ (8003b3c <__libc_init_array+0x40>)
 8003b0e:	4c0c      	ldr	r4, [pc, #48]	@ (8003b40 <__libc_init_array+0x44>)
 8003b10:	f000 f818 	bl	8003b44 <_init>
 8003b14:	1b64      	subs	r4, r4, r5
 8003b16:	10a4      	asrs	r4, r4, #2
 8003b18:	2600      	movs	r6, #0
 8003b1a:	42a6      	cmp	r6, r4
 8003b1c:	d105      	bne.n	8003b2a <__libc_init_array+0x2e>
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}
 8003b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b24:	4798      	blx	r3
 8003b26:	3601      	adds	r6, #1
 8003b28:	e7ee      	b.n	8003b08 <__libc_init_array+0xc>
 8003b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b2e:	4798      	blx	r3
 8003b30:	3601      	adds	r6, #1
 8003b32:	e7f2      	b.n	8003b1a <__libc_init_array+0x1e>
 8003b34:	08003bb4 	.word	0x08003bb4
 8003b38:	08003bb4 	.word	0x08003bb4
 8003b3c:	08003bb4 	.word	0x08003bb4
 8003b40:	08003bb8 	.word	0x08003bb8

08003b44 <_init>:
 8003b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b46:	bf00      	nop
 8003b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4a:	bc08      	pop	{r3}
 8003b4c:	469e      	mov	lr, r3
 8003b4e:	4770      	bx	lr

08003b50 <_fini>:
 8003b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b52:	bf00      	nop
 8003b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b56:	bc08      	pop	{r3}
 8003b58:	469e      	mov	lr, r3
 8003b5a:	4770      	bx	lr
