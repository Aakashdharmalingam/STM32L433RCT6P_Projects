
dot_matrix_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002074  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000848  08002200  08002200  00003200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a48  08002a48  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002a48  08002a48  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002a48  08002a48  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a48  08002a48  00003a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a4c  08002a4c  00003a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002a50  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  08002a5c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08002a5c  000040b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006908  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000146f  00000000  00000000  0000a944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  0000bdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005b8  00000000  00000000  0000c560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000203b6  00000000  00000000  0000cb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000081aa  00000000  00000000  0002cece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3c54  00000000  00000000  00035078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f8ccc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001df8  00000000  00000000  000f8d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000fab08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080021e8 	.word	0x080021e8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080021e8 	.word	0x080021e8

080001cc <max_write>:

#define NUM_DEV 4
uint8_t bufferCol[NUM_DEV*8];

void max_write (int row, uint8_t data)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b086      	sub	sp, #24
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
 80001d4:	460b      	mov	r3, r1
 80001d6:	70fb      	strb	r3, [r7, #3]
	int devTarget = (row - 1) / 8;  // find out which is the actual max, where we need to write the data
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	3b01      	subs	r3, #1
 80001dc:	2b00      	cmp	r3, #0
 80001de:	da00      	bge.n	80001e2 <max_write+0x16>
 80001e0:	3307      	adds	r3, #7
 80001e2:	10db      	asrs	r3, r3, #3
 80001e4:	613b      	str	r3, [r7, #16]
	int offset = devTarget * 8;  // The offset of the start byte for the devTarget in the buffer
 80001e6:	693b      	ldr	r3, [r7, #16]
 80001e8:	00db      	lsls	r3, r3, #3
 80001ea:	60fb      	str	r3, [r7, #12]
	uint16_t writeData = 0;
 80001ec:	2300      	movs	r3, #0
 80001ee:	817b      	strh	r3, [r7, #10]

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);  // Select the slave
 80001f0:	2200      	movs	r2, #0
 80001f2:	2110      	movs	r1, #16
 80001f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001f8:	f000 fdd0 	bl	8000d9c <HAL_GPIO_WritePin>
	for (int dev = 0; dev < NUM_DEV; dev++)   // for loop for all the max connected
 80001fc:	2300      	movs	r3, #0
 80001fe:	617b      	str	r3, [r7, #20]
 8000200:	e025      	b.n	800024e <max_write+0x82>
	{
		if (dev == devTarget)  // if this the target
 8000202:	697a      	ldr	r2, [r7, #20]
 8000204:	693b      	ldr	r3, [r7, #16]
 8000206:	429a      	cmp	r2, r3
 8000208:	d114      	bne.n	8000234 <max_write+0x68>
		{
			writeData = ((row - offset)<<8)|data;  // send the column number and the data byte
 800020a:	687a      	ldr	r2, [r7, #4]
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	1ad3      	subs	r3, r2, r3
 8000210:	b21b      	sxth	r3, r3
 8000212:	021b      	lsls	r3, r3, #8
 8000214:	b21a      	sxth	r2, r3
 8000216:	78fb      	ldrb	r3, [r7, #3]
 8000218:	b21b      	sxth	r3, r3
 800021a:	4313      	orrs	r3, r2
 800021c:	b21b      	sxth	r3, r3
 800021e:	b29b      	uxth	r3, r3
 8000220:	817b      	strh	r3, [r7, #10]
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&writeData, 1, 1000);
 8000222:	f107 010a 	add.w	r1, r7, #10
 8000226:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800022a:	2201      	movs	r2, #1
 800022c:	480e      	ldr	r0, [pc, #56]	@ (8000268 <max_write+0x9c>)
 800022e:	f001 fcd4 	bl	8001bda <HAL_SPI_Transmit>
 8000232:	e009      	b.n	8000248 <max_write+0x7c>
		}
		else
		{
			writeData = 0;  // else send NOOP
 8000234:	2300      	movs	r3, #0
 8000236:	817b      	strh	r3, [r7, #10]
			HAL_SPI_Transmit(&hspi1, (uint8_t *)&writeData, 1, 1000);
 8000238:	f107 010a 	add.w	r1, r7, #10
 800023c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000240:	2201      	movs	r2, #1
 8000242:	4809      	ldr	r0, [pc, #36]	@ (8000268 <max_write+0x9c>)
 8000244:	f001 fcc9 	bl	8001bda <HAL_SPI_Transmit>
	for (int dev = 0; dev < NUM_DEV; dev++)   // for loop for all the max connected
 8000248:	697b      	ldr	r3, [r7, #20]
 800024a:	3301      	adds	r3, #1
 800024c:	617b      	str	r3, [r7, #20]
 800024e:	697b      	ldr	r3, [r7, #20]
 8000250:	2b03      	cmp	r3, #3
 8000252:	ddd6      	ble.n	8000202 <max_write+0x36>
		}
	}
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);  // disable the slave
 8000254:	2201      	movs	r2, #1
 8000256:	2110      	movs	r1, #16
 8000258:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800025c:	f000 fd9e 	bl	8000d9c <HAL_GPIO_WritePin>
}
 8000260:	bf00      	nop
 8000262:	3718      	adds	r7, #24
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000028 	.word	0x20000028

0800026c <flushBuffer>:

void flushBuffer (void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b08c      	sub	sp, #48	@ 0x30
 8000270:	af00      	add	r7, sp, #0
	uint8_t bufferRow[NUM_DEV*8] = {0};  // buffer to store data column wise
 8000272:	463b      	mov	r3, r7
 8000274:	2220      	movs	r2, #32
 8000276:	2100      	movs	r1, #0
 8000278:	4618      	mov	r0, r3
 800027a:	f001 ff89 	bl	8002190 <memset>

	/* Convert Cols to Rows */
	for (int i=0; i<NUM_DEV*8; i++)  // for loop for all the bytes
 800027e:	2300      	movs	r3, #0
 8000280:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000282:	e03b      	b.n	80002fc <flushBuffer+0x90>
	{
		int dev = i/8;  // 0,1,2,3..  // keep track of which max is being written
 8000284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000286:	2b00      	cmp	r3, #0
 8000288:	da00      	bge.n	800028c <flushBuffer+0x20>
 800028a:	3307      	adds	r3, #7
 800028c:	10db      	asrs	r3, r3, #3
 800028e:	623b      	str	r3, [r7, #32]
		for (int j=0; j<8; j++)  // for loop to extract bits
 8000290:	2300      	movs	r3, #0
 8000292:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000294:	e02c      	b.n	80002f0 <flushBuffer+0x84>
		{
			if ((bufferCol[i])&(1<<(j)))  // if the bit is 1 // start extracting from the 0th bit of C0
 8000296:	4a27      	ldr	r2, [pc, #156]	@ (8000334 <flushBuffer+0xc8>)
 8000298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800029a:	4413      	add	r3, r2
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	461a      	mov	r2, r3
 80002a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80002a2:	fa42 f303 	asr.w	r3, r2, r3
 80002a6:	f003 0301 	and.w	r3, r3, #1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d01d      	beq.n	80002ea <flushBuffer+0x7e>
			{
				bufferRow[j+(8*dev)] |= (1<<(7-(i-(8*dev))));  // start writing it from the 7th bit of R0
 80002ae:	6a3b      	ldr	r3, [r7, #32]
 80002b0:	00da      	lsls	r2, r3, #3
 80002b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80002b4:	4413      	add	r3, r2
 80002b6:	3330      	adds	r3, #48	@ 0x30
 80002b8:	443b      	add	r3, r7
 80002ba:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80002be:	b25a      	sxtb	r2, r3
 80002c0:	6a3b      	ldr	r3, [r7, #32]
 80002c2:	00db      	lsls	r3, r3, #3
 80002c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80002c6:	1acb      	subs	r3, r1, r3
 80002c8:	f1c3 0307 	rsb	r3, r3, #7
 80002cc:	2101      	movs	r1, #1
 80002ce:	fa01 f303 	lsl.w	r3, r1, r3
 80002d2:	b25b      	sxtb	r3, r3
 80002d4:	4313      	orrs	r3, r2
 80002d6:	b259      	sxtb	r1, r3
 80002d8:	6a3b      	ldr	r3, [r7, #32]
 80002da:	00da      	lsls	r2, r3, #3
 80002dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80002de:	4413      	add	r3, r2
 80002e0:	b2ca      	uxtb	r2, r1
 80002e2:	3330      	adds	r3, #48	@ 0x30
 80002e4:	443b      	add	r3, r7
 80002e6:	f803 2c30 	strb.w	r2, [r3, #-48]
		for (int j=0; j<8; j++)  // for loop to extract bits
 80002ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80002ec:	3301      	adds	r3, #1
 80002ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80002f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80002f2:	2b07      	cmp	r3, #7
 80002f4:	ddcf      	ble.n	8000296 <flushBuffer+0x2a>
	for (int i=0; i<NUM_DEV*8; i++)  // for loop for all the bytes
 80002f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80002f8:	3301      	adds	r3, #1
 80002fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80002fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80002fe:	2b1f      	cmp	r3, #31
 8000300:	ddc0      	ble.n	8000284 <flushBuffer+0x18>
			}
		}
	}


	for (int row=1; row<=(NUM_DEV*8); row++)  // write the column data into the columns
 8000302:	2301      	movs	r3, #1
 8000304:	627b      	str	r3, [r7, #36]	@ 0x24
 8000306:	e00c      	b.n	8000322 <flushBuffer+0xb6>
	{
		max_write(row, bufferRow[row-1]);
 8000308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800030a:	3b01      	subs	r3, #1
 800030c:	3330      	adds	r3, #48	@ 0x30
 800030e:	443b      	add	r3, r7
 8000310:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8000314:	4619      	mov	r1, r3
 8000316:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000318:	f7ff ff58 	bl	80001cc <max_write>
	for (int row=1; row<=(NUM_DEV*8); row++)  // write the column data into the columns
 800031c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800031e:	3301      	adds	r3, #1
 8000320:	627b      	str	r3, [r7, #36]	@ 0x24
 8000322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000324:	2b20      	cmp	r3, #32
 8000326:	ddef      	ble.n	8000308 <flushBuffer+0x9c>
	}
}
 8000328:	bf00      	nop
 800032a:	bf00      	nop
 800032c:	3730      	adds	r7, #48	@ 0x30
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	2000008c 	.word	0x2000008c

08000338 <max7219_cmd>:

void max7219_cmd (uint8_t Addr, uint8_t data)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
 800033e:	4603      	mov	r3, r0
 8000340:	460a      	mov	r2, r1
 8000342:	71fb      	strb	r3, [r7, #7]
 8000344:	4613      	mov	r3, r2
 8000346:	71bb      	strb	r3, [r7, #6]

	uint16_t writeData = (Addr<<8)|data;
 8000348:	79fb      	ldrb	r3, [r7, #7]
 800034a:	b21b      	sxth	r3, r3
 800034c:	021b      	lsls	r3, r3, #8
 800034e:	b21a      	sxth	r2, r3
 8000350:	79bb      	ldrb	r3, [r7, #6]
 8000352:	b21b      	sxth	r3, r3
 8000354:	4313      	orrs	r3, r2
 8000356:	b21b      	sxth	r3, r3
 8000358:	b29b      	uxth	r3, r3
 800035a:	817b      	strh	r3, [r7, #10]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 800035c:	2200      	movs	r2, #0
 800035e:	2110      	movs	r1, #16
 8000360:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000364:	f000 fd1a 	bl	8000d9c <HAL_GPIO_WritePin>
	for(int i=0 ;i<NUM_DEV ;i++)
 8000368:	2300      	movs	r3, #0
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	e009      	b.n	8000382 <max7219_cmd+0x4a>
	{
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&writeData, 1, 100);
 800036e:	f107 010a 	add.w	r1, r7, #10
 8000372:	2364      	movs	r3, #100	@ 0x64
 8000374:	2201      	movs	r2, #1
 8000376:	4809      	ldr	r0, [pc, #36]	@ (800039c <max7219_cmd+0x64>)
 8000378:	f001 fc2f 	bl	8001bda <HAL_SPI_Transmit>
	for(int i=0 ;i<NUM_DEV ;i++)
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	3301      	adds	r3, #1
 8000380:	60fb      	str	r3, [r7, #12]
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	2b03      	cmp	r3, #3
 8000386:	ddf2      	ble.n	800036e <max7219_cmd+0x36>
	}
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 8000388:	2201      	movs	r2, #1
 800038a:	2110      	movs	r1, #16
 800038c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000390:	f000 fd04 	bl	8000d9c <HAL_GPIO_WritePin>
}
 8000394:	bf00      	nop
 8000396:	3710      	adds	r7, #16
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	20000028 	.word	0x20000028

080003a0 <matrixInit>:

void matrixInit (void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	max7219_cmd(0x09, 0);  // no decoding
 80003a4:	2100      	movs	r1, #0
 80003a6:	2009      	movs	r0, #9
 80003a8:	f7ff ffc6 	bl	8000338 <max7219_cmd>
	max7219_cmd(0x0a, 0x01);  // 3/32 intensity
 80003ac:	2101      	movs	r1, #1
 80003ae:	200a      	movs	r0, #10
 80003b0:	f7ff ffc2 	bl	8000338 <max7219_cmd>
	max7219_cmd(0x0B, 0x07);  // scan all 7 columns
 80003b4:	2107      	movs	r1, #7
 80003b6:	200b      	movs	r0, #11
 80003b8:	f7ff ffbe 	bl	8000338 <max7219_cmd>
	max7219_cmd(0x0C, 0x01);  // normal operation
 80003bc:	2101      	movs	r1, #1
 80003be:	200c      	movs	r0, #12
 80003c0:	f7ff ffba 	bl	8000338 <max7219_cmd>
	max7219_cmd(0x0F, 0);     // No display test
 80003c4:	2100      	movs	r1, #0
 80003c6:	200f      	movs	r0, #15
 80003c8:	f7ff ffb6 	bl	8000338 <max7219_cmd>
}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <clearDisplay>:

void clearDisplay (void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_DEV*8-1; i++)
 80003d6:	2300      	movs	r3, #0
 80003d8:	607b      	str	r3, [r7, #4]
 80003da:	e007      	b.n	80003ec <clearDisplay+0x1c>
	{
		bufferCol[i] = 0;
 80003dc:	4a08      	ldr	r2, [pc, #32]	@ (8000400 <clearDisplay+0x30>)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4413      	add	r3, r2
 80003e2:	2200      	movs	r2, #0
 80003e4:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<NUM_DEV*8-1; i++)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	3301      	adds	r3, #1
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2b1e      	cmp	r3, #30
 80003f0:	ddf4      	ble.n	80003dc <clearDisplay+0xc>
	}
	flushBuffer();
 80003f2:	f7ff ff3b 	bl	800026c <flushBuffer>
}
 80003f6:	bf00      	nop
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	2000008c 	.word	0x2000008c

08000404 <printString>:
		shiftchar(*str, delay);
		*str++;
	}
}
void printString (uint8_t *str)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
	int strindx = 0;
 800040c:	2300      	movs	r3, #0
 800040e:	61fb      	str	r3, [r7, #28]
	for (int k = NUM_DEV*8-1; k>=0; )
 8000410:	231f      	movs	r3, #31
 8000412:	61bb      	str	r3, [r7, #24]
 8000414:	e03f      	b.n	8000496 <printString+0x92>
	{
		int indx=0;
 8000416:	2300      	movs	r3, #0
 8000418:	617b      	str	r3, [r7, #20]
		for (int i=0; i<FONT_WIDTH-1; i++)  // loop for all the bytes of the font
 800041a:	2300      	movs	r3, #0
 800041c:	613b      	str	r3, [r7, #16]
 800041e:	e034      	b.n	800048a <printString+0x86>
		{
			uint8_t data = 0;
 8000420:	2300      	movs	r3, #0
 8000422:	73fb      	strb	r3, [r7, #15]
			/* Chnage the order of the bits */
			for (int j=7; j>=0; j--)  // extract bits from a single byte
 8000424:	2307      	movs	r3, #7
 8000426:	60bb      	str	r3, [r7, #8]
 8000428:	e020      	b.n	800046c <printString+0x68>
			{
				if ((MAX7219_Dot_Matrix_font[str[strindx]][indx])&(1<<j))  // if the bit is 1 // start extracting from the 7th bit of byte
 800042a:	69fb      	ldr	r3, [r7, #28]
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	4413      	add	r3, r2
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	4a1d      	ldr	r2, [pc, #116]	@ (80004a8 <printString+0xa4>)
 8000434:	00db      	lsls	r3, r3, #3
 8000436:	441a      	add	r2, r3
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	4413      	add	r3, r2
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	461a      	mov	r2, r3
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	fa42 f303 	asr.w	r3, r2, r3
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	2b00      	cmp	r3, #0
 800044c:	d00b      	beq.n	8000466 <printString+0x62>
				{
					data |= (1<<(7-j));  // start writing it from the 0th bit of data
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	f1c3 0307 	rsb	r3, r3, #7
 8000454:	2201      	movs	r2, #1
 8000456:	fa02 f303 	lsl.w	r3, r2, r3
 800045a:	b25a      	sxtb	r2, r3
 800045c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000460:	4313      	orrs	r3, r2
 8000462:	b25b      	sxtb	r3, r3
 8000464:	73fb      	strb	r3, [r7, #15]
			for (int j=7; j>=0; j--)  // extract bits from a single byte
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	3b01      	subs	r3, #1
 800046a:	60bb      	str	r3, [r7, #8]
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	2b00      	cmp	r3, #0
 8000470:	dadb      	bge.n	800042a <printString+0x26>
				}
			}
			bufferCol[k--] = data;  // store the modified byte to the first element only. It will shift later
 8000472:	69bb      	ldr	r3, [r7, #24]
 8000474:	1e5a      	subs	r2, r3, #1
 8000476:	61ba      	str	r2, [r7, #24]
 8000478:	490c      	ldr	r1, [pc, #48]	@ (80004ac <printString+0xa8>)
 800047a:	7bfa      	ldrb	r2, [r7, #15]
 800047c:	54ca      	strb	r2, [r1, r3]
			indx++;
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	3301      	adds	r3, #1
 8000482:	617b      	str	r3, [r7, #20]
		for (int i=0; i<FONT_WIDTH-1; i++)  // loop for all the bytes of the font
 8000484:	693b      	ldr	r3, [r7, #16]
 8000486:	3301      	adds	r3, #1
 8000488:	613b      	str	r3, [r7, #16]
 800048a:	693b      	ldr	r3, [r7, #16]
 800048c:	2b06      	cmp	r3, #6
 800048e:	ddc7      	ble.n	8000420 <printString+0x1c>
		}
		strindx++;
 8000490:	69fb      	ldr	r3, [r7, #28]
 8000492:	3301      	adds	r3, #1
 8000494:	61fb      	str	r3, [r7, #28]
	for (int k = NUM_DEV*8-1; k>=0; )
 8000496:	69bb      	ldr	r3, [r7, #24]
 8000498:	2b00      	cmp	r3, #0
 800049a:	dabc      	bge.n	8000416 <printString+0x12>
	}
	flushBuffer();
 800049c:	f7ff fee6 	bl	800026c <flushBuffer>
}
 80004a0:	bf00      	nop
 80004a2:	3720      	adds	r7, #32
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	08002208 	.word	0x08002208
 80004ac:	2000008c 	.word	0x2000008c

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b4:	f000 f99d 	bl	80007f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b8:	f000 f810 	bl	80004dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004bc:	f000 f892 	bl	80005e4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004c0:	f000 f852 	bl	8000568 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  matrixInit();
 80004c4:	f7ff ff6c 	bl	80003a0 <matrixInit>

  clearDisplay();
 80004c8:	f7ff ff82 	bl	80003d0 <clearDisplay>
  printString("12:34");
 80004cc:	4802      	ldr	r0, [pc, #8]	@ (80004d8 <main+0x28>)
 80004ce:	f7ff ff99 	bl	8000404 <printString>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d2:	bf00      	nop
 80004d4:	e7fd      	b.n	80004d2 <main+0x22>
 80004d6:	bf00      	nop
 80004d8:	08002200 	.word	0x08002200

080004dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b096      	sub	sp, #88	@ 0x58
 80004e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e2:	f107 0314 	add.w	r3, r7, #20
 80004e6:	2244      	movs	r2, #68	@ 0x44
 80004e8:	2100      	movs	r1, #0
 80004ea:	4618      	mov	r0, r3
 80004ec:	f001 fe50 	bl	8002190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f0:	463b      	mov	r3, r7
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000502:	f000 fc71 	bl	8000de8 <HAL_PWREx_ControlVoltageScaling>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800050c:	f000 f89a 	bl	8000644 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000510:	2302      	movs	r3, #2
 8000512:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000514:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000518:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800051a:	2310      	movs	r3, #16
 800051c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800051e:	2300      	movs	r3, #0
 8000520:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	4618      	mov	r0, r3
 8000528:	f000 fcb4 	bl	8000e94 <HAL_RCC_OscConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000532:	f000 f887 	bl	8000644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000536:	230f      	movs	r3, #15
 8000538:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800053a:	2301      	movs	r3, #1
 800053c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800054a:	463b      	mov	r3, r7
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f001 f8b4 	bl	80016bc <HAL_RCC_ClockConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800055a:	f000 f873 	bl	8000644 <Error_Handler>
  }
}
 800055e:	bf00      	nop
 8000560:	3758      	adds	r7, #88	@ 0x58
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800056c:	4b1b      	ldr	r3, [pc, #108]	@ (80005dc <MX_SPI1_Init+0x74>)
 800056e:	4a1c      	ldr	r2, [pc, #112]	@ (80005e0 <MX_SPI1_Init+0x78>)
 8000570:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000572:	4b1a      	ldr	r3, [pc, #104]	@ (80005dc <MX_SPI1_Init+0x74>)
 8000574:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000578:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800057a:	4b18      	ldr	r3, [pc, #96]	@ (80005dc <MX_SPI1_Init+0x74>)
 800057c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000580:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000582:	4b16      	ldr	r3, [pc, #88]	@ (80005dc <MX_SPI1_Init+0x74>)
 8000584:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000588:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800058a:	4b14      	ldr	r3, [pc, #80]	@ (80005dc <MX_SPI1_Init+0x74>)
 800058c:	2202      	movs	r2, #2
 800058e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000590:	4b12      	ldr	r3, [pc, #72]	@ (80005dc <MX_SPI1_Init+0x74>)
 8000592:	2200      	movs	r2, #0
 8000594:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000596:	4b11      	ldr	r3, [pc, #68]	@ (80005dc <MX_SPI1_Init+0x74>)
 8000598:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800059c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800059e:	4b0f      	ldr	r3, [pc, #60]	@ (80005dc <MX_SPI1_Init+0x74>)
 80005a0:	2220      	movs	r2, #32
 80005a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005a4:	4b0d      	ldr	r3, [pc, #52]	@ (80005dc <MX_SPI1_Init+0x74>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005aa:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <MX_SPI1_Init+0x74>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005b0:	4b0a      	ldr	r3, [pc, #40]	@ (80005dc <MX_SPI1_Init+0x74>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <MX_SPI1_Init+0x74>)
 80005b8:	2207      	movs	r2, #7
 80005ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005bc:	4b07      	ldr	r3, [pc, #28]	@ (80005dc <MX_SPI1_Init+0x74>)
 80005be:	2200      	movs	r2, #0
 80005c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005c2:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <MX_SPI1_Init+0x74>)
 80005c4:	2208      	movs	r2, #8
 80005c6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005c8:	4804      	ldr	r0, [pc, #16]	@ (80005dc <MX_SPI1_Init+0x74>)
 80005ca:	f001 fa63 	bl	8001a94 <HAL_SPI_Init>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80005d4:	f000 f836 	bl	8000644 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000028 	.word	0x20000028
 80005e0:	40013000 	.word	0x40013000

080005e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f8:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <MX_GPIO_Init+0x5c>)
 80005fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fc:	4a10      	ldr	r2, [pc, #64]	@ (8000640 <MX_GPIO_Init+0x5c>)
 80005fe:	f043 0301 	orr.w	r3, r3, #1
 8000602:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000604:	4b0e      	ldr	r3, [pc, #56]	@ (8000640 <MX_GPIO_Init+0x5c>)
 8000606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	2110      	movs	r1, #16
 8000614:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000618:	f000 fbc0 	bl	8000d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 800061c:	2310      	movs	r3, #16
 800061e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	4619      	mov	r1, r3
 8000630:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000634:	f000 fa38 	bl	8000aa8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000638:	bf00      	nop
 800063a:	3718      	adds	r7, #24
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40021000 	.word	0x40021000

08000644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000648:	b672      	cpsid	i
}
 800064a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <Error_Handler+0x8>

08000650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000656:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <HAL_MspInit+0x44>)
 8000658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800065a:	4a0e      	ldr	r2, [pc, #56]	@ (8000694 <HAL_MspInit+0x44>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6613      	str	r3, [r2, #96]	@ 0x60
 8000662:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <HAL_MspInit+0x44>)
 8000664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <HAL_MspInit+0x44>)
 8000670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000672:	4a08      	ldr	r2, [pc, #32]	@ (8000694 <HAL_MspInit+0x44>)
 8000674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000678:	6593      	str	r3, [r2, #88]	@ 0x58
 800067a:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <HAL_MspInit+0x44>)
 800067c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800067e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000

08000698 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	@ 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a17      	ldr	r2, [pc, #92]	@ (8000714 <HAL_SPI_MspInit+0x7c>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d128      	bne.n	800070c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006ba:	4b17      	ldr	r3, [pc, #92]	@ (8000718 <HAL_SPI_MspInit+0x80>)
 80006bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006be:	4a16      	ldr	r2, [pc, #88]	@ (8000718 <HAL_SPI_MspInit+0x80>)
 80006c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80006c6:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <HAL_SPI_MspInit+0x80>)
 80006c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <HAL_SPI_MspInit+0x80>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d6:	4a10      	ldr	r2, [pc, #64]	@ (8000718 <HAL_SPI_MspInit+0x80>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <HAL_SPI_MspInit+0x80>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80006ea:	23a0      	movs	r3, #160	@ 0xa0
 80006ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ee:	2302      	movs	r3, #2
 80006f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f6:	2303      	movs	r3, #3
 80006f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006fa:	2305      	movs	r3, #5
 80006fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000708:	f000 f9ce 	bl	8000aa8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800070c:	bf00      	nop
 800070e:	3728      	adds	r7, #40	@ 0x28
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40013000 	.word	0x40013000
 8000718:	40021000 	.word	0x40021000

0800071c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <NMI_Handler+0x4>

08000724 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <HardFault_Handler+0x4>

0800072c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <MemManage_Handler+0x4>

08000734 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <BusFault_Handler+0x4>

0800073c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <UsageFault_Handler+0x4>

08000744 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000772:	f000 f893 	bl	800089c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <SystemInit+0x20>)
 8000782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000786:	4a05      	ldr	r2, [pc, #20]	@ (800079c <SystemInit+0x20>)
 8000788:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800078c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007a4:	f7ff ffea 	bl	800077c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a8:	480c      	ldr	r0, [pc, #48]	@ (80007dc <LoopForever+0x6>)
  ldr r1, =_edata
 80007aa:	490d      	ldr	r1, [pc, #52]	@ (80007e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007ac:	4a0d      	ldr	r2, [pc, #52]	@ (80007e4 <LoopForever+0xe>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b0:	e002      	b.n	80007b8 <LoopCopyDataInit>

080007b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b6:	3304      	adds	r3, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007bc:	d3f9      	bcc.n	80007b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007be:	4a0a      	ldr	r2, [pc, #40]	@ (80007e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c0:	4c0a      	ldr	r4, [pc, #40]	@ (80007ec <LoopForever+0x16>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c4:	e001      	b.n	80007ca <LoopFillZerobss>

080007c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c8:	3204      	adds	r2, #4

080007ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007cc:	d3fb      	bcc.n	80007c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ce:	f001 fce7 	bl	80021a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007d2:	f7ff fe6d 	bl	80004b0 <main>

080007d6 <LoopForever>:

LoopForever:
    b LoopForever
 80007d6:	e7fe      	b.n	80007d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007d8:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80007dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007e4:	08002a50 	.word	0x08002a50
  ldr r2, =_sbss
 80007e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007ec:	200000b0 	.word	0x200000b0

080007f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007f0:	e7fe      	b.n	80007f0 <ADC1_IRQHandler>

080007f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007f8:	2300      	movs	r3, #0
 80007fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007fc:	2003      	movs	r0, #3
 80007fe:	f000 f91f 	bl	8000a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000802:	200f      	movs	r0, #15
 8000804:	f000 f80e 	bl	8000824 <HAL_InitTick>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d002      	beq.n	8000814 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	71fb      	strb	r3, [r7, #7]
 8000812:	e001      	b.n	8000818 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000814:	f7ff ff1c 	bl	8000650 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000818:	79fb      	ldrb	r3, [r7, #7]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800082c:	2300      	movs	r3, #0
 800082e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000830:	4b17      	ldr	r3, [pc, #92]	@ (8000890 <HAL_InitTick+0x6c>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d023      	beq.n	8000880 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000838:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <HAL_InitTick+0x70>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <HAL_InitTick+0x6c>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	4619      	mov	r1, r3
 8000842:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000846:	fbb3 f3f1 	udiv	r3, r3, r1
 800084a:	fbb2 f3f3 	udiv	r3, r2, r3
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f91d 	bl	8000a8e <HAL_SYSTICK_Config>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d10f      	bne.n	800087a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b0f      	cmp	r3, #15
 800085e:	d809      	bhi.n	8000874 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000860:	2200      	movs	r2, #0
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	f04f 30ff 	mov.w	r0, #4294967295
 8000868:	f000 f8f5 	bl	8000a56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800086c:	4a0a      	ldr	r2, [pc, #40]	@ (8000898 <HAL_InitTick+0x74>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6013      	str	r3, [r2, #0]
 8000872:	e007      	b.n	8000884 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000874:	2301      	movs	r3, #1
 8000876:	73fb      	strb	r3, [r7, #15]
 8000878:	e004      	b.n	8000884 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	73fb      	strb	r3, [r7, #15]
 800087e:	e001      	b.n	8000884 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000880:	2301      	movs	r3, #1
 8000882:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000884:	7bfb      	ldrb	r3, [r7, #15]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000008 	.word	0x20000008
 8000894:	20000000 	.word	0x20000000
 8000898:	20000004 	.word	0x20000004

0800089c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <HAL_IncTick+0x20>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <HAL_IncTick+0x24>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4413      	add	r3, r2
 80008ac:	4a04      	ldr	r2, [pc, #16]	@ (80008c0 <HAL_IncTick+0x24>)
 80008ae:	6013      	str	r3, [r2, #0]
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	20000008 	.word	0x20000008
 80008c0:	200000ac 	.word	0x200000ac

080008c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  return uwTick;
 80008c8:	4b03      	ldr	r3, [pc, #12]	@ (80008d8 <HAL_GetTick+0x14>)
 80008ca:	681b      	ldr	r3, [r3, #0]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	200000ac 	.word	0x200000ac

080008dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <__NVIC_SetPriorityGrouping+0x44>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008f8:	4013      	ands	r3, r2
 80008fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000904:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800090c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800090e:	4a04      	ldr	r2, [pc, #16]	@ (8000920 <__NVIC_SetPriorityGrouping+0x44>)
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	60d3      	str	r3, [r2, #12]
}
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000928:	4b04      	ldr	r3, [pc, #16]	@ (800093c <__NVIC_GetPriorityGrouping+0x18>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	0a1b      	lsrs	r3, r3, #8
 800092e:	f003 0307 	and.w	r3, r3, #7
}
 8000932:	4618      	mov	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	6039      	str	r1, [r7, #0]
 800094a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800094c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000950:	2b00      	cmp	r3, #0
 8000952:	db0a      	blt.n	800096a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	b2da      	uxtb	r2, r3
 8000958:	490c      	ldr	r1, [pc, #48]	@ (800098c <__NVIC_SetPriority+0x4c>)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	0112      	lsls	r2, r2, #4
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	440b      	add	r3, r1
 8000964:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000968:	e00a      	b.n	8000980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4908      	ldr	r1, [pc, #32]	@ (8000990 <__NVIC_SetPriority+0x50>)
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	f003 030f 	and.w	r3, r3, #15
 8000976:	3b04      	subs	r3, #4
 8000978:	0112      	lsls	r2, r2, #4
 800097a:	b2d2      	uxtb	r2, r2
 800097c:	440b      	add	r3, r1
 800097e:	761a      	strb	r2, [r3, #24]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000e100 	.word	0xe000e100
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000994:	b480      	push	{r7}
 8000996:	b089      	sub	sp, #36	@ 0x24
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	f1c3 0307 	rsb	r3, r3, #7
 80009ae:	2b04      	cmp	r3, #4
 80009b0:	bf28      	it	cs
 80009b2:	2304      	movcs	r3, #4
 80009b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	3304      	adds	r3, #4
 80009ba:	2b06      	cmp	r3, #6
 80009bc:	d902      	bls.n	80009c4 <NVIC_EncodePriority+0x30>
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3b03      	subs	r3, #3
 80009c2:	e000      	b.n	80009c6 <NVIC_EncodePriority+0x32>
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c8:	f04f 32ff 	mov.w	r2, #4294967295
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43da      	mvns	r2, r3
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	401a      	ands	r2, r3
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009dc:	f04f 31ff 	mov.w	r1, #4294967295
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	fa01 f303 	lsl.w	r3, r1, r3
 80009e6:	43d9      	mvns	r1, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ec:	4313      	orrs	r3, r2
         );
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3724      	adds	r7, #36	@ 0x24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
	...

080009fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a0c:	d301      	bcc.n	8000a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e00f      	b.n	8000a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a12:	4a0a      	ldr	r2, [pc, #40]	@ (8000a3c <SysTick_Config+0x40>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a1a:	210f      	movs	r1, #15
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a20:	f7ff ff8e 	bl	8000940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a24:	4b05      	ldr	r3, [pc, #20]	@ (8000a3c <SysTick_Config+0x40>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2a:	4b04      	ldr	r3, [pc, #16]	@ (8000a3c <SysTick_Config+0x40>)
 8000a2c:	2207      	movs	r2, #7
 8000a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	e000e010 	.word	0xe000e010

08000a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff ff47 	bl	80008dc <__NVIC_SetPriorityGrouping>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b086      	sub	sp, #24
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
 8000a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a68:	f7ff ff5c 	bl	8000924 <__NVIC_GetPriorityGrouping>
 8000a6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	68b9      	ldr	r1, [r7, #8]
 8000a72:	6978      	ldr	r0, [r7, #20]
 8000a74:	f7ff ff8e 	bl	8000994 <NVIC_EncodePriority>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a7e:	4611      	mov	r1, r2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff ff5d 	bl	8000940 <__NVIC_SetPriority>
}
 8000a86:	bf00      	nop
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff ffb0 	bl	80009fc <SysTick_Config>
 8000a9c:	4603      	mov	r3, r0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b087      	sub	sp, #28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab6:	e154      	b.n	8000d62 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	2101      	movs	r1, #1
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	f000 8146 	beq.w	8000d5c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f003 0303 	and.w	r3, r3, #3
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d005      	beq.n	8000ae8 <HAL_GPIO_Init+0x40>
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f003 0303 	and.w	r3, r3, #3
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d130      	bne.n	8000b4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	2203      	movs	r2, #3
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	43db      	mvns	r3, r3
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4013      	ands	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	68da      	ldr	r2, [r3, #12]
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b1e:	2201      	movs	r2, #1
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	091b      	lsrs	r3, r3, #4
 8000b34:	f003 0201 	and.w	r2, r3, #1
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f003 0303 	and.w	r3, r3, #3
 8000b52:	2b03      	cmp	r3, #3
 8000b54:	d017      	beq.n	8000b86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	68db      	ldr	r3, [r3, #12]
 8000b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	2203      	movs	r2, #3
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43db      	mvns	r3, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	689a      	ldr	r2, [r3, #8]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f003 0303 	and.w	r3, r3, #3
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d123      	bne.n	8000bda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	08da      	lsrs	r2, r3, #3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3208      	adds	r2, #8
 8000b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	220f      	movs	r2, #15
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	691a      	ldr	r2, [r3, #16]
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	f003 0307 	and.w	r3, r3, #7
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	08da      	lsrs	r2, r3, #3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3208      	adds	r2, #8
 8000bd4:	6939      	ldr	r1, [r7, #16]
 8000bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	2203      	movs	r2, #3
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f003 0203 	and.w	r2, r3, #3
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f000 80a0 	beq.w	8000d5c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1c:	4b58      	ldr	r3, [pc, #352]	@ (8000d80 <HAL_GPIO_Init+0x2d8>)
 8000c1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c20:	4a57      	ldr	r2, [pc, #348]	@ (8000d80 <HAL_GPIO_Init+0x2d8>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c28:	4b55      	ldr	r3, [pc, #340]	@ (8000d80 <HAL_GPIO_Init+0x2d8>)
 8000c2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c34:	4a53      	ldr	r2, [pc, #332]	@ (8000d84 <HAL_GPIO_Init+0x2dc>)
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	089b      	lsrs	r3, r3, #2
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	f003 0303 	and.w	r3, r3, #3
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	220f      	movs	r2, #15
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c5e:	d019      	beq.n	8000c94 <HAL_GPIO_Init+0x1ec>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a49      	ldr	r2, [pc, #292]	@ (8000d88 <HAL_GPIO_Init+0x2e0>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d013      	beq.n	8000c90 <HAL_GPIO_Init+0x1e8>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a48      	ldr	r2, [pc, #288]	@ (8000d8c <HAL_GPIO_Init+0x2e4>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d00d      	beq.n	8000c8c <HAL_GPIO_Init+0x1e4>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a47      	ldr	r2, [pc, #284]	@ (8000d90 <HAL_GPIO_Init+0x2e8>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d007      	beq.n	8000c88 <HAL_GPIO_Init+0x1e0>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a46      	ldr	r2, [pc, #280]	@ (8000d94 <HAL_GPIO_Init+0x2ec>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d101      	bne.n	8000c84 <HAL_GPIO_Init+0x1dc>
 8000c80:	2304      	movs	r3, #4
 8000c82:	e008      	b.n	8000c96 <HAL_GPIO_Init+0x1ee>
 8000c84:	2307      	movs	r3, #7
 8000c86:	e006      	b.n	8000c96 <HAL_GPIO_Init+0x1ee>
 8000c88:	2303      	movs	r3, #3
 8000c8a:	e004      	b.n	8000c96 <HAL_GPIO_Init+0x1ee>
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	e002      	b.n	8000c96 <HAL_GPIO_Init+0x1ee>
 8000c90:	2301      	movs	r3, #1
 8000c92:	e000      	b.n	8000c96 <HAL_GPIO_Init+0x1ee>
 8000c94:	2300      	movs	r3, #0
 8000c96:	697a      	ldr	r2, [r7, #20]
 8000c98:	f002 0203 	and.w	r2, r2, #3
 8000c9c:	0092      	lsls	r2, r2, #2
 8000c9e:	4093      	lsls	r3, r2
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ca6:	4937      	ldr	r1, [pc, #220]	@ (8000d84 <HAL_GPIO_Init+0x2dc>)
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	089b      	lsrs	r3, r3, #2
 8000cac:	3302      	adds	r3, #2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cb4:	4b38      	ldr	r3, [pc, #224]	@ (8000d98 <HAL_GPIO_Init+0x2f0>)
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d003      	beq.n	8000cd8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000cd8:	4a2f      	ldr	r2, [pc, #188]	@ (8000d98 <HAL_GPIO_Init+0x2f0>)
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000cde:	4b2e      	ldr	r3, [pc, #184]	@ (8000d98 <HAL_GPIO_Init+0x2f0>)
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d003      	beq.n	8000d02 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d02:	4a25      	ldr	r2, [pc, #148]	@ (8000d98 <HAL_GPIO_Init+0x2f0>)
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d08:	4b23      	ldr	r3, [pc, #140]	@ (8000d98 <HAL_GPIO_Init+0x2f0>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	43db      	mvns	r3, r3
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d003      	beq.n	8000d2c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d2c:	4a1a      	ldr	r2, [pc, #104]	@ (8000d98 <HAL_GPIO_Init+0x2f0>)
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000d32:	4b19      	ldr	r3, [pc, #100]	@ (8000d98 <HAL_GPIO_Init+0x2f0>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d003      	beq.n	8000d56 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d56:	4a10      	ldr	r2, [pc, #64]	@ (8000d98 <HAL_GPIO_Init+0x2f0>)
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	fa22 f303 	lsr.w	r3, r2, r3
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	f47f aea3 	bne.w	8000ab8 <HAL_GPIO_Init+0x10>
  }
}
 8000d72:	bf00      	nop
 8000d74:	bf00      	nop
 8000d76:	371c      	adds	r7, #28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40010000 	.word	0x40010000
 8000d88:	48000400 	.word	0x48000400
 8000d8c:	48000800 	.word	0x48000800
 8000d90:	48000c00 	.word	0x48000c00
 8000d94:	48001000 	.word	0x48001000
 8000d98:	40010400 	.word	0x40010400

08000d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	460b      	mov	r3, r1
 8000da6:	807b      	strh	r3, [r7, #2]
 8000da8:	4613      	mov	r3, r2
 8000daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dac:	787b      	ldrb	r3, [r7, #1]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d003      	beq.n	8000dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000db2:	887a      	ldrh	r2, [r7, #2]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000db8:	e002      	b.n	8000dc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dba:	887a      	ldrh	r2, [r7, #2]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000dd0:	4b04      	ldr	r3, [pc, #16]	@ (8000de4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40007000 	.word	0x40007000

08000de8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000df6:	d130      	bne.n	8000e5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000df8:	4b23      	ldr	r3, [pc, #140]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e04:	d038      	beq.n	8000e78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e06:	4b20      	ldr	r3, [pc, #128]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e0e:	4a1e      	ldr	r2, [pc, #120]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e16:	4b1d      	ldr	r3, [pc, #116]	@ (8000e8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2232      	movs	r2, #50	@ 0x32
 8000e1c:	fb02 f303 	mul.w	r3, r2, r3
 8000e20:	4a1b      	ldr	r2, [pc, #108]	@ (8000e90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e22:	fba2 2303 	umull	r2, r3, r2, r3
 8000e26:	0c9b      	lsrs	r3, r3, #18
 8000e28:	3301      	adds	r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e2c:	e002      	b.n	8000e34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	3b01      	subs	r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e34:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e40:	d102      	bne.n	8000e48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1f2      	bne.n	8000e2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e48:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e4a:	695b      	ldr	r3, [r3, #20]
 8000e4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e54:	d110      	bne.n	8000e78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e56:	2303      	movs	r3, #3
 8000e58:	e00f      	b.n	8000e7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e66:	d007      	beq.n	8000e78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e68:	4b07      	ldr	r3, [pc, #28]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e70:	4a05      	ldr	r2, [pc, #20]	@ (8000e88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40007000 	.word	0x40007000
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	431bde83 	.word	0x431bde83

08000e94 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d102      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	f000 bc02 	b.w	80016ac <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ea8:	4b96      	ldr	r3, [pc, #600]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	f003 030c 	and.w	r3, r3, #12
 8000eb0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000eb2:	4b94      	ldr	r3, [pc, #592]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
 8000eba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0310 	and.w	r3, r3, #16
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f000 80e4 	beq.w	8001092 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d007      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x4c>
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	2b0c      	cmp	r3, #12
 8000ed4:	f040 808b 	bne.w	8000fee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	f040 8087 	bne.w	8000fee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ee0:	4b88      	ldr	r3, [pc, #544]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d005      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x64>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e3d9      	b.n	80016ac <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6a1a      	ldr	r2, [r3, #32]
 8000efc:	4b81      	ldr	r3, [pc, #516]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 0308 	and.w	r3, r3, #8
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d004      	beq.n	8000f12 <HAL_RCC_OscConfig+0x7e>
 8000f08:	4b7e      	ldr	r3, [pc, #504]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f10:	e005      	b.n	8000f1e <HAL_RCC_OscConfig+0x8a>
 8000f12:	4b7c      	ldr	r3, [pc, #496]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 8000f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f18:	091b      	lsrs	r3, r3, #4
 8000f1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d223      	bcs.n	8000f6a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a1b      	ldr	r3, [r3, #32]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fd54 	bl	80019d4 <RCC_SetFlashLatencyFromMSIRange>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e3ba      	b.n	80016ac <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f36:	4b73      	ldr	r3, [pc, #460]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a72      	ldr	r2, [pc, #456]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 8000f3c:	f043 0308 	orr.w	r3, r3, #8
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	4b70      	ldr	r3, [pc, #448]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a1b      	ldr	r3, [r3, #32]
 8000f4e:	496d      	ldr	r1, [pc, #436]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 8000f50:	4313      	orrs	r3, r2
 8000f52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f54:	4b6b      	ldr	r3, [pc, #428]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	69db      	ldr	r3, [r3, #28]
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	4968      	ldr	r1, [pc, #416]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 8000f64:	4313      	orrs	r3, r2
 8000f66:	604b      	str	r3, [r1, #4]
 8000f68:	e025      	b.n	8000fb6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f6a:	4b66      	ldr	r3, [pc, #408]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a65      	ldr	r2, [pc, #404]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 8000f70:	f043 0308 	orr.w	r3, r3, #8
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	4b63      	ldr	r3, [pc, #396]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a1b      	ldr	r3, [r3, #32]
 8000f82:	4960      	ldr	r1, [pc, #384]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 8000f84:	4313      	orrs	r3, r2
 8000f86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f88:	4b5e      	ldr	r3, [pc, #376]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69db      	ldr	r3, [r3, #28]
 8000f94:	021b      	lsls	r3, r3, #8
 8000f96:	495b      	ldr	r1, [pc, #364]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d109      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a1b      	ldr	r3, [r3, #32]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 fd14 	bl	80019d4 <RCC_SetFlashLatencyFromMSIRange>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e37a      	b.n	80016ac <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000fb6:	f000 fc81 	bl	80018bc <HAL_RCC_GetSysClockFreq>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	4b51      	ldr	r3, [pc, #324]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	091b      	lsrs	r3, r3, #4
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	4950      	ldr	r1, [pc, #320]	@ (8001108 <HAL_RCC_OscConfig+0x274>)
 8000fc8:	5ccb      	ldrb	r3, [r1, r3]
 8000fca:	f003 031f 	and.w	r3, r3, #31
 8000fce:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd2:	4a4e      	ldr	r2, [pc, #312]	@ (800110c <HAL_RCC_OscConfig+0x278>)
 8000fd4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000fd6:	4b4e      	ldr	r3, [pc, #312]	@ (8001110 <HAL_RCC_OscConfig+0x27c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fc22 	bl	8000824 <HAL_InitTick>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d052      	beq.n	8001090 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	e35e      	b.n	80016ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d032      	beq.n	800105c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ff6:	4b43      	ldr	r3, [pc, #268]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a42      	ldr	r2, [pc, #264]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001002:	f7ff fc5f 	bl	80008c4 <HAL_GetTick>
 8001006:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001008:	e008      	b.n	800101c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800100a:	f7ff fc5b 	bl	80008c4 <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d901      	bls.n	800101c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001018:	2303      	movs	r3, #3
 800101a:	e347      	b.n	80016ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800101c:	4b39      	ldr	r3, [pc, #228]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0302 	and.w	r3, r3, #2
 8001024:	2b00      	cmp	r3, #0
 8001026:	d0f0      	beq.n	800100a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001028:	4b36      	ldr	r3, [pc, #216]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a35      	ldr	r2, [pc, #212]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 800102e:	f043 0308 	orr.w	r3, r3, #8
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	4b33      	ldr	r3, [pc, #204]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	4930      	ldr	r1, [pc, #192]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 8001042:	4313      	orrs	r3, r2
 8001044:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001046:	4b2f      	ldr	r3, [pc, #188]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	492b      	ldr	r1, [pc, #172]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 8001056:	4313      	orrs	r3, r2
 8001058:	604b      	str	r3, [r1, #4]
 800105a:	e01a      	b.n	8001092 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800105c:	4b29      	ldr	r3, [pc, #164]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a28      	ldr	r2, [pc, #160]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 8001062:	f023 0301 	bic.w	r3, r3, #1
 8001066:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001068:	f7ff fc2c 	bl	80008c4 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001070:	f7ff fc28 	bl	80008c4 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e314      	b.n	80016ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001082:	4b20      	ldr	r3, [pc, #128]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f0      	bne.n	8001070 <HAL_RCC_OscConfig+0x1dc>
 800108e:	e000      	b.n	8001092 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001090:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	d073      	beq.n	8001186 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	2b08      	cmp	r3, #8
 80010a2:	d005      	beq.n	80010b0 <HAL_RCC_OscConfig+0x21c>
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	2b0c      	cmp	r3, #12
 80010a8:	d10e      	bne.n	80010c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	d10b      	bne.n	80010c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b0:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d063      	beq.n	8001184 <HAL_RCC_OscConfig+0x2f0>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d15f      	bne.n	8001184 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e2f1      	b.n	80016ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010d0:	d106      	bne.n	80010e0 <HAL_RCC_OscConfig+0x24c>
 80010d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 80010d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	e025      	b.n	800112c <HAL_RCC_OscConfig+0x298>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010e8:	d114      	bne.n	8001114 <HAL_RCC_OscConfig+0x280>
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a05      	ldr	r2, [pc, #20]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 80010f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	4b03      	ldr	r3, [pc, #12]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a02      	ldr	r2, [pc, #8]	@ (8001104 <HAL_RCC_OscConfig+0x270>)
 80010fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	e013      	b.n	800112c <HAL_RCC_OscConfig+0x298>
 8001104:	40021000 	.word	0x40021000
 8001108:	08002a08 	.word	0x08002a08
 800110c:	20000000 	.word	0x20000000
 8001110:	20000004 	.word	0x20000004
 8001114:	4ba0      	ldr	r3, [pc, #640]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a9f      	ldr	r2, [pc, #636]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 800111a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	4b9d      	ldr	r3, [pc, #628]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a9c      	ldr	r2, [pc, #624]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 8001126:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800112a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d013      	beq.n	800115c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001134:	f7ff fbc6 	bl	80008c4 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800113c:	f7ff fbc2 	bl	80008c4 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b64      	cmp	r3, #100	@ 0x64
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e2ae      	b.n	80016ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800114e:	4b92      	ldr	r3, [pc, #584]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0f0      	beq.n	800113c <HAL_RCC_OscConfig+0x2a8>
 800115a:	e014      	b.n	8001186 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800115c:	f7ff fbb2 	bl	80008c4 <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001164:	f7ff fbae 	bl	80008c4 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b64      	cmp	r3, #100	@ 0x64
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e29a      	b.n	80016ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001176:	4b88      	ldr	r3, [pc, #544]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f0      	bne.n	8001164 <HAL_RCC_OscConfig+0x2d0>
 8001182:	e000      	b.n	8001186 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d060      	beq.n	8001254 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	2b04      	cmp	r3, #4
 8001196:	d005      	beq.n	80011a4 <HAL_RCC_OscConfig+0x310>
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	2b0c      	cmp	r3, #12
 800119c:	d119      	bne.n	80011d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d116      	bne.n	80011d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011a4:	4b7c      	ldr	r3, [pc, #496]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d005      	beq.n	80011bc <HAL_RCC_OscConfig+0x328>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d101      	bne.n	80011bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e277      	b.n	80016ac <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011bc:	4b76      	ldr	r3, [pc, #472]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	061b      	lsls	r3, r3, #24
 80011ca:	4973      	ldr	r1, [pc, #460]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 80011cc:	4313      	orrs	r3, r2
 80011ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011d0:	e040      	b.n	8001254 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d023      	beq.n	8001222 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011da:	4b6f      	ldr	r3, [pc, #444]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a6e      	ldr	r2, [pc, #440]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 80011e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e6:	f7ff fb6d 	bl	80008c4 <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ee:	f7ff fb69 	bl	80008c4 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e255      	b.n	80016ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001200:	4b65      	ldr	r3, [pc, #404]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f0      	beq.n	80011ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120c:	4b62      	ldr	r3, [pc, #392]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	061b      	lsls	r3, r3, #24
 800121a:	495f      	ldr	r1, [pc, #380]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 800121c:	4313      	orrs	r3, r2
 800121e:	604b      	str	r3, [r1, #4]
 8001220:	e018      	b.n	8001254 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001222:	4b5d      	ldr	r3, [pc, #372]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a5c      	ldr	r2, [pc, #368]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 8001228:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800122c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122e:	f7ff fb49 	bl	80008c4 <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001234:	e008      	b.n	8001248 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001236:	f7ff fb45 	bl	80008c4 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e231      	b.n	80016ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001248:	4b53      	ldr	r3, [pc, #332]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1f0      	bne.n	8001236 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	2b00      	cmp	r3, #0
 800125e:	d03c      	beq.n	80012da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d01c      	beq.n	80012a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001268:	4b4b      	ldr	r3, [pc, #300]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 800126a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800126e:	4a4a      	ldr	r2, [pc, #296]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001278:	f7ff fb24 	bl	80008c4 <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001280:	f7ff fb20 	bl	80008c4 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e20c      	b.n	80016ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001292:	4b41      	ldr	r3, [pc, #260]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 8001294:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0ef      	beq.n	8001280 <HAL_RCC_OscConfig+0x3ec>
 80012a0:	e01b      	b.n	80012da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 80012a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012a8:	4a3b      	ldr	r2, [pc, #236]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 80012aa:	f023 0301 	bic.w	r3, r3, #1
 80012ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b2:	f7ff fb07 	bl	80008c4 <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ba:	f7ff fb03 	bl	80008c4 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e1ef      	b.n	80016ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012cc:	4b32      	ldr	r3, [pc, #200]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 80012ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1ef      	bne.n	80012ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 80a6 	beq.w	8001434 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012e8:	2300      	movs	r3, #0
 80012ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 80012ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d10d      	bne.n	8001314 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f8:	4b27      	ldr	r3, [pc, #156]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 80012fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012fc:	4a26      	ldr	r2, [pc, #152]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 80012fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001302:	6593      	str	r3, [r2, #88]	@ 0x58
 8001304:	4b24      	ldr	r3, [pc, #144]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 8001306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001310:	2301      	movs	r3, #1
 8001312:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001314:	4b21      	ldr	r3, [pc, #132]	@ (800139c <HAL_RCC_OscConfig+0x508>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800131c:	2b00      	cmp	r3, #0
 800131e:	d118      	bne.n	8001352 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001320:	4b1e      	ldr	r3, [pc, #120]	@ (800139c <HAL_RCC_OscConfig+0x508>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a1d      	ldr	r2, [pc, #116]	@ (800139c <HAL_RCC_OscConfig+0x508>)
 8001326:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800132a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800132c:	f7ff faca 	bl	80008c4 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001334:	f7ff fac6 	bl	80008c4 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e1b2      	b.n	80016ac <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001346:	4b15      	ldr	r3, [pc, #84]	@ (800139c <HAL_RCC_OscConfig+0x508>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d108      	bne.n	800136c <HAL_RCC_OscConfig+0x4d8>
 800135a:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 800135c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001360:	4a0d      	ldr	r2, [pc, #52]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800136a:	e029      	b.n	80013c0 <HAL_RCC_OscConfig+0x52c>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	2b05      	cmp	r3, #5
 8001372:	d115      	bne.n	80013a0 <HAL_RCC_OscConfig+0x50c>
 8001374:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 8001376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800137a:	4a07      	ldr	r2, [pc, #28]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 800137c:	f043 0304 	orr.w	r3, r3, #4
 8001380:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001384:	4b04      	ldr	r3, [pc, #16]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 8001386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800138a:	4a03      	ldr	r2, [pc, #12]	@ (8001398 <HAL_RCC_OscConfig+0x504>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001394:	e014      	b.n	80013c0 <HAL_RCC_OscConfig+0x52c>
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000
 800139c:	40007000 	.word	0x40007000
 80013a0:	4b9a      	ldr	r3, [pc, #616]	@ (800160c <HAL_RCC_OscConfig+0x778>)
 80013a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013a6:	4a99      	ldr	r2, [pc, #612]	@ (800160c <HAL_RCC_OscConfig+0x778>)
 80013a8:	f023 0301 	bic.w	r3, r3, #1
 80013ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80013b0:	4b96      	ldr	r3, [pc, #600]	@ (800160c <HAL_RCC_OscConfig+0x778>)
 80013b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013b6:	4a95      	ldr	r2, [pc, #596]	@ (800160c <HAL_RCC_OscConfig+0x778>)
 80013b8:	f023 0304 	bic.w	r3, r3, #4
 80013bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d016      	beq.n	80013f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c8:	f7ff fa7c 	bl	80008c4 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013ce:	e00a      	b.n	80013e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013d0:	f7ff fa78 	bl	80008c4 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013de:	4293      	cmp	r3, r2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e162      	b.n	80016ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013e6:	4b89      	ldr	r3, [pc, #548]	@ (800160c <HAL_RCC_OscConfig+0x778>)
 80013e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0ed      	beq.n	80013d0 <HAL_RCC_OscConfig+0x53c>
 80013f4:	e015      	b.n	8001422 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f6:	f7ff fa65 	bl	80008c4 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013fc:	e00a      	b.n	8001414 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013fe:	f7ff fa61 	bl	80008c4 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800140c:	4293      	cmp	r3, r2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e14b      	b.n	80016ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001414:	4b7d      	ldr	r3, [pc, #500]	@ (800160c <HAL_RCC_OscConfig+0x778>)
 8001416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1ed      	bne.n	80013fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001422:	7ffb      	ldrb	r3, [r7, #31]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d105      	bne.n	8001434 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001428:	4b78      	ldr	r3, [pc, #480]	@ (800160c <HAL_RCC_OscConfig+0x778>)
 800142a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800142c:	4a77      	ldr	r2, [pc, #476]	@ (800160c <HAL_RCC_OscConfig+0x778>)
 800142e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001432:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0320 	and.w	r3, r3, #32
 800143c:	2b00      	cmp	r3, #0
 800143e:	d03c      	beq.n	80014ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001444:	2b00      	cmp	r3, #0
 8001446:	d01c      	beq.n	8001482 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001448:	4b70      	ldr	r3, [pc, #448]	@ (800160c <HAL_RCC_OscConfig+0x778>)
 800144a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800144e:	4a6f      	ldr	r2, [pc, #444]	@ (800160c <HAL_RCC_OscConfig+0x778>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001458:	f7ff fa34 	bl	80008c4 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001460:	f7ff fa30 	bl	80008c4 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e11c      	b.n	80016ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001472:	4b66      	ldr	r3, [pc, #408]	@ (800160c <HAL_RCC_OscConfig+0x778>)
 8001474:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0ef      	beq.n	8001460 <HAL_RCC_OscConfig+0x5cc>
 8001480:	e01b      	b.n	80014ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001482:	4b62      	ldr	r3, [pc, #392]	@ (800160c <HAL_RCC_OscConfig+0x778>)
 8001484:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001488:	4a60      	ldr	r2, [pc, #384]	@ (800160c <HAL_RCC_OscConfig+0x778>)
 800148a:	f023 0301 	bic.w	r3, r3, #1
 800148e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001492:	f7ff fa17 	bl	80008c4 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800149a:	f7ff fa13 	bl	80008c4 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e0ff      	b.n	80016ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014ac:	4b57      	ldr	r3, [pc, #348]	@ (800160c <HAL_RCC_OscConfig+0x778>)
 80014ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1ef      	bne.n	800149a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 80f3 	beq.w	80016aa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	f040 80c9 	bne.w	8001660 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014ce:	4b4f      	ldr	r3, [pc, #316]	@ (800160c <HAL_RCC_OscConfig+0x778>)
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	f003 0203 	and.w	r2, r3, #3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014de:	429a      	cmp	r2, r3
 80014e0:	d12c      	bne.n	800153c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ec:	3b01      	subs	r3, #1
 80014ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d123      	bne.n	800153c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001500:	429a      	cmp	r2, r3
 8001502:	d11b      	bne.n	800153c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800150e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001510:	429a      	cmp	r2, r3
 8001512:	d113      	bne.n	800153c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800151e:	085b      	lsrs	r3, r3, #1
 8001520:	3b01      	subs	r3, #1
 8001522:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001524:	429a      	cmp	r2, r3
 8001526:	d109      	bne.n	800153c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	085b      	lsrs	r3, r3, #1
 8001534:	3b01      	subs	r3, #1
 8001536:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001538:	429a      	cmp	r2, r3
 800153a:	d06b      	beq.n	8001614 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	2b0c      	cmp	r3, #12
 8001540:	d062      	beq.n	8001608 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001542:	4b32      	ldr	r3, [pc, #200]	@ (800160c <HAL_RCC_OscConfig+0x778>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e0ac      	b.n	80016ac <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001552:	4b2e      	ldr	r3, [pc, #184]	@ (800160c <HAL_RCC_OscConfig+0x778>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a2d      	ldr	r2, [pc, #180]	@ (800160c <HAL_RCC_OscConfig+0x778>)
 8001558:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800155c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800155e:	f7ff f9b1 	bl	80008c4 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001566:	f7ff f9ad 	bl	80008c4 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e099      	b.n	80016ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001578:	4b24      	ldr	r3, [pc, #144]	@ (800160c <HAL_RCC_OscConfig+0x778>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1f0      	bne.n	8001566 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001584:	4b21      	ldr	r3, [pc, #132]	@ (800160c <HAL_RCC_OscConfig+0x778>)
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	4b21      	ldr	r3, [pc, #132]	@ (8001610 <HAL_RCC_OscConfig+0x77c>)
 800158a:	4013      	ands	r3, r2
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001594:	3a01      	subs	r2, #1
 8001596:	0112      	lsls	r2, r2, #4
 8001598:	4311      	orrs	r1, r2
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800159e:	0212      	lsls	r2, r2, #8
 80015a0:	4311      	orrs	r1, r2
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80015a6:	0852      	lsrs	r2, r2, #1
 80015a8:	3a01      	subs	r2, #1
 80015aa:	0552      	lsls	r2, r2, #21
 80015ac:	4311      	orrs	r1, r2
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80015b2:	0852      	lsrs	r2, r2, #1
 80015b4:	3a01      	subs	r2, #1
 80015b6:	0652      	lsls	r2, r2, #25
 80015b8:	4311      	orrs	r1, r2
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80015be:	06d2      	lsls	r2, r2, #27
 80015c0:	430a      	orrs	r2, r1
 80015c2:	4912      	ldr	r1, [pc, #72]	@ (800160c <HAL_RCC_OscConfig+0x778>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80015c8:	4b10      	ldr	r3, [pc, #64]	@ (800160c <HAL_RCC_OscConfig+0x778>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0f      	ldr	r2, [pc, #60]	@ (800160c <HAL_RCC_OscConfig+0x778>)
 80015ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015d4:	4b0d      	ldr	r3, [pc, #52]	@ (800160c <HAL_RCC_OscConfig+0x778>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	4a0c      	ldr	r2, [pc, #48]	@ (800160c <HAL_RCC_OscConfig+0x778>)
 80015da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015e0:	f7ff f970 	bl	80008c4 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e8:	f7ff f96c 	bl	80008c4 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e058      	b.n	80016ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015fa:	4b04      	ldr	r3, [pc, #16]	@ (800160c <HAL_RCC_OscConfig+0x778>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001606:	e050      	b.n	80016aa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e04f      	b.n	80016ac <HAL_RCC_OscConfig+0x818>
 800160c:	40021000 	.word	0x40021000
 8001610:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001614:	4b27      	ldr	r3, [pc, #156]	@ (80016b4 <HAL_RCC_OscConfig+0x820>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d144      	bne.n	80016aa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001620:	4b24      	ldr	r3, [pc, #144]	@ (80016b4 <HAL_RCC_OscConfig+0x820>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a23      	ldr	r2, [pc, #140]	@ (80016b4 <HAL_RCC_OscConfig+0x820>)
 8001626:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800162a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800162c:	4b21      	ldr	r3, [pc, #132]	@ (80016b4 <HAL_RCC_OscConfig+0x820>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	4a20      	ldr	r2, [pc, #128]	@ (80016b4 <HAL_RCC_OscConfig+0x820>)
 8001632:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001636:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001638:	f7ff f944 	bl	80008c4 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001640:	f7ff f940 	bl	80008c4 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e02c      	b.n	80016ac <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001652:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <HAL_RCC_OscConfig+0x820>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0x7ac>
 800165e:	e024      	b.n	80016aa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2b0c      	cmp	r3, #12
 8001664:	d01f      	beq.n	80016a6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001666:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <HAL_RCC_OscConfig+0x820>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a12      	ldr	r2, [pc, #72]	@ (80016b4 <HAL_RCC_OscConfig+0x820>)
 800166c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001672:	f7ff f927 	bl	80008c4 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167a:	f7ff f923 	bl	80008c4 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e00f      	b.n	80016ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800168c:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <HAL_RCC_OscConfig+0x820>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f0      	bne.n	800167a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001698:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <HAL_RCC_OscConfig+0x820>)
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	4905      	ldr	r1, [pc, #20]	@ (80016b4 <HAL_RCC_OscConfig+0x820>)
 800169e:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <HAL_RCC_OscConfig+0x824>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	60cb      	str	r3, [r1, #12]
 80016a4:	e001      	b.n	80016aa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3720      	adds	r7, #32
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40021000 	.word	0x40021000
 80016b8:	feeefffc 	.word	0xfeeefffc

080016bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e0e7      	b.n	80018a0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d0:	4b75      	ldr	r3, [pc, #468]	@ (80018a8 <HAL_RCC_ClockConfig+0x1ec>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d910      	bls.n	8001700 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016de:	4b72      	ldr	r3, [pc, #456]	@ (80018a8 <HAL_RCC_ClockConfig+0x1ec>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 0207 	bic.w	r2, r3, #7
 80016e6:	4970      	ldr	r1, [pc, #448]	@ (80018a8 <HAL_RCC_ClockConfig+0x1ec>)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ee:	4b6e      	ldr	r3, [pc, #440]	@ (80018a8 <HAL_RCC_ClockConfig+0x1ec>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0cf      	b.n	80018a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d010      	beq.n	800172e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	4b66      	ldr	r3, [pc, #408]	@ (80018ac <HAL_RCC_ClockConfig+0x1f0>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001718:	429a      	cmp	r2, r3
 800171a:	d908      	bls.n	800172e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800171c:	4b63      	ldr	r3, [pc, #396]	@ (80018ac <HAL_RCC_ClockConfig+0x1f0>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	4960      	ldr	r1, [pc, #384]	@ (80018ac <HAL_RCC_ClockConfig+0x1f0>)
 800172a:	4313      	orrs	r3, r2
 800172c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d04c      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b03      	cmp	r3, #3
 8001740:	d107      	bne.n	8001752 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001742:	4b5a      	ldr	r3, [pc, #360]	@ (80018ac <HAL_RCC_ClockConfig+0x1f0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d121      	bne.n	8001792 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e0a6      	b.n	80018a0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d107      	bne.n	800176a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800175a:	4b54      	ldr	r3, [pc, #336]	@ (80018ac <HAL_RCC_ClockConfig+0x1f0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d115      	bne.n	8001792 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e09a      	b.n	80018a0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d107      	bne.n	8001782 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001772:	4b4e      	ldr	r3, [pc, #312]	@ (80018ac <HAL_RCC_ClockConfig+0x1f0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d109      	bne.n	8001792 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e08e      	b.n	80018a0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001782:	4b4a      	ldr	r3, [pc, #296]	@ (80018ac <HAL_RCC_ClockConfig+0x1f0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e086      	b.n	80018a0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001792:	4b46      	ldr	r3, [pc, #280]	@ (80018ac <HAL_RCC_ClockConfig+0x1f0>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f023 0203 	bic.w	r2, r3, #3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	4943      	ldr	r1, [pc, #268]	@ (80018ac <HAL_RCC_ClockConfig+0x1f0>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017a4:	f7ff f88e 	bl	80008c4 <HAL_GetTick>
 80017a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017aa:	e00a      	b.n	80017c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ac:	f7ff f88a 	bl	80008c4 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e06e      	b.n	80018a0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c2:	4b3a      	ldr	r3, [pc, #232]	@ (80018ac <HAL_RCC_ClockConfig+0x1f0>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 020c 	and.w	r2, r3, #12
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d1eb      	bne.n	80017ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d010      	beq.n	8001802 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	4b31      	ldr	r3, [pc, #196]	@ (80018ac <HAL_RCC_ClockConfig+0x1f0>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d208      	bcs.n	8001802 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f0:	4b2e      	ldr	r3, [pc, #184]	@ (80018ac <HAL_RCC_ClockConfig+0x1f0>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	492b      	ldr	r1, [pc, #172]	@ (80018ac <HAL_RCC_ClockConfig+0x1f0>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001802:	4b29      	ldr	r3, [pc, #164]	@ (80018a8 <HAL_RCC_ClockConfig+0x1ec>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d210      	bcs.n	8001832 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001810:	4b25      	ldr	r3, [pc, #148]	@ (80018a8 <HAL_RCC_ClockConfig+0x1ec>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f023 0207 	bic.w	r2, r3, #7
 8001818:	4923      	ldr	r1, [pc, #140]	@ (80018a8 <HAL_RCC_ClockConfig+0x1ec>)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	4313      	orrs	r3, r2
 800181e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001820:	4b21      	ldr	r3, [pc, #132]	@ (80018a8 <HAL_RCC_ClockConfig+0x1ec>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d001      	beq.n	8001832 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e036      	b.n	80018a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	2b00      	cmp	r3, #0
 800183c:	d008      	beq.n	8001850 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800183e:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <HAL_RCC_ClockConfig+0x1f0>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	4918      	ldr	r1, [pc, #96]	@ (80018ac <HAL_RCC_ClockConfig+0x1f0>)
 800184c:	4313      	orrs	r3, r2
 800184e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	2b00      	cmp	r3, #0
 800185a:	d009      	beq.n	8001870 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800185c:	4b13      	ldr	r3, [pc, #76]	@ (80018ac <HAL_RCC_ClockConfig+0x1f0>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	4910      	ldr	r1, [pc, #64]	@ (80018ac <HAL_RCC_ClockConfig+0x1f0>)
 800186c:	4313      	orrs	r3, r2
 800186e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001870:	f000 f824 	bl	80018bc <HAL_RCC_GetSysClockFreq>
 8001874:	4602      	mov	r2, r0
 8001876:	4b0d      	ldr	r3, [pc, #52]	@ (80018ac <HAL_RCC_ClockConfig+0x1f0>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	f003 030f 	and.w	r3, r3, #15
 8001880:	490b      	ldr	r1, [pc, #44]	@ (80018b0 <HAL_RCC_ClockConfig+0x1f4>)
 8001882:	5ccb      	ldrb	r3, [r1, r3]
 8001884:	f003 031f 	and.w	r3, r3, #31
 8001888:	fa22 f303 	lsr.w	r3, r2, r3
 800188c:	4a09      	ldr	r2, [pc, #36]	@ (80018b4 <HAL_RCC_ClockConfig+0x1f8>)
 800188e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001890:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <HAL_RCC_ClockConfig+0x1fc>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe ffc5 	bl	8000824 <HAL_InitTick>
 800189a:	4603      	mov	r3, r0
 800189c:	72fb      	strb	r3, [r7, #11]

  return status;
 800189e:	7afb      	ldrb	r3, [r7, #11]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40022000 	.word	0x40022000
 80018ac:	40021000 	.word	0x40021000
 80018b0:	08002a08 	.word	0x08002a08
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000004 	.word	0x20000004

080018bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	b089      	sub	sp, #36	@ 0x24
 80018c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	2300      	movs	r3, #0
 80018c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ca:	4b3e      	ldr	r3, [pc, #248]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018d4:	4b3b      	ldr	r3, [pc, #236]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0x34>
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	2b0c      	cmp	r3, #12
 80018e8:	d121      	bne.n	800192e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d11e      	bne.n	800192e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80018f0:	4b34      	ldr	r3, [pc, #208]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d107      	bne.n	800190c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80018fc:	4b31      	ldr	r3, [pc, #196]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80018fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001902:	0a1b      	lsrs	r3, r3, #8
 8001904:	f003 030f 	and.w	r3, r3, #15
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	e005      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800190c:	4b2d      	ldr	r3, [pc, #180]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001918:	4a2b      	ldr	r2, [pc, #172]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001920:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10d      	bne.n	8001944 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800192c:	e00a      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	2b04      	cmp	r3, #4
 8001932:	d102      	bne.n	800193a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001934:	4b25      	ldr	r3, [pc, #148]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x110>)
 8001936:	61bb      	str	r3, [r7, #24]
 8001938:	e004      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	2b08      	cmp	r3, #8
 800193e:	d101      	bne.n	8001944 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001940:	4b23      	ldr	r3, [pc, #140]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001942:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	2b0c      	cmp	r3, #12
 8001948:	d134      	bne.n	80019b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800194a:	4b1e      	ldr	r3, [pc, #120]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d003      	beq.n	8001962 <HAL_RCC_GetSysClockFreq+0xa6>
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2b03      	cmp	r3, #3
 800195e:	d003      	beq.n	8001968 <HAL_RCC_GetSysClockFreq+0xac>
 8001960:	e005      	b.n	800196e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001962:	4b1a      	ldr	r3, [pc, #104]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x110>)
 8001964:	617b      	str	r3, [r7, #20]
      break;
 8001966:	e005      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001968:	4b19      	ldr	r3, [pc, #100]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800196a:	617b      	str	r3, [r7, #20]
      break;
 800196c:	e002      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	617b      	str	r3, [r7, #20]
      break;
 8001972:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001974:	4b13      	ldr	r3, [pc, #76]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	3301      	adds	r3, #1
 8001980:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001982:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	0a1b      	lsrs	r3, r3, #8
 8001988:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	fb03 f202 	mul.w	r2, r3, r2
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	fbb2 f3f3 	udiv	r3, r2, r3
 8001998:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800199a:	4b0a      	ldr	r3, [pc, #40]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	0e5b      	lsrs	r3, r3, #25
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	3301      	adds	r3, #1
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80019b4:	69bb      	ldr	r3, [r7, #24]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3724      	adds	r7, #36	@ 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000
 80019c8:	08002a18 	.word	0x08002a18
 80019cc:	00f42400 	.word	0x00f42400
 80019d0:	007a1200 	.word	0x007a1200

080019d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019dc:	2300      	movs	r3, #0
 80019de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80019e0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80019ec:	f7ff f9ee 	bl	8000dcc <HAL_PWREx_GetVoltageRange>
 80019f0:	6178      	str	r0, [r7, #20]
 80019f2:	e014      	b.n	8001a1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019f4:	4b25      	ldr	r3, [pc, #148]	@ (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f8:	4a24      	ldr	r2, [pc, #144]	@ (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a00:	4b22      	ldr	r3, [pc, #136]	@ (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a0c:	f7ff f9de 	bl	8000dcc <HAL_PWREx_GetVoltageRange>
 8001a10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a12:	4b1e      	ldr	r3, [pc, #120]	@ (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a16:	4a1d      	ldr	r2, [pc, #116]	@ (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a1c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a24:	d10b      	bne.n	8001a3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b80      	cmp	r3, #128	@ 0x80
 8001a2a:	d919      	bls.n	8001a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001a30:	d902      	bls.n	8001a38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a32:	2302      	movs	r3, #2
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	e013      	b.n	8001a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a38:	2301      	movs	r3, #1
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	e010      	b.n	8001a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b80      	cmp	r3, #128	@ 0x80
 8001a42:	d902      	bls.n	8001a4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a44:	2303      	movs	r3, #3
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	e00a      	b.n	8001a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b80      	cmp	r3, #128	@ 0x80
 8001a4e:	d102      	bne.n	8001a56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a50:	2302      	movs	r3, #2
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	e004      	b.n	8001a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b70      	cmp	r3, #112	@ 0x70
 8001a5a:	d101      	bne.n	8001a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a60:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f023 0207 	bic.w	r2, r3, #7
 8001a68:	4909      	ldr	r1, [pc, #36]	@ (8001a90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a70:	4b07      	ldr	r3, [pc, #28]	@ (8001a90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d001      	beq.n	8001a82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40022000 	.word	0x40022000

08001a94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e095      	b.n	8001bd2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d108      	bne.n	8001ac0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001ab6:	d009      	beq.n	8001acc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
 8001abe:	e005      	b.n	8001acc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d106      	bne.n	8001aec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7fe fdd6 	bl	8000698 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001b0c:	d902      	bls.n	8001b14 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	e002      	b.n	8001b1a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001b14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b18:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001b22:	d007      	beq.n	8001b34 <HAL_SPI_Init+0xa0>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001b2c:	d002      	beq.n	8001b34 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b76:	ea42 0103 	orr.w	r1, r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b7e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	0c1b      	lsrs	r3, r3, #16
 8001b90:	f003 0204 	and.w	r2, r3, #4
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b98:	f003 0310 	and.w	r3, r3, #16
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001bb0:	ea42 0103 	orr.w	r1, r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b088      	sub	sp, #32
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	60f8      	str	r0, [r7, #12]
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	603b      	str	r3, [r7, #0]
 8001be6:	4613      	mov	r3, r2
 8001be8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bea:	f7fe fe6b 	bl	80008c4 <HAL_GetTick>
 8001bee:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d001      	beq.n	8001c04 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001c00:	2302      	movs	r3, #2
 8001c02:	e15c      	b.n	8001ebe <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <HAL_SPI_Transmit+0x36>
 8001c0a:	88fb      	ldrh	r3, [r7, #6]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e154      	b.n	8001ebe <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d101      	bne.n	8001c22 <HAL_SPI_Transmit+0x48>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e14d      	b.n	8001ebe <HAL_SPI_Transmit+0x2e4>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	88fa      	ldrh	r2, [r7, #6]
 8001c42:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	88fa      	ldrh	r2, [r7, #6]
 8001c48:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c74:	d10f      	bne.n	8001c96 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ca0:	2b40      	cmp	r3, #64	@ 0x40
 8001ca2:	d007      	beq.n	8001cb4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001cb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001cbc:	d952      	bls.n	8001d64 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <HAL_SPI_Transmit+0xf2>
 8001cc6:	8b7b      	ldrh	r3, [r7, #26]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d145      	bne.n	8001d58 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cd0:	881a      	ldrh	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cdc:	1c9a      	adds	r2, r3, #2
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001cf0:	e032      	b.n	8001d58 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d112      	bne.n	8001d26 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d04:	881a      	ldrh	r2, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d10:	1c9a      	adds	r2, r3, #2
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001d24:	e018      	b.n	8001d58 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d26:	f7fe fdcd 	bl	80008c4 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d803      	bhi.n	8001d3e <HAL_SPI_Transmit+0x164>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d3c:	d102      	bne.n	8001d44 <HAL_SPI_Transmit+0x16a>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d109      	bne.n	8001d58 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e0b2      	b.n	8001ebe <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1c7      	bne.n	8001cf2 <HAL_SPI_Transmit+0x118>
 8001d62:	e083      	b.n	8001e6c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <HAL_SPI_Transmit+0x198>
 8001d6c:	8b7b      	ldrh	r3, [r7, #26]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d177      	bne.n	8001e62 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d912      	bls.n	8001da2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d80:	881a      	ldrh	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d8c:	1c9a      	adds	r2, r3, #2
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	3b02      	subs	r3, #2
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001da0:	e05f      	b.n	8001e62 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	330c      	adds	r3, #12
 8001dac:	7812      	ldrb	r2, [r2, #0]
 8001dae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001dc8:	e04b      	b.n	8001e62 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d12b      	bne.n	8001e30 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d912      	bls.n	8001e08 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001de6:	881a      	ldrh	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001df2:	1c9a      	adds	r2, r3, #2
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	3b02      	subs	r3, #2
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001e06:	e02c      	b.n	8001e62 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	330c      	adds	r3, #12
 8001e12:	7812      	ldrb	r2, [r2, #0]
 8001e14:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	3b01      	subs	r3, #1
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001e2e:	e018      	b.n	8001e62 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e30:	f7fe fd48 	bl	80008c4 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d803      	bhi.n	8001e48 <HAL_SPI_Transmit+0x26e>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e46:	d102      	bne.n	8001e4e <HAL_SPI_Transmit+0x274>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d109      	bne.n	8001e62 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e02d      	b.n	8001ebe <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1ae      	bne.n	8001dca <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e6c:	69fa      	ldr	r2, [r7, #28]
 8001e6e:	6839      	ldr	r1, [r7, #0]
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 f947 	bl	8002104 <SPI_EndRxTxTransaction>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10a      	bne.n	8001ea0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
  }
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3720      	adds	r7, #32
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ed8:	f7fe fcf4 	bl	80008c4 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001ee8:	f7fe fcec 	bl	80008c4 <HAL_GetTick>
 8001eec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001eee:	4b39      	ldr	r3, [pc, #228]	@ (8001fd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	015b      	lsls	r3, r3, #5
 8001ef4:	0d1b      	lsrs	r3, r3, #20
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	fb02 f303 	mul.w	r3, r2, r3
 8001efc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001efe:	e054      	b.n	8001faa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f06:	d050      	beq.n	8001faa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f08:	f7fe fcdc 	bl	80008c4 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	69fa      	ldr	r2, [r7, #28]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d902      	bls.n	8001f1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d13d      	bne.n	8001f9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001f2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f36:	d111      	bne.n	8001f5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f40:	d004      	beq.n	8001f4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f4a:	d107      	bne.n	8001f5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f64:	d10f      	bne.n	8001f86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e017      	b.n	8001fca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	bf0c      	ite	eq
 8001fba:	2301      	moveq	r3, #1
 8001fbc:	2300      	movne	r3, #0
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d19b      	bne.n	8001f00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3720      	adds	r7, #32
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000000 	.word	0x20000000

08001fd8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	@ 0x28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001fea:	f7fe fc6b 	bl	80008c4 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ff2:	1a9b      	subs	r3, r3, r2
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8001ffa:	f7fe fc63 	bl	80008c4 <HAL_GetTick>
 8001ffe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	330c      	adds	r3, #12
 8002006:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002008:	4b3d      	ldr	r3, [pc, #244]	@ (8002100 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	00da      	lsls	r2, r3, #3
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	0d1b      	lsrs	r3, r3, #20
 8002018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800201a:	fb02 f303 	mul.w	r3, r2, r3
 800201e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002020:	e060      	b.n	80020e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002028:	d107      	bne.n	800203a <SPI_WaitFifoStateUntilTimeout+0x62>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d104      	bne.n	800203a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002038:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002040:	d050      	beq.n	80020e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002042:	f7fe fc3f 	bl	80008c4 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800204e:	429a      	cmp	r2, r3
 8002050:	d902      	bls.n	8002058 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002054:	2b00      	cmp	r3, #0
 8002056:	d13d      	bne.n	80020d4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002066:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002070:	d111      	bne.n	8002096 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800207a:	d004      	beq.n	8002086 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002084:	d107      	bne.n	8002096 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002094:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800209e:	d10f      	bne.n	80020c0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80020be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e010      	b.n	80020f6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	3b01      	subs	r3, #1
 80020e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	4013      	ands	r3, r2
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d196      	bne.n	8002022 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3728      	adds	r7, #40	@ 0x28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000000 	.word	0x20000000

08002104 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af02      	add	r7, sp, #8
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2200      	movs	r2, #0
 8002118:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f7ff ff5b 	bl	8001fd8 <SPI_WaitFifoStateUntilTimeout>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d007      	beq.n	8002138 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800212c:	f043 0220 	orr.w	r2, r3, #32
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e027      	b.n	8002188 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2200      	movs	r2, #0
 8002140:	2180      	movs	r1, #128	@ 0x80
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f7ff fec0 	bl	8001ec8 <SPI_WaitFlagStateUntilTimeout>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d007      	beq.n	800215e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002152:	f043 0220 	orr.w	r2, r3, #32
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e014      	b.n	8002188 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2200      	movs	r2, #0
 8002166:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f7ff ff34 	bl	8001fd8 <SPI_WaitFifoStateUntilTimeout>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d007      	beq.n	8002186 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800217a:	f043 0220 	orr.w	r2, r3, #32
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e000      	b.n	8002188 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <memset>:
 8002190:	4402      	add	r2, r0
 8002192:	4603      	mov	r3, r0
 8002194:	4293      	cmp	r3, r2
 8002196:	d100      	bne.n	800219a <memset+0xa>
 8002198:	4770      	bx	lr
 800219a:	f803 1b01 	strb.w	r1, [r3], #1
 800219e:	e7f9      	b.n	8002194 <memset+0x4>

080021a0 <__libc_init_array>:
 80021a0:	b570      	push	{r4, r5, r6, lr}
 80021a2:	4d0d      	ldr	r5, [pc, #52]	@ (80021d8 <__libc_init_array+0x38>)
 80021a4:	4c0d      	ldr	r4, [pc, #52]	@ (80021dc <__libc_init_array+0x3c>)
 80021a6:	1b64      	subs	r4, r4, r5
 80021a8:	10a4      	asrs	r4, r4, #2
 80021aa:	2600      	movs	r6, #0
 80021ac:	42a6      	cmp	r6, r4
 80021ae:	d109      	bne.n	80021c4 <__libc_init_array+0x24>
 80021b0:	4d0b      	ldr	r5, [pc, #44]	@ (80021e0 <__libc_init_array+0x40>)
 80021b2:	4c0c      	ldr	r4, [pc, #48]	@ (80021e4 <__libc_init_array+0x44>)
 80021b4:	f000 f818 	bl	80021e8 <_init>
 80021b8:	1b64      	subs	r4, r4, r5
 80021ba:	10a4      	asrs	r4, r4, #2
 80021bc:	2600      	movs	r6, #0
 80021be:	42a6      	cmp	r6, r4
 80021c0:	d105      	bne.n	80021ce <__libc_init_array+0x2e>
 80021c2:	bd70      	pop	{r4, r5, r6, pc}
 80021c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80021c8:	4798      	blx	r3
 80021ca:	3601      	adds	r6, #1
 80021cc:	e7ee      	b.n	80021ac <__libc_init_array+0xc>
 80021ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80021d2:	4798      	blx	r3
 80021d4:	3601      	adds	r6, #1
 80021d6:	e7f2      	b.n	80021be <__libc_init_array+0x1e>
 80021d8:	08002a48 	.word	0x08002a48
 80021dc:	08002a48 	.word	0x08002a48
 80021e0:	08002a48 	.word	0x08002a48
 80021e4:	08002a4c 	.word	0x08002a4c

080021e8 <_init>:
 80021e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ea:	bf00      	nop
 80021ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ee:	bc08      	pop	{r3}
 80021f0:	469e      	mov	lr, r3
 80021f2:	4770      	bx	lr

080021f4 <_fini>:
 80021f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f6:	bf00      	nop
 80021f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021fa:	bc08      	pop	{r3}
 80021fc:	469e      	mov	lr, r3
 80021fe:	4770      	bx	lr
